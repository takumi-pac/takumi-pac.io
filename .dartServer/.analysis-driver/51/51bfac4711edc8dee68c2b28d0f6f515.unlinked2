Ä„detachtoString_containerLayerestimatedBoundsrepaintCompositedChild_repaintCompositedChildupdateLayerProperties%debugInstrumentRepaintCompositedChild
paintChild_compositeChildappendLayer_isRecording_currentLayer	_recorder_canvascanvas_startRecordingaddCompositionCallbackstopRecordingIfNeededsetIsComplexHintsetWillChangeHintaddLayer	pushLayercreateChildContextpushClipRectpushClipRRectpushClipPathpushColorFilterpushTransformpushOpacityisTightisNormalizeddebugAssertIsValid_ownerlistenerdisposeonNeedVisualUpdateonSemanticsOwnerCreatedonSemanticsOwnerDisposedrequestVisualUpdaterootNode	_rootNode_shouldMergeDirtyNodes_nodesNeedingLayoutdebugDoingLayout_debugDoingLayoutflushLayout#_debugAllowMutationsToDirtySubtrees_enableMutationsToDirtySubtrees"_nodesNeedingCompositingBitsUpdateflushCompositingBits_nodesNeedingPaintdebugDoingPaint_debugDoingPaint
flushPaintsemanticsOwner_semanticsOwner debugOutstandingSemanticsHandles_outstandingSemanticsHandlesensureSemantics_didDisposeSemanticsHandle_debugDoingSemantics_nodesNeedingSemanticsflushSemantics
reassembledebugDisposed_debugDisposed
parentDatasetupParentData
adoptChild	dropChildvisitChildrendebugCreator_debugReportExceptiondebugDoingThisResize_debugDoingThisResizedebugDoingThisLayout_debugDoingThisLayoutdebugActiveLayout_debugActiveLayoutdebugCanParentUseSize_debugCanParentUseSize_debugMutationsLocked_debugCanPerformMutationsownerattachdebugNeedsLayout_needsLayout_relayoutBoundary debugDoingThisLayoutWithCallback_doingThisLayoutWithCallbackconstraints_constraintsdebugAssertDoesMeetConstraintsdebugCheckingIntrinsics1_debugSubtreeRelayoutRootAlreadyMarkedNeedsLayoutmarkNeedsLayoutmarkParentNeedsLayout%markNeedsLayoutForSizedByParentChange_cleanRelayoutBoundary_propagateRelayoutBoundary_cleanChildRelayoutBoundary!_propagateRelayoutBoundaryToChildscheduleInitialLayout_layoutWithoutResizelayoutdebugResetSizesizedByParentperformResizeperformLayoutinvokeLayoutCallbackdebugDoingThisPaint_debugDoingThisPaintdebugActivePaint_debugActivePaintisRepaintBoundary!debugRegisterRepaintBoundaryPaintalwaysNeedsCompositing_wasRepaintBoundaryupdateCompositedLayerlayer_layerHandle
debugLayer_needsCompositingBitsUpdatemarkNeedsCompositingBitsUpdate_needsCompositingneedsCompositing_updateCompositingBitsdebugNeedsPaint_needsPaintdebugNeedsCompositedLayerUpdate_needsCompositedLayerUpdatemarkNeedsPaintmarkNeedsCompositedLayerUpdate_skippedPaintingOnLayerscheduleInitialPaintreplaceRootLayer_paintWithContextpaintBounds
debugPaintpaintapplyPaintTransformpaintsChildgetTransformTodescribeApproximatePaintClipdescribeSemanticsClipscheduleInitialSemanticsdescribeSemanticsConfigurationsendSemanticsEvent_cachedSemanticsConfiguration_semanticsConfigurationsemanticBounds_needsSemanticsUpdate
_semanticsdebugSemanticsclearSemanticsmarkNeedsSemanticsUpdate_updateSemantics_getSemanticsForParentvisitChildrenForSemanticsassembleSemanticsNodehandleEventtoStringShorttoStringDeeptoStringShallowdebugFillPropertiesdebugDescribeChildrenshowOnScreendescribeForErrordebugValidateChild_childchildredepthChildrenpreviousSiblingnextSibling_debugUltimatePreviousSiblingOf_debugUltimateNextSiblingOf_childCount
childCount_firstChild
_lastChild_insertIntoChildListinsertaddaddAll_removeFromChildListremove	removeAllmove
firstChild	lastChildchildBefore
childAftersystemFontsDidChange dropsSemanticsOfPreviousSiblingsinterestingFragments_ancestorChaincompileChildrenconfigmarkAsExplicithasConfigForParent_tagsForChildrenaddTagsaddAncestor	_children_mergeIntoParent_config_isConfigWritable_ensureConfigIsWritable_isExplicit_needsGeometryUpdate_paintClipRect_semanticsClipRect
_transform_rect	transformsemanticsClipRectpaintClipRectrect_computeValues_temporaryTransformHolder_transformRect!_applyIntermediatePaintTransforms_intersectRectsdropFromTreemarkAsHidden_markAsHidden
ParentDataPaintingContextCallbackPaintingContextConstraintsRenderObjectVisitorLayoutCallbackSemanticsHandlePipelineOwnerRenderObjectRenderObjectWithChildMixinContainerParentDataMixinContainerRenderObjectMixin"RelayoutWhenSystemFontsChangeMixin_SemanticsFragment_ContainerSemanticsFragment_InterestingSemanticsFragment_RootSemanticsFragment_SwitchableSemanticsFragment_SemanticsGeometryDiagnosticsDebugCreatorÅ¢PictureRecorderFlutterErrorInformationCollectorDiagnosticsNodeErrorSummaryErrorDescription	ErrorHintDiagnosticsPropertyStringPropertyDoublePropertyEnumPropertyFlagPropertyIntPropertyDiagnosticPropertiesBuilderHitTestEntryHitTestResultsetupParentData	protectedmustCallSupervoidoverrideStringcanvasOffsetCanvasrepaintCompositedChildClipContextContainerLayerRectisRepaintBoundarybool_needsPaintdebugAlsoPaintedParent!debugRegisterRepaintBoundaryPaintincludedParentincludedChildOffsetLayer_layerHandlelayerupdateCompositedLayeroldLayerattachedoffsetremoveAllChildren	identical_needsCompositedLayerUpdatedebugCreatorruntimeTypechildContextpaintBounds_paintWithContextzerostopRecordingIfNeeded_wasRepaintBoundarycustomContextdebugOnProfilePaintcallgetSaveCountLayerremoveappendPictureLayerCompositionCallbackaddCompositionCallbackVoidCallbackdebugRepaintRainbowEnabledPaintstylePaintingStylestrokestrokeWidthcolordebugCurrentRepaintColortoColordrawRectdeflatedebugPaintLayerBordersEnabledColorpictureendRecordingisComplexHintwillChangeHintalwaysNeedsCompositinghasChildrenchildPaintBoundsneedsCompositingClipRectLayerCliphardEdgeclipBehaviornoneshiftclipRectclipRectAndPaintClipRRectLayerRRect	antiAlias	clipRRectclipRRectAndPaintPathClipPathLayerclipPathclipPathAndPaintColorFilterColorFilterLayercolorFilterMatrix4TransformLayertranslationValuesdxdymultiply	translate	transformMatrixUtilsinverseTransformRectsavestoragerestoreOpacityLayerintalphaobjectRuntimeTypehashCodeBoxConstraintsdebugAssertIsValid==toStringdebugDumpRenderTree	immutabledoublenanRenderConstrainedBoxadditionalConstraintslayoutvisitChildrenvisitChildrenForSemanticsinvokeLayoutCallbackTensureSemanticsownersemanticsOwneraddListenerremoveListener_didDisposeSemanticsHandleRendererBindingAbstractNodedetachattachListkReleaseModeMap#debugEnhanceLayoutTimelineArgumentslengthTimeline	startSync	arguments
isNotEmptysortadepthbiaddAllgetRange_needsLayout_layoutWithoutResize
finishSyncnode_needsCompositingBitsUpdate_updateCompositingBitsclear"debugEnhancePaintTimelineArgumentsupdateLayerProperties_skippedPaintingOnLayerisEmptySemanticsOwnerdisposelistener_SetscheduleInitialSemanticstoList_needsSemanticsUpdate_updateSemanticssendSemanticsUpdateparent	RenderBoxRenderObjectElementPictureImageSizesize
RenderViewhitTestmarkNeedsLayoutDiagnosticableTreeMixinHitTestTargetdebugPaintSizeEnabledBindingBasereassembleApplicationchild
reassemble
parentData
adoptChild_cleanRelayoutBoundary	dropChildDebugCreatorwidgetsObject
StackTracereportErrorFlutterErrorDetails	exceptionstacklibrarycontextinformationCollector
kDebugModeDiagnosticsTreeStyletruncateChildren	fromPartserrorPropertydebugDoingLayout#_debugAllowMutationsToDirtySubtrees_doingThisLayoutWithCallback_debugMutationsLockeddebugActiveLayoutdebugDoingThisLayoutisSemanticBoundary
StateError_relayoutBoundary_debugDoingThisLayoutdebugPrintMarkNeedsLayoutStacksdebugPrintStacklabel_nodesNeedingLayoutaddrequestVisualUpdate_propagateRelayoutBoundary_debugDoingLayoutpragmadebugPrintLayouts
debugPrintedebugProfileLayoutsEnabledtoDiagnosticsNodetoTimelineArgumentsisAppliedConstraintcurrentsplitPatternRegExpmatchAsPrefixMatch
groupCountgrouptrimparentUsesSizeisTightcomputeDryLayout	GlobalKey_enableMutationsToDirtySubtreesRepaintBoundaryLayerHandleflushCompositingBitsmarkNeedsCompositingBitsUpdate"_nodesNeedingCompositingBitsUpdateflushLayout_nodesNeedingPaintdebugDoingPaintdebugPrintMarkNeedsPaintStacksmarkNeedsPaintRenderOpacity_debugDoingPaintdebugProfilePaintsEnableddescribeForError
paintChildRenderOffstagerootNoderendereridentityindexapplyPaintTransformpushClipRectSemanticsNodeRenderViewportBasecacheExtent_debugDoingSemantics_semanticsOwner_nodesNeedingSemanticsSemanticsConfigurationSemanticsEvent	sendEventisMergedIntoParentsendSemanticsEventclearSemantics_semanticsConfiguration
_semanticsmergeIntoParentisPartOfNodeMergingcompileChildrenparentSemanticsClipRectparentPaintClipRectelevationAdjustmentresultsingleconfig+isBlockingSemanticsOfPreviouslyPaintedNodeshasBeenAnnotatedisMergingSemanticsOfDescendantsrenderChild_getSemanticsForParent dropsSemanticsOfPreviousSiblingsinterestingFragmentsfragmentaddAncestoraddTagstagsForChildrenexplicitChildNodesmarkAsExplicithasConfigForParentisCompatibleWithIterable
updateWithchildrenInInversePaintOrderPointerEventdescribeIdentityDiagnosticLevelinfodebugtoStringDeepprefixLineOneprefixOtherLinesminLeveltoStringShallowjoinerdebugFillPropertiesvalueifTruedefaultValueleveltooltipmissingIfNullshowInViewportSingleChildScrollViewDurationCurveCurveseaseshowOnScreen
descendantrectdurationcurveshallownameSingleChildRenderObjectWidget	ChildTypeErrorSpacer_childredepthChildnextSiblingpreviousSibling
firstChild	lastChildParentDataTypeRenderBoxContainerDefaultsMixinContainerBoxParentDataMultiChildRenderObjectWidget!SlottedContainerRenderObjectMixinequals_childCountafter_firstChild
_lastChild_debugUltimatePreviousSiblingOf_debugUltimateNextSiblingOf_insertIntoChildListinsertforEach_removeFromChildListsystemFontsDidChangeTextPainter	ParagraphPaintingBindinginstancesystemFontsfirstSemanticsTagchildren_tagsForChildren_ancestorChainrootmatrixEqualssemanticBoundsisInvisiblelastskip	elevation	ancestorsdropFromTreetagssemanticsClipRectpaintClipRectmarkAsHiddenisHiddenassembleSemanticsNodeabsorbcopydescribeSemanticsClipdescribeApproximatePaintClipsetIdentity	intersectisZero
isIdentitySemanticsFlaghidden	ClipContextAbstractNodeDiagnosticableTreeMixinHitTestTargetRenderObject
ParentData_SemanticsFragment_InterestingSemanticsFragmentDiagnosticsProperty"?[êæ|Ÿ<¥Ø,  package:flutter/foundation.dart  package:flutter/gestures.dart  package:flutter/painting.dart 
 dart:developer  dart:ui  package:flutter/animation.dart  package:flutter/foundation.dart  package:flutter/gestures.dart  package:flutter/painting.dart  package:flutter/semantics.dart  
debug.dart  
layer.dart  	dart:core¿äz ¿∞3ëh <ÄÜÄ§Ä•ÄæÄÎÄÏÅÅ?ÅgÅèÅ∏ÅπÅŒÅ„Å‰ÇÌÉ6É^É_ÉßÉ´ÉıÑ=ÑqÑuÑÉÑáÑ“ÖÖ*ÖgÖtÖÖÖôÖöÖ¶Ö«Ö…Ö ÖˇÜÜTÜ†Ü§Ü⁄á3á4áJáNá†áÂà/àCàGàòàËâ8âÇâúâ†âÁä%äQäRätäzä¬äŸäÊã$ãKãrãsãõãúãÈå0å6åqåwå√å·å‚ç	ççZçßç¯ééé*é0éÄé°èè$èAèNèÑèãèèèêè∑è—è˙êê$êIêYêêêøêÔëëë(ë2ëzëòëæëÓëÔí<íáí“í˘ìFì{ìàì≈ì„ìıî"î7îCîiî√îıïIï¨ïˆïˇñ4ñ:ñiñjñßñ‹ñÏó6óIóSóTóôó—ó“ò!òUòíòºò¿ò¡ôôô`ô≠ô˚ö6ö<öLöRö¢ö√ö˝õ?õ_õçõéõ€õ˜úú1úDúNú¶ú÷ù(ùâù—ùÿûû:û>û?ûåû‹üüü&ü,üyüìü»ü‚††7†>†N†m†|†¥†Ÿ†‚†ı†ˇ°°°(°.°|°À¢¢R¢b¢ä¢ù¢ß¢®¢À¢Í££\£££œ§§-§Z§g§î§ö§û§ü§€§ˆ••X•Y•õ•÷¶¶&¶U¶{¶É¶ï¶ŒßßOßdßpßvß´ß˛®$®G®K®L®ò®ß®≠®ˆ©<©i©o©º©œ©‹©˛™™-™P™T™U™o™õ™´™¬™È´´-´<´c´Ü´ß´Ø´¬´Ã´‚´Ê´Á´¸¨¨<¨O¨P¨t¨z¨ƒ≠≠-≠9≠O≠j≠É≠â≠¨≠¡≠≈≠∆≠·≠¸Æ/ÆUÆwÆ£ÆßÆ®Æ˘ØØØ\Ø™ØÙ∞4∞:∞v∞|∞å∞∑∞˝±:±>±?±z±Ä±Ã≤≤j≤w≤}≤Ã≥≥)≥6≥G≥h≥Å≥è≥ï≥•≥Õ≥Ò¥¥8¥p¥Æ¥∂¥·µµ.µLµyµ™µ≤µ≈µœ∂∂!∂7∂K∂O∂P∂†∂¥∂∫∑	∑R∑a∑}∑¶∑™∑´∑˛∏∏T∏ù∏Íππ9πcπgπhπùπ£πÙ∫/∫5∫Ç∫‘ª$ªjªpªÄªÜª‘ª·º ºº5º9º:ºãº⁄Ω*ΩLΩRΩ°ΩÂΩ˘ΩˇæDæîæ‰ø2øuøäøêø·¿ @2¿ @¿ @–¿ A ¿ A^¿ Ad¿ At¿ Az¿ A≈¿ AŸ¿ BS¿ Bp¿ Bæ¿ C¿ C1¿ CW¿ C]¿ Cz¿ Có¿ D¿ D¿ D)¿ DS¿ DW¿ DX¿ D†¿ D¶¿ DÏ¿ D˘¿ EH¿ Ex¿ E|¿ E}¿ E¨¿ E≤¿ F¿ FL¿ FÉ¿ Fœ¿ G¿ G]¿ G°¿ Gß¿ Gı¿ H9¿ HN¿ HT¿ Hú¿ HÂ¿ I.¿ IC¿ II¿ Iö¿ I‚¿ IÚ¿ I¯¿ JH¿ Jâ¿ Jè¿ Jÿ¿ Jﬁ¿ K(¿ Ku¿ Kπ¿ L	¿ LY¿ L°¿ LÌ¿ M#¿ M8¿ MÓ¿ N¿ N0¿ NC¿ NI¿ NÅ¿ Nù¿ N‹¿ NË¿ O¿ O3¿ O~¿ Oí¿ Oü¿ P¿ P¿ P¿ P¿ P ¿ PW¿ P]¿ P¨¿ P≤¿ P˜¿ P˝¿ QM¿ Qê¿ Qñ¿ QÊ¿ R1¿ RX¿ R^¿ RØ¿ RÒ¿ R˜¿ SH¿ SN¿ Sï¿ T^¿ TÄ¿ T•¿ T¬¿ T’¿ T€¿ U¿ UJ¿ Uf¿ Uß¿ U≥¿ UŸ¿ V ¿ VI¿ V]¿ Vj¿ VÕ¿ V‡¿ VÊ¿ VÍ¿ VÎ¿ W¿ W¿ Wj¿ Wp¿ Wµ¿ Wª¿ X¿ XN¿ XT¿ X£¿ XÓ¿ Y
¿ Y¿ Y`¿ Y°¿ Yß¿ YÎ¿ YÒ¿ Z8¿ Z¸¿ [¿ [C¿ [`¿ [s¿ [y¿ [≠¿ [Â¿ \¿ \@¿ \L¿ \p¿ \ó¿ \‡¿ \Ù¿ ]¿ ]b¿ ]u¿ ]{¿ ]¿ ]Ä¿ ]≤¿ ]∏¿ ]˙¿ ^ ¿ ^Q¿ ^w¿ ^}¿ ^Õ¿ _¿ _¿ _a¿ _g¿ _¥¿ `¿ `V¿ `ú¿ a*¿ aK¿ aé¿ a≥¿ a⁄¿ aÏ¿ a¿ aÒ¿ b"¿ b(¿ bw¿ b}¿ bŒ¿ bÙ¿ b˙¿ cF¿ có¿ c–¿ c÷¿ d'¿ di¿ do¿ d∂¿ eP¿ e¨¿ eÏ¿ f¿ fI¿ fu¿ fÜ¿ fï¿ f¶¿ f∂¿ g¿ g ¿ g4¿ gA¿ gN¿ g_¿ gê¿ g≠¿ g≈¿ gÿ¿ gﬁ¿ g‚¿ g„¿ h¿ h¿ hh¿ hî¿ hö¿ hÍ¿ i3¿ iÉ¿ iâ¿ i÷¿ j¿ j¿ jc¿ ji¿ j∂¿ k¿ kX¿ kû¿ l¿ lM¿ lW¿ lm¿ lÜ¿ l≤¿ lƒ¿ l»¿ l…¿ l’¿ ma¿ mc¿ md¿ mè¿ mì¿ mﬂ¿ n ¿ n$¿ nJ¿ nN¿ nû¿ nÍ¿ o¿ o¿ oa¿ o±¿ o˛¿ p¿ pR¿ p†¿ pÓ¿ q;¿ qH¿ qL¿ qî¿ q„¿ r-¿ rn¿ ræ¿ s¿ s\¿ s¢¿ sæ¿ s¬¿ t¿ t\¿ t´¿ tı¿ u+¿ u{¿ uì¿ uó¿ uÂ¿ v3¿ vÇ¿ vú¿ v†¿ v¿ wA¿ wL¿ wi¿ w∫¿ x¿ x¿ x¿ xd¿ xx¿ xy¿ xª¿ x‘¿ x’¿ y¿ y	¿ yL¿ yR¿ y°¿ yΩ¿ y√¿ z¿ za¿ z∞¿ z˘¿ {2¿ {É¿ {‘¿ {Â¿ {Î¿ |9¿ |Ü¿ |ø¿ |≈¿ }¿ }#¿ }I¿ }y¿ }Ä¿ }ö¿ }≥¿ }∑¿ }π¿ }∫¿ }ˇ¿ ~¿ ~Z¿ ~^¿ ~â¿ ~ ¿ ~À¿ ¿ 
¿ ;¿ â¿ ä¿ ±¿ µ¿ Ä ¿ ÄE¿ Ä\¿ Ä`¿ Ä∞¿ Ä˘¿ ÅE¿ Åî¿ Åﬁ¿ Åˇ¿ Ç¿ ÇR¿ Ç°¿ ÇÒ¿ É	¿ ÉA¿ É`¿ Éy¿ Éï¿ É ¿ É–¿ É‘¿ É’¿ ÉÛ¿ ÉÙ¿ Ñ>¿ Ñ^¿ Ñ_¿ Ñß¿ Ñ¿¿ Ñ∆¿ Ö¿ ÖX¿ Ön¿ Ö¿ Öí¿ ÖÆ¿ ÖÊ¿ ÖÏ¿ Ü¿ Ü¿ Ü¿ Ü¿ ÜS¿ ÜW¿ Üß¿ Ü¯¿ áE¿ á]¿ áa¿ á¨¿ áÛ¿ à=¿ ài¿ à≤¿ â ¿ âP¿ â°¿ âÔ¿ ä7¿ ä}¿ äÀ¿ ã¿ ãV¿ ã¢¿ ã¿ å=¿ åA¿ åê¿ å⁄¿ ç'¿ çE¿ ç[¿ ç{¿ çÅ¿ çŒ¿ é¿ éA¿ éS¿ ép¿ éí¿ éµ¿ éª¿ éº¿ è¿ è0¿ è6¿ èá¿ è‘¿ ê!¿ ê@¿ êj¿ êk¿ ê±¿ ê∑¿ êˇ¿ ë¿ ëD¿ ëE¿ ëç¿ ëì¿ ë‘¿ í¿ í¿ íK¿ íQ¿ í°¿ í»¿ íÁ¿ ì¿ ì¿ ì¿ ìQ¿ ìW¿ ìè¿ ì∫¿ ì’¿ ì˚¿ î¿ î'¿ î-¿ îF¿ î]¿ îz¿ î~¿ î¿ îÀ¿ ï¿ ïS¿ ïX¿ ï°¿ ïÌ¿ ñ6¿ ñn¿ ñs¿ ñØ¿ ñˇ¿ óM¿ óô¿ óÆ¿ ó’¿ ò¿ ò¿ òQ¿ òW¿ òó¿ òù¿ ò‡¿ ò¸¿ ô.¿ ôP¿ ôQ¿ ôì¿ ôô¿ ôÈ¿ ö4¿ öj¿ öp¿ öπ¿ ö–¿ öÈ¿ õ¿ õ.¿ õa¿ õñ¿ õ“¿ ú¿ ú¿ ú¿ ú0¿ ú<¿ úV¿ úh¿ úì¿ úú¿ ú¢¿ ú≤¿ ú“¿ úÂ¿ úÔ¿ ú˘¿ ù(¿ ùQ¿ ùî¿ ùƒ¿ û¿ ûJ¿ ûr¿ ûû¿ û–¿ ü%¿ ü:¿ üH¿ üT¿ üá¿ ü¿¿ üÈ¿ üı¿ üˇ¿ †J¿ †m¿ †ï¿ †ù¿ †≠¿ †”¿ †Â¿ °¿ °¿ °)¿ °D¿ °c¿ °k¿ °q¿ °u¿ °v¿ °ƒ¿ ¢¿ ¢b¿ ¢±¿ ¢ﬁ¿ £¿ £¿ £A¿ £Å¿ £†¿ £¥¿ £ƒ¿ £˙¿ §,¿ §?¿ §I¿ §S¿ §e¿ §u¿ §ö¿ §¨¿ §Â¿ §˙¿ •¿ •¿ •¿ •¿ •c¿ •õ¿ •°¿ •Ô¿ ¶¿ ¶#¿ ¶<¿ ¶s¿ ¶y¿ ¶›¿ ß'¿ ßk¿ ßí¿ ßö¿ ß†¿ ß–¿ ßÈ¿ ®¿ ®¿ ®¿ ®¿ ®M¿ ®N¿ ®ã¿ ®ë¿ ®–¿ ®÷¿ ©¿ ©5¿ ©e¿ ©Ü¿ ©á¿ ©æ¿ ©ƒ¿ ™¿ ™]¿ ™Æ¿ ™¥¿ ™˝¿ ´¿ ´,¿ ´_¿ ´q¿ ´£¿ ´ÿ¿ ¨¿ ¨D¿ ¨Q¿ ¨[¿ ¨p¿ ¨|¿ ¨ñ¿ ¨ß¿ ¨“¿ ¨€¿ ¨·¿ ¨Î¿ ¨˝¿ ≠¿ ≠3¿ ≠?¿ ≠¿ ≠¨¿ ≠≠¿ ≠Ì¿ Æ^¿ Æè¿ ÆÎ¿ Ø¿ ØJ¿ Øn¿ Ø™¿ Øø¿ Ø˙¿ ∞¿ ∞¿ ∞G¿ ∞S¿ ∞]¿ ∞e¿ ∞è¿ ∞ü¿ ∞±¿ ∞”¿ ∞Ë¿ ∞Ù¿ ±¿ ±.¿ ±6¿ ±<¿ ±@¿ ±A¿ ±é¿ ±î¿ ±„¿ ≤2¿ ≤w¿ ≤»¿ ≤ÿ¿ ≤ﬁ¿ ≥'¿ ≥D¿ ≥}¿ ≥†¿ ≥°¿ ≥·¿ ≥Á¿ ¥8¿ ¥h¿ ¥¥¿ ¥‹¿ ¥›¿ µ.¿ µ=¿ µC¿ µî¿ µ‰¿ ∂-¿ ∂K¿ ∂Q¿ ∂å¿ ∂ÿ¿ ∑(¿ ∑N¿ ∑é¿ ∑µ¿ ∑‚¿ ∏	¿ ∏3¿ ∏Z¿ ∏`¿ ∏é¿ ∏í¿ ∏ì¿ ∏π¿ ∏ﬁ¿ π¿ π2¿ πT¿ πr¿ πö¿ π†¿ π§¿ π•¿ π ¿ ∫¿ ∫¿ ∫\¿ ∫j¿ ∫p¿ ∫•¿ ∫Ó¿ ∫Ù¿ ªA¿ ª|¿ ªª¿ ª¡¿ º
¿ º$¿ ºG¿ ºU¿ º[¿ ºt¿ ºõ¿ º°¿ º∆¿ º÷¿ º˘¿ Ω¿ Ω¿ Ω ¿ Ωp¿ Ω∑¿ Ω›¿ æ¿ æU¿ æx¿ æÇ¿ æä¿ æ∏¿ æ»¿ æˆ¿ ø¿ ø.¿ øC¿ øO¿ øj¿ øâ¿ øë¿ øó¿ øõ¿ øù¿ øû¿ ø¿¿ øƒ¿ ¿¿ ¿(¿ ¿,¿ ¿o¿ ¿s¿ ¿ø¿ ¡¿ ¡Z¿ ¡z¿ ¡~¿ ¡…¿ ¬¿ ¬`¿ ¬∞¿ ¬˝¿ √L¿ √ú¿ √√¿ √«¿ ƒ¿ ƒ2¿ ƒ6¿ ƒG¿ ƒK¿ ƒò¿ ƒË¿ ≈9¿ ≈S¿ ≈W¿ ≈£¿ ≈Ò¿ ∆A¿ ∆í¿ ∆–¿ ∆‘¿ ∆˚¿ ∆ˇ¿ «E¿ «ì¿ «‡¿ »+¿ »z¿ »»¿ …¿ …f¿ …Æ¿ …˝¿  J¿  ï¿  ÷¿  ⁄¿ À)¿ Ày¿ À ¿ Ã¿ Ã
¿ Ã¿ Ã¿ Ãd¿ Ã´¿ Ã«¿ ÃÀ¿ Õ¿ Õj¿ Õ∂¿ Œ¿ ŒH¿ Œâ¿ Œç¿ Œ›¿ œ¿ œ¿ œ(¿ œ,¿ œw¿ œ¶¿ œ™¿ œ˜¿ –E¿ –ñ¿ –ﬁ¿ —(¿ —v¿ —√¿ —Ë¿ —Ï¿ “¿ “¿ “o¿ “¿¿ ”¿ ”[¿ ”¨¿ ”√¿ ”«¿ ‘¿ ‘'¿ ‘+¿ ‘k¿ ‘π¿ ‘ ¿ ‘Œ¿ ’¿ ’j¿ ’n¿ ’°¿ ’•¿ ’˜¿ ÷G¿ ÷ñ¿ ÷·¿ ◊,¿ ◊0¿ ◊~¿ ◊À¿ ÿ¿ ÿf¿ ÿµ¿ Ÿ¿ Ÿ9¿ Ÿä¿ Ÿ⁄¿ ŸÁ¿ ⁄P¿ ⁄Ç¿ ⁄ï¿ ⁄⁄¿ €¿ €¿ €¿ €[¿ €™¿ €ı¿ ‹$¿ ‹*¿ ‹k¿ ‹º¿ ›¿ ›'¿ ›-¿ ›y¿ ›¿ ›è¿ ›ï¿ ›¬¿ ›ÿ¿ ›Ô¿ ﬁ¿ ﬁ+¿ ﬁK¿ ﬁt¿ ﬁé¿ ﬁñ¿ ﬁö¿ ﬁõ¿ ﬁ¡¿ ﬁ«¿ ﬂ¿ ﬂ ¿ ﬂ4¿ ﬂD¿ ﬂe¿ ﬂx¿ ﬂÇ¿ ﬂó¿ ﬂõ¿ ﬂú¿ ﬂª¿ ﬂº¿ ﬂÙ¿ ﬂ˙¿ ‡E¿ ‡î¿ ‡ﬂ¿ ·¿ ·g¿ ·∑¿ ·œ¿ ·’¿ ‚ ¿ ‚G¿ ‚M¿ ‚â¿ ‚ö¿ ‚≠¿ ‚ ¿ ‚È¿ ‚˘¿ „F¿ „X¿ „Ü¿ „ô¿ „º¿ ‰*¿ ‰8¿ ‰E¿ ‰b¿ ‰u¿ ‰¿ ‰É¿ ‰Ñ¿ ‰ê¿ ‰ë¿ ‰¡¿ ‰«¿ Â¿ Âc¿ Â≥¿ ÂÒ¿ Â˜¿ ÊB¿ Êq¿ Ê¡¿ Êˇ¿ ÁP¿ Áú¿ ÁË¿ Ë#¿ Ë=¿ Ë>¿ Ë¿ ËÖ¿ Ë’¿ È¿ È=¿ Èd¿ Èè¿ È∂¿ Èº¿ È¿¿ È¡¿ Í	¿ Í¿ Í^¿ Í±¿ ÍΩ¿ ÍÂ¿ Î¿ Î'¿ ÎC¿ ÎZ¿ ÎÄ¿ Î†¿ ÎΩ¿ Î¡¿ Î¬¿ Ï¿ Ï¿ Ïi¿ Ïº¿ Ï»¿ ÏÔ¿ Ì¿ Ì1¿ ÌW¿ Ì{¿ Ìõ¿ Ì∏¿ Ì‘¿ ÌÎ¿ Ó¿ Ó1¿ Ó5¿ Ó6¿ Óz¿ ÓÄ¿ Ó–¿ Ô¿ Ô¿ ÔE¿ ÔK¿ Ôi¿ Ôo¿ Ô¿ ÔÖ¿ ÔŸ¿ ÔÒ¿ ÔÚ¿ D¿ v¿ í¿ ¶¿  ¿ ˇ¿ Ò4¿ ÒÑ¿ ÒØ¿ Òﬂ¿ Ú¿ Úz¿ Ú…¿ Û¿ Ûc¿ Ûú¿ ÛÙ¿ Û˝¿ Ù¿ Ù	¿ Ù
¿ ÙU¿ Ù[¿ Ù®¿ Ùµ¿ ÙÔ¿ ı¿ ı¿ ıa¿ ıg¿ ı¥¿ ı¡¿ ı˚¿ ˆ!¿ ˆ"¿ ˆ]¿ ˆc¿ ˆ∞¿ ˆº¿ ˜ ¿ ˜+¿ ˜,¿ ˜|¿ ˜à¿ ˜é¿ ˜Œ¿ ˜‘¿ ¯¿ ¯W¿ ¯w¿ ¯x¿ ¯û¿ ¯ü¿ ¯’¿ ¯€¿ ˘+¿ ˘{¿ ˘Ω¿ ˘√¿ ˙¿ ˙8¿ ˙N¿ ˙^¿ ˙z¿ ˙≤¿ ˙Ú¿ ˚¿ ˚L¿ ˚^¿ ˚ï¿ ˚¢¿ ˚Æ¿ ˚∂¿ ˚∑¿ ˚Ê¿ ¸4¿ ¸Ö¿ ¸ù¿ ¸”¿ ¸Í¿ ¸ˇ¿ ˝¿ ˝¿ ˝5¿ ˝^¿ ˝Ÿ¿ ˛5¿ ˛k¿ ˛´¿ ˛¯¿ ˇG¿ ˇo¿ ˇ⁄¿ ˇÛ¿ 
¿ ¿ ¿ L¿ á¿ ¬¿ ”¿ ¯¿	¿¿¿¿j¿›¿?¿U¿V¿|¿¥¿¿!¿á¿î¿¡¿Û¿¿<¿I¿v¿¬¿·¿¿%¿1¿9¿:¿`¿ò¿¸¿_¿å¿æ¿–¿¿¿É¿è¿ó¿ò¿¿P¿Ö¿‚¿	C¿	r¿	s¿	©¿	∫¿	·¿
¿
<¿
L¿
Å¿
å¿
∑¿*¿G¿|¿á¿Ã¿Û¿¿D¿O¿b¿Ê¿I¿T¿^¿h¿{¿¿Ä¿å¿…¿ ¿÷¿˚¿¿1¿¿∆¿˚¿;¿k¿á¿†¿¶¿Õ¿¯¿ ¿&¿[¿ö¿…¿‰¿¸¿¿Q¿ö¿Õ¿Ú¿¿¿¿¿_¿e¿∂¿¿O¿Ü¿å¿¬¿‡¿ˆ¿¿#¿6¿@¿S¿W¿s¿t¿ó¿ò¿Í¿7¿d¿e¿®¿Æ¿Ô¿¿"¿B¿b¿«¿Õ¿Á¿Î¿¿	¿L¿ê¿÷¿¿S¿`¿â¿ä¿…¿
¿.¿4¿v¿∑¿ˆ¿;¿o¿û¿€¿ ¿;¿N¿T¿r¿ö¿’¿¯¿#¿f¿|¿Ñ¿ä¿∂¿«¿À¿Ã¿¿n¿¥¿∫¿Œ¿‘¿%¿s¿¿¿ˇ¿¿U¿ä¿ê¿‡¿ )¿ y¿ ∆¿!¿!`¿!ö¿!†¿!·¿"/¿"r¿"x¿"è¿"ï¿"ﬁ¿#(¿#w¿#∂¿#Û¿$D¿$`¿$f¿$í¿$ﬁ¿$˘¿% ¿%8¿%{¿%â¿%è¿%¥¿%œ¿%Î¿&:¿&á¿&´¿&Ã¿&‘¿&‚¿&Ë¿'¿',¿'9¿'T¿'o¿'É¿'¥¿'˛¿(
¿(!¿(/¿(]¿(É¿(ã¿(ë¿(ï¿(ñ¿(Â¿(˜¿(˝¿)A¿)í¿)·¿*¿*¿*F¿*S¿*t¿*õ¿*¥¿*’¿+¿+<¿+\¿+i¿+ï¿+õ¿+æ¿+¬¿+√¿,¿,R¿,ë¿,ó¿,‡¿,Ê¿-¿-E¿-\¿-y¿-}¿-~¿-†¿-≈¿-Â¿.¿.¿.!¿."¿.H¿.m¿.{¿.Å¿.‡¿/¿/C¿/u¿/≠¿/≥¿/∑¿/∏¿/ı¿05¿0Y¿0]¿0^¿0§¿0Ã¿0–¿0—¿1¿1#¿1p¿1ñ¿1ú¿1‡¿2¿2¿24¿2Y¿2Ä¿2ß¿2≈¿2’¿2˚¿3¿3¿3B¿3F¿3G¿3t¿3î¿3ª¿3Ë¿4¿47¿4c¿4s¿4ó¿4ª¿4Ò¿5¿51¿5j¿5r¿5Ö¿5è¿5ô¿5∞¿5“¿5Î¿6#¿6)¿69¿6o¿6î¿6π¿6Ã¿6÷¿6¿7¿7
¿7¿7<¿7B¿7ë¿7‡¿80¿8^¿8d¿8≤¿9¿9S¿9ü¿9„¿:3¿:n¿:t¿:¡¿;¿;T¿;Z¿;®¿;˜¿<D¿<q¿<û¿<Ë¿=¿=<¿=o¿=Å¿=¥¿>¿>¿>!¿>-¿>G¿>_¿>ä¿>ì¿>ô¿>∫¿>Â¿?¿?'¿?u¿?è¿?Á¿@¿@_¿@Ä¿@ì¿@ü¿@©¿@Í¿A3¿Aì¿B4¿Bà¿B¨¿B ¿C¿Co¿C¢¿C∆¿C’¿C‚¿CÏ¿D¿D¿D!¿DE¿Di¿D·¿EU¿Ee¿Eî¿Eß¿E±¿E≤¿EÍ¿E¸¿FJ¿Fã¿F∫¿FÍ¿G6¿GY¿Gs¿G´¿G“¿G˘¿H¿H¿H¿HN¿H|¿H∂¿Hæ¿Hø¿H¯¿I¿I¿I-¿I3¿IS¿I°¿I¿J>¿Jp¿J¢¿J®¿J“¿Jˆ¿K!¿K1¿KU¿Kt¿K‡¿KË¿K˚¿L¿L¿L0¿LV¿Lk¿Lw¿LÉ¿Lú¿L∞¿L‹¿LÛ¿M¿M¿MV¿M^¿Mp¿Mó¿M¨¿M∏¿Mæ¿MÎ¿M˚¿N¿NU¿Nv¿Nâ¿Nì¿Nù¿N¥¿N÷¿NË¿O¿O'¿O3¿OL¿OÑ¿Oä¿Oö¿O–¿Oı¿P¿P-¿P7¿PQ¿Pg¿Ph¿Pü¿Pº¿P¬¿P∆¿P«¿Q¿Q\¿Q©¿Qı¿RF¿Rs¿RÄ¿Rú¿Rù¿RÍ¿S¿S¿Sg¿S∂¿S¯¿S˛¿TN¿Tù¿TÃ¿T“¿U"¿Uh¿U¶¿U ¿U◊¿U˙¿U˚¿V:¿V|¿VÇ¿V—¿W¿Wg¿W†¿W¶¿WÂ¿W˙¿X ¿XQ¿X†¿XÃ¿XŸ¿XÒ¿XÚ¿Y4¿Y:¿Yâ¿Y‘¿Z¿ZX¿Z^¿ZÆ¿Zˇ¿[M¿[û¿[Ø¿[µ¿\¿\O¿\î¿\‰¿]-¿]e¿]r¿]ä¿]ã¿]“¿^"¿^o¿^ª¿^◊¿^›¿_.¿_|¿_Õ¿`¿`¿`m¿`Ω¿`√¿`˘¿a¿aW¿az¿aù¿a»¿aÒ¿a˚¿bM¿b]¿bâ¿bè¿bì¿bî¿b¢¿b£¿bÊ¿bÏ¿c9¿cF¿c~¿c£¿c§¿c◊¿c›¿d*¿d6¿dx¿d¢¿d£¿dÈ¿dÔ¿e@¿eâ¿e⁄¿eÏ¿eÚ¿fB¿fò¿fﬁ¿g2¿g\¿gb¿g≥¿gƒ¿g ¿h"¿hI¿hJ¿hó¿h–¿h÷¿i&¿iC¿i¨¿i≠¿iË¿iÓ¿j<¿jã¿jµ¿jª¿k¿kZ¿kg¿kì¿kî¿kµ¿k∂¿kı¿k˚¿lJ¿lP¿lõ¿lÍ¿m;¿mä¿m’¿mÂ¿mÎ¿n8¿nb¿nh¿nª¿o¿oY¿o´¿oæ¿p¿pb¿p¥¿p”¿p˘¿p˝¿p˛¿qC¿qI¿qô¿qÊ¿r3¿rÇ¿r’¿s#¿si¿sµ¿t¿t8¿t>¿tã¿tŸ¿u#¿uo¿uæ¿v¿v,¿v2¿vÅ¿vŒ¿w¿w'¿w4¿wR¿wµ¿w‘¿wÿ¿wŸ¿wÊ¿x¿x¿x4¿x|¿x√¿x‰¿xÎ¿y¿y¿y¿ye¿yf¿y∫¿y¿¿z¿zd¿zt¿zz¿zß¿z ¿zÊ¿zˆ¿{¿{,¿{6¿{I¿{M¿{N¿{ü¿{·¿{Á¿|7¿|á¿|î¿|ö¿|÷¿}¿}d¿}´¿}¿~%¿~+¿~p¿~∂¿~Ô¿¿6¿]¿k¿q¿ô¿ª¿˚¿Ä+¿Ä;¿ÄC¿ÄD¿Äõ¿ÄÃ¿Ä‹¿Ä‰¿ÄÍ¿Å'¿Å@¿Å{¿ÅÅ¿ÅÖ¿ÅÜ¿Å«¿Ç¿Ç¿Çb¿Çä¿Çê¿Çœ¿É¿É*¿Éà¿É¶¿É™¿É´¿ÉÕ¿Éı¿Ñ¿Ñ	¿ÑA¿Ñ`¿Ñâ¿ÑØ¿Ñ”¿Ñı¿Ñ˝¿Ö¿Ö<¿Ö\¿Öb¿Ö±¿Ö¸¿ÜH¿Üü¿ÜÍ¿á¿á:¿áe¿áì¿áæ¿á÷¿à¿à<¿àT¿àa¿àå¿àí¿àñ¿àó¿à÷¿à‹¿â-¿ây¿â∆¿âˇ¿ä¿ä;¿äA¿äç¿ä‹¿ã!¿ãm¿ã®¿ã≈¿ã€¿ãÎ¿å¿å¿å$¿å7¿å;¿åV¿åW¿åñ¿åú¿åÌ¿ç9¿çÜ¿çø¿ç≈¿ç˚¿é(¿é>¿éN¿éz¿éç¿éó¿é™¿éÆ¿é⁄¿é€¿è"¿è(¿èm¿è∫¿ê
¿êY¿êq¿êw¿ê¬¿ê˛¿ë¿ëD¿ëë¿ë”¿ëŸ¿ëÈ¿ëÔ¿í=¿íè¿íü¿íπ¿í÷¿ì¿ì#¿ì1¿ì7¿ìO¿ìï¿ì∑¿ìÎ¿ì˝¿î+¿îr¿î|¿îë¿îù¿î‡¿ï¿ïG¿ïb¿ïè¿ïµ¿ïΩ¿ïÊ¿ñ&¿ñE¿ñj¿ñw¿ñâ¿ñ∑¿ó¿ó¿ó3¿ó?¿óÜ¿óÃ¿ò¿òR¿òm¿òì¿òõ¿ò°¿ò•¿ò¶¿òÛ¿ô ¿ô¿ôW¿ô´¿ôˆ¿öE¿öé¿öî¿öÂ¿õ5¿õX¿õ^¿õn¿õt¿õƒ¿ú¿ú-¿úJ¿úÄ¿ú∂¿úƒ¿ú ¿úÚ¿ù8¿ùZ¿ùé¿ù—¿û¿û1¿ûL¿ûy¿ûü¿ûß¿û¥¿ûÃ¿û“¿û÷¿û◊¿ü'¿üu¿ü∆¿†¿†H¿†k¿†Å¿††¿†ÿ¿° ¿°+¿°L¿°o¿°ì¿°¬¿¢¿¢*¿¢4¿¢e¿¢¡¿¢“¿¢‹¿¢˝¿£¿£¿£%¿£)¿£*¿£u¿£{¿£…¿£Ò¿£˜¿§;¿§s¿§ì¿§©¿§Œ¿§Ù¿•¿•;¿•_¿•x¿•°¿••¿•¶¿•Î¿¶,¿¶>¿¶D¿¶â¿¶∫¿¶◊¿¶˜¿ß¿ß2¿ßX¿ßw¿ß ¿ßÏ¿®¿®&¿®*¿®+¿®n¿®ã¿®õ¿®Ω¿®ı¿©;¿©W¿©ß¿©ƒ¿©—¿©Ì¿™8¿™S¿™`¿™l¿™t¿™á¿™ë¿™›¿´+¿´y¿´»¿¨¿¨a¿¨™¿¨¬¿¨–¿¨÷¿≠¿≠?¿≠Q¿≠É¿≠—¿≠€¿≠¿≠¸¿Æ¿Æ.¿ÆY¿Æb¿Æh¿Æx¿Æ°¿Æ«¿Ø¿Ø3¿Øi¿Øä¿Ø∞¿Øæ¿ØÃ¿ØÓ¿∞*¿∞F¿∞ñ¿∞∑¿∞»¿∞Ô¿±¿±"¿±B¿±x¿±â¿±©¿±˙¿≤N¿≤í¿≤£¿≤º¿≥¿≥!¿≥1¿≥=¿≥G¿≥¿≥ó¿≥Â¿≥˝¿¥
¿¥&¿¥w¿¥´¿¥∏¿¥‘¿µ"¿µo¿µØ¿µº¿µ—¿∂!¿∂.¿∂:¿∂B¿∂U¿∂_¿∂á¿∂ó¿∂∫¿∂Í¿∑
¿∑J¿∑]¿∑g¿∑Ä¿∑©¿∑÷¿∑‡¿∑˛¿∏W¿∏Ø¿∏»¿∏¯¿∏˛¿π¿π1¿πa¿πÖ¿πò¿π¢¿πÿ¿πı¿π˚¿πˇ¿∫ ¿∫L¿∫ñ¿∫ú¿∫Ï¿ª¿ª¿ª¿ªY¿ªó¿ªò¿ª„¿ªÈ¿º5¿ºz¿º»¿Ω¿Ω;¿ΩA¿Ωè¿Ωﬂ¿æ-¿æD¿æJ¿æñ¿æ‡¿ø/¿øa¿øö¿øõ¿øÎ¿¿¿¿¿¿\¿¿•¿¿´¿¿ı¿¡A¿¡ç¿¡÷¿¬"¿¬[¿¬©¿¬À¿¬œ¿¬–¿√¿√¿√m¿√π¿ƒ
¿ƒ#¿ƒ)¿ƒp¿ƒΩ¿≈	¿≈Y¿≈©¿≈∆¿≈˘¿∆¿∆,¿∆0¿∆1¿∆q¿∆Æ¿∆¥¿∆˛¿«%¿«+¿«x¿«º¿«‹¿«Ò¿«˜¿»C¿»í¿»‡¿…/¿…A¿…t¿…©¿…ø¿…€¿ ¿ 7¿ T¿ \¿ b¿ ù¿À	¿À(¿À{¿ÀÅ¿Àû¿Àæ¿Àƒ¿Àˆ¿Ã:¿Ãá¿Ãç¿Ã£¿Ãß¿Ã®¿Ã©¿Ã¿Õ2¿Õs¿Õy¿ÕØ¿Õµ¿Õ˚¿Œ"¿Œ(¿Œx¿Œ≈¿œ¿œO¿œõ¿œú¿œ„¿–2¿–~¿– ¿—¿—g¿—≤¿—ø¿—≈¿“¿“]¿“©¿“ƒ¿“ ¿”¿”i¿”∑¿‘¿‘V¿‘õ¿‘°¿‘±¿‘∑¿’¿’?¿’Ö¿’Ü¿’ï¿’ñ¿’›¿÷¿÷¿÷O¿÷f¿÷l¿÷µ¿÷Ÿ¿÷ˆ¿◊¿◊1¿◊[¿◊{¿◊û¿◊ ¿◊˜¿ÿ¿ÿ¿ÿ¿ÿo¿ÿu¿ÿ¿¿ÿ‹¿ÿ‚¿Ÿ+¿Ÿv¿Ÿ≈¿⁄¿⁄]¿⁄§¿⁄™¿⁄¿¿⁄∆¿€¿€)¿€/¿€=¿€Ñ¿€ñ¿€„¿‹¿‹,¿‹M¿‹s¿‹í¿‹ú¿‹¢¿‹æ¿‹Ÿ¿‹„¿‹Î¿‹ı¿›¿›¿›[¿›|¿›Ä¿›Å¿›÷¿›‹¿ﬁ'¿ﬁb¿ﬁh¿ﬁ£¿ﬁ©¿ﬁı¿ﬂ0¿ﬂY¿ﬂg¿ﬂm¿ﬂÆ¿ﬂ€¿ﬂ¸¿‡=¿‡t¿‡z¿‡~¿‡¿‡≠¿‡Ê¿‡Á¿·¿·O¿·è¿·’¿·€¿‚¿‚
¿‚¿‚K¿‚u¿‚ê¿‚ë¿‚∂¿‚”¿‚‘¿‚ˇ¿„¿„S¿„ó¿„æ¿„ƒ¿‰¿‰¿‰D¿‰]¿‰v¿‰|¿‰ç¿‰ë¿‰í¿‰€¿‰·¿Â0¿Â6¿Â¿ÂÀ¿Â‹¿Âˆ¿Ê¿Ê/¿ÊX¿Êv¿Ê~¿ÊÇ¿ÊÉ¿ÊÀ¿Ê—¿Á¿Ái¿Áï¿Áπ¿Á÷¿Ë¿ËD¿Ëp¿Ë~¿ËÑ¿ËÖ¿Ë–¿È¿Èj¿È∂¿È∑¿Í1¿Í[¿Í«¿ÍÂ¿ÍÊ¿Î1¿Îi¿Îx¿ÎÄ¿Î©¿Î™¿Î’¿Ï+¿Ïp¿Ï√¿Ì¿Ì^¿Ìn¿Ìv¿Ì|¿Ì√¿Ó¿ÓX¿Óß¿Óˆ¿ÔF¿ÔX¿Ô£¿Ô’¿Ô€¿¿+¿F¿ß¿ÿ¿˛¿Ò¿Ò¿Ò¿Ò¿ÒN¿Òj¿ÒΩ¿Ò’¿Ú#¿Úu¿ÚÉ¿Úâ¿Ú…¿Û¿Û¿ÛP¿Ûπ¿ÛÛ¿Ù¿Ù`¿Ùú¿Ùﬂ¿Ùı¿Ù¸¿ı*¿ıu¿ıª¿ıø¿ı¿¿ˆ¿ˆ:¿ˆ]¿ˆd¿ˆâ¿ˆÌ¿ˆÓ¿˜1¿˜ê¿˜ë¿˜Ú¿¯O¿¯¥¿˘¿˘¿˘T¿˘q¿˘≈¿˘˜¿˙ ¿˙=¿˙X¿˙|¿˙¶¿˙ÿ¿˙‚¿˙Í¿˚-¿˚è¿˚∞¿˚‘¿¸¿¸J¿¸o¿¸É¿¸ç¿¸‘¿¸Ë¿¸Ú¿˝+¿˝W¿˝a¿˝ô¿˝Œ¿˛¿˛h¿˛ñ¿˛À¿˛◊¿˛·¿˛È¿˛Ò¿˛Ú¿ˇA¿ˇb¿ˇh¿ˇi¿ˇå¿ˇç¿ˇ¨¿ˇœ¿ˇ˜¿ ¿ >¿ S¿ û¿ ß¿ —¿ ˝¿H¿Q¿^¿ã¿£¿Õ¿‚¿-¿6¿]¿ª¿ﬁ¿Ê¿Ï¿Ì¿¿¿¿#¿$¿]¿c¿≥¿¸¿¿¿M¿ë¿—¿Ì¿Ò¿Ú¿.¿4¿c¿¥¿˛¿N¿y¿¿À¿„¿È¿6¿Å¿≤¿–¿Ë¿¿1¿7¿W¿–¿	3¿	7¿	8¿	D¿	E¿	ñ¿	¢¿	Î¿	Ï¿	Ì¿	˛¿	ˇ¿
M¿
ï¿
≠¿
≤¿
Ò¿=¿R¿¢¿Ò¿?¿l¿ß¿Æ¿≥¿¿8¿9¿:¿e¿q¿å¿∏¿—¿Ì¿¿#¿+¿o¿Ü¿æ¿˛¿1¿G¿Q¿Å¿â¿£¿∆¿Œ¿Á¿	¿¿:¿n¿v¿ç¿¨¿¥¿∫¿Õ¿—¿“¿ﬁ¿9¿:¿w¿ø¿Ê¿Ú¿
¿)¿L¿Ç¿â¿∂¿∆¿¸¿¿0¿:¿h¿å¿∂¿–¿◊¿Á¿¿0¿:¿M¿Q¿R¿ñ¿≈¿À¿¿R¿^¿y¿ì¿…¿–¿˝¿¿C¿d¿w¿Å¿÷¿Ê¿¿/¿9¿L¿P¿Q¿^¿j¿Ø¿⁄¿G¿ƒ¿l¿‘¿3¿ù¿¿(¿]¿Ø¿¿¿ï¿ô¿ö¿¶¿Ó¿Ô¿@¿Q¿W¿¢¿Ê¿Ï¿<¿{¿»¿¿X¿x¿~¿…¿ ¿ ¿ !¿ '¿ s¿ ¨¿ ¬¿ ‡¿ ¿!¿!6¿!=¿!_¿!†¿!¡¿!È¿!˝¿"¿"/¿"8¿">¿"B¿"C¿"î¿"™¿"∞¿# ¿#O¿#}¿#É¿#”¿$ ¿$ë¿$…¿$Õ¿$œ¿$–¿%¿%	¿%J¿%ä¿%é¿%”¿%˝¿&P¿&Q¿&¢¿&«¿&Õ¿&¸¿'¿'¿'M¿']¿'~¿'∂¿'Œ¿(¿(R¿(_¿({¿(«¿)¿)d¿)µ¿)¬¿)€¿*¿*S¿*m¿*§¿*±¿* ¿*Ú¿+E¿+c¿+É¿+∫¿+«¿+”¿+€¿+Ó¿+¯¿,	¿,¿,¿,#¿,K¿,m¿,ç¿,ß¿,¡¿,«¿,€¿,ı¿-¿-¿-¿-¿-'¿-L¿-e¿-¿-ú¿-¢¿-¶¿-ß¿-≥¿-≈¿-Ÿ¿-Û¿.¿.¿.¿.¿."¿.=¿.W¿.t¿.z¿.~¿.¿.ã¿.ø¿.Ÿ¿.Ò¿.˜¿.˚¿.¸¿/¿/:¿/ß¿/´¿/≠¿/Æ¿/Î¿/Ô¿0;¿0|¿0∏¿0‰¿13¿1j¿1à¿1ª¿1’¿1÷¿1¯¿2¿2¿2¿2‰¿2¯¿2¸¿2˛¿2ˇ¿3=¿3A¿3í¿3®¿3¨¿3ˇ¿4¿4¿4h¿4¥¿4È¿57¿5;¿5é¿5‡¿5Ò¿5ı¿6[¿6_¿6m¿6q¿6∫¿6€¿7j¿7ª¿8¿8;¿8s¿8£¿8‡¿8Ê¿9¿9¿9S¿9ù¿9œ¿:¿:/¿:l¿:r¿:é¿:í¿:ì¿:™¿:»¿:Ì¿:Ó¿;?¿;d¿;j¿;ô¿;ü¿;∫¿;Í¿;˙¿<¿<S¿<k¿<º¿<Ô¿<¸¿=¿=d¿=Ø¿>¿>R¿>_¿>x¿>†¿>¿?
¿?A¿?N¿?g¿?è¿?‚¿@ ¿@ ¿@W¿@d¿@p¿@x¿@ã¿@ï¿@¶¿@™¿@´¿@≈¿@ﬁ¿A#¿As¿A§¿AŸ¿AÔ¿B¿B%¿BP¿BÅ¿B¢¿C¿C8¿C@¿C[¿Cw¿CÑ¿Cß¿C…¿D¿DZ¿D¨¿D›¿E/¿ET¿EÖ¿E≤¿EŒ¿E›¿F'¿FV¿Fô¿F ¿F˘¿Gw¿GÌ¿H)¿He¿Hõ¿H£¿H©¿H≠¿HÆ¿H˝¿I¿IS¿IÖ¿Iº¿J	¿Jà¿J◊¿J˘¿K¿K1¿K`¿Kd¿Ke¿Kß¿K≈¿KÎ¿KÔ¿K¿L:¿Le¿LÅ¿LÖ¿LÜ¿Lµ¿M¿MN¿Mí¿M∞¿M„¿N¿N8¿NE¿N¡¿O¿O¿OF¿Oi¿Où¿O™¿P¿Pr¿Px¿P§¿PÃ¿P‚¿PÊ¿PÁ¿Q¿Q¿QT¿Qu¿Qñ¿Q¨¿Q∞¿Q±¿Q˜¿Q˝¿R3¿RH¿Rl¿Rà¿R⁄¿S¿SC¿Sm¿SÖ¿Sô¿Sü¿S∑¿SŒ¿S„¿SÁ¿SË¿T2¿T8¿Tá¿Tÿ¿U¿UB¿U]¿Ux¿Uî¿U∂¿V¿V:¿VH¿VN¿Vo¿Vû¿Vµ¿Vπ¿V∫¿V∆¿VÎ¿W¿W(¿WD¿W_¿W±¿W‹¿W‚¿WÊ¿WÁ¿WÛ¿X¿X¿X=¿XY¿Xo¿X¡¿XÏ¿XÚ¿Xˆ¿X˜¿Y¿Y¿YB¿Y^¿Yy¿YÀ¿Yˆ¿Y¸¿Z ¿Z¿Z¿ZA¿Ze¿ZÅ¿Zó¿ZÈ¿[¿[¿[¿[¿[H¿[t¿[u¿[ù¿[«¿[»¿\¿\7¿\R¿\t¿\ƒ¿\¿\Ù¿\ı¿]3¿]^¿]y¿]õ¿]Î¿^¿^¿^¿^$¿^V¿^ñ¿^¥¿^Ÿ¿^Ó¿_¿_H¿_j¿_{¿_Ö¿_ô¿_Ì¿`¿`#¿`)¿`>¿`B¿`D¿`E¿`ï¿`Æ¿`≤¿a¿aW¿aq¿a¨¿a≠¿aÌ¿aÛ¿b7¿bV¿b\¿b¨¿bÀ¿bÿ¿bÈ¿c	¿c ¿c$¿c%¿c1¿c`¿cy¿c≈¿c…¿c ¿c÷¿cË¿d7¿dK¿dO¿dQ¿dR¿dü¿d´¿dØ¿d“¿e#¿eB¿eî¿e‡¿f¿fM¿fÜ¿fá¿f«¿g	¿g
¿gQ¿g¢¿g®¿g∏¿gæ¿h¿hJ¿hy¿hz¿h«¿i¿iH¿iJ¿iK¿iò¿iÀ¿iœ¿j¿jA¿jÄ¿jÅ¿j’¿j÷¿j‚¿k%¿kQ¿kU¿kV¿kb¿k»¿k ¿kÀ¿l¿la¿le¿l∂¿m¿m5¿m¿m°¿m¬¿m˜¿n¿nD¿nE¿nì¿n¨¿nﬁ¿nﬂ¿o
¿o¿o9¿o?¿oO¿oU¿o§¿oÿ¿p#¿pS¿pû¿pŒ¿pÁ¿q¿q;¿qd¿qç¿qì¿qî¿q‚¿r&¿rL¿rM¿rò¿rØ¿rµ¿s¿s<¿sU¿sV¿s¿sÖ¿sŒ¿t¿tX¿t^¿t®¿tÎ¿t˜¿u9¿u:¿uä¿u°¿u“¿u”¿uﬂ¿vH¿vI¿vp¿vq¿v≥¿v‚¿w
¿w¿w¿wI¿wm¿wq¿wr¿wµ¿wª¿x¿xA¿x]¿xc¿x¨¿xÈ¿y¿y7¿y;¿y=¿y>¿yè¿yß¿y´¿y˙¿z
¿zO¿zj¿zÑ¿zπ¿zø¿z¿¿zÃ¿{m¿{∞¿{›¿|¿|.¿|V¿|W¿|Ñ¿|¨¿|◊¿|ﬁ¿}¿}Z¿}å¿}∫¿}ª¿}·¿}‚¿~¿~d¿~ã¿~´¿~Â¿¿9¿S¿\¿b¿¨¿≠¿˚¿ÄF¿Äó¿Ä„¿ÄÒ¿Å$¿Å:¿Å>¿Å?¿ÅK¿Åy¿Åz¿Å’¿Å÷¿Å‚¿Å¸¿Ç*¿Ç.¿Ç/¿Ç;¿Ç~¿Çü¿Ç£¿Ç•¿Ç¶¿ÇÛ¿É¿É¿Éc¿É±¿É”¿É◊¿Ñ!¿Ñp¿Ñæ¿Ö¿Ö[¿Öñ¿Öö¿ÖÁ¿Ü3¿Ü{¿Üê¿Ü€¿Ü¸¿á¿áK¿áe¿áö¿á≈¿áﬁ¿à¿à%¿à&¿àE¿àg¿àâ¿à‰¿àÂ¿àÒ¿âí¿â™¿â…¿ä¿äW¿äó¿äπ¿äı¿ã)¿ãw¿ã∆¿å¿å]¿åw¿åÇ¿åä¿åò¿åû¿åü¿å›¿çq¿çÅ¿çÇ¿çƒ¿é¿é¿é	¿éS¿éÑ¿é≤¿é”¿é‘¿è¿è.¿èO¿è¿èÖ¿èÜ¿è¢¿è∆¿è—¿è¿ê¿êX¿êê¿ê»¿êÎ¿ë¿ë¿ë¿ë¿ëW¿ëù¿ëΩ¿ë¸¿í3¿íU¿ío¿íx¿í~¿í§¿í‡¿íÌ¿ì<¿ìB¿ìX¿ì\¿ì]¿ìi¿ìê¿ìπ¿ìΩ¿ìæ¿ì ¿î¿îS¿îr¿îó¿î©¿î±¿î“¿î˙¿ï ¿ï¿ï¿ï(¿ïF¿ïf¿ïÜ¿ïå¿ïê¿ïë¿ï≠¿ïÆ¿ï∫¿ï‘¿ïÏ¿ï¿ïÒ¿ñ/¿ñ1¿ñ2¿ñz¿ñ~¿ñÃ¿ó¿ó¿ó ¿óh¿ón¿óΩ¿ò
¿ò[¿ò´¿ò¬¿òÓ¿ô¿ôA¿ôH¿ôï¿ôô¿ôö¿ô≤¿ôŒ¿ôÈ¿ô¸¿ô˝¿ö(¿öO¿öP¿öâ¿öæ¿öø¿öÙ¿õ!¿õ"¿õH¿õb¿õc¿õ∫¿õ¿¿õ–¿õ÷¿ú;¿ú£¿ù¿ù5¿ù6¿ù[¿ùç¿ù∑¿ù˘¿û-¿ûb¿û≥¿û‡¿ü¿ü|¿üã¿ü˘¿†¿†U¿†¥¿°¿°`¿°f¿°g¿°ó¿¢¿¢.¿¢m¿¢®¿¢ƒ¿¢ﬂ¿¢Á¿¢Ì¿¢Ò¿¢Ú¿£(¿£-¿£|¿£ì¿£ò¿£Á¿§1¿§t¿§u¿§£¿§‚¿•¿•¿•,¿•2¿•`¿•x¿•~¿•º¿•¿¿•¡¿¶¿¶`¿¶ù¿¶¢¿¶‹¿ß¿ß(¿ß@¿ßW¿ßv¿ß|¿ßö¿ßµ¿ß‘¿ß˚¿®'¿®l¿®î¿®¡¿©¿©H¿©u¿©ü¿©•¿©Ÿ¿™¿™¿™¿™M¿™b¿™r¿™x¿™ç¿™ù¿™£¿™æ¿™¬¿™√¿´¿´a¿´~¿´ò¿´…¿´Õ¿´Œ¿¨¿¨c¿¨|¿¨Ç¿¨Ã¿≠¿≠¿≠$¿≠*¿≠y¿≠£¿≠¡¿≠√¿≠ƒ¿Æ¿Æ¿Æs¿Æ√¿Æ÷¿Ø¿Øe¿Øà¿Ø∞¿ØÕ¿Ø⁄¿ØÚ¿∞¿∞(¿∞1¿∞3    	Ä•  ÄæÄ”Ä’ÄÈÄÏ  Å  Å?  Åg  Åè  Åπ  ÅŒ  Å‰ÇÇÎÇÌÉÉ4É6  É_ÇiÖÅ∑/// Base class for data associated with a [RenderObject] by its parent.
///
/// Some render objects wish to store data on their children, such as the
/// children's input parameters to the parent's layout algorithm or the
/// children's position relative to other children.
///
/// See also:
///
///  * [RenderObject.setupParentData], which [RenderObject] subclasses may
///    override to attach specific types of parent data to children.    Ö,lÖå:/// Called when the RenderObject is removed from the tree.  ÖiÖjÖvÖwÖú*ÖØ   ÖúÖù á4¿ f.ä+Ç/// A place to paint.
///
/// Rather than holding a canvas directly, [RenderObject]s paint using a painting
/// context. The painting context has a [Canvas], which receives the
/// individual draw operations, and also has functions for painting child
/// render objects.
///
/// When painting a child render object, the canvas held by the painting context
/// can change because the draw operations issued before and after painting the
/// child might be recorded in separate compositing layers. For this reason, do
/// not hold a reference to the canvas across operations that might paint
/// child render objects.
///
/// New [PaintingContext] objects are created automatically when using
/// [PaintingContext.repaintCompositedChild] and [pushLayer]. äTÅ äËä˜~/// Creates a painting context.
///
/// Typically only called by [PaintingContext.repaintCompositedChild]
/// and [pushLayer].ä¯ä˛  ãã  ä€ä‹ã*ã0ãHãAã1ãDãQãWãoãhãXãkãu$ãä  ãûÅAå–Å/// An estimate of the bounds within which the painting context's [canvas]
/// will record painting commands. This can be useful for debugging.
///
/// The canvas will allow painting outside these bounds.
///
/// The [estimatedBounds] rectangle is in the [canvas] coordinate system. ´˛¨  ¨¨1  ¨>¨F  ™WÅé™`    ¨RÅr≠FÄ“/// The canvas on which to paint.
///
/// The current canvas can change whenever you paint a child using this
/// context, which means it's fragile to hold a reference to the canvas
/// returned by this getter.  ≠/≠0å‰Ç™éØÅ®/// Repaint the given render object.
///
/// The render object must be attached to a [PipelineOwner], must have a
/// composited layer, and must be in need of painting. The render object's
/// layer, if any, is re-used, along with any layers in the subtree that don't
/// need to be repainted.
///
/// See also:
///
///  * [RenderObject.isRepaintBoundary], which determines if a [RenderObject]
///    has a composited layer. é∆é‘  é‹#é‚  é˙èíâ-èû  èªè…  è’#è€  è˛ê  èÛò√Özö—ÅÎ/// Update the composited layer of [child] without repainting its children.
///
/// The render object must be attached to a [PipelineOwner], must have a
/// composited layer, and must be in need of a composited layer update but
/// not in need of painting. The render object's layer is re-used, and none
/// of its children are repaint or their layers updated.
///
/// See also:
///
///  * [RenderObject.isRepaintBoundary], which determines if a [RenderObject]
///    has a composited layer. öÁöı   ûAÇ¡ü°ÅC/// In debug mode, repaint the given render object using a custom painting
/// context that can record the results of the painting operation in addition
/// to performing the regular paint of the child.
///
/// See also:
///
///  * [repaintCompositedChild], for repainting a composited child without
///    instrumentation. üÃü⁄  üÊ#üÏ  †&†)  †°Éó¢"Å/// Paint a child [RenderObject].
///
/// If the child has its own composited layer, the child will be composited
/// into the layer subtree associated with this painting context. Otherwise,
/// the child will be painted into the current PictureLayer for this context. ¢-¢;  ¢A¢I   §°É©§¶  §∂§ƒ  § §“   ®NÇ©„Åp/// Adds a layer to the recording requiring that the recording is already
/// stopped.
///
/// Do not call this function directly: call [addLayer] or [pushLayer]
/// instead. This function is called internally when all layers not
/// generated from the [canvas] are added.
///
/// Subclasses that need to customize how layers are added should override
/// this method. ©Ô©ˆ  ©—©“≠»Äﬁ≠Õ    Æ™Çì∞∆Åˆ/// Adds a [CompositionCallback] for the current [ContainerLayer] used by this
/// context.
///
/// Composition callbacks are called whenever the layer tree containing the
/// current layer of this painting context gets composited, or when it gets
/// detached and will not be rendered again. This happens regardless of
/// whether the layer is added via retained rendering or not.
///
/// {@macro flutter.rendering.Layer.compositionCallbacks}
///
/// See also:
///   *  [Layer.addCompositionCallback]. ∞›∞Ú   ±AÖ≥NÅ’/// Stop recording to a canvas if recording has started.
///
/// Do not call this function directly: functions in this class will call
/// this method as needed. This function is called internally to ensure that
/// recording is stopped before adding layers or finalizing the results of a
/// paint.
///
/// Subclasses that need to customize how recording to a canvas is performed
/// should override this method to save the results of the custom canvas
/// recordings.  ≥+≥,≥8≥9∂RÅW∑hÅ/// Hints that the painting in the current layer is complex and would benefit
/// from caching.
///
/// If this hint is not set, the compositor will apply its own heuristics to
/// decide whether the current layer is complex enough to benefit from
/// caching.   ∑≠Åππ#Åd/// Hints that the painting in the current layer is likely to change next frame.
///
/// This hint tells the compositor not to cache the current layer because the
/// cache will not be used in the future. If this hint is not set, the
/// compositor will apply its own heuristics to decide whether the current
/// layer is likely to be reused in the future.   πjÇŒªËÇ\/// Adds a composited leaf layer to the recording.
///
/// After calling this function, the [canvas] property will change to refer to
/// a new [Canvas] that draws on top of the given layer.
///
/// A [RenderObject] that uses this function is very likely to require its
/// [RenderObject.alwaysNeedsCompositing] property to return true. That informs
/// ancestor render objects that this render object will include a composited
/// layer, which, for example, causes them to use composited clips.
///
/// See also:
///
///  * [pushLayer], for adding a layer and painting further contents within
///    it. ªÒª¯   º<à¿ A‡Öh/// Appends the given layer to the recording, and calls the `painter` callback
/// with that layer, providing the `childPaintBounds` as the estimated paint
/// bounds of the child. The `childPaintBounds` can be used for debugging but
/// have no effect on painting.
///
/// The given layer must be an unattached orphan. (Providing a newly created
/// object, rather than reusing an existing layer, satisfies that
/// requirement.)
///
/// {@template flutter.rendering.PaintingContext.pushLayer.offset}
/// The `offset` is the offset to pass to the `painter`. In particular, it is
/// not an offset applied to the layer itself. Layers conceptually by default
/// have no position or size, though they can transform their contents. For
/// example, an [OffsetLayer] applies an offset to its children.
/// {@endtemplate}
///
/// If the `childPaintBounds` are not specified then the current layer's paint
/// bounds are used. This is appropriate if the child layer does not apply any
/// transformation or clipping to its contents. The `childPaintBounds`, if
/// specified, must be in the coordinate system of the new layer (i.e. as seen
/// by its children after it applies whatever transform to its contents), and
/// should not go outside the current layer's paint bounds.
///
/// See also:
///
///  * [addLayer], for pushing a layer without painting further contents
///    within it. ¿ AÍ¿ A˙  ¿ B¿ B  ¿ B&¿ B.  ¿ B7¿ B>   ¿ DZÅ!¿ EÄç/// Creates a painting context configured to paint into [childLayer].
///
/// The `bounds` are estimated paint bounds for debugging purposes. ¿ E¿ E.  ¿ E9¿ E?  ¿ DÓ¿ DÔ¿ Eäü¿ MIáp/// Clip further painting using a rectangle.
///
/// {@template flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
/// The `needsCompositing` argument specifies whether the child needs
/// compositing. Typically this matches the value of
/// [RenderObject.needsCompositing] for the caller. If false, this method
/// returns null, indicating that a layer is no longer necessary. If a render
/// object calling this method stores the `oldLayer` in its
/// [RenderObject.layer] field, it should set that field to null.
///
/// When `needsCompositing` is false, this method will use a more efficient
/// way to apply the layer effect than actually creating a layer.
/// {@endtemplate}
///
/// {@template flutter.rendering.PaintingContext.pushClipRect.offset}
/// The `offset` argument is the offset from the origin of the canvas'
/// coordinate system to the origin of the caller's coordinate system.
/// {@endtemplate}
///
/// The `clipRect` is the rectangle (in the caller's coordinate system) to use
/// to clip the painting done by [painter]. It should not include the
/// `offset`.
///
/// The `painter` callback will be called while the `clipRect` is applied. It
/// is called synchronously during the call to [pushClipRect].
///
/// The `clipBehavior` argument controls how the rectangle is clipped.
///
/// {@template flutter.rendering.PaintingContext.pushClipRect.oldLayer}
/// For the `oldLayer` argument, specify the layer created in the previous
/// frame. This gives the engine more information for performance
/// optimizations. Typically this is the value of [RenderObject.layer] that a
/// render object creates once, then reuses for all subsequent frames until a
/// layer is no longer needed (e.g. the render object no longer needs
/// compositing) or until the render object changes the type of the layer
/// (e.g. from opacity layer to a clip rect layer).
/// {@endtemplate} ¿ MV¿ M\  ¿ Mm¿ Mu  ¿ M|¿ MÇ  ¿ Mã¿ M§  ¿ MÆ!¿ M¥  ¿ M—¿ M·  ¿ M¬¿ M∆¿ M«¿ P"Ü«¿ SßÉN/// Clip further painting using a rounded rectangle.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.offset}
///
/// The `bounds` argument is used to specify the region of the canvas (in the
/// caller's coordinate system) into which `painter` will paint.
///
/// The `clipRRect` argument specifies the rounded-rectangle (in the caller's
/// coordinate system) to use to clip the painting done by `painter`. It
/// should not include the `offset`.
///
/// The `painter` callback will be called while the `clipRRect` is applied. It
/// is called synchronously during the call to [pushClipRRect].
///
/// The `clipBehavior` argument controls how the rounded rectangle is clipped.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ Sµ¿ Sª  ¿ SÃ¿ S‘  ¿ S€¿ S·  ¿ SË¿ SÔ  ¿ S˘¿ T  ¿ T"¿ T"  ¿ T@¿ TQ  ¿ T0¿ T4¿ T5¿ VÌÜë¿ ZIÉ&/// Clip further painting using a path.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.offset}
///
/// The `bounds` argument is used to specify the region of the canvas (in the
/// caller's coordinate system) into which `painter` will paint.
///
/// The `clipPath` argument specifies the [Path] (in the caller's coordinate
/// system) to use to clip the painting done by `painter`. It should not
/// include the `offset`.
///
/// The `painter` callback will be called while the `clipPath` is applied. It
/// is called synchronously during the call to [pushClipPath].
///
/// The `clipBehavior` argument controls how the path is clipped.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ ZV¿ Z\  ¿ Zm¿ Zu  ¿ Z|¿ ZÇ  ¿ Zâ¿ Zè  ¿ Zò¿ Z±  ¿ Zª"¿ Z¡  ¿ Zﬂ¿ ZÔ  ¿ Zœ¿ Z”¿ Z‘¿ ]ÇÑm¿ `ØÇ˚/// Blend further painting with a color filter.
///
/// {@macro flutter.rendering.PaintingContext.pushLayer.offset}
///
/// The `colorFilter` argument is the [ColorFilter] value to use when blending
/// the painting done by `painter`.
///
/// The `painter` callback will be called while the `colorFilter` is applied.
/// It is called synchronously during the call to [pushColorFilter].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer}
///
/// A [RenderObject] that uses this function is very likely to require its
/// [RenderObject.alwaysNeedsCompositing] property to return true. That informs
/// ancestor render objects that this render object will include a composited
/// layer, which, for example, causes them to use composited clips. ¿ `ø¿ `«  ¿ `Œ¿ `€  ¿ `Á¿ a   ¿ a
¿ a   ¿ aÛÖÓ¿ d»Ç¶/// Transform further painting using a matrix.
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.needsCompositing}
///
/// The `offset` argument is the offset to pass to `painter` and the offset to
/// the origin used by `transform`.
///
/// The `transform` argument is the [Matrix4] with which to transform the
/// coordinate system while calling `painter`. It should not include `offset`.
/// It is applied effectively after applying `offset`.
///
/// The `painter` callback will be called while the `transform` is applied. It
/// is called synchronously during the call to [pushTransform].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer} ¿ d÷¿ d‹  ¿ dÌ¿ dı  ¿ d¸¿ e  ¿ e¿ e(  ¿ e2¿ eC   ¿ gÂÑ‚¿ k≠Éñ/// Blend further painting with an alpha value.
///
/// The `offset` argument indicates an offset to apply to all the children
/// (the rendering created by `painter`).
///
/// The `alpha` argument is the alpha value to use when blending the painting
/// done by `painter`. An alpha value of 0 means the painting is fully
/// transparent and an alpha value of 255 means the painting is fully opaque.
///
/// The `painter` callback will be called while the `alpha` is applied. It
/// is called synchronously during the call to [pushOpacity].
///
/// {@macro flutter.rendering.PaintingContext.pushClipRect.oldLayer}
///
/// A [RenderObject] that uses this function is very likely to require its
/// [RenderObject.alwaysNeedsCompositing] property to return true. That informs
/// ancestor render objects that this render object will include a composited
/// layer, which, for example, causes them to use composited clips. ¿ kπ¿ k¡  ¿ k»	¿ kÕ  ¿ k”¿ kÏ  ¿ kˆ¿ l   ¿ lÀÄï¿ lﬁ   ¿ lÀ¿ lÃ ¿ mdêT¿ w[â‹/// An abstract set of layout constraints.
///
/// Concrete layout models (such as box) will create concrete subclasses to
/// communicate layout constraints between parents and children.
///
/// ## Writing a Constraints subclass
///
/// When creating a new [RenderObject] subclass with a new layout protocol, one
/// will usually need to create a new [Constraints] subclass to express the
/// input to the layout algorithms.
///
/// A [Constraints] subclass should be immutable (all fields final). There are
/// several members to implement, in addition to whatever fields, constructors,
/// and helper methods one may find useful for a particular layout protocol:
///
/// * The [isTight] getter, which should return true if the object represents a
///   case where the [RenderObject] class has no choice for how to lay itself
///   out. For example, [BoxConstraints] returns true for [isTight] when both
///   the minimum and maximum widths and the minimum and maximum heights are
///   equal.
///
/// * The [isNormalized] getter, which should return true if the object
///   represents its data in its canonical form. Sometimes, it is possible for
///   fields to be redundant with each other, such that several different
///   representations have the same implications. For example, a
///   [BoxConstraints] instance with its minimum width greater than its maximum
///   width is equivalent to one where the maximum width is set to that minimum
///   width (`2<w<1` is equivalent to `2<w<2`, since minimum constraints have
///   priority). This getter is used by the default implementation of
///   [debugAssertIsValid].
///
/// * The [debugAssertIsValid] method, which should assert if there's anything
///   wrong with the constraints object. (We use this approach rather than
///   asserting in constructors so that our constructors can be `const` and so
///   that it is possible to create invalid constraints temporarily while
///   building valid ones.) See the implementation of
///   [BoxConstraints.debugAssertIsValid] for an example of the detailed checks
///   that can be made.
///
/// * The [==] operator and the [hashCode] getter, so that constraints can be
///   compared for equality. If a render object is given constraints that are
///   equal, then the rendering library will avoid laying the object out again
///   if it is not dirty.
///
/// * The [toString] method, which should describe the constraints so that they
///   appear in a usefully readable form in the output of [debugDumpRenderTree]. ¿ wkÄ≠ ¿ x
¿ xÄî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.   ¿ x[¿ xoG/// Whether there is exactly one size possible given these constraints.   ¿ x{X¿ x∆?/// Whether the constraint is expressed in a consistent manner.   ¿ x◊Ñﬂ¿ }Ñ/// Asserts that the constraints are valid.
///
/// This might involve checks more detailed than [isNormalized].
///
/// For example, the [BoxConstraints] subclass verifies that the constraints
/// are not [double.nan].
///
/// If the `isAppliedConstraint` argument is true, then even stricter rules
/// are enforced. This argument is set to true when checking constraints that
/// are about to be applied to a [RenderObject] during layout, as opposed to
/// constraints that may be further affected by other constraints. For
/// example, the asserts for verifying the validity of
/// [RenderConstrainedBox.additionalConstraints] do not set this argument, but
/// the asserts for verifying the argument passed to the [RenderObject.layout]
/// method do.
///
/// The `informationCollector` argument takes an optional callback which is
/// called when an exception is to be thrown. The collected information is
/// then included in the message after the error line.
///
/// Returns the same as [isNormalized] if asserts are disabled. ¿ }' ¿ }-  ¿ }M*¿ }d  ¿ }B¿ wA¿ wB¿ äÜê¿ Ç˜Éf/// A reference to the semantics tree.
///
/// The framework maintains the semantics tree (used for accessibility and
/// indexing) only when there is at least one client holding an open
/// [SemanticsHandle].
///
/// The framework notifies the client that it has updated the semantics tree by
/// calling the [listener] callback. When the client no longer needs the
/// semantics tree, the client can call [dispose] on the [SemanticsHandle],
/// which stops these callbacks and closes the [SemanticsHandle]. When all the
/// outstanding [SemanticsHandle] objects are closed, the framework stops
/// updating the semantics tree.
///
/// To obtain a [SemanticsHandle], call [PipelineOwner.ensureSemantics] on the
/// [PipelineOwner] for the render tree from which you wish to read semantics.
/// You can obtain the [PipelineOwner] using the [RenderObject.owner] property. ¿ ÉÄ»¿ É¿ É¿ É ¿ É¿ É,  ¿ É2¿ É8  	¿ ÉI¿ ÉO¿ É]¿ ÉV¿ ÉP¿ ÉY¿ Éo¿ Éh¿ Éq¿ É◊¿ ÉÎ  ¿ Éˆf¿ ÑTG/// The callback that will be notified when the semantics tree updates.  ¿ ÑaÅ∑¿ ÖÜÅ/// Closes the semantics handle and stops calling [listener] when the
/// semantics updates.
///
/// When all the outstanding [SemanticsHandle] objects for a given
/// [PipelineOwner] are closed, the [PipelineOwner] will stop updating the
/// semantics tree.  ¿ Öp¿ Öq ¿ ÜπÄ¿ çKá(/// The pipeline owner manages the rendering pipeline.
///
/// The pipeline owner provides an interface for driving the rendering pipeline
/// and stores the state about which render objects have requested to be visited
/// in each stage of the pipeline. To flush the pipeline, call the following
/// functions in order:
///
/// 1. [flushLayout] updates any render objects that need to compute their
///    layout. During this phase, the size and position of each render
///    object is calculated. Render objects might dirty their painting or
///    compositing state during this phase.
/// 2. [flushCompositingBits] updates any render objects that have dirty
///    compositing bits. During this phase, each render object learns whether
///    any of its children require compositing. This information is used during
///    the painting phase when selecting how to implement visual effects such as
///    clipping. If a render object has a composited child, it needs to use a
///    [Layer] to create the clip in order for the clip to apply to the
///    composited child (which will be painted into its own [Layer]).
/// 3. [flushPaint] visits any render objects that need to paint. During this
///    phase, render objects get a chance to record painting commands into
///    [PictureLayer]s and construct other composited [Layer]s.
/// 4. Finally, if semantics are enabled, [flushSemantics] will compile the
///    semantics for the render objects. This semantic information is used by
///    assistive technology to improve the accessibility of the render tree.
///
/// The [RendererBinding] holds the pipeline owner for the render objects that
/// are visible on screen. You can create other pipeline owners to manage
/// off-screen objects, which can flush their pipelines independently of the
/// on-screen render objects. ¿ ç]Å] ¿ éC¿ éPÄ€/// Creates a pipeline owner.
///
/// Typically created by the binding (e.g., [RendererBinding]), but can be
/// created separately from the binding to drive off-screen render objects
/// through the rendering pipeline.¿ éW¿ é]  ¿ ét¿ éz  ¿ éñ¿ éú   ¿ éæÅ™¿ êVÅu/// Called when a render object associated with this pipeline owner wishes to
/// update its visual appearance.
///
/// Typical implementations of this function will schedule a task to flush the
/// various stages of the pipeline. This function might be called multiple
/// times in quick succession. Implementations should take care to discard
/// duplicate calls quickly. ¿ êmÄ’¿ ë+Ä°/// Called whenever this pipeline owner creates a semantics object.
///
/// Typical implementations will schedule the creation of the initial
/// semantics tree. ¿ ëGÄª¿ ëÍÄà/// Called whenever this pipeline owner disposes its semantics owner.
///
/// Typical implementations will tear down the semantics tree. ¿ ìº¿ ì   ¿ ó∞#¿ óµ ¿ óŒ¿ ó◊9¿ óÍ ¿ ò¿ ò¿ ò ¿ ò¿ ò¿ ô0¿ ô5 ¿ ôI¿ ¢‡0¿ ¢Â ¿ £¿ •N¿ •, ¿ •_¿ •`¿ •Q¿ •^¿ •R¿ ®8¿ ®& ¿ ®I¿ ®J¿ ®;¿ ®H¿ ®<¿ ©g¿ ©l ¿ ©¿ ≥¿ ≥è  ¿ ¥∂$¿ ¥∫ ¿ ¥Ÿ¿ πß!¿ π¨ ¿ π√¿ πÃA¿ π‰ ¿ ∫¿ ∫¿ π˝¿ ∫
¿ π˛¿ ìÄ´¿ ì£|/// The unique object managed by this pipeline that has no parent.
///
/// This object does not have to be a [RenderObject].   ¿ ì◊Ä¶¿ ì€  ¿ ì‰¿ ìÛ   ¿ òÅ¿ ôÄ‹/// Whether this pipeline is currently in the layout phase.
///
/// Specifically, whether [flushLayout] is currently running.
///
/// Only valid when asserts are enabled; in release builds, this
/// always returns false.   ¿ ®PÅ¿ ©@Ä⁄/// Whether this pipeline is currently in the paint phase.
///
/// Specifically, whether [flushPaint] is currently running.
///
/// Only valid when asserts are enabled. In release builds,
/// this always returns false.   ¿ ±CÇ9¿ ≥ZÅÓ/// The object that is managing semantics for this pipeline owner, if any.
///
/// An owner is created by [ensureSemantics]. The owner is valid for as long
/// there are [SemanticsHandle]s returned by [ensureSemantics] that have not
/// yet been disposed. Once the last handle has been disposed, the
/// [semanticsOwner] field will revert to null, and the previous owner will be
/// disposed.
///
/// When [semanticsOwner] is null, the [PipelineOwner] skips all steps
/// relating to semantics.   ¿ ≥£Å¿ ¥rÄæ/// The number of clients registered to listen for semantics.
///
/// The number is increased whenever [ensureSemantics] is called and decreased
/// when [SemanticsHandle.dispose] is called.   ¿ íÅ¿ íœÄ∫/// Calls [onNeedVisualUpdate] if [onNeedVisualUpdate] is not null.
///
/// Used to notify the pipeline owner that an associated render object wishes
/// to update its visual appearance.   ¿ ôSà!¿ ö¿ÅY/// Update the layout information for all dirty render objects.
///
/// This function is one of the core stages of the rendering pipeline. Layout
/// information is cleaned prior to painting so that render objects will
/// appear on screen in their up-to-date locations.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ £CÅÃ¿ £H  ¿ £h¿ £v   ¿ •eÇ™¿ ¶
Äó/// Updates the [RenderObject.needsCompositing] bits.
///
/// Called as part of the rendering pipeline after [flushLayout] and before
/// [flushPaint].   ¿ ©âá∂¿ ´Åg/// Update the display lists for all render objects.
///
/// This function is one of the core stages of the rendering pipeline.
/// Painting occurs after layout and before the scene is recomposited so that
/// scene is composited with up-to-date display lists for every render object.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ ¥ﬂÉ≤¿ ∑`ÇX/// Opens a [SemanticsHandle] and calls [listener] whenever the semantics tree
/// updates.
///
/// The [PipelineOwner] updates the semantics tree only when there are clients
/// that wish to use the semantics tree. These clients express their interest
/// by holding [SemanticsHandle] objects that notify them whenever the
/// semantics tree updates.
///
/// Clients can close their [SemanticsHandle] by calling
/// [SemanticsHandle.dispose]. Once all the outstanding [SemanticsHandle]
/// objects for a given [PipelineOwner] are closed, the [PipelineOwner] stops
/// maintaining the semantics tree. ¿ ∑r¿ ∑Å   ¿ ∏ïÅ¿ ∏ö    ¿ ∫Öà¿ ºÅ„/// Update the semantics for render objects marked as needing a semantics
/// update.
///
/// Initially, only the root node, as scheduled by
/// [RenderObject.scheduleInitialSemantics], needs a semantics update.
///
/// This function is one of the core stages of the rendering pipeline. The
/// semantics are compiled after painting and only after
/// [RenderObject.scheduleInitialSemantics] has been called.
///
/// See [RendererBinding] for an example of how this function is used.    ¿ øû¿e0¿ ŸˆöH/// An object in the render tree.
///
/// The [RenderObject] class hierarchy is the core of the rendering
/// library's reason for being.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=zmbmrw07qBc}
///
/// [RenderObject]s have a [parent], and have a slot called [parentData] in
/// which the parent [RenderObject] can store child-specific data, for example,
/// the child position. The [RenderObject] class also implements the basic
/// layout and paint protocols.
///
/// The [RenderObject] class, however, does not define a child model (e.g.
/// whether a node has zero, one, or more children). It also doesn't define a
/// coordinate system (e.g. whether children are positioned in Cartesian
/// coordinates, in polar coordinates, etc) or a specific layout protocol (e.g.
/// whether the layout is width-in-height-out, or constraint-in-size-out, or
/// whether the parent sets the size and position of the child before or after
/// the child lays out, etc; or indeed whether the children are allowed to read
/// their parent's [parentData] slot).
///
/// The [RenderBox] subclass introduces the opinion that the layout
/// system uses Cartesian coordinates.
///
/// ## Lifecycle
///
/// A [RenderObject] must [dispose] when it is no longer needed. The creator
/// of the object is responsible for disposing of it. Typically, the creator is
/// a [RenderObjectElement], and that element will dispose the object it creates
/// when it is unmounted.
///
/// [RenderObject]s are responsible for cleaning up any expensive resources
/// they hold when [dispose] is called, such as [Picture] or [Image] objects.
/// This includes any [Layer]s that the render object has directly created. The
/// base implementation of dispose will nullify the [layer] property. Subclasses
/// must also nullify any other layer(s) it directly creates.
///
/// ## Writing a RenderObject subclass
///
/// In most cases, subclassing [RenderObject] itself is overkill, and
/// [RenderBox] would be a better starting point. However, if a render object
/// doesn't want to use a Cartesian coordinate system, then it should indeed
/// inherit from [RenderObject] directly. This allows it to define its own
/// layout protocol by using a new subclass of [Constraints] rather than using
/// [BoxConstraints], and by potentially using an entirely new set of objects
/// and values to represent the result of the output rather than just a [Size].
/// This increased flexibility comes at the cost of not being able to rely on
/// the features of [RenderBox]. For example, [RenderBox] implements an
/// intrinsic sizing protocol that allows you to measure a child without fully
/// laying it out, in such a way that if that child changes size, the parent
/// will be laid out again (to take into account the new dimensions of the
/// child). This is a subtle and bug-prone feature to get right.
///
/// Most aspects of writing a [RenderBox] apply to writing a [RenderObject] as
/// well, and therefore the discussion at [RenderBox] is recommended background
/// reading. The main differences are around layout and hit testing, since those
/// are the aspects that [RenderBox] primarily specializes.
///
/// ### Layout
///
/// A layout protocol begins with a subclass of [Constraints]. See the
/// discussion at [Constraints] for more information on how to write a
/// [Constraints] subclass.
///
/// The [performLayout] method should take the [constraints], and apply them.
/// The output of the layout algorithm is fields set on the object that describe
/// the geometry of the object for the purposes of the parent's layout. For
/// example, with [RenderBox] the output is the [RenderBox.size] field. This
/// output should only be read by the parent if the parent specified
/// `parentUsesSize` as true when calling [layout] on the child.
///
/// Anytime anything changes on a render object that would affect the layout of
/// that object, it should call [markNeedsLayout].
///
/// ### Hit Testing
///
/// Hit testing is even more open-ended than layout. There is no method to
/// override, you are expected to provide one.
///
/// The general behavior of your hit-testing method should be similar to the
/// behavior described for [RenderBox]. The main difference is that the input
/// need not be an [Offset]. You are also allowed to use a different subclass of
/// [HitTestEntry] when adding entries to the [HitTestResult]. When the
/// [handleEvent] method is called, the same object that was added to the
/// [HitTestResult] will be passed in, so it can be used to track information
/// like the precise coordinate of the hit, in whatever coordinate system is
/// used by the new layout protocol.
///
/// ### Adapting from one protocol to another
///
/// In general, the root of a Flutter render object tree is a [RenderView]. This
/// object has a single child, which must be a [RenderBox]. Thus, if you want to
/// have a custom [RenderObject] subclass in the render tree, you have two
/// choices: you either need to replace the [RenderView] itself, or you need to
/// have a [RenderBox] that has your class as its child. (The latter is the much
/// more common case.)
///
/// This [RenderBox] subclass converts from the box protocol to the protocol of
/// your class.
///
/// In particular, this means that for hit testing it overrides
/// [RenderBox.hitTest], and calls whatever method you have in your class for
/// hit testing.
///
/// Similarly, it overrides [performLayout] to create a [Constraints] object
/// appropriate for your class and passes that to the child's [layout] method.
///
/// ### Layout interactions between render objects
///
/// In general, the layout of a render object should only depend on the output of
/// its child's layout, and then only if `parentUsesSize` is set to true in the
/// [layout] call. Furthermore, if it is set to true, the parent must call the
/// child's [layout] if the child is to be rendered, because otherwise the
/// parent will not be notified when the child changes its layout outputs.
///
/// It is possible to set up render object protocols that transfer additional
/// information. For example, in the [RenderBox] protocol you can query your
/// children's intrinsic dimensions and baseline geometry. However, if this is
/// done then it is imperative that the child call [markNeedsLayout] on the
/// parent any time that additional information changes, if the parent used it
/// in the last layout phase. For an example of how to implement this, see the
/// [RenderBox.markNeedsLayout] method. It overrides
/// [RenderObject.markNeedsLayout] so that if a parent has queried the intrinsic
/// or baseline information, it gets marked dirty whenever the child's geometry
/// changes. ¿ ⁄RÄ∏ ¿ ⁄Ñ¿ ⁄ê//// Initializes internal fields for subclasses.  ¿ ﬂû¿ ﬂ£ ¿ ﬂ¥¿ ‰ìÉ®¿ Ë1És/// Data for use by the parent render object.
///
/// The parent data is used by the render object that lays out this object
/// (typically this object's parent in the render tree) to store information
/// relevant to itself and to any other nodes who happen to know exactly what
/// the data means. The parent data is opaque to the child.
///
///  * The parent data field must not be directly set, except by calling
///    [setupParentData] on the parent node.
///  * The parent data can be set before the child is added to the parent, by
///    calling [setupParentData] on the future parent node.
///  * The conventions for using the parent data depend on the layout protocol
///    used between the parent and child. For example, in box layout, the
///    parent data is completely opaque but in sector layout the child is
///    permitted to read some fields of the parent data. ¿ Ô	ÄÊ¿ Ô„Ä√/// The object responsible for creating this render object.
///
/// Used in debug messages.
///
/// See also:
///
///  * [DebugCreator], which the [widgets] library uses as values for this field. ¿ ÙÒ"¿ Ùˆ ¿ ı¿ ı˝"¿ ˆ ¿ ˆ¿ ˜'¿ ˜  ¿ ¯Y¿ ¯_  ¿ ¯z"¿ ¯ ¿ ¯ó¿Y¿^ ¿m¿v¿Ñ  ¿9)¿> ¿]¿Ì¿˙  ¿åÇ¿}Å“/// When true, debugAssertDoesMeetConstraints() is currently
/// executing asserts for verifying the consistent behavior of
/// intrinsic dimensions methods.
///
/// This should only be set by debugAssertDoesMeetConstraints()
/// implementations. It is used by tests to selectively ignore
/// custom layout callbacks. It should not be set outside of
/// debugAssertDoesMeetConstraints(), and should not be checked in
/// release mode (where it will always be false).¿ó¿cÄ!¿cÖ ¿cú¿dz&¿dè  ¿kñ¿k†  ¿yN¿y7 ¿yF¿yQ¿y`¿yR¿ya¿yb¿{P(¿{U ¿{s¿Åà¿Åí  ¿å=¿åB ¿åP¿é∞(¿éµ ¿é”¿‡Ø5¿‡«  ¿‚ì!¿‚ò ¿‚∞¿‚∏¿‚«  ¿ ﬁùÄ˝¿ ﬂb/// Whether this has been disposed.
///
/// If asserts are disabled, this property is always null.   ¿ ÙÄ‚¿ Ù¿Ä¢/// Whether [performResize] for this render object is currently running.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// false.   ¿ ıÄ‚¿ ıÃÄ¢/// Whether [performLayout] for this render object is currently running.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// false.   ¿ ˆ$Ä€¿ ˆ◊Äë/// The render object that is actively computing layout.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// null.   ¿ ˜.Å(¿ ¯%Ä·/// Whether the parent render object is permitted to use this render object's
/// size.
///
/// Determined by the `parentUsesSize` parameter to [layout].
///
/// Only valid when asserts are enabled. In release builds, throws.   ¿ ¯°î›¿ ˙Åc/// Whether tree mutations are currently permitted.
///
/// This is only useful during layout. One should also not mutate the tree at
/// other times (e.g. during paint or while assembling the semantic tree) but
/// this function does not currently enforce those conventions.
///
/// Only valid when asserts are enabled. This will throw in release builds.   ¿ÇF¿°   ¿Ç¿É¿!Ç5¿ÕÅí/// Whether this render object's layout information is dirty.
///
/// This is only set in debug mode. In general, render objects should not need
/// to condition their runtime behavior on whether they are dirty or not,
/// since they should only be marked dirty immediately prior to being laid
/// out and painted. In release builds, this throws.
///
/// It is intended to be used by tests and asserts.   ¿öÄú¿ıO/// Whether [invokeLayoutCallback] for this render object is currently running.   ¿gÅÉ¿4Äß/// The layout constraints most recently supplied by the parent.
///
/// If layout has not yet happened, accessing this getter will
/// throw a [StateError] exception.  ¿¿¿RüÉZ¿U‚É/// Whether the constraints are the only input to the sizing algorithm (in
/// particular, child nodes have no impact).
///
/// Returning false is always correct, but returning true can be more
/// efficient when computing the size of this render object because we don't
/// need to recompute the size if the constraints don't change.
///
/// Typically, subclasses will always return the same value. If the value can
/// change, then, when it does change, the subclass should make sure to call
/// [markNeedsLayoutForSizedByParentChange].
///
/// Subclasses that return true must not change the dimensions of this render
/// object in [performLayout]. Instead, that work should be done by
/// [performResize] or - for subclasses of [RenderBox] - in
/// [RenderBox.computeDryLayout].  ¿UÃ¿UÕ¿b•Äÿ¿cQÄö/// Whether [paint] for this render object is currently running.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// false.   ¿c¶Ä—¿dQÄâ/// The render object that is actively painting.
///
/// Only valid when asserts are enabled. In release builds, always returns
/// null.   ¿d•É£¿h-É\/// Whether this render object repaints separately from its parent.
///
/// Override this in subclasses to indicate that instances of your class ought
/// to repaint independently. For example, render objects that repaint
/// frequently might want to repaint themselves without requiring their parent
/// to repaint.
///
/// If this getter returns true, the [paintBounds] are applied to this object
/// and all descendants. The framework invokes [RenderObject.updateCompositedLayer]
/// to create an [OffsetLayer] and assigns it to the [layer] field.
/// Render objects that declare themselves as repaint boundaries must not replace
/// the layer created by the framework.
///
/// If the value of this getter changes, [markNeedsCompositingBitsUpdate] must
/// be called.
///
/// See [RepaintBoundary] for more information about how repaint boundaries function.   ¿iØÅ„¿krÅú/// Whether this render object always needs compositing.
///
/// Override this in subclasses to indicate that your paint function always
/// creates at least one composited layer. For example, videos should return
/// true if they use hardware decoders.
///
/// You must call [markNeedsCompositingBitsUpdate] if the value of this getter
/// changes. (This is implied when [adoptChild] or [dropChild] are called.)  ¿k\¿k]¿q Ü◊¿wJÖˆ/// The compositing layer that this render object uses to repaint.
///
/// If this render object is not a repaint boundary, it is the responsibility
/// of the [paint] method to populate this field. If [needsCompositing] is
/// true, this field may be populated with the root-most layer used by the
/// render object implementation. When repainting, instead of creating a new
/// layer the render object may update the layer stored in this field for better
/// performance. It is also OK to leave this field as null and create a new
/// layer on every repaint, but without the performance benefit. If
/// [needsCompositing] is false, this field must be set to null either by
/// never populating this field, or by setting it to null when the value of
/// [needsCompositing] changes from true to false.
///
/// If a new layer is created and stored in some other field on the render
/// object, the render object must use a [LayerHandle] to store it. A layer
/// handle will prevent the layer from being disposed before the render
/// object is finished with it, and it will also make sure that the layer
/// gets appropriately disposed when the render object creates a replacement
/// or nulls it out. The render object must null out the [LayerHandle.layer]
/// in its [dispose] method.
///
/// If this render object is a repaint boundary, the framework automatically
/// creates an [OffsetLayer] and populates this field prior to calling the
/// [paint] method. The [paint] method must not replace the value of this
/// field.  ¿w)¿w*¿w€Å6¿wÏ  ¿wÚ¿x  ¿w€¿w‹¿yhÅ‰¿zΩÅ2/// In debug mode, the compositing layer that this render object uses to repaint.
///
/// This getter is intended for debugging purposes only. In release builds, it
/// always returns null. In debug builds, it returns the layer even if the layer
/// is dirty.
///
/// For production code, consider [layer].   ¿Å…Å‡¿ÉÅ6/// Whether we or one of our descendants has a compositing layer.
///
/// If this node needs compositing as indicated by this bit, then all ancestor
/// nodes will also need compositing.
///
/// Only legal to call after [PipelineOwner.flushLayout] and
/// [PipelineOwner.flushCompositingBits] have been called.   ¿àôÉ°¿ã≥ÇÙ/// Whether this render object's paint information is dirty.
///
/// This is only set in debug mode. In general, render objects should not need
/// to condition their runtime behavior on whether they are dirty or not,
/// since they should only be marked dirty immediately prior to being laid
/// out and painted. (In release builds, this throws.)
///
/// It is intended to be used by tests and asserts.
///
/// It is possible (and indeed, quite common) for [debugNeedsPaint] to be
/// false and [debugNeedsLayout] to be true. The render object will still be
/// repainted in the next frame when this is the case, because the
/// [markNeedsPaint] method is implicitly called by the framework after a
/// render object is laid out, prior to the paint phase.   ¿åYÇT¿éÅì/// Whether this render object's layer information is dirty.
///
/// This is only set in debug mode. In general, render objects should not need
/// to condition their runtime behavior on whether they are dirty or not,
/// since they should only be marked dirty immediately prior to being laid
/// out and painted. (In release builds, this throws.)
///
/// It is intended to be used by tests and asserts.   ¿∫Å¿ªÄ˙/// An estimate of the bounds within which this render object will paint.
/// Useful for debugging flags such as [debugPaintLayerBordersEnabled].
///
/// These are also the bounds used by [showOnScreen] to make a [RenderObject]
/// visible on screen.   ¿‡ÈÅ ¿·    ¿‚ÄÇ¿‚Äe/// The bounding box, in the local coordinate system, of this
/// object, for accessibility purposes.   ¿‚÷Å∫¿‰3Å9/// The semantics of this render object.
///
/// Exposed only for testing and debugging. To learn about the semantics of
/// render objects in production, obtain a [SemanticsHandle] from
/// [PipelineOwner.ensureSemantics].
///
/// Only valid in debug and profile mode. In release builds, always returns
/// null.   ;¿ €Éã¿ ›…Çó/// Cause the entire subtree rooted at the given [RenderObject] to be marked
/// dirty for layout, paint, etc, so that the effects of a hot reload can be
/// seen, or so that the effect of changing a global debug flag (such as
/// [debugPaintSizeEnabled]) can be applied.
///
/// This is called by the [RendererBinding] in response to the
/// `ext.flutter.reassemble` hook, which is used by development tools when the
/// application code has changed, to cause the widget tree to pick up any
/// changed implementations.
///
/// This is expensive and should not be called except during development.
///
/// See also:
///
///  * [BindingBase.reassembleApplication]   ¿ ﬂæÑƒ¿ ‚°Ç∞/// Release any resources held by this render object.
///
/// The object that creates a RenderObject is in charge of disposing it.
/// If this render object has created any children directly, it must dispose
/// of those children in this method as well. It must not dispose of any
/// children that were created by some other object, such as
/// a [RenderObjectElement]. Those children will be disposed when that
/// element unmounts, which may be delayed if the element is moved to another
/// part of the tree.
///
/// Implementations of this method must end with a call to the inherited
/// method, as in `super.dispose()`.
///
/// The object is no longer usable after calling dispose.  ¿ ‚ã¿ ‚å¿ Ë@Å¿ ÈÄø/// Override to setup parent data correctly for your children.
///
/// You can call this function to set up the parent data for child before the
/// child is added to the parent's child list. ¿ È¿ È5   ¿ È√Å˝¿ ÍƒÄÁ/// Called by subclasses when they decide a render object is a child.
///
/// Only for use by subclasses when changing their child lists. Calling this
/// in other cases will lead to an inconsistent tree and probably cause crashes. ¿ Íœ¿ Í›  ¿ Í≥¿ Í¥¿ ÎƒÇp¿ ÏœÄÒ/// Called by subclasses when they decide a render object is no longer a child.
///
/// Only for use by subclasses when changing their child lists. Calling this
/// in other cases will lead to an inconsistent tree and probably cause crashes. ¿ ÏŸ¿ ÏÁ  ¿ Ïæ¿ Ïø¿ Ó8ÄÕ¿ Ó◊Äì/// Calls visitor for each immediate child of this render object.
///
/// Override in subclasses with children and call the visitor for each child. ¿ ÓÂ¿ Ó˙   ¿ ÔÙÑ¿ Ô˘  ¿ ¿   ¿ ¿ &  ¿ 0¿ <   ¿ÃÑQ¿›  ¿‰¿Û  ¿Ã¿Õ¿Å}¿gÅ?/// Verify that the object's constraints are being met. Override
/// this function in a subclass to verify that your state matches
/// the constraints object. This function is only called in checked
/// mode and only when needsLayout is false. If the constraints are
/// not met, it should assert or throw an exception.  ¿U¿V¿†Ç*¿•    ¿Œã∆¿$Âá≈/// Mark this render object's layout information as dirty, and either register
/// this object with its [PipelineOwner], or defer to the parent, depending on
/// whether this object is a relayout boundary or not respectively.
///
/// ## Background
///
/// Rather than eagerly updating layout information in response to writes into
/// a render object, we instead mark the layout information as dirty, which
/// schedules a visual update. As part of the visual update, the rendering
/// pipeline updates the render object's layout information.
///
/// This mechanism batches the layout work so that multiple sequential writes
/// are coalesced, removing redundant computation.
///
/// If a render object's parent indicates that it uses the size of one of its
/// render object children when computing its layout information, this
/// function, when called for the child, will also mark the parent as needing
/// layout. In that case, since both the parent and the child need to have
/// their layout recomputed, the pipeline owner is only notified about the
/// parent; when the parent is laid out, it will call the child's [layout]
/// method and thus the child will be laid out as well.
///
/// Once [markNeedsLayout] has been called on a render object,
/// [debugNeedsLayout] returns true for that render object until just after
/// the pipeline owner has called [layout] on the render object.
///
/// ## Special cases
///
/// Some subclasses of [RenderObject], notably [RenderBox], have other
/// situations in which the parent needs to be notified if the child is
/// dirtied (e.g., if the child's intrinsic dimensions or baseline changes).
/// Such subclasses override markNeedsLayout and either call
/// `super.markNeedsLayout()`, in the normal case, or call
/// [markParentNeedsLayout], in the case where the parent needs to be laid out
/// as well as the child.
///
/// If [sizedByParent] has changed, calls
/// [markNeedsLayoutForSizedByParentChange] instead of [markNeedsLayout].   ¿(òÉ)¿*ZÅù/// Mark this render object's layout information as dirty, and then defer to
/// the parent.
///
/// This function should only be called from [markNeedsLayout] or
/// [markNeedsLayoutForSizedByParentChange] implementations of subclasses that
/// introduce more reasons for deferring the handling of dirty layout to the
/// parent. See [markNeedsLayout] for details.
///
/// Only call this if [parent] is not null.  ¿*H¿*I¿+≈Å∑¿-ÅB/// Mark this render object's layout information as dirty (like
/// [markNeedsLayout]), and additionally also handle any necessary work to
/// handle the case where [sizedByParent] has changed value.
///
/// This should be called whenever [sizedByParent] might have changed.
///
/// Only call this if [parent] is not null.   ¿-ÄÄ†¿-Ö    ¿.$Åí¿.)    ¿/˜e¿0  ¿0¿0-   ¿0`o¿0l  ¿0é¿0ú   ¿0”Çr¿1ÁÅ/// Bootstrap the rendering pipeline by scheduling the very first layout.
///
/// Requires this render object to be attached and that this render object
/// is the root of the render tree.
///
/// See [RenderView] for an example of how this function is used.   ¿3IÉ¿¿3{   ¿3I¿3J¿3P¿3r¿3Q¿7ô∏¿<•Ö7/// Compute the layout for this render object.
///
/// This method is the main entry point for parents to ask their children to
/// update their layout information. The parent passes a constraints object,
/// which informs the child as to which layouts are permissible. The child is
/// required to obey the given constraints.
///
/// If the parent reads information computed during the child's layout, the
/// parent must pass true for `parentUsesSize`. In that case, the parent will
/// be marked as needing layout whenever the child is marked as needing layout
/// because the parent's layout information depends on the child's layout
/// information. If the parent uses the default value (false) for
/// `parentUsesSize`, the child can change its layout information (subject to
/// the given constraints) without informing the parent.
///
/// Subclasses should not override [layout] directly. Instead, they should
/// override [performResize] and/or [performLayout]. The [layout] method
/// delegates the actual work to [performResize] and [performLayout].
///
/// The parent's [performLayout] method should call the [layout] of all its
/// children unconditionally. It is the [layout] method's responsibility (as
/// implemented here) to return early if the child does not need to do any
/// work to update its layout information. ¿<¨¿<π  ¿<«¿<Õ  ¿<s¿<t¿<z¿<ú¿<{¿<›¿P…Å“¿RáÅü/// If a subclass has a "size" (the state controlled by `parentUsesSize`,
/// whatever it is in the subclass, e.g. the actual `size` property of
/// [RenderBox]), and the subclass verifies that in debug mode this "size"
/// property isn't used when [debugCanParentUseSize] isn't set, then that
/// subclass should override [debugResetSize] to reapply the current values of
/// [debugCanParentUseSize] to that state.  ¿Ru¿Rv¿U˝ÇÛ¿X‡Ç¥/// {@template flutter.rendering.RenderObject.performResize}
/// Updates the render objects size using only the constraints.
///
/// Do not call this function directly: call [layout] instead. This function
/// is called by [layout] when there is actually work to be done by this
/// render object during layout. The layout constraints provided by your
/// parent are available via the [constraints] getter.
///
/// This function is called only if [sizedByParent] is true.
/// {@endtemplate}
///
/// Subclasses that set [sizedByParent] to true should override this method to
/// compute their size. Subclasses of [RenderBox] should consider overriding
/// [RenderBox.computeDryLayout] instead.  ¿XŒ¿Xœ¿XÙÑï¿]yÑL/// Do the work of computing the layout for this render object.
///
/// Do not call this function directly: call [layout] instead. This function
/// is called by [layout] when there is actually work to be done by this
/// render object during layout. The layout constraints provided by your
/// parent are available via the [constraints] getter.
///
/// If [sizedByParent] is true, then this function should not actually change
/// the dimensions of this render object. Instead, that work should be done by
/// [performResize]. If [sizedByParent] is false, then this function should
/// both change the dimensions of this render object and instruct its children
/// to layout.
///
/// In implementing this function, you must call [layout] on each of your
/// children, passing true for parentUsesSize if your layout information is
/// dependent on your child's layout information. Passing true for
/// parentUsesSize ensures that this render object will undergo layout if the
/// child undergoes layout. Otherwise, the child can change its layout
/// information without informing this render object.  ¿]g¿]h¿]çÖ¿aÉO/// Allows mutations to be made to this object's child list (and any
/// descendants) as well as to any other dirty nodes in the render tree owned
/// by the same [PipelineOwner] as this object. The `callback` argument is
/// invoked synchronously, and the mutations are allowed only during that
/// callback's execution.
///
/// This exists to allow child lists to be built on-demand during layout (e.g.
/// based on the object's size), and to enable nodes to be moved around the
/// tree as this happens (e.g. to handle [GlobalKey] reparenting), while still
/// ensuring that any particular node is only laid out once per frame.
///
/// Calling this function disables a number of assertions that are intended to
/// catch likely bugs. As such, using this function is generally discouraged.
///
/// This function can only be called during layout.¿a"¿a"¿a9¿aL  ¿`˚¿`¸¿hLÅ_¿iJÄÓ/// Called, in debug mode, if [isRepaintBoundary] is true, when either the
/// this render object or its parent attempt to paint.
///
/// This can be used to record metrics about whether the node should actually
/// be a repaint boundary. ¿in¿it  ¿iä¿iê  ¿iÑ¿iü¿k∏ÖD¿ppÉ·/// Update the composited layer owned by this render object.
///
/// This method is called by the framework when [isRepaintBoundary] is true.
///
/// If [oldLayer] is `null`, this method must return a new [OffsetLayer]
/// (or subtype thereof). If [oldLayer] is not `null`, then this method must
/// reuse the layer instance that is provided - it is an error to create a new
/// layer in this instance. The layer will be disposed by the framework when
/// either the render object is disposed or if it is no longer a repaint
/// boundary.
///
/// The [OffsetLayer.offset] property will be managed by the framework and
/// must not be updated by this method.
///
/// If a property of the composited layer needs to be updated, the render object
/// must call [markNeedsCompositedLayerUpdate] which will schedule this method
/// to be called without repainting children. If this widget was marked as
/// needing to paint and needing a composited layer update, this method is only
/// called once. ¿pá(¿p®   ¿{°Ö„¿~ˆÉ//// Mark the compositing state for this render object as dirty.
///
/// This is called to indicate that the value for [needsCompositing] needs to
/// be recomputed during the next [PipelineOwner.flushCompositingBits] engine
/// phase.
///
/// When the subtree is mutated, we need to recompute our
/// [needsCompositing] bit, and some of our ancestors need to do the
/// same (in case ours changed in a way that will change theirs). To
/// this end, [adoptChild] and [dropChild] call this method, and, as
/// necessary, this method calls the parent's, etc, walking up the
/// tree to mark all the nodes that need updating.
///
/// This method does not schedule a rendering frame, because since
/// it cannot be the case that _only_ the compositing bits changed,
/// something else will have scheduled a frame for us.   ¿É≠ÑË¿É≤    ¿é›â«¿í¶Éõ/// Mark this render object as having changed its visual appearance.
///
/// Rather than eagerly updating this render object's display list
/// in response to writes, we instead mark the render object as needing to
/// paint, which schedules a visual update. As part of the visual update, the
/// rendering pipeline will give this render object an opportunity to update
/// its display list.
///
/// This mechanism batches the painting work so that multiple sequential
/// writes are coalesced, removing redundant computation.
///
/// Once [markNeedsPaint] has been called on a render object,
/// [debugNeedsPaint] returns true for that render object until just after
/// the pipeline owner has called [paint] on the render object.
///
/// See also:
///
///  * [RepaintBoundary], to scope a subtree of render objects to their own
///    layer, thus limiting the number of nodes that [markNeedsPaint] must mark
///    dirty.   ¿ò®Ü-¿ú
É:/// Mark this render object as having changed a property on its composited
/// layer.
///
/// Render objects that have a composited layer have [isRepaintBoundary] equal
/// to true may update the properties of that composited layer without repainting
/// their children. If this render object is a repaint boundary but does
/// not yet have a composited layer created for it, this method will instead
/// mark the nearest repaint boundary parent as needing to be painted.
///
/// If this method is called on a render object that is not a repaint boundary
/// or is a repaint boundary but hasn't been composited yet, it is equivalent
/// to calling [markNeedsPaint].
///
/// See also:
///
///  * [RenderOpacity], which uses this method when its opacity is updated to
///    update the layer opacity without repainting children.   ¿†JÇﬁ¿†O    ¿£,Çx¿§BÅ/// Bootstrap the rendering pipeline by scheduling the very first paint.
///
/// Requires that this render object is attached, is the root of the render
/// tree, and has a composited layer.
///
/// See [RenderView] for an example of how this function is used. ¿§W¿§g   ¿•®ÇÅ¿¶êÄÿ/// Replace the layer. This is only valid for the root of a render
/// object subtree (whatever object [scheduleInitialPaint] was
/// called on).
///
/// This might be called if, e.g., the device pixel ratio changed. ¿¶°¿¶Æ   ¿®-ë—¿®2  ¿®D¿®U  ¿®]¿®e   ¿ª v¿ª`8/// Override this method to paint debugging information. ¿ªk¿ª|  ¿ªÑ¿ªå   ¿ªöÉˇ¿øhÉ¶/// Paint this render object into the given context at the given offset.
///
/// Subclasses should override this method to provide a visual appearance
/// for themselves. The render object's local coordinate system is
/// axis-aligned with the coordinate system of the context's canvas and the
/// render object's local origin (i.e, x=0 and y=0) is placed at the given
/// offset in the context's canvas.
///
/// Do not call this function directly. If you wish to paint yourself, call
/// [markNeedsPaint] instead to schedule a call to this function. If you wish
/// to paint one of your children, call [PaintingContext.paintChild] on the
/// given `context`.
///
/// When painting one of your children (via a paint child function on the
/// given context), the current canvas held by the context might change
/// because draw operations before and after painting children might need to
/// be recorded on separate compositing layers. ¿øn¿ø  ¿øá¿øè   ¿øùÉ1¿¬bÇß/// Applies the transform that would be applied when painting the given child
/// to the given matrix.
///
/// Used by coordinate conversion functions to translate coordinates local to
/// one render object into coordinates local to another render object.
///
/// Some RenderObjects will provide a zeroed out matrix in this method,
/// indicating that the child should not paint anything or respond to hit
/// tests currently. A parent may supply a non-zero matrix even though it
/// does not paint its child currently, for example if the parent is a
/// [RenderOffstage] with `offstage` set to true. In both of these cases,
/// the parent must return `false` from [paintsChild]. ¿¬v¿¬é  ¿¬î¿¬ù   ¿¬“É]¿≈ÕÇ€/// Whether the given child would be painted if [paint] were called.
///
/// Some RenderObjects skip painting their children if they are configured to
/// not produce any visible effects. For example, a [RenderOffstage] with
/// its `offstage` property set to true, or a [RenderOpacity] with its opacity
/// value set to zero.
///
/// In these cases, the parent may still supply a non-zero matrix in
/// [applyPaintTransform] to inform callers about where it would paint the
/// child if the child were painted at all. Alternatively, the parent may
/// supply a zeroed out matrix if it would not otherwise be able to determine
/// a valid matrix for the child and thus cannot meaningfully determine where
/// the child would paint. ¿≈Ÿ¿≈Ò   ¿∆3Üs¿…KÇÔ/// {@template flutter.rendering.RenderObject.getTransformTo}
/// Applies the paint transform up the tree to `ancestor`.
///
/// Returns a matrix that maps the local paint coordinate system to the
/// coordinate system of `ancestor`.
///
/// If `ancestor` is null, this method returns a matrix that maps from the
/// local paint coordinate system to the coordinate system of the
/// [PipelineOwner.rootNode].
/// {@endtemplate}
///
/// For the render tree owned by the [RendererBinding] (i.e. for the main
/// render tree displayed on the device) this means that this method maps to
/// the global coordinate system in logical pixels. To get physical pixels,
/// use [applyPaintTransform] from the [RenderView] to further transform the
/// coordinate. ¿…Z¿…i   ¿Ã´ÇÔ¿œWÇã/// Returns a rect in this object's coordinate system that describes
/// the approximate bounding box of the clip rect that would be
/// applied to the given child during the paint phase, if any.
///
/// Returns null if the child would not be clipped.
///
/// This is used in the semantics phase to avoid including children
/// that are not physically visible.
///
/// RenderObjects that respect a [Clip] behavior when painting _must_ respect
/// that same behavior when describing this value. For example, if passing
/// [Clip.none] to [PaintingContext.pushClipRect] as the `clipBehavior`, then
/// the implementation of this method must return null. ¿œt¿œå   ¿œûÖÊ¿’GÖp/// Returns a rect in this object's coordinate system that describes
/// which [SemanticsNode]s produced by the `child` should be included in the
/// semantics tree. [SemanticsNode]s from the `child` that are positioned
/// outside of this rect will be dropped. Child [SemanticsNode]s that are
/// positioned inside this rect, but outside of [describeApproximatePaintClip]
/// will be included in the tree marked as hidden. Child [SemanticsNode]s
/// that are inside of both rect will be included in the tree as regular
/// nodes.
///
/// This method only returns a non-null value if the semantics clip rect
/// is different from the rect returned by [describeApproximatePaintClip].
/// If the semantics clip rect and the paint clip rect are the same, this
/// method returns null.
///
/// A viewport would typically implement this method to include semantic nodes
/// in the semantics tree that are currently hidden just before the leading
/// or just after the trailing edge. These nodes have to be included in the
/// semantics tree to implement implicit accessibility scrolling on iOS where
/// the viewport scrolls implicitly when moving the accessibility focus from
/// the last visible node in the viewport to the first hidden one.
///
/// See also:
///
/// * [RenderViewportBase.cacheExtent], used by viewports to extend their
///   semantics clip beyond their approximate paint clip. ¿’]¿’v   ¿’òÇÑ¿÷ºÅ/// Bootstrap the semantics reporting mechanism by marking this node
/// as needing a semantics update.
///
/// Requires that this render object is attached, and is the root of
/// the render tree.
///
/// See [RendererBinding] for an example of how this function is used.   ¿ÿ Ö_¿›Ñ§/// Report the semantics of this node, for example for accessibility purposes.
///
/// This method should be overridden by subclasses that have interesting
/// semantic information.
///
/// The given [SemanticsConfiguration] object is mutable and should be
/// annotated in a manner that describes the current state. No reference
/// should be kept to that object; mutating it outside of the context of the
/// [describeSemanticsConfiguration] call (for example as a result of
/// asynchronous computation) will at best have no useful effect and at worse
/// will cause crashes as the data will be in an inconsistent state.
///
/// {@tool snippet}
///
/// The following snippet will describe the node as a button that responds to
/// tap actions.
///
/// ```dart
/// abstract class SemanticButtonRenderObject extends RenderObject {
///   @override
///   void describeSemanticsConfiguration(SemanticsConfiguration config) {
///     super.describeSemanticsConfiguration(config);
///     config
///       ..onTap = _handleTap
///       ..label = 'I am a button'
///       ..isButton = true;
///   }
///
///   void _handleTap() {
///     // Do something.
///   }
/// }
/// ```
/// {@end-tool} ¿›:¿›R  ¿›	¿›
¿›ÉÇ˙¿ﬁ¸Åc/// Sends a [SemanticsEvent] associated with this render object's [SemanticsNode].
///
/// If this render object has no semantics information, the first parent
/// render object with a non-null semantic node is used.
///
/// If semantics are disabled, no events are dispatched.
///
/// See [SemanticsNode.sendEvent] for a full description of the behavior. ¿ﬂ¿ﬂ   ¿‰îÅÌ¿Â„Å,/// Removes all semantics from this render object and its descendants.
///
/// Should only be called on objects whose [parent] is not a [RenderObject].
///
/// Override this method if you instantiate new [SemanticsNode]s in an
/// overridden [assembleSemanticsNode] method, to dispose of those nodes.  ¿ÂÕ¿ÂŒ¿ÊÖää¿ÁúÅ/// Mark this node as needing an update to its semantics description.
///
/// This must be called whenever the semantics configuration of this
/// [RenderObject] as annotated by [describeSemanticsConfiguration] changes in
/// any way to update the semantics tree.   ¿ÒÑ´¿ÒU:/// Updates the semantic information of the render object.   ¿ı¬ç`¿ˆ!I/// Returns the semantics that this node would like to add to its parent. ¿ˆ>¿ˆM   ¿&Å ¿òÅ\/// Called when collecting the semantics of this node.
///
/// The implementation has to return the children in paint order skipping all
/// children that are not semantically relevant (e.g. because they are
/// invisible).
///
/// The default implementation mirrors the behavior of
/// [visitChildren] (which is supposed to walk all the children). ¿≤¿«   ¿ÙÑB¿πÇ£/// Assemble the [SemanticsNode] for this [RenderObject].
///
/// If [describeSemanticsConfiguration] sets
/// [SemanticsConfiguration.isSemanticBoundary] to true, this method is called
/// with the `node` created for this [RenderObject], the `config` to be
/// applied to that node and the `children` [SemanticsNode]s that descendants
/// of this RenderObject have generated.
///
/// By default, the method will annotate `node` with `config` and add the
/// `children` to it.
///
/// Subclasses can override this method to add additional [SemanticsNode]s
/// to the tree. If new [SemanticsNode]s are instantiated in this method
/// they must be disposed in [clearSemantics]. ¿‘¿„  ¿Ï¿  ¿ ¿(   ¿	GÄ£¿	©N/// Override this method to handle pointer events that hit this render object. ¿	µ¿	√  ¿	…¿	·  ¿	ò¿	ô¿<Éî¿z(/// Returns a human understandable name.  ¿g¿h¿‘d¿Á  ¿Ú/¿  ¿‘¿’¿¿¿¿<É¿˚Ä•/// Returns a description of the tree rooted at this node.
/// If the prefix argument is provided, then every line in the output
/// will be prefixed by that string. ¿¿  ¿-¿6  ¿P0¿a  ¿Ë¿È¿%¿H¿k¿z¿{¿TÇ˚¿gÄı/// Returns a one-line detailed description of the render object.
/// This description is often somewhat long.
///
/// This includes the same information for this RenderObject as given by
/// [toStringDeep], but does not recurse to any children. ¿}¿Ö  ¿ó0¿®  ¿T¿U¿ç¿≤¿¡¿¬¿SÖE¿q  ¿Ö&¿¢  ¿S¿T¿`¿a¿úQ¿æ   ¿ú¿ù¿ÒÖP¿ ≥Éî/// Attempt to make (a portion of) this or a descendant [RenderObject] visible
/// on screen.
///
/// If `descendant` is provided, that [RenderObject] is made visible. If
/// `descendant` is omitted, this [RenderObject] is made visible.
///
/// The optional `rect` parameter describes which area of that [RenderObject]
/// should be shown on screen. If `rect` is null, the entire
/// [RenderObject] (as defined by its [paintBounds]) will be revealed. The
/// `rect` parameter is interpreted relative to the coordinate system of
/// `descendant` if that argument is provided and relative to this
/// [RenderObject] otherwise.
///
/// The `duration` parameter can be set to a non-zero value to bring the
/// target object on screen in an animation defined by `curve`.
///
/// See also:
///
/// * [RenderViewportBase.showInViewport], which [RenderViewportBase] and
///   [SingleChildScrollView] delegate this method to. ¿ ∆¿ ’  ¿ ‰
¿ Î  ¿ Ù!¿ ˛  ¿!¿!"  ¿!¿!¿!¿!)¿!/¿!0¿"EÇá¿$2Å /// Adds a debug representation of a [RenderObject] optimized for including in
/// error messages.
///
/// The default [style] of [DiagnosticsTreeStyle.shallow] ensures that all of
/// the properties of the render object are included in the error output but
/// none of the children of the object are.
///
/// You should always include a RenderObject in an error message if it is the
/// [RenderObject] causing the failure or contract violation of the error. ¿$C¿$K  ¿$R9¿$h  ¿$o¿$É¿$Ñ ¿dRÑ˜¿eÔÅç/// Describes the semantics information a [RenderObject] wants to add to its
/// parent.
///
/// It has two notable subclasses:
///  * [_InterestingSemanticsFragment] describing actual semantic information to
///    be added to the parent.
///  * [_ContainerSemanticsFragment]: a container class to transport the semantic
///    information of multiple [_InterestingSemanticsFragment] to a parent. ¿f ¿f¿f ¿f.¿f*  ¿fS¿fZ¿fÉ¿f|¿f[¿f¿gÅk¿hWÅ1/// Whether this fragment wants to make the semantics information of
/// previously painted [RenderObject]s unreachable for accessibility purposes.
///
/// See also:
///
///  * [SemanticsConfiguration.isBlockingSemanticsOfPreviouslyPaintedNodes]
///    describes what semantics are dropped in more detail. ¿h|ÄÀ¿i2Äâ/// Returns [_InterestingSemanticsFragment] describing the actual semantic
/// information that this fragment wants to add to the parent.   ¿fâ¿fŒ=/// Incorporate the fragments of children into this fragment. ¿f’1¿f˛    ¿iKÇ~¿jGÄı/// A container used when a [RenderObject] wants to add multiple independent
/// [_InterestingSemanticsFragment] to its parent.
///
/// The [_InterestingSemanticsFragment] to be added to the parent can be
/// obtained via [interestingFragments]. ¿jÉQ ¿jÉ¿jû ¿j°/¿j±   ¿kXn¿ké ¿kX¿kY¿kƒ¿k≈¿k•¿k√¿k¶ ¿jÿ|¿jÈ  ¿j1¿k  ¿jÿ¿jŸ ¿kÀçq¿mDÅi/// A [_SemanticsFragment] that describes which concrete semantic information
/// a [RenderObject] wants to add to the [SemanticsNode] of its parent.
///
/// Specifically, it describes which children (as returned by [compileChildren])
/// should be added to the parent's [SemanticsNode] and which [config] should be
/// merged into the parent's [SemanticsNode]. ¿mÅÄ¬ ¿mÅ¿mû ¿m•¿mº  ¿m∆/¿m÷  ¿m˛¿n¿n¿n¿n¿n¿n+¿n¿n;¿nA¿n-¿n:¿n.¿n<¿n·'¿n˙  ¿vK#¿v^  ¿nGÄñ¿nøb/// The [RenderObject] that owns this fragment (and any new [SemanticsNode]
/// introduced by it).   ¿qñÄµ¿rDÄç/// The [SemanticsConfiguration] the child wants to merge into the parent's
/// [SemanticsNode] or null if it doesn't want to merge anything.   ¿u<Äï¿u¨b/// Whether this fragment wants to add any semantic information to the parent
/// [SemanticsNode].   ¿u’r¿v	   ¿u’¿u÷¿oÇÖ¿p’ÅÆ/// The children to be added to the parent.
///
/// See also:
///
///  * [SemanticsNode.parentSemanticsClipRect] for the source and definition
///    of the `parentSemanticsClipRect` argument.
///  * [SemanticsNode.parentPaintClipRect] for the source and definition
///    of the `parentPaintClipRect` argument.
///  * [SemanticsNode.elevationAdjustment] for the source and definition
///    of the `elevationAdjustment` argument. ¿pÎ&¿p˚  ¿q"¿q'  ¿q?#¿qP  ¿qh#¿qÜ   ¿rOÅ¿sCÄ‰/// Disallows this fragment to merge any configuration into its parent's
/// [SemanticsNode].
///
/// After calling this the fragment will only produce children to be added
/// to the parent and it will return null for [config].   ¿sXÅ‡¿t˛ÅÑ/// Consume the fragments of children.
///
/// For each provided fragment it will add that fragment's children to
/// this fragment's children (as returned by [compileChildren]) and merge that
/// fragment's [config] into this fragment's [config].
///
/// If a provided fragment should not merge anything into [config] call
/// [markAsExplicit] before passing the fragment to this method. ¿u1¿u.  ¿tÌ¿tÓ¿vsÄ˝¿v∫?/// Tag all children produced by [compileChildren] with `tags`. ¿v¬¿v€   ¿wtÅ∆¿xÅf/// Adds the geometric information of `ancestor` to this object.
///
/// Those information are required to properly compute the value for
/// [SemanticsNode.transform], [SemanticsNode.clipRect], and
/// [SemanticsNode.rect].
///
/// Ancestors have to be added in order from [owner] up until the next
/// [RenderObject] that owns a [SemanticsNode] is reached. ¿x¸¿y
    ¿y>âf¿zÄÀ/// An [_InterestingSemanticsFragment] that produces the root [SemanticsNode] of
/// the semantics tree.
///
/// The root node is available as the only element in the Iterable returned by
/// [children]. ¿zQm ¿zQ¿zg ¿zn¿z~  ¿zà/¿zò   ¿Å|W¿Å¶ ¿Å—¿Å“¿Å≤¿Å–¿Å≥¿ÅA7¿Åi   ¿ÅA¿ÅB¿z¬Ü{¿z”  ¿zÂ¿zÏ  ¿{¿{  ¿{#¿{0  ¿{D#¿{b  ¿z¬¿z√¿ÅÿU¿ÅÈ   ¿Åÿ¿ÅŸ¿Ç1q¿ÇB  ¿ÇI1¿Çr  ¿Ç1¿Ç2 ¿Ç¶ìä¿ÜñÉÈ/// An [_InterestingSemanticsFragment] that can be told to only add explicit
/// [SemanticsNode]s to the parent.
///
/// If [markAsExplicit] was not called before this fragment is added to
/// another fragment it will merge [config] into the parent's [SemanticsNode]
/// and add its [children] to it.
///
/// If [markAsExplicit] was called before adding this fragment to another
/// fragment it will create a new [SemanticsNode]. The newly created node will
/// be annotated with the [SemanticsConfiguration] that - without the call to
/// [markAsExplicit] - would have been merged into the parent's [SemanticsNode].
/// Similarly, the new node will also take over the children that otherwise
/// would have been added to the parent's [SemanticsNode].
///
/// After a call to [markAsExplicit] the only element returned by [children]
/// is the newly created node and [config] will return null as the fragment
/// no longer wants to merge any semantic information into the parent's
/// [SemanticsNode]. ¿Ü›ÅG ¿Ü›¿Ü˘ ¿á ¿á  ¿á#&¿áD  ¿áO¿á_  ¿ái/¿áy  ¿á≤¿á°¿á¥¿á‘¿áÃ¿á÷¿áÂ¿áÎ¿à¿á¸¿áÏ¿áˇ¿à¿à¿à"¿à¿à¿à¿à(¿à3  ¿àG¿à^  ¿ài¿àn ¿àÇ¿àãW¿àµ ¿à‡¿à·¿à¡¿àﬂ¿à¬¿ïì¿ïò ¿ï¶¿ì_]¿ìá   ¿ì_¿ì`¿ïÛ;¿ï¸    ¿àÁät¿à¯  ¿â
¿â  ¿â)¿â0  ¿âD#¿âU  ¿âi#¿âá  ¿àÁ¿àË¿ì¿ÅC¿ì—  ¿ìÿ1¿î  ¿ì¿¿ì¡¿ïÄà¿ï    ¿ï∞?¿ï¡   ¿ï∞¿ï± ¿ñ2óê¿ó
Ä—/// Helper class that keeps track of the geometry of a [SemanticsNode].
///
/// It is used to annotate a [SemanticsNode] with the current information for
/// [SemanticsNode.rect] and [SemanticsNode.transform]. ¿ó"Çv ¿ò≠¿òøÅ~/// The `parentClippingRect` may be null if no clip is to be applied.
///
/// The `ancestors` list has to include all [RenderObject] in order that are
/// located between the [SemanticsNode] whose geometry is represented here
/// (first [RenderObject] in the list) and its closest ancestor [RenderObject]
/// that also owns its own [SemanticsNode] (last [RenderObject] in the list).¿ò∆&¿ò÷  ¿òÚ"¿ô  ¿ô%¿ô7   ¿ôú¿ô¢  ¿ô¥¿ô∫  ¿ô–¿ô›  ¿ôÎ¿ôı  ¿§3?¿§H ¿§d¿§k¿§l¿§p¿§q¿≠•¿≠™ ¿≠∫¿ôˇO¿ö6(/// Value for [SemanticsNode.transform].   ¿öRk¿öï6/// Value for [SemanticsNode.parentSemanticsClipRect].   ¿ö¡_¿õ 2/// Value for [SemanticsNode.parentPaintClipRect].   ¿õ$=¿õS#/// Value for [SemanticsNode.rect].   ¿™≈Å¿´âÄ¥/// Whether the [SemanticsNode] annotated with the geometric information tracked
/// by this object can be dropped from the semantics tree without losing
/// semantics information.   ¿´–Å“¿≠ÑÅñ/// Whether the [SemanticsNode] annotated with the geometric information
/// tracked by this object should be marked as hidden because it is not
/// visible on screen.
///
/// Hidden elements should still be included in the tree to work around
/// platform limitations (e.g. accessibility scrolling on iOS).
///
/// See also:
///
///  * [SemanticsFlag.isHidden] for the purpose of marking a node as hidden.   ¿õeáã¿ú™Å3/// Computes values, ensuring `rect` is properly bounded by ancestor clipping rects.
///
/// See also:
///
/// * [RenderObject.describeSemanticsClip], typically used to determine `parentSemanticsClipRect`.
/// * [RenderObject.describeApproximatePaintClip], typically used to determine `parentPaintClipRect`. ¿úπ¿ú¿  ¿úÿ¿úﬂ  ¿úÛ¿ù   ¿§wÅH¿§≤+/// From parent to child coordinate system. ¿§¡
¿§»  ¿§Õ¿§÷   ¿¶ﬁÉ:¿¶Í  ¿ß¿ß  ¿ß,¿ß:  ¿ßD¿ßM  ¿ß[¿ßd   ¿™Ä•¿™)  ¿™9¿™@  ¿™B¿™I    ¿≠ƒÇn¿Æ‹Å/// A class that creates [DiagnosticsNode] by wrapping [RenderObject.debugCreator].
///
/// Attach a [DiagnosticsDebugCreator] into [FlutterErrorDetails.informationCollector]
/// when a [RenderObject.debugCreator] is available. This will lead to improved
/// error message. ¿ØÅ ¿Øä¿Ø°i/// Create a [DiagnosticsProperty] with its [value] initialized to input
/// [RenderObject.debugCreator].¿Ø¢¿Ø™  ¿Ø∂¿Øº¿Ø ¿Ø√¿ØΩ¿Ø∆¿Ø”¿Øÿ¿∞.¿Ø‚¿Ø˙¿∞¿∞	¿∞¿∞¿∞           Ö ÅhÜ‚Å/// Signature for painting into a [PaintingContext].
///
/// The `offset` argument is the offset from the origin of the coordinate system
/// of the [PaintingContext.canvas] to the coordinate system of the callee.
///
/// Used by many of the methods of [PaintingContext].  á
á  á#á+   ¿ }∫Å¿ ~ëÄŒ/// Signature for a function that is called for each [RenderObject].
///
/// Used by [RenderObject.visitChildren] and [RenderObject.visitChildrenForSemantics].
///
/// The `child` argument must not be null.  ¿ ~µ¿ ~√   ¿ ~ÀÄΩ¿ Co/// Signature for a function that is called during layout.
///
/// Used by [RenderObject.invokeLayoutCallback].¿ R¿ R ¿ y¿ |   ¿$–ä‹¿&Å,/// Generic mixin for render objects with one child.
///
/// Provides a child model for a render object subclass that has
/// a unique child, which is accessible via the [child] getter.
///
/// This mixin is typically used to implement render objects created
/// in a [SingleChildRenderObjectWidget].¿&¿& ¿,¿,  ¿,%G¿,\%/// The render object's unique child.   ¿,oÄ™¿,s  ¿,y¿,Ö   ¿&SÖπ¿'$Äø/// Checks whether the given render object has the correct [runtimeType] to be
/// a child of this render object.
///
/// Does nothing if assertions are disabled.
///
/// Always returns true. ¿'7¿'E   ¿-Äà¿-.  ¿-5¿-D  ¿-¿-¿-©k¿-∫   ¿-©¿-™¿.e¿.)   ¿.¿.¿.Åy¿.í  ¿.†¿.µ  ¿.Å¿.Ç¿.˛Ä¨¿/    ¿.˛¿.ˇ ¿/ÆÉO¿0ÍÅ5/// Parent data to support a doubly-linked list of children.
///
/// The children can be traversed using [nextSibling] or [previousSibling],
/// which can be called on the parent data of the render objects
/// obtained via [ContainerRenderObjectMixin.firstChild] or
/// [ContainerRenderObjectMixin.lastChild].¿1¿1 ¿15Q¿1w4/// The previous sibling in the parent's child list. ¿1äI¿1»0/// The next sibling in the parent's child list.  ¿1ÿÅ#¿2/// Clear the sibling pointers.  ¿1˙¿1˚ ¿2ˇ≠D¿6·É€/// Generic mixin for render objects with a list of children.
///
/// Provides a child model for a render object subclass that has a doubly-linked
/// list of children.
///
/// The [ChildType] specifies the type of the children (extending [RenderObject]),
/// e.g. [RenderBox].
///
/// [ParentDataType] stores parent container data on its child render objects.
/// It must extend [ContainerParentDataMixin], which provides the interface
/// for visiting children. This data is populated by
/// [RenderObject.setupParentData] implemented by the class using this mixin.
///
/// When using [RenderBox] as the child type, you will usually want to make use of
/// [RenderBoxContainerDefaultsMixin] and extend [ContainerBoxParentData] for the
/// parent data.
///
/// Moreover, this is a required mixin for render objects returned to [MultiChildRenderObjectWidget].
///
/// See also:
///
///  * [SlottedContainerRenderObjectMixin], which organizes its children
///    in different named slots.¿6¸¿6¸¿7:¿7 ¿:ï¿:ô ¿:ß¿@≠¿@∏  ¿@«¿@“  ¿:¨@¿:“/// The number of children.   ¿[!R¿[Y&/// The first child in the child list.   ¿[wO¿[Æ%/// The last child in the child list.   ¿7lÅô¿7q  ¿7ë¿7ú  ¿7§¿7∞   ¿9Åâ¿9  ¿9)¿94  ¿9<¿9H   ¿:Öπ¿;¡Äø/// Checks whether the given render object has the correct [runtimeType] to be
/// a child of this render object.
///
/// Does nothing if assertions are disabled.
///
/// Always returns true. ¿;‘¿;‚   ¿@‡áÃ¿@Â  ¿@˙¿A  ¿A¿A   ¿H∞Ç≥¿IåÄŒ/// Insert child into this render object's child list after the given child.
///
/// If `after` is null, then this inserts the child at the start of the list,
/// and the child becomes the new [firstChild]. ¿Iì¿Iû  ¿I¶¿I≤   ¿KgÄá¿KÆ?/// Append child to the end of this render object's child list. ¿K≤¿KΩ   ¿KÚÄí¿LAG/// Add all the children to the end of this render object's child list. ¿LH¿LZ   ¿LàÑ]¿Lç  ¿L¢¿L≠   ¿PÈÄ∆¿Q[f/// Remove this child from the child list.
///
/// Requires the child to be present in the child list. ¿Qb¿Qm   ¿Q≥Ç3¿R:{/// Remove all their children from this render object's child list.
///
/// More efficient than removing them individually.   ¿SÍÇŒ¿UÅ/// Move the given `child` in the child list to be after another child.
///
/// More efficient than removing and re-adding the child. Requires the child
/// to already be in the child list at some position. Pass null for `after` to
/// move the child to the start of the child list. ¿U¿U$  ¿U,¿U8   ¿VºÅ)¿VÕ  ¿V‘¿V„  ¿Vº¿VΩ¿WÈÅ¿W˙   ¿WÈ¿WÍ¿X˘Å¿Y
   ¿X˘¿X˙¿ZÅ¿Z  ¿Z"¿Z7  ¿Z¿Z¿[ Å)¿\@/// The previous child before the given child in the child list. ¿\$¿\/   ¿\˜Å¿]@;/// The next child after the given child in the child list. ¿]K¿]V   ¿^Ç'¿^<   ¿^¿^ ¿`EÑ¿awÅ+/// Mixin for [RenderObject] that will call [systemFontsDidChange] whenever the
/// system fonts change.
///
/// System fonts can change when the OS install or remove a font. Use this mixin if
/// the [RenderObject] uses [TextPainter] or [Paragraph] to correctly update the
/// text when it happens.    ¿aØÅt¿bÅ/// A callback that is called when system fonts have changed.
///
/// By default, [markNeedsLayout] is called on the [RenderObject]
/// implementing this mixin.
///
/// Subclass should override this method to clear any extra cache that depend
/// on font-related metrics.  ¿bÕ¿bŒ¿b⁄¿b€¿c'Ä°¿c8  ¿c?¿cX  ¿c'¿c(¿cÃÄÇ¿c›   ¿cÃ¿cÕ    ëh <ÄÜÄ§Ä•ÄæÄÎÄÏÅÅ?ÅgÅèÅ∏ÅπÅŒÅ„Å‰ÇÌÉ6É^É_ÉßÉ´ÉıÑ=ÑqÑuÑÉÑáÑ“ÖÖ*ÖgÖtÖÖÖôÖöÖ¶Ö«Ö…Ö ÖˇÜÜTÜ†Ü§Ü⁄á3á4áJáNá†áÂà/àCàGàòàËâ8âÇâúâ†âÁä%äQäRätäzä¬äŸäÊã$ãKãrãsãõãúãÈå0å6åqåwå√å·å‚ç	ççZçßç¯ééé*é0éÄé°èè$èAèNèÑèãèèèêè∑è—è˙êê$êIêYêêêøêÔëëë(ë2ëzëòëæëÓëÔí<íáí“í˘ìFì{ìàì≈ì„ìıî"î7îCîiî√îıïIï¨ïˆïˇñ4ñ:ñiñjñßñ‹ñÏó6óIóSóTóôó—ó“ò!òUòíòºò¿ò¡ôôô`ô≠ô˚ö6ö<öLöRö¢ö√ö˝õ?õ_õçõéõ€õ˜úú1úDúNú¶ú÷ù(ùâù—ùÿûû:û>û?ûåû‹üüü&ü,üyüìü»ü‚††7†>†N†m†|†¥†Ÿ†‚†ı†ˇ°°°(°.°|°À¢¢R¢b¢ä¢ù¢ß¢®¢À¢Í££\£££œ§§-§Z§g§î§ö§û§ü§€§ˆ••X•Y•õ•÷¶¶&¶U¶{¶É¶ï¶ŒßßOßdßpßvß´ß˛®$®G®K®L®ò®ß®≠®ˆ©<©i©o©º©œ©‹©˛™™-™P™T™U™o™õ™´™¬™È´´-´<´c´Ü´ß´Ø´¬´Ã´‚´Ê´Á´¸¨¨<¨O¨P¨t¨z¨ƒ≠≠-≠9≠O≠j≠É≠â≠¨≠¡≠≈≠∆≠·≠¸Æ/ÆUÆwÆ£ÆßÆ®Æ˘ØØØ\Ø™ØÙ∞4∞:∞v∞|∞å∞∑∞˝±:±>±?±z±Ä±Ã≤≤j≤w≤}≤Ã≥≥)≥6≥G≥h≥Å≥è≥ï≥•≥Õ≥Ò¥¥8¥p¥Æ¥∂¥·µµ.µLµyµ™µ≤µ≈µœ∂∂!∂7∂K∂O∂P∂†∂¥∂∫∑	∑R∑a∑}∑¶∑™∑´∑˛∏∏T∏ù∏Íππ9πcπgπhπùπ£πÙ∫/∫5∫Ç∫‘ª$ªjªpªÄªÜª‘ª·º ºº5º9º:ºãº⁄Ω*ΩLΩRΩ°ΩÂΩ˘ΩˇæDæîæ‰ø2øuøäøêø·¿ @2¿ @¿ @–¿ A ¿ A^¿ Ad¿ At¿ Az¿ A≈¿ AŸ¿ BS¿ Bp¿ Bæ¿ C¿ C1¿ CW¿ C]¿ Cz¿ Có¿ D¿ D¿ D)¿ DS¿ DW¿ DX¿ D†¿ D¶¿ DÏ¿ D˘¿ EH¿ Ex¿ E|¿ E}¿ E¨¿ E≤¿ F¿ FL¿ FÉ¿ Fœ¿ G¿ G]¿ G°¿ Gß¿ Gı¿ H9¿ HN¿ HT¿ Hú¿ HÂ¿ I.¿ IC¿ II¿ Iö¿ I‚¿ IÚ¿ I¯¿ JH¿ Jâ¿ Jè¿ Jÿ¿ Jﬁ¿ K(¿ Ku¿ Kπ¿ L	¿ LY¿ L°¿ LÌ¿ M#¿ M8¿ MÓ¿ N¿ N0¿ NC¿ NI¿ NÅ¿ Nù¿ N‹¿ NË¿ O¿ O3¿ O~¿ Oí¿ Oü¿ P¿ P¿ P¿ P¿ P ¿ PW¿ P]¿ P¨¿ P≤¿ P˜¿ P˝¿ QM¿ Qê¿ Qñ¿ QÊ¿ R1¿ RX¿ R^¿ RØ¿ RÒ¿ R˜¿ SH¿ SN¿ Sï¿ T^¿ TÄ¿ T•¿ T¬¿ T’¿ T€¿ U¿ UJ¿ Uf¿ Uß¿ U≥¿ UŸ¿ V ¿ VI¿ V]¿ Vj¿ VÕ¿ V‡¿ VÊ¿ VÍ¿ VÎ¿ W¿ W¿ Wj¿ Wp¿ Wµ¿ Wª¿ X¿ XN¿ XT¿ X£¿ XÓ¿ Y
¿ Y¿ Y`¿ Y°¿ Yß¿ YÎ¿ YÒ¿ Z8¿ Z¸¿ [¿ [C¿ [`¿ [s¿ [y¿ [≠¿ [Â¿ \¿ \@¿ \L¿ \p¿ \ó¿ \‡¿ \Ù¿ ]¿ ]b¿ ]u¿ ]{¿ ]¿ ]Ä¿ ]≤¿ ]∏¿ ]˙¿ ^ ¿ ^Q¿ ^w¿ ^}¿ ^Õ¿ _¿ _¿ _a¿ _g¿ _¥¿ `¿ `V¿ `ú¿ a*¿ aK¿ aé¿ a≥¿ a⁄¿ aÏ¿ a¿ aÒ¿ b"¿ b(¿ bw¿ b}¿ bŒ¿ bÙ¿ b˙¿ cF¿ có¿ c–¿ c÷¿ d'¿ di¿ do¿ d∂¿ eP¿ e¨¿ eÏ¿ f¿ fI¿ fu¿ fÜ¿ fï¿ f¶¿ f∂¿ g¿ g ¿ g4¿ gA¿ gN¿ g_¿ gê¿ g≠¿ g≈¿ gÿ¿ gﬁ¿ g‚¿ g„¿ h¿ h¿ hh¿ hî¿ hö¿ hÍ¿ i3¿ iÉ¿ iâ¿ i÷¿ j¿ j¿ jc¿ ji¿ j∂¿ k¿ kX¿ kû¿ l¿ lM¿ lW¿ lm¿ lÜ¿ l≤¿ lƒ¿ l»¿ l…¿ l’¿ ma¿ mc¿ md¿ mè¿ mì¿ mﬂ¿ n ¿ n$¿ nJ¿ nN¿ nû¿ nÍ¿ o¿ o¿ oa¿ o±¿ o˛¿ p¿ pR¿ p†¿ pÓ¿ q;¿ qH¿ qL¿ qî¿ q„¿ r-¿ rn¿ ræ¿ s¿ s\¿ s¢¿ sæ¿ s¬¿ t¿ t\¿ t´¿ tı¿ u+¿ u{¿ uì¿ uó¿ uÂ¿ v3¿ vÇ¿ vú¿ v†¿ v¿ wA¿ wL¿ wi¿ w∫¿ x¿ x¿ x¿ xd¿ xx¿ xy¿ xª¿ x‘¿ x’¿ y¿ y	¿ yL¿ yR¿ y°¿ yΩ¿ y√¿ z¿ za¿ z∞¿ z˘¿ {2¿ {É¿ {‘¿ {Â¿ {Î¿ |9¿ |Ü¿ |ø¿ |≈¿ }¿ }#¿ }I¿ }y¿ }Ä¿ }ö¿ }≥¿ }∑¿ }π¿ }∫¿ }ˇ¿ ~¿ ~Z¿ ~^¿ ~â¿ ~ ¿ ~À¿ ¿ 
¿ ;¿ â¿ ä¿ ±¿ µ¿ Ä ¿ ÄE¿ Ä\¿ Ä`¿ Ä∞¿ Ä˘¿ ÅE¿ Åî¿ Åﬁ¿ Åˇ¿ Ç¿ ÇR¿ Ç°¿ ÇÒ¿ É	¿ ÉA¿ É`¿ Éy¿ Éï¿ É ¿ É–¿ É‘¿ É’¿ ÉÛ¿ ÉÙ¿ Ñ>¿ Ñ^¿ Ñ_¿ Ñß¿ Ñ¿¿ Ñ∆¿ Ö¿ ÖX¿ Ön¿ Ö¿ Öí¿ ÖÆ¿ ÖÊ¿ ÖÏ¿ Ü¿ Ü¿ Ü¿ Ü¿ ÜS¿ ÜW¿ Üß¿ Ü¯¿ áE¿ á]¿ áa¿ á¨¿ áÛ¿ à=¿ ài¿ à≤¿ â ¿ âP¿ â°¿ âÔ¿ ä7¿ ä}¿ äÀ¿ ã¿ ãV¿ ã¢¿ ã¿ å=¿ åA¿ åê¿ å⁄¿ ç'¿ çE¿ ç[¿ ç{¿ çÅ¿ çŒ¿ é¿ éA¿ éS¿ ép¿ éí¿ éµ¿ éª¿ éº¿ è¿ è0¿ è6¿ èá¿ è‘¿ ê!¿ ê@¿ êj¿ êk¿ ê±¿ ê∑¿ êˇ¿ ë¿ ëD¿ ëE¿ ëç¿ ëì¿ ë‘¿ í¿ í¿ íK¿ íQ¿ í°¿ í»¿ íÁ¿ ì¿ ì¿ ì¿ ìQ¿ ìW¿ ìè¿ ì∫¿ ì’¿ ì˚¿ î¿ î'¿ î-¿ îF¿ î]¿ îz¿ î~¿ î¿ îÀ¿ ï¿ ïS¿ ïX¿ ï°¿ ïÌ¿ ñ6¿ ñn¿ ñs¿ ñØ¿ ñˇ¿ óM¿ óô¿ óÆ¿ ó’¿ ò¿ ò¿ òQ¿ òW¿ òó¿ òù¿ ò‡¿ ò¸¿ ô.¿ ôP¿ ôQ¿ ôì¿ ôô¿ ôÈ¿ ö4¿ öj¿ öp¿ öπ¿ ö–¿ öÈ¿ õ¿ õ.¿ õa¿ õñ¿ õ“¿ ú¿ ú¿ ú¿ ú0¿ ú<¿ úV¿ úh¿ úì¿ úú¿ ú¢¿ ú≤¿ ú“¿ úÂ¿ úÔ¿ ú˘¿ ù(¿ ùQ¿ ùî¿ ùƒ¿ û¿ ûJ¿ ûr¿ ûû¿ û–¿ ü%¿ ü:¿ üH¿ üT¿ üá¿ ü¿¿ üÈ¿ üı¿ üˇ¿ †J¿ †m¿ †ï¿ †ù¿ †≠¿ †”¿ †Â¿ °¿ °¿ °)¿ °D¿ °c¿ °k¿ °q¿ °u¿ °v¿ °ƒ¿ ¢¿ ¢b¿ ¢±¿ ¢ﬁ¿ £¿ £¿ £A¿ £Å¿ £†¿ £¥¿ £ƒ¿ £˙¿ §,¿ §?¿ §I¿ §S¿ §e¿ §u¿ §ö¿ §¨¿ §Â¿ §˙¿ •¿ •¿ •¿ •¿ •c¿ •õ¿ •°¿ •Ô¿ ¶¿ ¶#¿ ¶<¿ ¶s¿ ¶y¿ ¶›¿ ß'¿ ßk¿ ßí¿ ßö¿ ß†¿ ß–¿ ßÈ¿ ®¿ ®¿ ®¿ ®¿ ®M¿ ®N¿ ®ã¿ ®ë¿ ®–¿ ®÷¿ ©¿ ©5¿ ©e¿ ©Ü¿ ©á¿ ©æ¿ ©ƒ¿ ™¿ ™]¿ ™Æ¿ ™¥¿ ™˝¿ ´¿ ´,¿ ´_¿ ´q¿ ´£¿ ´ÿ¿ ¨¿ ¨D¿ ¨Q¿ ¨[¿ ¨p¿ ¨|¿ ¨ñ¿ ¨ß¿ ¨“¿ ¨€¿ ¨·¿ ¨Î¿ ¨˝¿ ≠¿ ≠3¿ ≠?¿ ≠¿ ≠¨¿ ≠≠¿ ≠Ì¿ Æ^¿ Æè¿ ÆÎ¿ Ø¿ ØJ¿ Øn¿ Ø™¿ Øø¿ Ø˙¿ ∞¿ ∞¿ ∞G¿ ∞S¿ ∞]¿ ∞e¿ ∞è¿ ∞ü¿ ∞±¿ ∞”¿ ∞Ë¿ ∞Ù¿ ±¿ ±.¿ ±6¿ ±<¿ ±@¿ ±A¿ ±é¿ ±î¿ ±„¿ ≤2¿ ≤w¿ ≤»¿ ≤ÿ¿ ≤ﬁ¿ ≥'¿ ≥D¿ ≥}¿ ≥†¿ ≥°¿ ≥·¿ ≥Á¿ ¥8¿ ¥h¿ ¥¥¿ ¥‹¿ ¥›¿ µ.¿ µ=¿ µC¿ µî¿ µ‰¿ ∂-¿ ∂K¿ ∂Q¿ ∂å¿ ∂ÿ¿ ∑(¿ ∑N¿ ∑é¿ ∑µ¿ ∑‚¿ ∏	¿ ∏3¿ ∏Z¿ ∏`¿ ∏é¿ ∏í¿ ∏ì¿ ∏π¿ ∏ﬁ¿ π¿ π2¿ πT¿ πr¿ πö¿ π†¿ π§¿ π•¿ π ¿ ∫¿ ∫¿ ∫\¿ ∫j¿ ∫p¿ ∫•¿ ∫Ó¿ ∫Ù¿ ªA¿ ª|¿ ªª¿ ª¡¿ º
¿ º$¿ ºG¿ ºU¿ º[¿ ºt¿ ºõ¿ º°¿ º∆¿ º÷¿ º˘¿ Ω¿ Ω¿ Ω ¿ Ωp¿ Ω∑¿ Ω›¿ æ¿ æU¿ æx¿ æÇ¿ æä¿ æ∏¿ æ»¿ æˆ¿ ø¿ ø.¿ øC¿ øO¿ øj¿ øâ¿ øë¿ øó¿ øõ¿ øù¿ øû¿ ø¿¿ øƒ¿ ¿¿ ¿(¿ ¿,¿ ¿o¿ ¿s¿ ¿ø¿ ¡¿ ¡Z¿ ¡z¿ ¡~¿ ¡…¿ ¬¿ ¬`¿ ¬∞¿ ¬˝¿ √L¿ √ú¿ √√¿ √«¿ ƒ¿ ƒ2¿ ƒ6¿ ƒG¿ ƒK¿ ƒò¿ ƒË¿ ≈9¿ ≈S¿ ≈W¿ ≈£¿ ≈Ò¿ ∆A¿ ∆í¿ ∆–¿ ∆‘¿ ∆˚¿ ∆ˇ¿ «E¿ «ì¿ «‡¿ »+¿ »z¿ »»¿ …¿ …f¿ …Æ¿ …˝¿  J¿  ï¿  ÷¿  ⁄¿ À)¿ Ày¿ À ¿ Ã¿ Ã
¿ Ã¿ Ã¿ Ãd¿ Ã´¿ Ã«¿ ÃÀ¿ Õ¿ Õj¿ Õ∂¿ Œ¿ ŒH¿ Œâ¿ Œç¿ Œ›¿ œ¿ œ¿ œ(¿ œ,¿ œw¿ œ¶¿ œ™¿ œ˜¿ –E¿ –ñ¿ –ﬁ¿ —(¿ —v¿ —√¿ —Ë¿ —Ï¿ “¿ “¿ “o¿ “¿¿ ”¿ ”[¿ ”¨¿ ”√¿ ”«¿ ‘¿ ‘'¿ ‘+¿ ‘k¿ ‘π¿ ‘ ¿ ‘Œ¿ ’¿ ’j¿ ’n¿ ’°¿ ’•¿ ’˜¿ ÷G¿ ÷ñ¿ ÷·¿ ◊,¿ ◊0¿ ◊~¿ ◊À¿ ÿ¿ ÿf¿ ÿµ¿ Ÿ¿ Ÿ9¿ Ÿä¿ Ÿ⁄¿ ŸÁ¿ ⁄P¿ ⁄Ç¿ ⁄ï¿ ⁄⁄¿ €¿ €¿ €¿ €[¿ €™¿ €ı¿ ‹$¿ ‹*¿ ‹k¿ ‹º¿ ›¿ ›'¿ ›-¿ ›y¿ ›¿ ›è¿ ›ï¿ ›¬¿ ›ÿ¿ ›Ô¿ ﬁ¿ ﬁ+¿ ﬁK¿ ﬁt¿ ﬁé¿ ﬁñ¿ ﬁö¿ ﬁõ¿ ﬁ¡¿ ﬁ«¿ ﬂ¿ ﬂ ¿ ﬂ4¿ ﬂD¿ ﬂe¿ ﬂx¿ ﬂÇ¿ ﬂó¿ ﬂõ¿ ﬂú¿ ﬂª¿ ﬂº¿ ﬂÙ¿ ﬂ˙¿ ‡E¿ ‡î¿ ‡ﬂ¿ ·¿ ·g¿ ·∑¿ ·œ¿ ·’¿ ‚ ¿ ‚G¿ ‚M¿ ‚â¿ ‚ö¿ ‚≠¿ ‚ ¿ ‚È¿ ‚˘¿ „F¿ „X¿ „Ü¿ „ô¿ „º¿ ‰*¿ ‰8¿ ‰E¿ ‰b¿ ‰u¿ ‰¿ ‰É¿ ‰Ñ¿ ‰ê¿ ‰ë¿ ‰¡¿ ‰«¿ Â¿ Âc¿ Â≥¿ ÂÒ¿ Â˜¿ ÊB¿ Êq¿ Ê¡¿ Êˇ¿ ÁP¿ Áú¿ ÁË¿ Ë#¿ Ë=¿ Ë>¿ Ë¿ ËÖ¿ Ë’¿ È¿ È=¿ Èd¿ Èè¿ È∂¿ Èº¿ È¿¿ È¡¿ Í	¿ Í¿ Í^¿ Í±¿ ÍΩ¿ ÍÂ¿ Î¿ Î'¿ ÎC¿ ÎZ¿ ÎÄ¿ Î†¿ ÎΩ¿ Î¡¿ Î¬¿ Ï¿ Ï¿ Ïi¿ Ïº¿ Ï»¿ ÏÔ¿ Ì¿ Ì1¿ ÌW¿ Ì{¿ Ìõ¿ Ì∏¿ Ì‘¿ ÌÎ¿ Ó¿ Ó1¿ Ó5¿ Ó6¿ Óz¿ ÓÄ¿ Ó–¿ Ô¿ Ô¿ ÔE¿ ÔK¿ Ôi¿ Ôo¿ Ô¿ ÔÖ¿ ÔŸ¿ ÔÒ¿ ÔÚ¿ D¿ v¿ í¿ ¶¿  ¿ ˇ¿ Ò4¿ ÒÑ¿ ÒØ¿ Òﬂ¿ Ú¿ Úz¿ Ú…¿ Û¿ Ûc¿ Ûú¿ ÛÙ¿ Û˝¿ Ù¿ Ù	¿ Ù
¿ ÙU¿ Ù[¿ Ù®¿ Ùµ¿ ÙÔ¿ ı¿ ı¿ ıa¿ ıg¿ ı¥¿ ı¡¿ ı˚¿ ˆ!¿ ˆ"¿ ˆ]¿ ˆc¿ ˆ∞¿ ˆº¿ ˜ ¿ ˜+¿ ˜,¿ ˜|¿ ˜à¿ ˜é¿ ˜Œ¿ ˜‘¿ ¯¿ ¯W¿ ¯w¿ ¯x¿ ¯û¿ ¯ü¿ ¯’¿ ¯€¿ ˘+¿ ˘{¿ ˘Ω¿ ˘√¿ ˙¿ ˙8¿ ˙N¿ ˙^¿ ˙z¿ ˙≤¿ ˙Ú¿ ˚¿ ˚L¿ ˚^¿ ˚ï¿ ˚¢¿ ˚Æ¿ ˚∂¿ ˚∑¿ ˚Ê¿ ¸4¿ ¸Ö¿ ¸ù¿ ¸”¿ ¸Í¿ ¸ˇ¿ ˝¿ ˝¿ ˝5¿ ˝^¿ ˝Ÿ¿ ˛5¿ ˛k¿ ˛´¿ ˛¯¿ ˇG¿ ˇo¿ ˇ⁄¿ ˇÛ¿ 
¿ ¿ ¿ L¿ á¿ ¬¿ ”¿ ¯¿	¿¿¿¿j¿›¿?¿U¿V¿|¿¥¿¿!¿á¿î¿¡¿Û¿¿<¿I¿v¿¬¿·¿¿%¿1¿9¿:¿`¿ò¿¸¿_¿å¿æ¿–¿¿¿É¿è¿ó¿ò¿¿P¿Ö¿‚¿	C¿	r¿	s¿	©¿	∫¿	·¿
¿
<¿
L¿
Å¿
å¿
∑¿*¿G¿|¿á¿Ã¿Û¿¿D¿O¿b¿Ê¿I¿T¿^¿h¿{¿¿Ä¿å¿…¿ ¿÷¿˚¿¿1¿¿∆¿˚¿;¿k¿á¿†¿¶¿Õ¿¯¿ ¿&¿[¿ö¿…¿‰¿¸¿¿Q¿ö¿Õ¿Ú¿¿¿¿¿_¿e¿∂¿¿O¿Ü¿å¿¬¿‡¿ˆ¿¿#¿6¿@¿S¿W¿s¿t¿ó¿ò¿Í¿7¿d¿e¿®¿Æ¿Ô¿¿"¿B¿b¿«¿Õ¿Á¿Î¿¿	¿L¿ê¿÷¿¿S¿`¿â¿ä¿…¿
¿.¿4¿v¿∑¿ˆ¿;¿o¿û¿€¿ ¿;¿N¿T¿r¿ö¿’¿¯¿#¿f¿|¿Ñ¿ä¿∂¿«¿À¿Ã¿¿n¿¥¿∫¿Œ¿‘¿%¿s¿¿¿ˇ¿¿U¿ä¿ê¿‡¿ )¿ y¿ ∆¿!¿!`¿!ö¿!†¿!·¿"/¿"r¿"x¿"è¿"ï¿"ﬁ¿#(¿#w¿#∂¿#Û¿$D¿$`¿$f¿$í¿$ﬁ¿$˘¿% ¿%8¿%{¿%â¿%è¿%¥¿%œ¿%Î¿&:¿&á¿&´¿&Ã¿&‘¿&‚¿&Ë¿'¿',¿'9¿'T¿'o¿'É¿'¥¿'˛¿(
¿(!¿(/¿(]¿(É¿(ã¿(ë¿(ï¿(ñ¿(Â¿(˜¿(˝¿)A¿)í¿)·¿*¿*¿*F¿*S¿*t¿*õ¿*¥¿*’¿+¿+<¿+\¿+i¿+ï¿+õ¿+æ¿+¬¿+√¿,¿,R¿,ë¿,ó¿,‡¿,Ê¿-¿-E¿-\¿-y¿-}¿-~¿-†¿-≈¿-Â¿.¿.¿.!¿."¿.H¿.m¿.{¿.Å¿.‡¿/¿/C¿/u¿/≠¿/≥¿/∑¿/∏¿/ı¿05¿0Y¿0]¿0^¿0§¿0Ã¿0–¿0—¿1¿1#¿1p¿1ñ¿1ú¿1‡¿2¿2¿24¿2Y¿2Ä¿2ß¿2≈¿2’¿2˚¿3¿3¿3B¿3F¿3G¿3t¿3î¿3ª¿3Ë¿4¿47¿4c¿4s¿4ó¿4ª¿4Ò¿5¿51¿5j¿5r¿5Ö¿5è¿5ô¿5∞¿5“¿5Î¿6#¿6)¿69¿6o¿6î¿6π¿6Ã¿6÷¿6¿7¿7
¿7¿7<¿7B¿7ë¿7‡¿80¿8^¿8d¿8≤¿9¿9S¿9ü¿9„¿:3¿:n¿:t¿:¡¿;¿;T¿;Z¿;®¿;˜¿<D¿<q¿<û¿<Ë¿=¿=<¿=o¿=Å¿=¥¿>¿>¿>!¿>-¿>G¿>_¿>ä¿>ì¿>ô¿>∫¿>Â¿?¿?'¿?u¿?è¿?Á¿@¿@_¿@Ä¿@ì¿@ü¿@©¿@Í¿A3¿Aì¿B4¿Bà¿B¨¿B ¿C¿Co¿C¢¿C∆¿C’¿C‚¿CÏ¿D¿D¿D!¿DE¿Di¿D·¿EU¿Ee¿Eî¿Eß¿E±¿E≤¿EÍ¿E¸¿FJ¿Fã¿F∫¿FÍ¿G6¿GY¿Gs¿G´¿G“¿G˘¿H¿H¿H¿HN¿H|¿H∂¿Hæ¿Hø¿H¯¿I¿I¿I-¿I3¿IS¿I°¿I¿J>¿Jp¿J¢¿J®¿J“¿Jˆ¿K!¿K1¿KU¿Kt¿K‡¿KË¿K˚¿L¿L¿L0¿LV¿Lk¿Lw¿LÉ¿Lú¿L∞¿L‹¿LÛ¿M¿M¿MV¿M^¿Mp¿Mó¿M¨¿M∏¿Mæ¿MÎ¿M˚¿N¿NU¿Nv¿Nâ¿Nì¿Nù¿N¥¿N÷¿NË¿O¿O'¿O3¿OL¿OÑ¿Oä¿Oö¿O–¿Oı¿P¿P-¿P7¿PQ¿Pg¿Ph¿Pü¿Pº¿P¬¿P∆¿P«¿Q¿Q\¿Q©¿Qı¿RF¿Rs¿RÄ¿Rú¿Rù¿RÍ¿S¿S¿Sg¿S∂¿S¯¿S˛¿TN¿Tù¿TÃ¿T“¿U"¿Uh¿U¶¿U ¿U◊¿U˙¿U˚¿V:¿V|¿VÇ¿V—¿W¿Wg¿W†¿W¶¿WÂ¿W˙¿X ¿XQ¿X†¿XÃ¿XŸ¿XÒ¿XÚ¿Y4¿Y:¿Yâ¿Y‘¿Z¿ZX¿Z^¿ZÆ¿Zˇ¿[M¿[û¿[Ø¿[µ¿\¿\O¿\î¿\‰¿]-¿]e¿]r¿]ä¿]ã¿]“¿^"¿^o¿^ª¿^◊¿^›¿_.¿_|¿_Õ¿`¿`¿`m¿`Ω¿`√¿`˘¿a¿aW¿az¿aù¿a»¿aÒ¿a˚¿bM¿b]¿bâ¿bè¿bì¿bî¿b¢¿b£¿bÊ¿bÏ¿c9¿cF¿c~¿c£¿c§¿c◊¿c›¿d*¿d6¿dx¿d¢¿d£¿dÈ¿dÔ¿e@¿eâ¿e⁄¿eÏ¿eÚ¿fB¿fò¿fﬁ¿g2¿g\¿gb¿g≥¿gƒ¿g ¿h"¿hI¿hJ¿hó¿h–¿h÷¿i&¿iC¿i¨¿i≠¿iË¿iÓ¿j<¿jã¿jµ¿jª¿k¿kZ¿kg¿kì¿kî¿kµ¿k∂¿kı¿k˚¿lJ¿lP¿lõ¿lÍ¿m;¿mä¿m’¿mÂ¿mÎ¿n8¿nb¿nh¿nª¿o¿oY¿o´¿oæ¿p¿pb¿p¥¿p”¿p˘¿p˝¿p˛¿qC¿qI¿qô¿qÊ¿r3¿rÇ¿r’¿s#¿si¿sµ¿t¿t8¿t>¿tã¿tŸ¿u#¿uo¿uæ¿v¿v,¿v2¿vÅ¿vŒ¿w¿w'¿w4¿wR¿wµ¿w‘¿wÿ¿wŸ¿wÊ¿x¿x¿x4¿x|¿x√¿x‰¿xÎ¿y¿y¿y¿ye¿yf¿y∫¿y¿¿z¿zd¿zt¿zz¿zß¿z ¿zÊ¿zˆ¿{¿{,¿{6¿{I¿{M¿{N¿{ü¿{·¿{Á¿|7¿|á¿|î¿|ö¿|÷¿}¿}d¿}´¿}¿~%¿~+¿~p¿~∂¿~Ô¿¿6¿]¿k¿q¿ô¿ª¿˚¿Ä+¿Ä;¿ÄC¿ÄD¿Äõ¿ÄÃ¿Ä‹¿Ä‰¿ÄÍ¿Å'¿Å@¿Å{¿ÅÅ¿ÅÖ¿ÅÜ¿Å«¿Ç¿Ç¿Çb¿Çä¿Çê¿Çœ¿É¿É*¿Éà¿É¶¿É™¿É´¿ÉÕ¿Éı¿Ñ¿Ñ	¿ÑA¿Ñ`¿Ñâ¿ÑØ¿Ñ”¿Ñı¿Ñ˝¿Ö¿Ö<¿Ö\¿Öb¿Ö±¿Ö¸¿ÜH¿Üü¿ÜÍ¿á¿á:¿áe¿áì¿áæ¿á÷¿à¿à<¿àT¿àa¿àå¿àí¿àñ¿àó¿à÷¿à‹¿â-¿ây¿â∆¿âˇ¿ä¿ä;¿äA¿äç¿ä‹¿ã!¿ãm¿ã®¿ã≈¿ã€¿ãÎ¿å¿å¿å$¿å7¿å;¿åV¿åW¿åñ¿åú¿åÌ¿ç9¿çÜ¿çø¿ç≈¿ç˚¿é(¿é>¿éN¿éz¿éç¿éó¿é™¿éÆ¿é⁄¿é€¿è"¿è(¿èm¿è∫¿ê
¿êY¿êq¿êw¿ê¬¿ê˛¿ë¿ëD¿ëë¿ë”¿ëŸ¿ëÈ¿ëÔ¿í=¿íè¿íü¿íπ¿í÷¿ì¿ì#¿ì1¿ì7¿ìO¿ìï¿ì∑¿ìÎ¿ì˝¿î+¿îr¿î|¿îë¿îù¿î‡¿ï¿ïG¿ïb¿ïè¿ïµ¿ïΩ¿ïÊ¿ñ&¿ñE¿ñj¿ñw¿ñâ¿ñ∑¿ó¿ó¿ó3¿ó?¿óÜ¿óÃ¿ò¿òR¿òm¿òì¿òõ¿ò°¿ò•¿ò¶¿òÛ¿ô ¿ô¿ôW¿ô´¿ôˆ¿öE¿öé¿öî¿öÂ¿õ5¿õX¿õ^¿õn¿õt¿õƒ¿ú¿ú-¿úJ¿úÄ¿ú∂¿úƒ¿ú ¿úÚ¿ù8¿ùZ¿ùé¿ù—¿û¿û1¿ûL¿ûy¿ûü¿ûß¿û¥¿ûÃ¿û“¿û÷¿û◊¿ü'¿üu¿ü∆¿†¿†H¿†k¿†Å¿††¿†ÿ¿° ¿°+¿°L¿°o¿°ì¿°¬¿¢¿¢*¿¢4¿¢e¿¢¡¿¢“¿¢‹¿¢˝¿£¿£¿£%¿£)¿£*¿£u¿£{¿£…¿£Ò¿£˜¿§;¿§s¿§ì¿§©¿§Œ¿§Ù¿•¿•;¿•_¿•x¿•°¿••¿•¶¿•Î¿¶,¿¶>¿¶D¿¶â¿¶∫¿¶◊¿¶˜¿ß¿ß2¿ßX¿ßw¿ß ¿ßÏ¿®¿®&¿®*¿®+¿®n¿®ã¿®õ¿®Ω¿®ı¿©;¿©W¿©ß¿©ƒ¿©—¿©Ì¿™8¿™S¿™`¿™l¿™t¿™á¿™ë¿™›¿´+¿´y¿´»¿¨¿¨a¿¨™¿¨¬¿¨–¿¨÷¿≠¿≠?¿≠Q¿≠É¿≠—¿≠€¿≠¿≠¸¿Æ¿Æ.¿ÆY¿Æb¿Æh¿Æx¿Æ°¿Æ«¿Ø¿Ø3¿Øi¿Øä¿Ø∞¿Øæ¿ØÃ¿ØÓ¿∞*¿∞F¿∞ñ¿∞∑¿∞»¿∞Ô¿±¿±"¿±B¿±x¿±â¿±©¿±˙¿≤N¿≤í¿≤£¿≤º¿≥¿≥!¿≥1¿≥=¿≥G¿≥¿≥ó¿≥Â¿≥˝¿¥
¿¥&¿¥w¿¥´¿¥∏¿¥‘¿µ"¿µo¿µØ¿µº¿µ—¿∂!¿∂.¿∂:¿∂B¿∂U¿∂_¿∂á¿∂ó¿∂∫¿∂Í¿∑
¿∑J¿∑]¿∑g¿∑Ä¿∑©¿∑÷¿∑‡¿∑˛¿∏W¿∏Ø¿∏»¿∏¯¿∏˛¿π¿π1¿πa¿πÖ¿πò¿π¢¿πÿ¿πı¿π˚¿πˇ¿∫ ¿∫L¿∫ñ¿∫ú¿∫Ï¿ª¿ª¿ª¿ªY¿ªó¿ªò¿ª„¿ªÈ¿º5¿ºz¿º»¿Ω¿Ω;¿ΩA¿Ωè¿Ωﬂ¿æ-¿æD¿æJ¿æñ¿æ‡¿ø/¿øa¿øö¿øõ¿øÎ¿¿¿¿¿¿\¿¿•¿¿´¿¿ı¿¡A¿¡ç¿¡÷¿¬"¿¬[¿¬©¿¬À¿¬œ¿¬–¿√¿√¿√m¿√π¿ƒ
¿ƒ#¿ƒ)¿ƒp¿ƒΩ¿≈	¿≈Y¿≈©¿≈∆¿≈˘¿∆¿∆,¿∆0¿∆1¿∆q¿∆Æ¿∆¥¿∆˛¿«%¿«+¿«x¿«º¿«‹¿«Ò¿«˜¿»C¿»í¿»‡¿…/¿…A¿…t¿…©¿…ø¿…€¿ ¿ 7¿ T¿ \¿ b¿ ù¿À	¿À(¿À{¿ÀÅ¿Àû¿Àæ¿Àƒ¿Àˆ¿Ã:¿Ãá¿Ãç¿Ã£¿Ãß¿Ã®¿Ã©¿Ã¿Õ2¿Õs¿Õy¿ÕØ¿Õµ¿Õ˚¿Œ"¿Œ(¿Œx¿Œ≈¿œ¿œO¿œõ¿œú¿œ„¿–2¿–~¿– ¿—¿—g¿—≤¿—ø¿—≈¿“¿“]¿“©¿“ƒ¿“ ¿”¿”i¿”∑¿‘¿‘V¿‘õ¿‘°¿‘±¿‘∑¿’¿’?¿’Ö¿’Ü¿’ï¿’ñ¿’›¿÷¿÷¿÷O¿÷f¿÷l¿÷µ¿÷Ÿ¿÷ˆ¿◊¿◊1¿◊[¿◊{¿◊û¿◊ ¿◊˜¿ÿ¿ÿ¿ÿ¿ÿo¿ÿu¿ÿ¿¿ÿ‹¿ÿ‚¿Ÿ+¿Ÿv¿Ÿ≈¿⁄¿⁄]¿⁄§¿⁄™¿⁄¿¿⁄∆¿€¿€)¿€/¿€=¿€Ñ¿€ñ¿€„¿‹¿‹,¿‹M¿‹s¿‹í¿‹ú¿‹¢¿‹æ¿‹Ÿ¿‹„¿‹Î¿‹ı¿›¿›¿›[¿›|¿›Ä¿›Å¿›÷¿›‹¿ﬁ'¿ﬁb¿ﬁh¿ﬁ£¿ﬁ©¿ﬁı¿ﬂ0¿ﬂY¿ﬂg¿ﬂm¿ﬂÆ¿ﬂ€¿ﬂ¸¿‡=¿‡t¿‡z¿‡~¿‡¿‡≠¿‡Ê¿‡Á¿·¿·O¿·è¿·’¿·€¿‚¿‚
¿‚¿‚K¿‚u¿‚ê¿‚ë¿‚∂¿‚”¿‚‘¿‚ˇ¿„¿„S¿„ó¿„æ¿„ƒ¿‰¿‰¿‰D¿‰]¿‰v¿‰|¿‰ç¿‰ë¿‰í¿‰€¿‰·¿Â0¿Â6¿Â¿ÂÀ¿Â‹¿Âˆ¿Ê¿Ê/¿ÊX¿Êv¿Ê~¿ÊÇ¿ÊÉ¿ÊÀ¿Ê—¿Á¿Ái¿Áï¿Áπ¿Á÷¿Ë¿ËD¿Ëp¿Ë~¿ËÑ¿ËÖ¿Ë–¿È¿Èj¿È∂¿È∑¿Í1¿Í[¿Í«¿ÍÂ¿ÍÊ¿Î1¿Îi¿Îx¿ÎÄ¿Î©¿Î™¿Î’¿Ï+¿Ïp¿Ï√¿Ì¿Ì^¿Ìn¿Ìv¿Ì|¿Ì√¿Ó¿ÓX¿Óß¿Óˆ¿ÔF¿ÔX¿Ô£¿Ô’¿Ô€¿¿+¿F¿ß¿ÿ¿˛¿Ò¿Ò¿Ò¿Ò¿ÒN¿Òj¿ÒΩ¿Ò’¿Ú#¿Úu¿ÚÉ¿Úâ¿Ú…¿Û¿Û¿ÛP¿Ûπ¿ÛÛ¿Ù¿Ù`¿Ùú¿Ùﬂ¿Ùı¿Ù¸¿ı*¿ıu¿ıª¿ıø¿ı¿¿ˆ¿ˆ:¿ˆ]¿ˆd¿ˆâ¿ˆÌ¿ˆÓ¿˜1¿˜ê¿˜ë¿˜Ú¿¯O¿¯¥¿˘¿˘¿˘T¿˘q¿˘≈¿˘˜¿˙ ¿˙=¿˙X¿˙|¿˙¶¿˙ÿ¿˙‚¿˙Í¿˚-¿˚è¿˚∞¿˚‘¿¸¿¸J¿¸o¿¸É¿¸ç¿¸‘¿¸Ë¿¸Ú¿˝+¿˝W¿˝a¿˝ô¿˝Œ¿˛¿˛h¿˛ñ¿˛À¿˛◊¿˛·¿˛È¿˛Ò¿˛Ú¿ˇA¿ˇb¿ˇh¿ˇi¿ˇå¿ˇç¿ˇ¨¿ˇœ¿ˇ˜¿ ¿ >¿ S¿ û¿ ß¿ —¿ ˝¿H¿Q¿^¿ã¿£¿Õ¿‚¿-¿6¿]¿ª¿ﬁ¿Ê¿Ï¿Ì¿¿¿¿#¿$¿]¿c¿≥¿¸¿¿¿M¿ë¿—¿Ì¿Ò¿Ú¿.¿4¿c¿¥¿˛¿N¿y¿¿À¿„¿È¿6¿Å¿≤¿–¿Ë¿¿1¿7¿W¿–¿	3¿	7¿	8¿	D¿	E¿	ñ¿	¢¿	Î¿	Ï¿	Ì¿	˛¿	ˇ¿
M¿
ï¿
≠¿
≤¿
Ò¿=¿R¿¢¿Ò¿?¿l¿ß¿Æ¿≥¿¿8¿9¿:¿e¿q¿å¿∏¿—¿Ì¿¿#¿+¿o¿Ü¿æ¿˛¿1¿G¿Q¿Å¿â¿£¿∆¿Œ¿Á¿	¿¿:¿n¿v¿ç¿¨¿¥¿∫¿Õ¿—¿“¿ﬁ¿9¿:¿w¿ø¿Ê¿Ú¿
¿)¿L¿Ç¿â¿∂¿∆¿¸¿¿0¿:¿h¿å¿∂¿–¿◊¿Á¿¿0¿:¿M¿Q¿R¿ñ¿≈¿À¿¿R¿^¿y¿ì¿…¿–¿˝¿¿C¿d¿w¿Å¿÷¿Ê¿¿/¿9¿L¿P¿Q¿^¿j¿Ø¿⁄¿G¿ƒ¿l¿‘¿3¿ù¿¿(¿]¿Ø¿¿¿ï¿ô¿ö¿¶¿Ó¿Ô¿@¿Q¿W¿¢¿Ê¿Ï¿<¿{¿»¿¿X¿x¿~¿…¿ ¿ ¿ !¿ '¿ s¿ ¨¿ ¬¿ ‡¿ ¿!¿!6¿!=¿!_¿!†¿!¡¿!È¿!˝¿"¿"/¿"8¿">¿"B¿"C¿"î¿"™¿"∞¿# ¿#O¿#}¿#É¿#”¿$ ¿$ë¿$…¿$Õ¿$œ¿$–¿%¿%	¿%J¿%ä¿%é¿%”¿%˝¿&P¿&Q¿&¢¿&«¿&Õ¿&¸¿'¿'¿'M¿']¿'~¿'∂¿'Œ¿(¿(R¿(_¿({¿(«¿)¿)d¿)µ¿)¬¿)€¿*¿*S¿*m¿*§¿*±¿* ¿*Ú¿+E¿+c¿+É¿+∫¿+«¿+”¿+€¿+Ó¿+¯¿,	¿,¿,¿,#¿,K¿,m¿,ç¿,ß¿,¡¿,«¿,€¿,ı¿-¿-¿-¿-¿-'¿-L¿-e¿-¿-ú¿-¢¿-¶¿-ß¿-≥¿-≈¿-Ÿ¿-Û¿.¿.¿.¿.¿."¿.=¿.W¿.t¿.z¿.~¿.¿.ã¿.ø¿.Ÿ¿.Ò¿.˜¿.˚¿.¸¿/¿/:¿/ß¿/´¿/≠¿/Æ¿/Î¿/Ô¿0;¿0|¿0∏¿0‰¿13¿1j¿1à¿1ª¿1’¿1÷¿1¯¿2¿2¿2¿2‰¿2¯¿2¸¿2˛¿2ˇ¿3=¿3A¿3í¿3®¿3¨¿3ˇ¿4¿4¿4h¿4¥¿4È¿57¿5;¿5é¿5‡¿5Ò¿5ı¿6[¿6_¿6m¿6q¿6∫¿6€¿7j¿7ª¿8¿8;¿8s¿8£¿8‡¿8Ê¿9¿9¿9S¿9ù¿9œ¿:¿:/¿:l¿:r¿:é¿:í¿:ì¿:™¿:»¿:Ì¿:Ó¿;?¿;d¿;j¿;ô¿;ü¿;∫¿;Í¿;˙¿<¿<S¿<k¿<º¿<Ô¿<¸¿=¿=d¿=Ø¿>¿>R¿>_¿>x¿>†¿>¿?
¿?A¿?N¿?g¿?è¿?‚¿@ ¿@ ¿@W¿@d¿@p¿@x¿@ã¿@ï¿@¶¿@™¿@´¿@≈¿@ﬁ¿A#¿As¿A§¿AŸ¿AÔ¿B¿B%¿BP¿BÅ¿B¢¿C¿C8¿C@¿C[¿Cw¿CÑ¿Cß¿C…¿D¿DZ¿D¨¿D›¿E/¿ET¿EÖ¿E≤¿EŒ¿E›¿F'¿FV¿Fô¿F ¿F˘¿Gw¿GÌ¿H)¿He¿Hõ¿H£¿H©¿H≠¿HÆ¿H˝¿I¿IS¿IÖ¿Iº¿J	¿Jà¿J◊¿J˘¿K¿K1¿K`¿Kd¿Ke¿Kß¿K≈¿KÎ¿KÔ¿K¿L:¿Le¿LÅ¿LÖ¿LÜ¿Lµ¿M¿MN¿Mí¿M∞¿M„¿N¿N8¿NE¿N¡¿O¿O¿OF¿Oi¿Où¿O™¿P¿Pr¿Px¿P§¿PÃ¿P‚¿PÊ¿PÁ¿Q¿Q¿QT¿Qu¿Qñ¿Q¨¿Q∞¿Q±¿Q˜¿Q˝¿R3¿RH¿Rl¿Rà¿R⁄¿S¿SC¿Sm¿SÖ¿Sô¿Sü¿S∑¿SŒ¿S„¿SÁ¿SË¿T2¿T8¿Tá¿Tÿ¿U¿UB¿U]¿Ux¿Uî¿U∂¿V¿V:¿VH¿VN¿Vo¿Vû¿Vµ¿Vπ¿V∫¿V∆¿VÎ¿W¿W(¿WD¿W_¿W±¿W‹¿W‚¿WÊ¿WÁ¿WÛ¿X¿X¿X=¿XY¿Xo¿X¡¿XÏ¿XÚ¿Xˆ¿X˜¿Y¿Y¿YB¿Y^¿Yy¿YÀ¿Yˆ¿Y¸¿Z ¿Z¿Z¿ZA¿Ze¿ZÅ¿Zó¿ZÈ¿[¿[¿[¿[¿[H¿[t¿[u¿[ù¿[«¿[»¿\¿\7¿\R¿\t¿\ƒ¿\¿\Ù¿\ı¿]3¿]^¿]y¿]õ¿]Î¿^¿^¿^¿^$¿^V¿^ñ¿^¥¿^Ÿ¿^Ó¿_¿_H¿_j¿_{¿_Ö¿_ô¿_Ì¿`¿`#¿`)¿`>¿`B¿`D¿`E¿`ï¿`Æ¿`≤¿a¿aW¿aq¿a¨¿a≠¿aÌ¿aÛ¿b7¿bV¿b\¿b¨¿bÀ¿bÿ¿bÈ¿c	¿c ¿c$¿c%¿c1¿c`¿cy¿c≈¿c…¿c ¿c÷¿cË¿d7¿dK¿dO¿dQ¿dR¿dü¿d´¿dØ¿d“¿e#¿eB¿eî¿e‡¿f¿fM¿fÜ¿fá¿f«¿g	¿g
¿gQ¿g¢¿g®¿g∏¿gæ¿h¿hJ¿hy¿hz¿h«¿i¿iH¿iJ¿iK¿iò¿iÀ¿iœ¿j¿jA¿jÄ¿jÅ¿j’¿j÷¿j‚¿k%¿kQ¿kU¿kV¿kb¿k»¿k ¿kÀ¿l¿la¿le¿l∂¿m¿m5¿m¿m°¿m¬¿m˜¿n¿nD¿nE¿nì¿n¨¿nﬁ¿nﬂ¿o
¿o¿o9¿o?¿oO¿oU¿o§¿oÿ¿p#¿pS¿pû¿pŒ¿pÁ¿q¿q;¿qd¿qç¿qì¿qî¿q‚¿r&¿rL¿rM¿rò¿rØ¿rµ¿s¿s<¿sU¿sV¿s¿sÖ¿sŒ¿t¿tX¿t^¿t®¿tÎ¿t˜¿u9¿u:¿uä¿u°¿u“¿u”¿uﬂ¿vH¿vI¿vp¿vq¿v≥¿v‚¿w
¿w¿w¿wI¿wm¿wq¿wr¿wµ¿wª¿x¿xA¿x]¿xc¿x¨¿xÈ¿y¿y7¿y;¿y=¿y>¿yè¿yß¿y´¿y˙¿z
¿zO¿zj¿zÑ¿zπ¿zø¿z¿¿zÃ¿{m¿{∞¿{›¿|¿|.¿|V¿|W¿|Ñ¿|¨¿|◊¿|ﬁ¿}¿}Z¿}å¿}∫¿}ª¿}·¿}‚¿~¿~d¿~ã¿~´¿~Â¿¿9¿S¿\¿b¿¨¿≠¿˚¿ÄF¿Äó¿Ä„¿ÄÒ¿Å$¿Å:¿Å>¿Å?¿ÅK¿Åy¿Åz¿Å’¿Å÷¿Å‚¿Å¸¿Ç*¿Ç.¿Ç/¿Ç;¿Ç~¿Çü¿Ç£¿Ç•¿Ç¶¿ÇÛ¿É¿É¿Éc¿É±¿É”¿É◊¿Ñ!¿Ñp¿Ñæ¿Ö¿Ö[¿Öñ¿Öö¿ÖÁ¿Ü3¿Ü{¿Üê¿Ü€¿Ü¸¿á¿áK¿áe¿áö¿á≈¿áﬁ¿à¿à%¿à&¿àE¿àg¿àâ¿à‰¿àÂ¿àÒ¿âí¿â™¿â…¿ä¿äW¿äó¿äπ¿äı¿ã)¿ãw¿ã∆¿å¿å]¿åw¿åÇ¿åä¿åò¿åû¿åü¿å›¿çq¿çÅ¿çÇ¿çƒ¿é¿é¿é	¿éS¿éÑ¿é≤¿é”¿é‘¿è¿è.¿èO¿è¿èÖ¿èÜ¿è¢¿è∆¿è—¿è¿ê¿êX¿êê¿ê»¿êÎ¿ë¿ë¿ë¿ë¿ëW¿ëù¿ëΩ¿ë¸¿í3¿íU¿ío¿íx¿í~¿í§¿í‡¿íÌ¿ì<¿ìB¿ìX¿ì\¿ì]¿ìi¿ìê¿ìπ¿ìΩ¿ìæ¿ì ¿î¿îS¿îr¿îó¿î©¿î±¿î“¿î˙¿ï ¿ï¿ï¿ï(¿ïF¿ïf¿ïÜ¿ïå¿ïê¿ïë¿ï≠¿ïÆ¿ï∫¿ï‘¿ïÏ¿ï¿ïÒ¿ñ/¿ñ1¿ñ2¿ñz¿ñ~¿ñÃ¿ó¿ó¿ó ¿óh¿ón¿óΩ¿ò
¿ò[¿ò´¿ò¬¿òÓ¿ô¿ôA¿ôH¿ôï¿ôô¿ôö¿ô≤¿ôŒ¿ôÈ¿ô¸¿ô˝¿ö(¿öO¿öP¿öâ¿öæ¿öø¿öÙ¿õ!¿õ"¿õH¿õb¿õc¿õ∫¿õ¿¿õ–¿õ÷¿ú;¿ú£¿ù¿ù5¿ù6¿ù[¿ùç¿ù∑¿ù˘¿û-¿ûb¿û≥¿û‡¿ü¿ü|¿üã¿ü˘¿†¿†U¿†¥¿°¿°`¿°f¿°g¿°ó¿¢¿¢.¿¢m¿¢®¿¢ƒ¿¢ﬂ¿¢Á¿¢Ì¿¢Ò¿¢Ú¿£(¿£-¿£|¿£ì¿£ò¿£Á¿§1¿§t¿§u¿§£¿§‚¿•¿•¿•,¿•2¿•`¿•x¿•~¿•º¿•¿¿•¡¿¶¿¶`¿¶ù¿¶¢¿¶‹¿ß¿ß(¿ß@¿ßW¿ßv¿ß|¿ßö¿ßµ¿ß‘¿ß˚¿®'¿®l¿®î¿®¡¿©¿©H¿©u¿©ü¿©•¿©Ÿ¿™¿™¿™¿™M¿™b¿™r¿™x¿™ç¿™ù¿™£¿™æ¿™¬¿™√¿´¿´a¿´~¿´ò¿´…¿´Õ¿´Œ¿¨¿¨c¿¨|¿¨Ç¿¨Ã¿≠¿≠¿≠$¿≠*¿≠y¿≠£¿≠¡¿≠√¿≠ƒ¿Æ¿Æ¿Æs¿Æ√¿Æ÷¿Ø¿Øe¿Øà¿Ø∞¿ØÕ¿Ø⁄¿ØÚ¿∞¿∞(¿∞1¿∞3    
ParentDataPaintingContextConstraintsSemanticsHandlePipelineOwnerRenderObjectRenderObjectWithChildMixinContainerParentDataMixinContainerRenderObjectMixin"RelayoutWhenSystemFontsChangeMixin_SemanticsFragment_ContainerSemanticsFragment_InterestingSemanticsFragment_RootSemanticsFragment_SwitchableSemanticsFragment_SemanticsGeometryDiagnosticsDebugCreator ∂ô