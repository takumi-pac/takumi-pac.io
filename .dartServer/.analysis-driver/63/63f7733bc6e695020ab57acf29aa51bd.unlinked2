ÄÕvalue==hashCodetoString_currentElementcurrentContextcurrentWidgetcurrentState_debugLabelkeycreateElementtoStringShortdebugFillProperties	canUpdate_debugConcreteSubtypebuildcreateStatecreatedinitializedreadydefunctwidget_widget_debugLifecycleState_debugTypesAreRightcontext_elementmounted	initStatedidUpdateWidget
reassemblesetState
deactivateactivatedisposedidChangeDependencieschilddebugIsValidRenderObjectdebugTypicalAncestorWidgetClass%_debugDescribeIncorrectParentDataTypeapplyParentDatadebugCanApplyOutOfTurnupdateShouldNotifycreateRenderObjectupdateRenderObjectdidUnmountRenderObjectchildreninitialactiveinactive_locked	_elements_unmount_unmountAll_deactivateRecursivelyaddremovedebugContainsownerdebugDoingBuildfindRenderObjectsizedependOnInheritedElement"dependOnInheritedWidgetOfExactType'getElementForInheritedWidgetOfExactTypefindAncestorWidgetOfExactTypefindAncestorStateOfTypefindRootAncestorStateOfTypefindAncestorRenderObjectOfTypevisitAncestorElementsvisitChildElementsdispatchNotificationdescribeElementdescribeWidgetdescribeMissingAncestordescribeOwnershipChainonBuildScheduled_inactiveElements_dirtyElements_scheduledFlushDirtyElements_dirtyElementsNeedsResorting_debugIsInBuildScopefocusManagerscheduleBuildFor_debugStateLockLevel_debugStateLockeddebugBuilding_debugBuilding_debugCurrentBuildTarget	lockState
buildScope>_debugElementsThatWillNeedToBeRebuiltDueToGlobalKeyShenanigansB_debugTrackElementThatWillNeedToBeRebuiltDueToGlobalKeyShenanigans_debugElementWasRebuilt_globalKeyRegistry_debugIllFatedElements_debugGlobalKeyReservationsglobalKeyCount#_debugRemoveGlobalKeyReservationFor_registerGlobalKey_unregisterGlobalKey_debugReserveGlobalKeyFor _debugVerifyGlobalKeyReservation_debugVerifyIllFatedPopulationfinalizeTreeonNotificationattachNotificationTreecurrentparent_parent_debugReassembleConfig_notificationTreeslot_slotdepth_depth_sortdebugIsDefunctdebugIsActive_owner_debugIsInScoperenderObjectdescribeElements_lifecycleStatevisitChildrendebugVisitOnstageChildrenupdateChildmount _debugRemoveGlobalKeyReservationupdateupdateSlotForChild_updateSlot_updateDepthdetachRenderObjectattachRenderObject_retakeInactiveElementinflateWidget_debugCheckForCyclesdeactivateChild$_debugForgottenChildrenWithGlobalKeyforgetChild_activateWithParent_activateRecursivelydebugDeactivatedunmount_inheritedWidgets_dependencies_hadUnsatisfiedDependencies)_debugCheckStateIsActiveForAncestorLookupdoesDependOnInheritedElement_updateInheritance!_debugCheckOwnerBuildTargetExistsdebugGetCreatorChaindebugGetDiagnosticChaintoDiagnosticsNodedebugDescribeChildrendirty_dirty_inDirtyList_debugBuiltOnce'_debugAllowIgnoredCallsToMarkNeedsBuild*_debugSetAllowIgnoredCallsToMarkNeedsBuildmarkNeedsBuildrebuildperformRebuildstateful	toJsonMapbuilder_defaultErrorWidgetBuilder
_stringifymessage_flutterError_child_debugDoingBuild_firstBuildstate_state_didChangeDependenciesupdatednotifyClients_applyParentDataapplyWidgetOutOfTurn_dependentsgetDependenciessetDependenciesupdateDependenciesnotifyDependent_renderObject_ancestorRenderObjectElement _findAncestorRenderObjectElement_findAncestorParentDataElement_debugUpdateRenderObjectOwner_performRebuildupdateChildren_updateParentDatainsertRenderObjectChildmoveRenderObjectChildremoveRenderObjectChildassignOwner	_children_forgottenChildren$_debugCheckHasAssociatedRenderObjectelementindexinstance4
_DebugOnly
_debugOnly	ObjectKey	GlobalKeyLabeledGlobalKeyGlobalObjectKeyWidgetStatelessWidgetStatefulWidget_StateLifecycleStateSetterStateProxyWidgetParentDataWidgetInheritedWidgetRenderObjectWidgetLeafRenderObjectWidgetSingleChildRenderObjectWidgetMultiChildRenderObjectWidget_ElementLifecycle_InactiveElementsElementVisitorBuildContext
BuildOwnerNotifiableElementMixin_NotificationNode_isProfileBuildsEnabledForElement_ElementDiagnosticableTreeNodeErrorWidgetBuilderErrorWidgetWidgetBuilderIndexedWidgetBuilderNullableIndexedWidgetBuilderTransitionBuilderComponentElementStatelessElementStatefulElementProxyElementParentDataElementInheritedElementRenderObjectElementRootRenderObjectElementLeafRenderObjectElementSingleChildRenderObjectElementMultiChildRenderObjectElementDebugCreator_debugReportExceptionIndexedSlot_NullElement_NullWidget_debugShouldReassembleÅfactory	immutablemustCallSuperoptionalTypeArgs	protectedrequiredvisibleForTestingFlutterErrorErrorSummaryErrorDescription	ErrorHint
debugPrintdebugPrintStackVoidCallbackValueChangedValueGetterValueSetterDiagnosticsNodeDiagnosticLevelKeyLocalKeyValueKeyRenderObject	RenderBoxdebugDumpRenderTreedebugDumpLayerTreekey	identicalObjectoverrideboolruntimeTypevalueinthashidentityHashCodeStringdescribeIdentityobjectRuntimeType
deactivate	UniqueKeyGestureDetector	initState
debugLabelemptyWidgetsBindinginstance
buildOwner_globalKeyRegistrywidgetstateconstructor	shortHashendsWith	substringlengthcreateStateupdateDiagnosticableTreevoidDiagnosticPropertiesBuilderdebugFillPropertiesdefaultDiagnosticsTreeStyleDiagnosticsTreeStyledense
nonVirtualhashCodeRowColumnPaddingSizedBoxAlignCustomSingleChildLayout	Container
DecorationCustomPaintThemesetState	canUpdate"dependOnInheritedWidgetOfExactTypeStreamChangeNotifierdisposedidChangeDependenciesIgnorePointerignoringKeyedSubtreeDiagnosticablecreated
reassembleBindingBasereassembleApplicationImagedefunct	fromPartsdynamicFuturemarkNeedsBuildactivatereadyAnimatedWidgetaddEnumPropertydefaultValueObjectFlagPropertyifNull
parentDataStack
ParentData
PositionedSizeTypeIterableparentDataCreatorownershipChainchildmarkNeedsLayoutmarkNeedsPaintapplyWidgetOutOfTurnColorof	ThemeDataBuilderInheritedNotifier
ListenableInheritedModel(SlottedMultiChildRenderObjectWidgetMixinmountRenderObjectWithChildMixinContainerRenderObjectMixinRenderBoxContainerDefaultsMixinRenderStackindexListSetHashSet_lifecycleStateinactive$debugPrintGlobalKeyedWidgetLifecyclevisitChildren_parentunmounttoListsort_sortclearreversedforEachisEmptyactivedebugDeactivatedcontainsremovevisitChildElementsbuildcontext
showDialogbuilderScaffoldStateshowBottomSheetScaffoldmounted	drawFrame
RenderViewaspectMaterialInkWellNotificationListenerNotificationdescribeElementserrorPropertydebugCheckHasMaterialassignOwnerOffstageFocusManagerregisterGlobalHandlers
FocusScopeFocusScopeNodenewowner debugPrintScheduleBuildForStackslabeldirtydescribeElement_inDirtyListdebugPrintBuildScopepragmacallbackkReleaseModeMap"debugEnhanceBuildTimelineArgumentsTimeline	startSync	arguments*_debugSetAllowIgnoredCallsToMarkNeedsBuild_debugIsInScopeDiagnosticsPropertystyle
kDebugModetoDiagnosticsNodetoTimelineArgumentsrebuildestackinformationCollectorDiagnosticsDebugCreator
finishSyncanyelementHashMapputIfAbsentcontainsKeyparentrenderObjectattached
childToKeytoStringcurrentChildforgetChildLinkedHashSetkeys_unmountAll
isNotEmptyaddAllmapcountjoinDebugReassembleConfig_debugReassembleConfig_notificationTreeonNotificationdispatchNotificationdebugProfileBuildsEnabled$debugProfileBuildsEnabledUserWidgetsdebugIsWidgetLocalCreationcreateElementinitialdepthTimer	AnimationexpectedAncestorTypeDiagnosticsBlocknamechildrenallowTruncateStringPropertyOverlayFindervisitChildrenForSemantics_debugStateLocked_debugConcreteSubtypeslot_debugElementWasRebuilt_debugReserveGlobalKeyForinsertRenderObjectChildmoveRenderObjectChildremoveRenderObjectChild_registerGlobalKey#_debugRemoveGlobalKeyReservationFor_updateSlot_updateDepthdetachRenderObjectattachRenderObject_currentElementB_debugTrackElementThatWillNeedToBeRebuiltDueToGlobalKeyShenanigansdeactivateChild_inactiveElements_activateWithParentscheduleBuildFor
dependency_dependents_unregisterGlobalKey_debugBuildingErrorSpacerRenderSliverdescribeForErrorhasSizedebugNeedsLayoutsizeupdateDependencies_inheritedWidgetsupdateShouldNotify_debugCurrentBuildTargettoStringShortshowNamelevelhiddenFlagPropertyifTruea	compareTobsparsedescribeWidgetdebugOnRebuildDirtyWidgetcalldebugPrintRebuildDirtyWidgetsDiagnosticableTreeNode DiagnosticsSerializationDelegate	toJsonMapdebugIsDefunctreportErrorFlutterErrorDetailsonErrorerrorRenderErrorBox	exceptionwithDetailsmessagequoted
whitespaceOverlayEntryValueWidgetBuilderListViewSliverChildBuilderDelegate
childCountAnimatedBuilder
WidgetsAppMaterialAppdebugWidgetBuilderValue_dirtyupdateChild_debugTypesAreRight_element_widget_debugLifecycleStateinitialized_firstBuildperformRebuilddidUpdateWidgetdependOnInheritedElementstateful_updateParentDataapplyParentDatadebugCanApplyOutOfTurnAutomaticKeepAlive	KeepAliveupdated!_debugCheckOwnerBuildTargetExists	dependent_dependenciesupdateSlotForChildPageStorageperformLayoutinvokeLayoutCallback
buildScopedebugDumpAppinsertdebugTypicalAncestorWidgetClassdebugGetCreatorChain
stackTracecreateRenderObjectdebugDisposed_slotdebugCreatorupdateRenderObjectslotsforgottenChildrenfilledvaluesoldChildeverydidUnmountRenderObjectdebugIsValidRenderObject%_debugDescribeIncorrectParentDataTypeshallowrunApp_ownerdebugDescribeChildrendebugValidateChildupdateChildrendebugChildrenHaveDuplicateKeysContainerParentDataMixinwhereaftermoveinflateWidgeti
StackTraceInformationCollectorlibraryUnimplementedError
widgetNameLocalKeyKey	GlobalKeyDiagnosticableTreeWidgetDiagnosticableProxyWidgetRenderObjectWidgetElementBuildContextDiagnosticableTreeNodeLeafRenderObjectWidgetComponentElementProxyElementRenderObjectElementG·
NL#≥cÈ˝?˛´å  package:flutter/foundation.dart  package:flutter/foundation.dart  package:flutter/foundation.dart  package:flutter/foundation.dart  package:flutter/foundation.dart  package:flutter/rendering.dart  
dart:async  dart:collection  dart:developer  package:flutter/foundation.dart  package:flutter/rendering.dart  binding.dart  
debug.dart  focus_manager.dart  inherited_model.dart  notification_listener.dart  widget_inspector.dart  	dart:core¿¨Ÿ ¿,ô¢ <ÄÜÄ§Ä•Ä∫Ä‘ÄÌÄÓÅÅAÅBÅYÅnÅãÅ™ÅœÅÔÅÇÇ)Ç6ÇGÇ[ÇhÇtÇâÉÉqÉ¡ÑÑwÑxÑêÑÆÑ‘ÖÖbÖ≠ÖÆÖ˝ÜHÜõÜƒÜ«Ü“Ü·áááá/áEáGáHátáuá}á~á√á«àà/à3àAàEàpà¡àŒàÒâ<â[â\â†â∑â∏âƒâÁää'ä-äKäuäyäzäÜäœä–ä‹äÚããCãIãúã†ã¢ã£ã”ã◊å'åtåªåøçç\ç´ç¸é
ééZé©éıèè!èqè¶è™èˆê2ê6êFêJêôêÿê‹ë)ëxë¡ííaítíxí≈ììì"ì&ìwìÑìñìﬁî/î@îFîñî®î¯î˘ï%ï+ïyïåïΩïæñññañgñ∏ñœóóóHóNóûóµóÌóÓò?òEòêò·ôô2ô`ôÜôΩôÓööö$ö*ö;ö?öAöBököoöºö‰öˆõEõxõ~õ≤úúDúEúbúcúoúÖú úıù*ù0ù`ùdùfùgù≥ù∑ûûû#ûtû∂üüSühülüxü£ü‘ü⁄ü‚üÊ†0†}†à†å†Õ†ﬂ°-°°∫°ª°ˇ¢¢¢"¢E¢q¢Ö¢ã¢≤¢‹¢‡¢·¢Ì£££)£?£Å£Á§D§a§ñ§ª••
•?•C•E•F•x•|•À¶¶\¶`¶Ø¶˙ß4ßÇß¢ß¶ß˜®G®í®‡®Ù®¯©F©ë©‡™0™~™œ™Ÿ™›™Î™Ô´;´e´±´◊¨$¨W¨b¨ï¨Ω¨€¨‹≠≠%≠l≠ΩÆÆ_Æ≤ÆæÆƒØØeØ≥Ø˛∞O∞p∞v∞«∞ﬁ∞‰∞Ù∞˙±-±?±@±z±Ä±”≤%≤r≤¬≤ÿ≤Â≤≥≥≥?≥K≥f≥°≥œ≥”≥‘≥‡¥%¥P¥ô¥ù¥û¥™¥∏¥Ï¥Ì¥˘µµ-µ.µ~µÆµ¥∂∂T∂ô∂ü∂∑>∑O∑ç∑«∑Ú∑ˆ∑˜∏A∏ñ∏ÍπCπwπ°πÃπ⁄πﬁπ‡π·∫∫∫g∫∂ª ªHªôªùª‡ª‰º0ºxº»ΩΩaΩÜΩäΩ¨Ω∞ΩˇæKæõæ≥æ∑øøYø£øæø¬¿ @	¿ @,¿ @0¿ @Å¿ @—¿ A ¿ Aq¿ A¿¿ B¿ BC¿ BG¿ Bò¿ B÷¿ B⁄¿ C*¿ Cz¿ CÀ¿ C‚¿ CÊ¿ D1¿ D{¿ DÀ¿ E¿ Ej¿ Eª¿ F
¿ F ¿ Fk¿ F∂¿ G¿ GX¿ G•¿ GÒ¿ HB¿ H¿ Hí¿ Hñ¿ HË¿ I¿ I#¿ If¿ Ij¿ I~¿ IÇ¿ I’¿ IŸ¿ J*¿ JE¿ JI¿ JU¿ JÉ¿ J©¿ J≠¿ JΩ¿ JË¿ K"¿ K*¿ K0¿ K8¿ KH¿ KL¿ K`¿ Kd¿ K≤¿ KÀ¿ Kœ¿ K€¿ L¿ L¿ L*¿ LX¿ Ll¿ Lv¿ Lz¿ Lì¿ LÆ¿ L≤¿ L¬¿ LÌ¿ M#¿ M+¿ M1¿ M9¿ MI¿ MM¿ Mñ¿ MÂ¿ N¿ N¿ N¿ N¿ Nj¿ Nî¿ N‡¿ O¿ O6¿ O^¿ OÜ¿ Oá¿ Oÿ¿ Oﬁ¿ P¿ P'¿ Pe¿ Pf¿ P±¿ P∑¿ Q¿ QX¿ Q£¿ Qˆ¿ R¿ R$¿ Ro¿ Rº¿ S¿ SV¿ Sí¿ Sò¿ SË¿ T6¿ T[¿ Ta¿ TØ¿ T¯¿ UE¿ Ué¿ UŸ¿ V¿ V"¿ V_¿ Ve¿ V≥¿ Vø¿ V˚¿ W6¿ W<¿ WÑ¿ W§¿ W™¿ W∫¿ W¿¿ X¿ X&¿ XL¿ XN¿ XO¿ Xt¿ Xx¿ X«¿ Y¿ Y^¿ Y•¿ Y©¿ Y¯¿ ZG¿ Zë¿ ZŸ¿ [*¿ [.¿ [z¿ [¿¿ \¿ \_¿ \¢¿ \π¿ \Ω¿ ] ¿ ]¿ ]T¿ ]ô¿ ]Á¿ ^8¿ ^l¿ ^p¿ ^≠¿ ^ˆ¿ _E¿ _è¿ _‡¿ `0¿ `V¿ `Z¿ `§¿ `Ú¿ a<¿ aá¿ a”¿ b"¿ bp¿ bø¿ c¿ c`¿ cÆ¿ c˛¿ dJ¿ dN¿ dp¿ dt¿ dØ¿ d≥¿ e¿ eT¿ e£¿ eÛ¿ fC¿ fè¿ f‡¿ f¸¿ g ¿ gJ¿ gï¿ gÊ¿ h/¿ hÄ¿ hõ¿ hü¿ hÊ¿ i¿ i¿ iY¿ i†¿ i¿ j¿ j"¿ js¿ j¡¿ k¿ kW¿ kä¿ ké¿ kŸ¿ l*¿ l|¿ lŒ¿ m¿ mq¿ mô¿ mù¿ mÈ¿ n	¿ n¿ n]¿ nÆ¿ n˝¿ oJ¿ oñ¿ o„¿ p.¿ p|¿ p°¿ p•¿ p¿ q<¿ qÄ¿ qœ¿ q˝¿ r¿ rI¿ rM¿ rü¿ r÷¿ r⁄¿ s¿ s!¿ s5¿ s9¿ sÉ¿ sá¿ sœ¿ t¿ tf¿ tj¿ tv¿ t§¿ tÀ¿ tœ¿ tﬂ¿ u¿ u"¿ u&¿ u]¿ um¿ uò¿ u“¿ u⁄¿ u‡¿ uË¿ u¯¿ v¿ v¿ v[¿ vß¿ v«¿ vÀ¿ v◊¿ vˇ¿ w¿ w%¿ wS¿ wg¿ wq¿ wu¿ wé¿ w©¿ w≠¿ wΩ¿ wÓ¿ wÙ¿ w¯¿ x#¿ x=¿ xA¿ xU¿ x}¿ xÖ¿ xâ¿ xô¿ xƒ¿ xﬁ¿ x˝¿ y>¿ y]¿ yh¿ yp¿ yv¿ y~¿ yé¿ yí¿ y€¿ z*¿ zM¿ zQ¿ z_¿ zc¿ z®¿ zı¿ {(¿ {t¿ {ö¿ {…¿ {Ò¿ |¿ |¿ |i¿ |o¿ |¨¿ |∏¿ |Ù¿ |ı¿ }F¿ }L¿ }ì¿ }»¿ }Œ¿ }‹¿ }Ï¿ ~%¿ ~/¿ ~5¿ ~Ç¿ ~—¿ "¿ q¿ ¡¿ Ä¿ Ä#¿ Ä0¿ Ä;¿ Äê¿ Äí¿ Äì¿ ÄŸ¿ Ä¿ Å?¿ ÅK¿ ÅV¿ ÅW¿ Å§¿ Å¯¿ Ç¿ Ç¿ ÇX¿ Çf¿ Ço¿ Çp¿ Çª¿ Ç⁄¿ ÇÂ¿ ÇÁ¿ ÇË¿ É¿ ÉO¿ ÉP¿ Éâ¿ Éç¿ É‹¿ Ñ(¿ Ñs¿ Ñ∫¿ Ñæ¿ Ñ˛¿ ÖK¿ Öô¿ ÖË¿ Ü2¿ Üy¿ Ü…¿ á¿ ác¿ ág¿ áô¿ áù¿ á÷¿ á˚¿ àH¿ àó¿ àÂ¿ â2¿ âO¿ âù¿ âÁ¿ ä5¿ ä~¿ äç¿ äﬁ¿ ã*¿ ã}¿ ãÀ¿ å¿ ål¿ å±¿ ç ¿ çH¿ çî¿ ç›¿ çÌ¿ é:¿ éÉ¿ é–¿ è!¿ èr¿ è¬¿ ê¿ ê\¿ êõ¿ êÈ¿ ë2¿ ëx¿ ë¬¿ í¿ í^¿ íØ¿ í¸¿ ìI¿ ìÇ¿ ìœ¿ î¿ îh¿ îµ¿ ï¿ ïO¿ ïô¿ ï®¿ ï˘¿ ñI¿ ñó¿ ñ‚¿ ó¿ óS¿ ó†¿ ó¿ ò5¿ ò9¿ òG¿ òK¿ òú¿ òÿ¿ ô%¿ ôX¿ ô§¿ ô ¿ ö¿ ö¿ öY¿ öz¿ öÄ¿ öÕ¿ õ¿ õf¿ õØ¿ ú ¿ úO¿ úb¿ ú~¿ úå¿ úç¿ úÕ¿ ú”¿ ù ¿ ùo¿ ù±¿ ù≤¿ ù˝¿ û)¿ ûc¿ ûd¿ ûù¿ û£¿ ûÓ¿ ü7¿ üÜ¿ ü◊¿ üÓ¿ üÙ¿ †=¿ †g¿ †Ñ¿ †î¿ †≤¿ †Œ¿ °F¿ °–¿ °€¿ °„¿ °ˆ¿ ¢ ¿ ¢¿ ¢¿ ¢7¿ ¢8¿ ¢r¿ ¢x¿ ¢¬¿ £¿ £T¿ £•¿ £ƒ¿ £ ¿ §¿ §4¿ §5¿ §n¿ §t¿ §√¿ §’¿ §€¿ •$¿ •u¿ •º¿ •¬¿ •Ù¿ ¶=¿ ¶Ö¿ ¶“¿ ß¿ ß>¿ ßD¿ ßv¿ ß¬¿ ®¿ ®&¿ ®Z¿ ®`¿ ®u¿ ®{¿ ®Ã¿ ©¿ ©m¿ ©Ç¿ ©à¿ ©◊¿ ™ ¿ ™¿ ™¿ ™3¿ ™p¿ ™t¿ ™u¿ ™≠¿ ™≥¿ ´¿ ´G¿ ´ì¿ ´›¿ ¨¿ ¨¿ ¨b¿ ¨~¿ ¨Ñ¿ ¨‘¿ ≠¿ ≠"¿ ≠Q¿ ≠W¿ ≠¶¿ ≠ﬁ¿ ≠Ô¿ ≠¸¿ Æ.¿ Æ/¿ Æa¿ Æg¿ Æ±¿ Æ˙¿ ØI¿ ØO¿ Ø_¿ Øe¿ ØÉ¿ Ø∞¿ Ø‰¿ ØÒ¿ ∞¿ ∞¿ ∞¿ ∞j¿ ∞p¿ ∞ª¿ ∞Û¿ ∞˘¿ ±¿ ±4¿ ±>¿ ±D¿ ±ë¿ ±‡¿ ≤¿ ≤¿ ≤k¿ ≤∫¿ ≥¿ ≥¿ ≥¿ ≥k¿ ≥∏¿ ≥ı¿ ≥˚¿ ¥H¿ ¥ñ¿ ¥Ê¿ µ6¿ µh¿ µn¿ µ|¿ µ´¿ µ¡¿ µ◊¿ µ„¿ ∂+¿ ∂Z¿ ∂ù¿ ∂•¿ ∂Ø¿ ∂µ¿ ∑¿ ∑O¿ ∑}¿ ∑ä¿ ∑≠¿ ∑≈¿ ∑’¿ ∏¿ ∏J¿ ∏é¿ ∏™¿ π¿ π`¿ π∑¿ π¯¿ ∫¿ ∫¿ ∫C¿ ∫ö¿ ∫Ô¿ ªD¿ ªY¿ ªf¿ ª{¿ ª–¿ º$¿ ºs¿ º√¿ º–¿ º‹¿ º‰¿ Ω-¿ Ωe¿ Ω®¿ ΩΩ¿ æ¿ æp¿ æÕ¿ æ˙¿ ø¿ ø¿ ø¿ ø.¿ ø8¿ ød¿ øt¿ øí¿ ø ¿ ¿¿ ¿1¿ ¿à¿ ¿…¿ ¿÷¿ ¿Î¿ ¡E¿ ¡°¿ ¡ﬁ¿ ¡Î¿ ¡˜¿ ¡ˇ¿ ¬O¿ ¬q¿ ¬Ñ¿ ¬é¿ ¬Æ¿ ¬≤¿ ¬≥¿ ¬Î¿ ¬Ò¿ √?¿ √ã¿ √‹¿ ƒ,¿ ƒv¿ ƒ∆¿ ≈¿ ≈d¿ ≈¥¿ ∆¿ ∆R¿ ∆Ä¿ ∆Ü¿ ∆—¿ « ¿ «a¿ «g¿ «¥¿ «ﬁ¿ «‰¿ «Ù¿ «˙¿ »J¿ »n¿ »{¿ »å¿ »§¿ »•¿ »Ò¿ …¿ …¿ …e¿ …∞¿ …Á¿ …Ì¿  <¿  â¿  ÷¿ À#¿ Às¿ À¿¿ Ã¿ ÃT¿ Ã§¿ ÃÏ¿ Õ=¿ ÕC¿ Õë¿ Õﬁ¿ ÕÙ¿ Õ˙¿ ŒI¿ Œq¿ Œw¿ Œá¿ Œç¿ Œ”¿ œ¿ œ*¿ œ;¿ œQ¿ œR¿ œñ¿ œú¿ œÊ¿ –4¿ –É¿ –‘¿ —¿ —$¿ —s¿ —¨¿ —≤¿ —·¿ —Á¿ “4¿ “[¿ “a¿ “q¿ “w¿ “≤¿ “ø¿ “–¿ “„¿ ”¿ ”.¿ ”d¿ ”w¿ ”Å¿ ”Ö¿ ”Ü¿ ”—¿ ”◊¿ ‘&¿ ‘5¿ ‘;¿ ‘_¿ ‘â¿ ‘∏¿ ‘˝¿ ’E¿ ’ñ¿ ’Ω¿ ’√¿ ÷¿ ÷C¿ ÷I¿ ÷î¿ ÷·¿ ◊2¿ ◊{¿ ◊∑¿ ◊Ω¿ ÿ¿ ÿ\¿ ÿß¿ ÿ≠¿ ÿ˚¿ ŸD¿ Ÿì¿ Ÿ·¿ ⁄-¿ ⁄|¿ ⁄ª¿ ⁄¡¿ ⁄‹¿ ⁄‚¿ €,¿ €2¿ €Ä¿ €Œ¿ ‹¿ ‹3¿ ‹9¿ ‹Ñ¿ ‹’¿ ›%¿ ›u¿ ›¡¿ ›˚¿ ﬁ¿ ﬁR¿ ﬁú¿ ﬁÏ¿ ﬁÚ¿ ﬂB¿ ﬂê¿ ﬂ“¿ ‡!¿ ‡r¿ ‡ã¿ ‡ë¿ ‡ü¿ ‡Õ¿ ‡Ÿ¿ ‡Ù¿ ‡˙¿ ·¿ ·N¿ ·¿ ·â¿ ·ë¿ ·õ¿ ·°¿ ·Ú¿ ‚=¿ ‚ç¿ ‚⁄¿ „'¿ „4¿ „:¿ „á¿ „◊¿ „Ú¿ „¯¿ ‰¿ ‰:¿ ‰F¿ ‰X¿ ‰Ö¿ ‰ø¿ ‰…¿ ‰—¿ ‰€¿ ‰·¿ Â2¿ ÂÇ¿ Âœ¿ Ê¿ Ê=¿ ÊC¿ ÊS¿ ÊY¿ Ê±¿ Êæ¿ Ê‰¿ ÊÂ¿ Á$¿ Á*¿ Ák¿ Áµ¿ ÁÍ¿ Á¿ Ë>¿ Ëç¿ Ëì¿ Ë›¿ È)¿ Èv¿ È¿¿ ÈÁ¿ ÈÙ¿ Í¿ Í(¿ Í)¿ Í5¿ Íz¿ Í•¿ Íµ¿ Î8¿ ÎK¿ ÎU¿ Î©¿ Ï¿ Ï¿ Ï¿ Ï¿ Ïe¿ Ïq¿ Ïu¿ Ï¡¿ ÏŸ¿ Ï›¿ ÏÎ¿ ÏÔ¿ Ì;¿ Ìa¿ Ìö¿ Ì„¿ Ó¿ Ó\¿ ÓÜ¿ Ó”¿ Ô¿ Ô>¿ Ôj¿ Ô§¿ Ô›¿ Ôﬁ¿ ¿ ¿ H¿ ö¿ Ì¿ Ò6¿ ÒK¿ Òa¿ Òc¿ Òd¿ Ò±¿ ÒÃ¿ Ò–¿ Ú¿ ÚZ¿ Úö¿ Úû¿ ÚÓ¿ Û ¿ Û$¿ Û8¿ Û<¿ Ûã¿ Û–¿ Û‘¿ Û‡¿ Ù!¿ Ù8¿ ÙK¿ Ùg¿ ÙÖ¿ Ùè¿ Ùì¿ Ù™¿ ÙÆ¿ Ùæ¿ Ùˆ¿ ıR¿ ıy¿ ıõ¿ ıÔ¿ ˆ¿ ˆ#¿ ˆ+¿ ˆ/¿ ˆ?¿ ˆz¿ ˆÄ¿ ˆà¿ ˆò¿ ˆú¿ ˆ™¿ ˆÆ¿ ˆÎ¿ ˜2¿ ˜y¿ ˜º¿ ˜È¿ ¯7¿ ¯É¿ ¯≠¿ ¯˘¿ ˘J¿ ˘í¿ ˘—¿ ˘“¿ ˘ﬁ¿ ˙$¿ ˙%¿ ˙k¿ ˙Å¿ ˙á¿ ˙Õ¿ ˚¿ ˚I¿ ˚O¿ ˚õ¿ ˚…¿ ¸¿ ¸ ¿ ¸=¿ ¸f¿ ¸j¿ ¸k¿ ¸º¿ ¸Ë¿ ¸Ó¿ ˝<¿ ˝_¿ ˝ã¿ ˝å¿ ˝–¿ ˝ı¿ ˛ ¿ ˛E¿ ˛L¿ ˛f¿ ˛É¿ ˛∏¿ ˛π¿ ˇ-¿ ˇK¿ ˇi¿ ˇÉ¿ ˇ”¿ ˇ›¿ ˇË¿ ¿ x¿ É¿ î¿ ˚¿k¿t¿ô¿¨¿¿%¿G¿a¿⁄¿Â¿Ï¿¿Ò¿C¿I¿é¿Ã¿¿k¿ê¿ñ¿Ê¿0¿Å¿“¿!¿'¿s¿¨¿˘¿¿$¿W¿X¿•¿Ω¿√¿¿Z¿`¿p¿v¿∆¿’¿‚¿	¿	¿	¿	`¿	d¿	µ¿
¿
¿
T¿
ê¿
î¿
◊¿
€¿
Ô¿
Û¿>¿B¿N¿|¿î¿ß¿ƒ¿‚¿Ï¿¿	¿¿?¿ö¿€¿Û¿˚¿ˇ¿¿S¿Y¿a¿q¿u¿ô¿ù¿Ï¿?¿â¿—¿¿¿c¿≤¿—¿’¿#¿r¿¿¿¿e¿ã¿è¿Æ¿≤¿¸¿K¿U¿Y¿m¿q¿¡¿ı¿˘¿¿0¿Q¿U¿e¿ê¿©¿ƒ¿Â¿¿6¿S¿s¿¿¿”¿‰¿Û¿ ¿¿¿¿!¿1¿5¿I¿M¿ù¿„¿Á¿Û¿#¿I¿M¿]¿à¿°¿º¿›¿ˆ¿¿V¿e¿r¿}¿Ö¿ã¿ì¿£¿Ê¿Í¿¯¿¸¿H¿r¿ø¿Ú¿*¿o¿∏¿‘¿"¿O¿Ñ¿’¿¿[¿\¿h¿¶¿ß¿¯¿˛¿O¿†¿Ô¿8¿K¿Q¿°¿Ò¿=¿K¿X¿ò¿ö¿õ¿È¿3¿D¿H¿V¿Z¿®¿ ¿ ¿ \¿ è¿ ‡¿!(¿!S¿!T¿!¢¿!Æ¿!π¿!‡¿!·¿"!¿"r¿"é¿"î¿"Â¿#'¿#q¿#°¿#œ¿#‹¿#Á¿$ ¿$!¿$n¿$Ω¿$‚¿$Ë¿%6¿%Ä¿%À¿%˚¿&*¿&7¿&ê¿&ë¿&ﬂ¿')¿'_¿'l¿'≥¿'µ¿'∂¿(¿(!¿(d¿(µ¿(˝¿),¿)-¿)9¿)Ö¿)á¿)à¿)‹¿**¿*o¿*s¿*Ω¿+¿+Q¿+ì¿+›¿,.¿,v¿,∏¿,π¿,È¿,Ô¿- ¿-7¿-8¿-D¿-û¿-†¿-°¿-ı¿.A¿.ã¿.ó¿.õ¿.’¿/%¿/n¿/º¿0 ¿0'¿0+¿09¿0=¿0x¿0≈¿0‘¿1¿1k¿1è¿1ÿ¿2¿2¿2T¿2c¿2≥¿2‘¿2‰¿3"¿3k¿3í¿3∞¿3˘¿43¿4@¿4J¿4R¿4e¿4†¿4§¿4•¿4÷¿4‹¿5,¿5q¿5ø¿5Œ¿5‘¿6¿6o¿6¿¿7¿7¿7¿7S¿7s¿7y¿7î¿7Æ¿7∏¿7æ¿7€¿7Û¿8¿8#¿8-¿83¿8O¿8í¿8Ω¿8«¿8œ¿8Ÿ¿8ﬂ¿9¿9$¿92¿9j¿9ä¿9ê¿9´¿9≈¿9œ¿9’¿9Ú¿:
¿:T¿:ì¿:≈¿:”¿:›¿:„¿:ˇ¿;K¿;¿;â¿;ë¿;õ¿;∫¿;ª¿;«¿<¿<!¿<"¿<#¿</¿<0¿<I¿<T¿<^¿<j¿<u¿<w¿<x¿<í¿<™¿<ﬂ¿<‡¿=¿=F¿=V¿=à¿=∑¿>¿>¿>¿>&¿>0¿>\¿>Ñ¿>õ¿>£¿>∫¿>¸¿? ¿?¿?¿?,¿?x¿?è¿?ô¿?ƒ¿?‘¿?ı¿@¿@¿@¿@¿@O¿@ê¿@™¿@Ì¿A ¿A0¿AR¿Ae¿Ao¿As¿At¿Aí¿A®¿A“¿A˜¿B6¿B]¿Bc¿B¿BÉ¿BÑ¿B•¿Bª¿B‰¿C	¿C(¿Ci¿Cm¿Cn¿Cñ¿C¨¿Cº¿CË¿C˚¿D¿D¿D¿D¿D¿Dd¿Dh¿Dï¿Dô¿D‡¿DÛ¿E,¿E-¿Ej¿En¿E≠¿Eˆ¿E˙¿FF¿Fó¿F‰¿G5¿Gi¿Gm¿Gπ¿H¿HR¿HV¿H•¿HÙ¿IC¿Iì¿I‰¿J4¿JÇ¿J—¿K¿Kg¿Kö¿Kû¿KÌ¿L8¿LÅ¿L—¿M¿M¿M*¿M8¿Ma¿Mí¿M©¿M‹¿MÛ¿N¿N>¿Ni¿Ná¿N√¿NÓ¿O¿OG¿Oj¿Oï¿O∫¿O·¿P¿PI¿PÄ¿P¨¿PÚ¿Q ¿QX¿Qy¿Qó¿Q¥¿Qœ¿QË¿Qˇ¿R¿R'¿R8¿RG¿RT¿R^¿Rg¿Rm¿Ru¿Ry¿R…¿S¿Se¿SÜ¿Sä¿SÕ¿S—¿T¿Tm¿Tã¿TŸ¿TÓ¿TÔ¿U9¿Uq¿Uä¿Uã¿U◊¿U›¿V(¿V\¿V≠¿Vœ¿W¿W9¿W?¿Wê¿W—¿W˝¿X¿X;¿XW¿XX¿Xú¿XÍ¿Y7¿YS¿YY¿Y§¿Y¿Z5¿ZÑ¿Z±¿Z∑¿[¿[W¿[¶¿[Ì¿[ˇ¿\¿\Q¿\s¿\y¿\∆¿]¿]b¿]à¿]¨¿]≠¿]Ô¿]ı¿^A¿^ç¿^÷¿^ˇ¿_¿_Q¿_s¿_y¿_ ¿`¿`g¿`¥¿`∫¿a¿aS¿a£¿a…¿a€¿a‹¿b¿b_¿be¿bÜ¿bå¿b÷¿c(¿c[¿ca¿cµ¿c„¿d=¿d>¿dí¿d„¿e1¿e{¿eº¿e¬¿f¿f¿f%¿fm¿fπ¿g¿gV¿g®¿g“¿gÿ¿h(¿hw¿h»¿i¿iI¿iO¿iù¿iÌ¿j¿j%¿jv¿j°¿jß¿j˜¿kC¿kî¿kﬂ¿l¿l
¿lC¿lä¿lŒ¿lÙ¿mL¿mM¿m¢¿mÈ¿mÔ¿n¿n%¿ne¿nk¿n∫¿n¿nˆ¿oF¿oï¿oœ¿p"¿pr¿pù¿p˜¿p¯¿qK¿qw¿q}¿q ¿r¿re¿rµ¿s¿sO¿s†¿s¿t<¿tB¿té¿tŸ¿u¿u¿uj¿u∂¿v¿vW¿v]¿v©¿v ¿w¿w¿wT¿wÖ¿wã¿w‹¿x-¿xÅ¿x‘¿y ¿yl¿yê¿yñ¿y„¿z2¿zÉ¿zµ¿zª¿{¿{R¿{ã¿{ë¿{„¿|/¿|}¿| ¿|–¿|Ê¿|Ï¿|˙¿}R¿}\¿}n¿}ü¿}†¿}Ú¿~#¿~)¿~Å¿~Õ¿~Ù¿~˙¿N¿_¿î¿ï¿Ò¿Ä"¿Ä(¿Äy¿Ä ¿Å¿Åm¿ÅΩ¿Ç
¿ÇA¿ÇG¿Çì¿Çﬁ¿É¿É¿Éo¿Éª¿Ñ	¿Ñ]¿Ñú¿Ñù¿ÑÓ¿Ö=¿Öä¿Öÿ¿Ü¿Ü¿ÜC¿ÜI¿Üú¿Ü¢¿ÜÙ¿áA¿áè¿á⁄¿à ¿à!¿àJ¿àP¿àõ¿àÎ¿â9¿âi¿âo¿âΩ¿ä	¿ä¿ä¿äh¿ä¥¿ä∫¿ã¿ãU¿ã¶¿ã˜¿å¿åC¿åD¿åá¿åç¿å‹¿ç'¿ç=¿çu¿çv¿çŒ¿ç‘¿é"¿é(¿é8¿é>¿éï¿è¿è	¿è`¿èf¿è≥¿ê%¿ê&¿êu¿êö¿ê†¿êÔ¿ëH¿ëI¿ëì¿ëÆ¿ë¥¿í ¿í7¿í9¿í:¿íg¿ík¿í∏¿ì	¿ìV¿ì|¿ìÄ¿ìÃ¿î¿î-¿î1¿î}¿îÅ¿î∞¿î¸¿ï¿ï¿ï%¿ïs¿ïΩ¿ñ¿ñ¿ñQ¿ña¿ñt¿ñ¢¿ñ®¿ñÙ¿ó@¿óä¿óÿ¿óÙ¿ò:¿òã¿òå¿ò◊¿ò‰¿ô¿ô¿ôJ¿ôK¿ô¿ô¨¿ô≠¿ô¯¿ö(¿ö.¿ö}¿öÉ¿ö–¿öÁ¿õ¿õ¿õQ¿õW¿õü¿õË¿õÈ¿ú¿ú¿úk¿ú¢¿ú®¿ú”¿úŸ¿ù#¿ùr¿ù¬¿û¿û%¿ûB¿ûC¿ûè¿û…¿ûÙ¿ü¿ü4¿üD¿ür¿ü˚¿†¿†¿†W¿†∂¿°¿°(¿°ã¿°∂¿°√¿°ÿ¿¢6¿¢Ç¿¢”¿¢‡¿¢Ï¿¢Ù¿£¿£¿£1¿£C¿£s¿§(¿§2¿§W¿§ë¿§‰¿§˚¿•U¿•¢¿•±¿•ø¿•…¿•ﬁ¿•Í¿¶¿¶#¿¶)¿¶n¿¶ô¿¶¥¿¶∫¿¶€¿¶¸¿ß¿ß:¿ßw¿ß¿ßí¿ßú¿ß†¿ß°¿ß¡¿ß˚¿ß¸¿®2¿®8¿®c¿®è¿®Æ¿®”¿®‘¿©$¿©F¿©L¿©ú¿©Ω¿©Á¿™¿™,¿™<¿™]¿™p¿™z¿™Ñ¿™ñ¿™¶¿™∏¿™€¿™¿™¸¿´¿´)¿´-¿´.¿´z¿´∆¿´¸¿¨¿¨P¿¨ê¿¨ñ¿¨„¿≠/¿≠¿≠¡¿≠Î¿≠Ò¿Æ?¿Æé¿Æø¿Æ≈¿Æ˙¿Ø ¿Ø:¿Ø@¿Øá¿Ø‘¿∞"¿∞/¿∞\¿∞ù¿∞”¿∞·¿∞Á¿±¿±+¿±H¿±X¿±z¿±Ÿ¿±·¿≤¿≤¿≤2¿≤<¿≤U¿≤à¿≤ö¿≤Ã¿≥¿≥8¿≥e¿≥ò¿≥¡¿≥Œ¿≥ÿ¿≥Ì¿≥˘¿¥¿¥$¿¥N¿¥W¿¥]¿¥g¿¥í¿¥∞¿¥”¿¥˛¿µ¿µV¿µï¿µ√¿µ⁄¿µË¿∂¿∂$¿∂:¿∂N¿∂d¿∂´¿∂‰¿∑%¿∑S¿∑l¿∑|¿∑Ü¿∑é¿∑∏¿∑‰¿∏¿∏'¿∏J¿∏Å¿∏¢¿∏»¿∏‹¿πF¿πÇ¿π◊¿π˜¿∫\¿∫∂¿∫«¿∫‡¿ªG¿ªÆ¿º¿ºg¿ºx¿º§¿º◊¿º¿Ω+¿Ω<¿Ωh¿Ωﬂ¿Ω¯¿æ3¿æD¿æT¿æ`¿æw¿æÖ¿æÈ¿ø
¿øA¿øW¿øõ¿ø¸¿¿
¿¿#¿¿3¿¿Q¿¿~¿¿≠¿¿∫¿¿ƒ¿¿“¿¿Ô¿¡¿¡-¿¡n¿¡}¿¡ê¿¡À¿¬
¿¬J¿¬{¿¬Ï¿¬ˇ¿√€¿√Í¿√˜¿ƒ¿ƒ"¿ƒC¿ƒM¿ƒa¿ƒ¥¿ƒ‚¿≈¿≈@¿≈Å¿≈‰¿∆=¿∆†¿«¿«c¿«ø¿«˙¿»¿»¿»(¿»0¿»B¿»ø¿»˘¿…=¿…™¿ $¿ 2¿ <¿ Q¿ ]¿ m¿ £¿ …¿ Ô¿ ˜¿À¿ÀA¿Àl¿Àá¿À¶¿ÀÆ¿ÀÃ¿Àﬁ¿À˛¿Ã!¿ÃE¿Ãr¿Ã|¿Ãë¿Ãù¿Ã£¿Ã ¿ÃŒ¿Ãœ¿Õ/¿Õ0¿Õô¿Œ¿Œd¿Œö¿Œ≠¿Œ±¿Œ≤¿Œ·¿œ3¿œ7¿œ8¿œÖ¿œÜ¿œﬁ¿–¿–&¿–}¿–~¿–Õ¿–Ô¿—?¿—\¿—a¿—π¿—Û¿“¿“à¿“â¿“÷¿”¿”H¿”I¿”ï¿”•¿”√¿”‡¿‘¿‘.¿‘8¿‘<¿‘=¿‘y¿‘â¿‘∫¿‘‚¿’¿’J¿’ó¿’»¿’–¿’„¿’Ì¿÷¿÷¿÷¿÷W¿÷g¿÷æ¿÷Ê¿◊#¿◊N¿◊õ¿◊£¿◊∂¿◊¿¿◊Ó¿ÿ¿ÿ¿ÿ¿ÿ¿ÿp¿ÿÄ¿ÿû¿ÿª¿Ÿ¿Ÿ<¿ŸO¿ŸY¿Ÿ]¿Ÿ^¿Ÿä¿Ÿö¿Ÿ‰¿⁄F¿⁄Ç¿⁄Ô¿€¿€¿€G¿€ì¿€·¿€Ù¿‹¿‹/¿‹;¿‹á¿‹”¿›¿›C¿›ê¿›‹¿ﬁ%¿ﬁZ¿ﬁÑ¿ﬁ™¿ﬁ‚¿ﬂ"¿ﬂm¿ﬂè¿ﬂÛ¿‡¿‡1¿‡î¿‡ß¿‡π¿‡Œ¿·¿·Y¿·{¿·›¿‚.¿‚N¿‚±¿‚ƒ¿‚÷¿‚‰¿„1¿„¿„Õ¿„Û¿‰¿‰X¿‰Ö¿‰±¿‰√¿‰’¿‰„¿Â¿ÂH¿Âu¿Â°¿Â≥¿Â≈¿Â”¿ÂÏ¿Âˇ¿Ê&¿Ê2¿Ê>¿ÊH¿Êt¿Êá¿Êë¿Êï¿Êñ¿Ê¿¿Ê–¿Á ¿ÁS¿Áó¿Á∫¿Á‰¿Ë¿ËT¿Ëã¿Ë¡¿È¿Èi¿Èä¿Èº¿È∆¿ÈŒ¿Èı¿Í¿Í\¿Í∞¿ÍÁ¿Î!¿Îp¿Î¿¿Ï¿Ï`¿Ïô¿Ì¿Ì¿Ìï¿Ì»¿Ì–¿Ì„¿ÌÌ¿ÌÒ¿ÌÚ¿Ó?¿ÓT¿ÓZ¿Óé¿Óî¿ÓÂ¿Ô¿Ô¿ÔX¿ÔÖ¿Ô≤¿Ô ¿Ô„¿¿¿¿q¿É¿ë¿ø¿Î¿ÒC¿Òü¿Ò›¿ÚO¿Úô¿Û¿Û¿Û¿ÛB¿Ûê¿ÛÓ¿Ù%¿Ùm¿ÙÜ¿Ù±¿Ù√¿Ù”¿ı¿ıK¿ım¿ıì¿ı¨¿ˆ¿ˆ)¿ˆ;¿ˆ≤¿˜¿˜p¿˜Ø¿˜ˇ¿¯¿¯K¿¯]¿¯m¿¯™¿¯Ò¿˘¿˘A¿˘Z¿˘—¿˘„¿˘ı¿˙!¿˙b¿˙û¿˙„¿˚*¿˚Ç¿˚ ¿¸¿¸b¿¸Ø¿˝¿˝M¿˝π¿˝˜¿˛G¿˛ô¿˛¿¿˛‚¿ˇV¿ˇ…¿ $¿ V¿ À¿Q¿…¿9¿¨¿Â¿¿~¿ë¿£¿±¿Ω¿—¿$¿.¿C¿O¿h¿∂¿¿!¿z¿ä¿•¿ƒ¿Ã¿“¿÷¿◊¿#¿r¿√¿‚¿Ë¿4¿¿ò¿‘¿⁄¿‰¿¿*¿`¿y¿â¿§¿√¿À¿—¿’¿◊¿ÿ¿	%¿	9¿	=¿	K¿	ù¿	«¿
¿
,¿
2¿
y¿
…¿
˚¿
¸¿¿*¿w¿{¿}¿~¿ò¿»¿…¿Ï¿	¿
¿C¿|¿ä¿ê¿¿¿ƒ¿∆¿«¿¯¿¿M¿|¿~¿¿»¿Ã¿¿m¿æ¿	¿Y¿p¿t¿¬¿¿¿=¿A¿í¿⁄¿*¿z¿¡¿¿[¿j¿µ¿¿S¿§¿Ú¿B¿Ä¿Õ¿¿m¿∫¿¿8¿á¿–¿¿a¿≤¿ˇ¿L¿ö¿Î¿¿]¿™¿∫¿¿5¿Å¿À¿—¿¿+¿I¿a¿b¿v¿ß¿œ¿–¿¯¿˛¿H¿ì¿Ã¿“¿!¿o¿Ω¿¿¿_¿Æ¿¸¿D¿J¿î¿÷¿‰¿¿ <¿ x¿ y¿ …¿ €¿ ·¿!2¿!Ç¿!ö¿!∑¿!»¿!…¿"¿"b¿"t¿"Ñ¿"æ¿#¿#¿#/¿#9¿#L¿#P¿#c¿#d¿#µ¿#À¿#ˆ¿$¿$U¿$j¿$}¿$É¿$“¿$Û¿%¿%5¿%U¿%[¿%é¿%ú¿%†¿%°¿%Ï¿&A¿&ñ¿&Ì¿'#¿'O¿'|¿'ä¿'é¿'è¿'π¿'ø¿(	¿(U¿(§¿(¿)@¿)v¿)Ç¿)£¿)∂¿)∑¿)Â¿)Î¿*1¿*Å¿*ù¿*π¿*…¿+	¿+¿+&¿+<¿+@¿+A¿+n¿+t¿+∫¿,
¿,%¿,@¿,P¿,é¿,°¿,´¿,¿¿,ƒ¿,≈¿-¿-¿-1¿-G¿-H¿-}¿-»¿-È¿-Ô¿.>¿.ä¿.™¿.∞¿.ˇ¿/O¿/d¿/j¿/ª¿0¿0W¿0ß¿0¿1=¿1é¿1…¿1ﬁ¿1‰¿1Ù¿1˙¿2¿2C¿2w¿2à¿2ï¿2´¿2Ó¿3¿3+¿31¿3U¿3í¿3¨¿3¥¿3◊¿3€¿3‹¿4¿4"¿4@¿4_¿4t¿4|¿4ù¿4£¿4µ¿4π¿4∫¿4˚¿5¿5R¿5¢¿5–¿5Û¿6¿6/¿6z¿6º¿6Ã¿6ˇ¿7&¿75¿7[¿7c¿7i¿7z¿7ç¿7ë¿7í¿7û¿7¯¿8;¿8l¿8ö¿8∏¿8À¿8”¿8‘¿9¿9\¿9h¿9ô¿9°¿9¢¿9¬¿:¿:(¿:P¿:ç¿:—¿:€¿:·¿:˘¿:˝¿:˛¿;U¿;™¿;«¿;Ÿ¿<Q¿<l¿<s¿<w¿<x¿<Ñ¿<¯¿=;¿=?¿=@¿=L¿=ø¿>¿>¿>¿>¿>K¿>ñ¿>·¿>Ù¿?/¿?3¿?4¿?}¿?ì¿?‘¿?’¿@$¿@C¿@I¿@ö¿@√¿@…¿A¿Af¿A∑¿Aˇ¿B0¿B1¿Bm¿Bs¿B¬¿B“¿Bÿ¿C&¿Cs¿C¿¿Cı¿C˚¿DK¿Di¿Do¿D¿DÖ¿Dπ¿DÛ¿EB¿Eí¿E°¿Eı¿Eˆ¿F/¿F;¿Fo¿F¿F∑¿FÃ¿F‘¿G
¿GM¿Gg¿G∏¿H¿H\¿Hà¿Hì¿Hù¿Hß¿H√¿H«¿H»¿I¿I¿I\¿I´¿I±¿J¿J¿JY¿J¨¿J≤¿K¿K;¿KA¿Kí¿K„¿L4¿L¿L®¿LÆ¿Lˇ¿M¿M¿Mf¿M¥¿M¿Mˆ¿N&¿N,¿N}¿NŒ¿O¿O•¿O´¿O¸¿PI¿Pç¿P◊¿Q%¿Qj¿Qp¿Q¡¿QŒ¿QÏ¿R9¿RV¿Rq¿Rë¿Rô¿R¨¿R≤¿R≥¿Rœ¿RË¿S¿S^¿SÆ¿T¿TY¿T¶¿TØ¿U¿U_¿U≥¿U…¿U“¿V!¿Vm¿Væ¿W¿W¿Wc¿WØ¿WÓ¿X¿X¿XK¿Xî¿Xﬂ¿Y¿Y6¿Yd¿Yn¿Yà¿Y€¿Z ¿Z.¿Z8¿Zó¿Z∏¿ZÔ¿[¿[I¿[•¿[≥¿[Ã¿[‹¿[˙¿\"¿\Q¿\^¿\h¿\â¿\™¿\À¿\’¿] ¿]¿]K¿]b¿]p¿]ä¿]ô¿]π¿]‡¿^*¿^z¿^≠¿^„¿^Î¿^¯¿_@¿_é¿_ø¿_Û¿_˘¿_˙¿`
¿`%¿`V¿`^¿`Ñ¿`¢¿`¡¿a ¿a¿a¿a%¿a&¿a;¿a?¿a@¿aä¿aê¿a·¿b-¿b{¿b∞¿b∂¿c¿c*¿c0¿c¿cœ¿d¿d;¿dA¿dê¿dƒ¿d’¿e¿e@¿e\¿ey¿eÀ¿eÂ¿e˚¿f¿f@¿fw¿fë¿f›¿g$¿gX¿gu¿g{¿gñ¿g∑¿g”¿gˇ¿h¿h¿h=¿hA¿hB¿h{¿hñ¿h”¿h◊¿hÿ¿i¿i¿i^¿i≠¿iÂ¿iÎ¿j3¿jD¿jp¿j©¿j„¿jÔ¿k!¿k;¿kX¿kw¿kê¿k¿¿k«¿l¿li¿l∫¿m¿m.¿m>¿mï¿m ¿m›¿mÁ¿n ¿n¿n¿nH¿nN¿nü¿n¿o¿o,¿oh¿o°¿oº¿oﬂ¿p¿p%¿pR¿px¿pÄ¿pÜ¿pò¿pú¿pù¿p√¿p¸¿q¿q5¿qw¿qí¿qß¿q´¿q¨¿q”¿r¿r$¿rB¿rh¿rì¿rù¿r£¿rß¿r®¿r⁄¿r‡¿s¿sY¿s©¿s›¿s„¿t¿t,¿tP¿tr¿tz¿tå¿tê¿të¿tÂ¿tÎ¿u*¿ud¿u¥¿u‰¿uÍ¿v:¿vg¿vÇ¿v¶¿vœ¿v◊¿vÏ¿v¿vÒ¿w6¿wã¿wﬂ¿x-¿x~¿xÀ¿y!¿yS¿yn¿yÅ¿yá¿yø¿y“¿yÿ¿yË¿z¿zí¿zö¿z≠¿z∑¿z‰¿z˛¿{¿{.¿{h¿{…¿|¿|l¿|Õ¿}k¿}⁄¿}Ë¿}Ú¿~L¿~^¿~m¿~x¿~ç¿~ô¿~º¿~„¿~È¿¿<¿P¿T¿U¿†¿¡¿«¿Ä¿Ä[¿Äk¿Äq¿Äø¿Å¿Å_¿Å∞¿Å∂¿Ç¿Ç¿Ç[¿Çä¿Çó¿Çµ¿ÇÚ¿É¿É¿Ém¿Éä¿ÉΩ¿Éœ¿Ñ¿Ñg¿Ñq¿ÑÜ¿Ñí¿Ñ¨¿Ñ–¿Ñ˚¿Ö¿Ö
¿Ö¿Ö¿Ö;¿ÖY¿Ö£¿Ö√¿ÖÔ¿Ü¿Ü1¿ÜJ¿ÜZ¿Üë¿Ü‰¿á¿á0¿á:¿áB¿á|¿áé¿á∂¿áÀ¿á◊¿á¸¿à@¿àA¿àX¿àh¿àá¿à¶¿àÆ¿à¥¿à∏¿àπ¿àÈ¿â¿â¿â:¿â_¿â}¿âÖ¿â—¿â‰¿âÓ¿âÚ¿âÛ¿ä@¿äj¿äp¿ä¿¿ã¿ã6¿ã<¿ã|¿ãÇ¿ãœ¿å¿ån¿åΩ¿ç¿ç¿ç9¿çT¿çw¿çë¿ç±¿é¿é¿éH¿éu¿é∏¿é¬¿é ¿é›¿éÁ¿éÎ¿éÏ¿è<¿èá¿èå¿è‰¿ê¿ê,¿êë¿êí¿ê·¿ë¿ë#¿ëp¿ëè¿ëï¿ë„¿í3¿íÄ¿íì¿íô¿íÁ¿ì¿ì¿ì&¿ìJ¿ìñ¿ì‡¿î.¿îy¿î»¿îˆ¿ï¿ï1¿ïk¿ïs¿ïÜ¿ïê¿ïî¿ïï¿ï”¿ñ¿ñ$¿ñ4¿ñf¿ñ©¿ñ±¿ñƒ¿ñŒ¿ñ¿ó¿ó1¿ój¿ón¿óo¿ó•¿óË¿ò ¿òA¿òr¿òv¿òw¿òΩ¿ò√¿ô¿ôd¿ô≠¿ô˝¿ö¿öS¿öY¿ö®¿ö–¿ö·¿öı¿õ0¿õL¿õg¿õÇ¿õ¯¿ú(¿ú{¿úº¿úÿ¿ù¿ù¿ù9¿ùK¿ùp¿ùv¿ùë¿ù∞¿ù∂¿ù∫¿ùª¿û¿û¿ûW¿û®¿ûˆ¿üA¿üí¿ü≠¿ü≥¿üÎ¿üÒ¿†A¿†G¿†î¿†æ¿†œ¿†Â¿°¿°¿°ö¿°ÿ¿¢¿¢G¿¢O¿¢†¿¢Ó¿£>¿£é¿£€¿£˜¿£˝¿§¿§M¿§Q¿§R¿§®¿§Æ¿§·¿§Ú¿•¿•I¿•M¿•N¿•ï¿•õ¿•Í¿¶8¿¶â¿¶—¿¶◊¿ß&¿ß<¿ßB¿ßè¿ß›¿®¿®¿®g¿®m¿®∫¿®·¿®Ú¿©¿©@¿©°¿©º¿©◊¿™¿™B¿™^¿™å¿™í¿™‹¿´¿´$¿´>¿´o¿´s¿´t¿´Ä¿´•¿´µ¿´Ó¿¨&¿¨n¿¨ä¿¨⁄¿≠¿≠^¿≠Æ¿≠‘¿≠·¿ÆB¿ÆN¿ÆV¿Æi¿Æs¿Æå¿Æê¿Æë¿Æù¿Æ∞¿Æ¿¿Æ˘¿ØI¿Øx¿Ø∞¿Ø¿∞¿∞]¿∞ô¿∞‡¿∞Ì¿±@¿±L¿±T¿±w¿±Ø¿±Ë¿≤¿≤V¿≤¶¿≤˜¿≥D¿≥à¿≥ï¿≥Æ¿≥√¿¥¿¥e¿¥π¿µ¿µ,¿µ9¿µR¿µ•¿µ±¿µπ¿µÃ¿µ÷¿∂¿∂!¿∂C¿∂{¿∂ø¿∂‘¿∑'¿∑|¿∑–¿∏#¿∏Y¿∏f¿∏π¿∏≈¿∏Õ¿∏˜¿π/¿πo¿πÑ¿π«¿∫¿∫d¿∫™¿∫ˆ¿ª¿ª$¿ªw¿ªƒ¿ª–¿ªÿ¿º ¿º8¿ºë¿º¶¿º˚¿ΩN¿Ωü¿Ω–¿Ω›¿æ0¿æ}¿æâ¿æë¿æª¿æ’¿ø¿øo¿øÑ¿ø÷¿¿)¿¿x¿¿ ¿¡¿¡!¿¡t¿¡‘¿¡‡¿¡Ë¿¬
¿¬B¿¬©¿¬æ¿√¿√u¿√œ¿ƒ&¿ƒL¿ƒY¿ƒ¨¿≈¿≈!¿≈{¿≈√¿≈–¿≈‹¿≈‰¿≈˜¿∆¿∆&¿∆F¿∆L¿∆]¿∆a¿∆b¿∆î¿∆º¿∆Ë¿∆È¿«¿«.¿«g¿«ü¿«¿»¿»]¿»t¿»Å¿»ñ¿»Â¿…E¿…Ñ¿…ë¿…ù¿…•¿…∏¿…¬¿…”¿…◊¿…ÿ¿ 2¿ ?¿ Å¿ √¿ ƒ¿ –¿À,¿ÀJ¿À}¿Àü¿ÀŒ¿À˝¿Ã¿Ã¿Ã¿Ãe¿Ãû¿Ãˇ¿Õ¿Õa¿Õg¿Õè¿Õ†¿Õ§¿Õ•¿Õ±¿Œ¿ŒE¿Œ¶¿Œª¿Œø¿Œ¿¿œ¿œ0¿œ6¿œç¿œ·¿œÛ¿œ˘¿–	¿–\¿–i¿–ã¿–ø¿–√¿–ƒ¿–‚¿—¿—O¿—S¿—T¿—`¿—ô¿—“¿—Û¿“6¿“Y¿“_¿“Ç¿“Ü¿“á¿“ì¿“’¿”¿”/¿”N¿”é¿”ù¿”•¿”»¿”Œ¿‘¿‘D¿‘H¿‘I¿‘U¿‘õ¿‘‘¿‘ı¿’¿’;¿’{¿’†¿’®¿’À¿’—¿’˚¿’ˇ¿÷ ¿÷¿÷L¿÷Ö¿÷¶¿÷≈¿◊¿◊;¿◊C¿◊f¿◊l¿◊}¿◊Å¿◊Ç¿◊é¿◊’¿ÿ¿ÿ/¿ÿc¿ÿÜ¿ÿå¿ÿê¿ÿë¿ÿ…¿ÿœ¿Ÿ%¿Ÿv¿Ÿ«¿ŸÙ¿⁄C¿⁄}¿⁄é¿⁄Ø¿€¿€W¿€m¿€q¿€r¿€∞¿€¿¿€ı¿‹-¿‹E¿‹ã¿‹Æ¿‹ª¿›¿›(¿›{¿›ì¿›∏¿›⁄¿›Û¿ﬁG¿ﬁT¿ﬁ`¿ﬁh¿ﬁ{¿ﬁÖ¿ﬁñ¿ﬁö¿ﬁõ¿ﬁ‚¿ﬁË¿ﬂ¿ﬂH¿ﬂs¿ﬂç¿ﬂ¿¿ﬂÁ¿‡¿‡¿‡ ¿‡;¿‡A¿‡d¿‡h¿‡i¿‡∏¿‡æ¿·¿·=¿·i¿·ö¿·∑¿·“¿·È¿‚¿‚
¿‚¿‚ ¿‚!¿‚-¿‚f¿‚°¿‚•¿‚¶¿‚⁄¿‚Ê¿„D¿„E¿„Q¿„¶¿„—¿„„¿„ˆ¿‰
¿‰¿‰¿‰¿‰"¿‰g¿‰í¿‰⁄¿Â¿Âe¿Âk¿Â√¿ÊJ¿Êx¿Ê¬¿Ê˘¿Á$¿Áj¿Á•¿Á‚¿Ë1¿Ë¢¿Ëµ¿È ¿È&¿È*¿È+¿È7¿Èi¿È©¿ÈÕ¿È¸¿Í¿Í¿Í¿Í¿Íg¿ÍÉ¿Íô¿Íö¿ÍË¿Î4¿ÎQ¿ÎR¿Îç¿Î≠¿ÎÆ¿Î¸¿ÏL¿Ïò¿Ïÿ¿Ì¿ÌP¿Ìè¿Ìƒ¿Ì’¿ÌŸ¿Ì⁄¿Ó(¿ÓI¿ÓO¿Óï¿Ó‹¿Ô*¿ÔB¿Ô\¿Ôñ¿ÔÕ¿Ô€¿Ô·¿Ô¸¿5¿E¿h¿°¿À¿Ò¿Ò#¿Ò-¿Òe¿Ò¨¿Ò˝¿Ú¿Úâ¿Ú„¿Û<¿Ûî¿ÛÎ¿Ù@¿Ùq¿ÙÄ¿Ù‚¿ÙÔ¿ı(¿ı…¿ı’¿ˆ
¿ˆ¿ˆ∏¿ˆÂ¿˜¿˜W¿˜µ¿˜—¿¯'¿¯W¿¯d¿¯ƒ¿¯–¿¯ÿ¿¯Î¿¯ı¿˘¿˘¿˘¿˘-¿˘P¿˘T¿˘U¿˘£¿˘µ¿˘ª¿˙¿˙V¿˙ê¿˙Æ¿˙¡¿˙˚¿˚=¿˚K¿˚Q¿˚a¿˚ü¿˚ ¿˚Í¿¸¿¸4¿¸E¿¸o¿¸y¿¸Å¿¸î¿¸û¿¸◊¿¸˝¿˝$¿˝4¿˝v¿˝§¿˝∑¿˝¡¿˝◊¿˝Á¿˛¿˛`¿˛s¿˛}¿˛í¿˛ñ¿˛ó¿˛¿¿˛∆¿ˇ¿ˇ¿ˇ3¿ˇ5¿ˇ6¿ˇ|¿ˇü¿ˇØ¿ˇ—¿ˇÎ¿ ¿ ¿ ¿ $¿ %¿ 1¿ ¿ ¿¿ Ó¿¿Z¿`¿Å¿í¿ñ¿ò¿ô¿Â¿¸¿ ¿H¿L¿Z¿^¿•¿√¿¿]¿r¿Ω¿æ¿¿Ù¿@¿ë¿›¿¿¿H¿L¿`¿¥¿Ê¿Í¿(¿,¿y¿â¿ç¿õ¿ü¿Í¿0¿¿õ¿Œ¿¿¿[¿®¿≈¿À¿	¿	j¿	ì¿	≥¿	⁄¿
¿
=¿
>¿
|¿
Ç¿
–¿
¸¿B¿_¿~¿¿±¿∑¿ ¿G¿h¿n¿ø¿¿X¿©¿ı¿˚¿I¿ä¿—¿ ¿g¿m¿∫¿˝¿¿¿¿b¿±¿˛¿¿b¿Ä¿¬¿√¿¿&¿6¿ù¿∞¿∫¿Í¿U¿Y¿Z¿ä¿î¿∑¿Õ¿'¿¿Õ¿”¿Á¿Î¿Ï¿
¿"¿G¿H¿T¿•¿¶¿≤¿˜¿"¿C¿å¿ô¿˘¿ˇ¿¿¿¿W¿m¿q¿≠¿±¿ø¿√¿¿Q¿û¿›¿ﬁ¿/¿9¿=¿é¿í¿†¿§¿Ó¿3¿Ä¿—¿“¿#¿B¿F¿ã¿œ¿‚¿Ê¿4¿Å¿œ¿¿c¿Ø¿≥¿¡¿≈¿¿T¿ñ¿¿Ò¿#¿'¿k¿o¿∫¿’¿Ÿ¿Á¿Î¿ 5¿ ~¿ À¿!¿!¿!O¿!S¿!§¿!·¿!Â¿"¿"@¿"ä¿"¨¿"≠¿"¿¿"¡¿"‚¿"Ó¿#¿#¿#+¿#\¿#~¿#ö¿#”¿#Ê¿$¿$¿$¿$¿$n¿$¶¿$™¿$´¿$˙¿%J¿%â¿%è¿%›¿&¿&¿&G¿&a¿&ü¿&≤¿&º¿&Œ¿&Ô¿'¿'¿''¿'9¿'[¿'p¿'|¿'™¿'√¿'„¿(¿(%¿(S¿(`¿(q¿(™¿(∆¿)¿)¿)¿)"¿)2¿)Ä¿)À¿)·¿*"¿*(¿*2¿*c¿*Å¿*ö¿*Ω¿*‹¿+
¿+¿+(¿+a¿+}¿+∏¿+≈¿+–¿+Ÿ¿,¿,¿,¿,¿,c¿,Ø¿,√¿,–¿,‚¿,„¿,Ô¿-¿-8¿-P¿-V¿-Z¿-[¿-g¿-ã¿-®¿-ª¿-Ÿ¿-›¿-ﬂ¿-‡¿.%¿.W¿.°¿.”¿.‘¿.‡¿/¿/¿/*¿/U¿/r¿/ì¿/¶¿/µ¿/π¿/ª¿/º¿0 ¿01¿0{¿0§¿0À¿0„¿0Û¿1#¿1[¿1«¿1„¿26¿2}¿2“¿2ﬂ¿2Î¿2Û¿3¿3¿34¿3O¿3[¿3x¿3«¿4¿40¿47¿4S¿4ñ¿4ö¿4õ¿4ß¿4Œ¿4œ¿5¿5¿5d¿5¥¿5€¿6	¿6*¿6+¿67¿6M¿6ê¿6™¿6∞¿6»¿6Ã¿6Õ¿6Ÿ¿6¿73¿7=¿7u¿7≈¿7◊¿8¿8F¿8ó¿8¸¿9¿9l¿9π¿9»¿9÷¿9‡¿9ı¿:¿:¿:J¿:P¿:`¿:†¿:≥¿:Ω¿:‡¿:¿;*¿;=¿;G¿;`¿;d¿;e¿;q¿;ã¿;≠¿;“¿;¯¿;˛¿<¿<¿<¿<+¿<U¿<r¿<ì¿<»¿=¿=\¿=l¿=¿=≠¿=∑¿=Ô¿>N¿>`¿>ï¿>œ¿?&¿?í¿?©¿@¿@U¿@d¿@r¿@|¿@ë¿@ù¿@≠¿@Ê¿@Ï¿@˚¿@ˇ¿A ¿A¿A ¿A6¿AL¿Aù¿AÎ¿B"¿BÇ¿Bò¿Bú¿Bù¿B©¿Bø¿B◊¿BÔ¿BÛ¿BÙ¿C ¿C¿C(¿C=¿CM¿Cê¿C•¿C≠¿C„¿D7¿DQ¿D∂¿E¿E¿E¿E ¿E;¿EÖ¿Eπ¿EÃ¿E–¿E—¿E›¿F0¿FN¿F^¿Fô¿F‹¿G¿GΩ¿GŸ¿H:¿Hì¿HÂ¿I:¿I[¿Ih¿I}¿IÌ¿J_¿Jπ¿J∆¿J“¿J⁄¿K¿KU¿K‚¿K˛¿LX¿L´¿L˙¿M6¿Më¿Mû¿M≥¿N	¿N^¿Nû¿N˜¿O¿O¿O.¿Oh¿O√¿P¿Pe¿Pü¿P¨¿P∏¿P¿¿P”¿P›¿Q6¿Q:¿Q;¿Qâ¿QŸ¿R(¿Ra¿Rg¿R∂¿RÔ¿S?¿Sp¿Só¿Sò¿S§¿S≈¿SË¿T¿T¿T¿T¿Tq¿Tú¿TÆ¿T¡¿T’¿TÎ¿TÚ¿Tˆ¿T˜¿U¿UH¿Us¿Uÿ¿U‹¿Uﬁ¿Uﬂ¿V ¿VW¿VÄ¿V™¿V´¿V∑¿VÍ¿VÎ¿V˜¿W¿WW¿Ws¿Wî¿W±¿W“¿WÍ¿W˝¿X¿X¿X¿XJ¿XP¿X†¿XÎ¿Y
¿Y¿YI¿Yg¿Yk¿Yl¿Y∏¿Y«¿YÕ¿Z¿Z[¿Zh¿Zü¿Z°¿Z¢¿ZË¿[-¿[w¿[Æ¿[Ø¿[Â¿\¿\@¿\i¿\x¿\±¿\Ê¿\Ó¿\Ù¿]¿]#¿]$¿]s¿]π¿]–¿]÷¿^#¿^t¿^ü¿^•¿^˘¿_C¿_ì¿_©¿_Ø¿` ¿`J¿`ó¿`ù¿`Í¿a9¿a?¿as¿aº¿a¬¿b¿b¿b]¿b≠¿b˝¿cL¿cú¿cË¿d¿dW¿dv¿d¶¿dÏ¿e¿e¿e¿e¿eT¿eâ¿eç¿eè¿eê¿e÷¿f¿fN¿fÄ¿fÅ¿f ¿fÀ¿f◊¿fı¿g.¿gÉ¿g¶¿gı¿h¿h?¿hE¿hx¿h|¿h}¿hâ¿h•¿hµ¿hÿ¿hÎ¿hı¿i¿i¿i¿iV¿it¿iz¿i∫¿iÒ¿j8¿jn¿jt¿j∑¿j¿k	¿k¿k`¿kf¿kv¿k|¿k≈¿l¿lK¿l]¿l¶¿lÚ¿mB¿mh¿mu¿m§¿m«¿mÀ¿mÃ¿n¿n¿n\¿nì¿n‡¿o.¿o4¿ow¿o√¿o…¿p¿p ¿p0¿p6¿p¿pª¿q¿q¿qb¿q≥¿r¿r)¿r6¿rq¿rï¿rô¿rö¿r¿rˆ¿s?¿sé¿sß¿s≠¿s˙¿tC¿tV¿t\¿t£¿t‚¿tË¿t¯¿t˛¿uJ¿u\¿u¶¿uÔ¿v;¿vã¿v±¿væ¿v˝¿w#¿w'¿w(¿w\¿wb¿wû¿w§¿w‚¿x)¿x/¿x?¿xE¿xé¿x ¿y¿y(¿yr¿y¬¿yË¿yı¿zF¿zm¿zq¿zr¿zº¿zı¿z˚¿{3¿{9¿{|¿{à¿{¥¿{˘¿|¿|¿|#¿|$¿|u¿|§¿|™¿|ı¿}D¿}é¿}î¿}§¿}™¿}¯¿~9¿~E¿~w¿~∑¿~Ô¿¿3¿b¿ô¿¿¿ ¿Î¿˜¿Ä#¿ÄZ¿Äá¿Äç¿Äë¿Äì¿Äî¿Ä‹¿Ä‡¿Å.¿Åv¿Åï¿Åô¿Åø¿Å√¿Ç¿Ç¿ÇF¿ÇJ¿Çê¿Çî¿ÇÂ¿Ç˛¿É¿ÉP¿É\¿É`¿É´¿Éƒ¿É»¿Ñ¿Ñi¿ÑØ¿Ö ¿Ö5¿Ö9¿ÖÑ¿Ö“¿ÖÙ¿Ö¯¿Ü¿Ü¿Üb¿Ü¨¿ÜÛ¿á9¿áh¿ál¿áx¿á´¿áØ¿áø¿à¿à¿à¿àC¿àK¿àX¿à^¿àf¿àj¿àx¿à|¿à≈¿à˛¿â¿âN¿âú¿âÈ¿ä7¿äo¿äs¿ä∆¿ã¿ã`¿ã∞¿ã˛¿å6¿å:¿åÑ¿åœ¿åÈ¿åÌ¿ç¿ç¿çU¿ç¢¿çÔ¿é¿é¿é`¿é∞¿è ¿èP¿èì¿èó¿èÁ¿ê4¿êÑ¿ê’¿ë¿ëm¿ëñ¿ëö¿ëÊ¿í4¿íÖ¿í–¿í‘¿ì¿ì¿ìh¿ì∏¿ìŸ¿ì›¿î¿î¿îl¿îΩ¿ï¿ï=¿ï¿ïœ¿ñ¿ñ¿ñV¿ñ§¿ñÌ¿ñÒ¿ó>¿óã¿óÀ¿óœ¿óˆ¿ó˙¿òI¿òó¿òÊ¿ô4¿ôF¿ôJ¿ôe¿ôi¿ô¥¿ô˘¿öD¿öé¿ö€¿õ*¿õ7¿õ;¿õå¿õ÷¿ú	¿ú¿ú[¿ú´¿ú˙¿ù7¿ù\¿ù`¿ùã¿ùè¿ùÃ¿û¿ûh¿ûá¿ûã¿ûŸ¿ü)¿üI¿üM¿üj¿ün¿üπ¿†
¿†W¿†õ¿†–¿°¿°R¿°S¿°â¿°è¿°”¿°ﬂ¿¢¿¢>¿¢Y¿¢]¿¢|¿¢}¿¢û¿¢™¿¢⁄¿¢€¿£¿£¿£M¿£n¿£±¿£‘¿£⁄¿§¿§¿§¿§P¿§q¿§ú¿§ﬂ¿•¿•1¿•@¿•H¿•k¿•q¿•Å¿•±¿•∆¿•Œ¿¶¿¶|¿¶†¿¶Â¿ß¿ßf¿ßp¿ßñ¿ßû¿ß√¿ßÎ¿ß˘¿®H¿®ï¿®≈¿®ˇ¿©?¿©¥¿™¿™º¿´5¿´Â¿¨q¿¨¿¨•¿≠¿≠¿≠¿≠,¿≠6¿≠I¿≠M¿≠N¿≠Z¿≠ã¿≠≠¿≠Ω¿≠‹¿≠Ô¿≠˘¿ÆF¿Ær¿ÆÇ¿Æ¢¿Æµ¿Æø¿Æœ¿Æˆ¿Ø	¿Ø¿Ø1¿ØR¿Øf¿Øj¿Øk¿Øw¿ØØ¿ØÃ¿ØÌ¿Ø˝¿∞$¿∞7¿∞A¿∞}¿∞Å¿∞Ç¿∞´¿∞ª¿∞Ò¿±¿±¿±¿±¿±¿±9¿±u¿±y¿±z¿±ò¿±≥¿±√¿±‚¿±ı¿±ˇ¿≤J¿≤Z¿≤z¿≤ç¿≤ó¿≤´¿≤Ø¿≤∞¿≤Ô¿≤ı¿≥>¿≥è¿≥∫¿≥¿¿¥¿¥\¿¥≠¿¥¯¿µC¿µî¿µ…¿µœ¿∂ ¿∂q¿∂¬¿∑¿∑`¿∑±¿∏ ¿∏D¿∏ï¿∏ƒ¿∏ ¿π¿πP¿πû¿πÍ¿∫1¿∫¿∫Ø¿∫µ¿ª¿ªS¿ªü¿ªÓ¿º0¿ºy¿ºÃ¿Ω¿Ωh¿Ω•¿ΩÒ¿æ?¿æê¿æ®¿æµ¿øE¿øf¿øÜ¿ø∆¿ø«¿¿ ¿¿\¿¿b¿¿c¿¿§¿¿ø¿¿ﬁ¿¡¿¡#¿¡$¿¡f¿¡µ¿¬¿¬F¿¬G¿¬v¿¬ñ¿¬∏¿¬˝¿√"¿√e¿√¨¿√≠¿√ˇ¿ƒN¿ƒh¿ƒ∂¿≈¿≈O¿≈p¿≈¥¿≈‹¿∆ ¿∆S¿∆é¿∆∫¿«¿«F¿«å¿«ü¿«†¿«º¿«ÿ¿»¿»?¿»@¿»ê¿»Ê¿»Á¿…¿…¿…'¿…Ñ¿…›¿ ¿ p¿ ø¿ Œ¿ ÷¿À@¿ÀÑ¿À≤¿À“¿ÀÌ¿Ã¿Ã¿Ã¿Ã3¿Ãê¿ÃÏ¿Õ*¿ÕÇ¿Õ—¿Õ‡¿ÕË¿Œ¿Œ$¿Œ*¿Œ+¿Œc¿Œ©¿Œ“¿ŒÌ¿œ¿œL¿œß¿–¿–!¿–N¿–ç¿–†¿–«¿–”¿–›¿–˙¿—¿—¿—	¿—/¿—a¿—z¿—µ¿—“¿—˙¿“¿“B¿“d¿“§¿“«¿”¿”@¿”U¿”õ¿”∫¿”»¿”‘¿”ﬁ¿”Ê¿‘6¿‘†¿‘‰¿’T¿’Ç¿’¢¿’Ω¿’√¿’ƒ¿’È¿÷¿÷S¿÷™¿÷Ÿ¿◊	¿◊
¿◊0¿◊ç¿◊…¿ÿ¿ÿI¿ÿÑ¿ÿ¿¿Ÿ*¿Ÿn¿Ÿﬁ¿⁄¿⁄,¿⁄G¿⁄b¿⁄h¿⁄i¿⁄Æ¿⁄È¿€)¿€{¿€†¿€™¿€≤¿€∏¿‹¿‹¿‹"¿‹#¿‹/¿‹E¿‹]¿‹i¿‹á¿‹‘¿› ¿›¿›¿›¿›¿›+¿›7¿›[¿›≠¿›ƒ¿›À¿ﬁ¿ﬁ'¿ﬁ3¿ﬁQ¿ﬁõ¿ﬁ«¿ﬁŒ¿ﬂ¿ﬂ ¿ﬂ:¿ﬂ>¿ﬂ?¿ﬂâ¿ﬂ™¿ﬂ∫¿ﬂ∆¿‡¿‡1¿‡k¿‡´¿‡Ú¿·%¿·Ç¿·Ã¿·€¿·È¿·Û¿‚¿‚g¿‚∑¿„¿„N¿„´¿„≥¿„∆¿„–¿„Î¿‰!¿‰'¿‰+¿‰,¿‰8¿‰^¿‰Ä¿‰†¿‰¿¿‰›¿Â3¿Â7¿Â8¿ÂD¿Âq¿Â£¿Â∏¿Âˇ¿ÊQ¿Ê∞¿Ê’¿Á(¿Á.¿Á2¿Á3¿Á?¿Á]¿Áç¿Áﬁ¿Ë	¿Ë¿Ë!¿Ë%¿Ë&¿Ëj¿Ëp¿Ëæ¿È¿È[¿È¨¿È‰¿È˘¿Í¿Í]¿Ím¿Í£¿Í˘¿Î¿Î\¿Îã¿Îñ¿Î∞¿Î˜¿ÏS¿Ïm¿Ïx¿Ïã¿Ï—¿Ì(¿Ì~¿Ì¬¿Ó¿Ó/¿Ó:¿ÓD¿ÓN¿ÓR¿ÓS¿Óù¿Ó£¿ÓÌ¿ÓÛ¿Ô>¿ÔD¿Ôì¿Ô‚¿6¿à¿⁄¿Ò-¿Ò~¿Ò∂¿Ò√¿Ú6¿ÚF¿Ú|¿Ú–¿ÚÎ¿Û7¿Ûf¿Ûq¿Ûã¿Û–¿Ù*¿ÙD¿ÙO¿Ùb¿Ù¶¿Ù˚¿ıO¿ıì¿ıÿ¿ˆ ¿ˆ¿ˆ¿ˆ¿ˆ#¿ˆ$¿ˆV¿ˆ\¿ˆ™¿ˆ◊¿ˆ‰¿˜;¿˜K¿˜Å¿˜◊¿˜Ú¿¯@¿¯o¿¯z¿¯î¿¯€¿˘7¿˘Q¿˘\¿˘o¿˘µ¿˙¿˙b¿˙¶¿˙Î¿˚¿˚¿˚(¿˚2¿˚6¿˚7¿˚C¿˚à¿˚≥¿¸¿¸!¿¸#¿¸$¿¸M¿¸Q¿¸ó¿¸À¿˝¿˝9¿˝b¿˝c¿˝Ø¿˝“¿˝ÿ¿˛	¿˛¿˛H¿˛ô¿˛È¿ˇ-¿ˇO¿ˇ†¿ˇ«¿ˇ€¿ˇﬂ¿ˇ‡¿ˇÏ¿ ¿ M¿ i¿ Ü¿ ®¿ ¨¿ Æ¿ Ø¿ ˚¿7¿Å¿¡¿¬¿Œ¿Ú¿¿#¿'¿(¿4¿w¿ä¿é¿è¿õ¿¿¿¿¿¿W¿j¿n¿o¿{¿≠¿ÿ¿‹¿ﬁ¿ﬂ¿2¿6¿Q¿U¿ô¿Ë¿&¿i¿≥¿¿¿¿¿"¿Q¿k¿É¿â¿ç¿é¿ö¿æ¿€¿Ó¿¿¿¿¿N¿p¿…¿Õ¿Œ¿⁄¿¿0¿Q¿™¿Æ¿Ø¿ª¿˛¿	¿	ô¿	Õ¿	Ì¿
¿
 ¿
!¿
-¿
Ç¿
ï¿
ô¿
ö¿
¶¿
È¿j¿Ñ¿≠¿Ã¿˚¿ˇ¿¿¿T¿X¿ú¿Ï¿<¿}¿Å¿è¿ì¿ﬂ¿¿T¿Å¿√¿¿X¿†¿°¿≠¿¿Ü¿ä¿ã¿ø¿≈¿¿(¿5¿J¿∑¿∏¿ÿ¿(¿L¿ä¿ã¿ó¿Ë¿e¿ô¿⁄¿	¿¿¿¿ã¿¿2¿t¿£¿ß¿®¿¥¿˜¿t¿û¿æ¿Ì¿Ò¿Ú¿˛¿-¿Z¿ã¿£¿´¿±¿µ¿∂¿¬¿Ê¿¿>¿a¿¿É¿Ñ¿ƒ¿‘¿ˇ¿!¿@¿Å¿˚¿¿k¿©¿∫¿%¿d¿t¿Å¿å¿î¿ß¿±¿¬¿∆¿«¿”¿¿V¿í¿ß¿´¿¨¿∏¿È¿¿y¿˜¿¿F¿«¿Â¿¿¿%¿)¿*¿6¿n¿ã¿˘¿ ¿ v¿ Ô¿!¿!¿!¿!¿!e¿!i¿!π¿!Õ¿!‚¿"¿"=¿">¿"g¿"Ä¿"Å¿"ç¿"∆¿"»¿"…¿"Ù¿#¿##¿#:¿#h¿#m¿#®¿#¬¿#‘¿#Ù¿$
¿$:¿$?¿$d¿$v¿$x¿$y¿$≠¿$”¿$◊¿%¿%e¿%¥¿%˚¿&¿&¿&&¿&*¿&y¿&À¿&÷¿&˛¿'I¿'v¿'w¿'√¿'ﬁ¿'Ô¿'¿()¿(<¿(=¿(I¿(l¿(ò¿(¨¿(≤¿(“¿(Ú¿)¿)¿)¿)$¿)U¿)W¿)X¿)ù¿)¬¿)Á¿*¿*¿*H¿*I¿*U¿*è¿*ê¿*ú¿*”¿*’¿*÷¿*˘¿+¿+¿+¿+V¿+X¿+Y¿+≤¿+√¿,¿,}¿,    Ä•  Ä∫  Ä‘  ÄÓ  Å  ÅB  ÅY  Ån  Åã  Å™  Åœ  ÅÇÇáÇâÇ≤ÉÉÉ6ÉoÉqÉöÉøÉ¡ÉÍÑÑÑ0Ñu &á*á"  á1 á7áA       á~Ñ#à‘ÅO/// A key that takes its identity from the object used as its value.
///
/// Used to tie the identity of a widget to the identity of an object used to
/// generate that widget.
///
/// See also:
///
///  * [Key], the base class for all keys.
///  * The discussion at [Widget.key] for more information about how widgets use
///    keys. àÛg âDâMH/// Creates a key that uses [identical] on [value] for its [operator==].âN
âT   â^Wâ∞A/// The object whose identity is used by this key's [operator==]. ä|Räê   ä|ä}â∫Äæâ‘  â◊âﬂ  â∫âªä“ÄÕäÂ   ä“ä” ã£éùì•á‡/// A key that is unique across the entire app.
///
/// Global keys uniquely identify elements. Global keys provide access to other
/// objects that are associated with those elements, such as [BuildContext].
/// For [StatefulWidget]s, global keys also provide access to [State].
///
/// Widgets that have global keys reparent their subtrees when they are moved
/// from one location in the tree to another location in the tree. In order to
/// reparent its subtree, a widget must arrive at its new location in the tree
/// in the same animation frame in which it was removed from its old location in
/// the tree.
///
/// Reparenting an [Element] using a global key is relatively expensive, as
/// this operation will trigger a call to [State.deactivate] on the associated
/// [State] and all of its descendants; then force all widgets that depends
/// on an [InheritedWidget] to rebuild.
///
/// If you don't need any of the features listed above, consider using a [Key],
/// [ValueKey], [ObjectKey], or [UniqueKey] instead.
///
/// You cannot simultaneously include two widgets in the tree with the same
/// global key. Attempting to do so will assert at runtime.
///
/// ## Pitfalls
///
/// GlobalKeys should not be re-created on every build. They should usually be
/// long-lived objects owned by a [State] object, for example.
///
/// Creating a new GlobalKey on every build will throw away the state of the
/// subtree associated with the old key and create a new fresh subtree for the
/// new key. Besides harming performance, this can also cause unexpected
/// behavior in widgets in the subtree. For example, a [GestureDetector] in the
/// subtree will be unable to track ongoing gestures since it will be recreated
/// on each build.
///
/// Instead, a good practice is to let a State object own the GlobalKey, and
/// instantiate it outside the build method, such as in [State.initState].
///
/// See also:
///
///  * The discussion at [Widget.key] for more information about how widgets use
///    keys.ìØìØì‡Å î≤îªÄø/// Creates a [LabeledGlobalKey], which is a [GlobalKey] with a label used for
/// debugging.
///
/// The label is purely for debugging and not used for comparing the identity
/// of the key.îæî«   î˚Ä¡ïùïûï©Ää/// Creates a global key without a label.
///
/// Used by subclasses because the factory constructor shadows the implicit
/// constructor. ïÆï≥ï¥ïπï∫ ï¿]ïÕ    ñ!Ä‰ñ„Äß/// The build context in which the widget with this key builds.
///
/// The current context is null if there is no widget in the tree that matches
/// this global key.   ó	Ä„ó√Ä•/// The widget in the tree that currently has this global key.
///
/// The current widget is null if there is no widget in the tree that matches
/// this global key.   óÇNô#Å!/// The [State] for the widget in the tree that currently has this global key.
///
/// The current state is null if (1) there is no widget in the tree that
/// matches this global key, (2) that widget is not a [StatefulWidget], or the
/// associated [State] object is not a subtype of `T`.    ìÑìÖöBÉ#ö¸Ä°/// A global key with a debugging label.
///
/// The debug label is useful for documentation and for debugging. The label
/// does not affect the key's identity.õõõGÄ¸ ú
úf/// Creates a global key with a debugging label.
///
/// The label does not affect the key's identity.úú!  ú/ú4ú5ú@úAúGúU   úeÄ˛úx   úeúfö‰öÂùgá›†ÂÉe/// A global key that takes its identity from the object used as its value.
///
/// Used to tie the identity of a widget to the identity of an object used to
/// generate that widget.
///
/// If the object is not private, then it is possible that collisions will occur
/// where independent widgets will reuse the same object as their
/// [GlobalObjectKey] value in a different part of the tree, leading to a global
/// key conflict. To avoid this problem, create a private [GlobalObjectKey]
/// subclass, as in:
///
/// ```dart
/// class _MyKey extends GlobalObjectKey {
///   const _MyKey(Object value) : super(value);
/// }
/// ```
///
/// Since the [runtimeType] of the key is part of its identity, this will
/// prevent clashes with other [GlobalObjectKey]s even if they have the same
/// value.
///
/// Any [GlobalObjectKey] created for the same value will match.†ı†ı°/Ää °á°ñO/// Creates a global key that uses [identical] on [value] for its [operator==].°ó
°ù  °•°™°´°∂°∑°ΩV¢A/// The object whose identity is used by this key's [operator==]. ¢„8¢˜   ¢„¢‰¢Ä«¢2  ¢5¢=  ¢¢£Ç#£2   ££ †Õ†Œ•Fîô¨qá/// Describes the configuration for an [Element].
///
/// Widgets are the central class hierarchy in the Flutter framework. A widget
/// is an immutable description of part of a user interface. Widgets can be
/// inflated into elements, which manage the underlying render tree.
///
/// Widgets themselves have no mutable state (all their fields must be final).
/// If you wish to associate mutable state with a widget, consider using a
/// [StatefulWidget], which creates a [State] object (via
/// [StatefulWidget.createState]) whenever it is inflated into an element and
/// incorporated into the tree.
///
/// A given widget can be included in the tree zero or more times. In particular
/// a given widget can be placed in the tree multiple times. Each time a widget
/// is placed in the tree, it is inflated into an [Element], which means a
/// widget that is incorporated into the tree multiple times will be inflated
/// multiple times.
///
/// The [key] property controls how one widget replaces another widget in the
/// tree. If the [runtimeType] and [key] properties of the two widgets are
/// [operator==], respectively, then the new widget replaces the old widget by
/// updating the underlying element (i.e., by calling [Element.update] with the
/// new widget). Otherwise, the old element is removed from the tree, the new
/// widget is inflated into an element, and the new element is inserted into the
/// tree.
///
/// See also:
///
///  * [StatefulWidget] and [State], for widgets that can build differently
///    several times over their lifetime.
///  * [InheritedWidget], for widgets that introduce ambient state that can
///    be read by descendant widgets.
///  * [StatelessWidget], for widgets that always build the same way given a
///    particular configuration and ambient state. ¨óC ¨≈¨À%/// Initializes [key] for subclasses.¨Œ¨‘   ¨ﬁÑ_±:Ñ$/// Controls how one widget replaces another widget in the tree.
///
/// If the [runtimeType] and [key] properties of the two widgets are
/// [operator==], respectively, then the new widget replaces the old widget by
/// updating the underlying element (i.e., by calling [Element.update] with the
/// new widget). Otherwise, the old element is removed from the tree, the new
/// widget is inflated into an element, and the new element is inserted into the
/// tree.
///
/// In addition, using a [GlobalKey] as the widget's [key] allows the element
/// to be moved around the tree (changing parent) without losing state. When a
/// new widget is found (its key and type do not match a previous widget in
/// the same location), but there was a widget with that same global key
/// elsewhere in the tree in the previous frame, then that widget's element is
/// moved to the new location.
///
/// Generally, a widget that is the only child of another widget does not need
/// an explicit key.
///
/// See also:
///
///  * The discussions at [Key] and [GlobalKey]. ¥Ô=µ   ¥Ô¥¥˚¥¸±BÅ»≤˙Åâ/// Inflates this configuration to a concrete instance.
///
/// A given widget can be included in the tree zero or more times. In particular
/// a given widget can be placed in the tree multiple times. Each time a widget
/// is placed in the tree, it is inflated into an [Element], which means a
/// widget that is incorporated into the tree multiple times will be inflated
/// multiple times.  ≤⁄≤€≤Á≤Ë≥Äƒ≥T0/// A short, textual description of this widget.  ≥A≥B≥÷Ä∆≥Á  ≥˚&¥  ≥÷≥◊¥†K¥»  ¥À¥”  ¥†¥°¥¨¥≠µ0Ç≈∑]Ç/// Whether the `newWidget` can be used to update an [Element] that currently
/// has the `oldWidget` as its configuration.
///
/// An element that uses a given widget as its configuration can be updated to
/// use another widget as its configuration if, and only if, the two widgets
/// have [runtimeType] and [key] properties that are [operator==].
///
/// If the widgets have no key (their key is null), then they are considered a
/// match if they have the same type, even if their children are completely
/// different. ∑g∑o  ∑y∑Å   πEÄòπP  πfπn   ¨W¨Xπ·ûl¿ Oï$/// A widget that does not require mutable state.
///
/// A stateless widget is a widget that describes part of the user interface by
/// building a constellation of other widgets that describe the user interface
/// more concretely. The building process continues recursively until the
/// description of the user interface is fully concrete (e.g., consists
/// entirely of [RenderObjectWidget]s, which describe concrete [RenderObject]s).
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=wE7khGHVkYY}
///
/// Stateless widget are useful when the part of the user interface you are
/// describing does not depend on anything other than the configuration
/// information in the object itself and the [BuildContext] in which the widget
/// is inflated. For compositions that can change dynamically, e.g. due to
/// having an internal clock-driven state, or depending on some system state,
/// consider using [StatefulWidget].
///
/// ## Performance considerations
///
/// The [build] method of a stateless widget is typically only called in three
/// situations: the first time the widget is inserted in the tree, when the
/// widget's parent changes its configuration, and when an [InheritedWidget] it
/// depends on changes.
///
/// If a widget's parent will regularly change the widget's configuration, or if
/// it depends on inherited widgets that frequently change, then it is important
/// to optimize the performance of the [build] method to maintain a fluid
/// rendering performance.
///
/// There are several techniques one can use to minimize the impact of
/// rebuilding a stateless widget:
///
///  * Minimize the number of nodes transitively created by the build method and
///    any widgets it creates. For example, instead of an elaborate arrangement
///    of [Row]s, [Column]s, [Padding]s, and [SizedBox]es to position a single
///    child in a particularly fancy manner, consider using just an [Align] or a
///    [CustomSingleChildLayout]. Instead of an intricate layering of multiple
///    [Container]s and with [Decoration]s to draw just the right graphical
///    effect, consider a single [CustomPaint] widget.
///
///  * Use `const` widgets where possible, and provide a `const` constructor for
///    the widget so that users of the widget can also do so.
///
///  * Consider refactoring the stateless widget into a stateful widget so that
///    it can use some of the techniques described at [StatefulWidget], such as
///    caching common parts of subtrees and using [GlobalKey]s when changing the
///    tree structure.
///
///  * If the widget is likely to get rebuilt frequently due to the use of
///    [InheritedWidget]s, consider refactoring the stateless widget into
///    multiple widgets, with the parts of the tree that change being pushed to
///    the leaves. For example instead of building a tree with four widgets, the
///    inner-most widget depending on the [Theme], consider factoring out the
///    part of the build function that builds the inner-most widget into its own
///    widget, so that only the inner-most widget needs to be rebuilt when the
///    theme changes.
/// {@template flutter.flutter.widgets.framework.prefer_const_over_helper}
///  * When trying to create a reusable piece of UI, prefer using a widget
///    rather than a helper method. For example, if there was a function used to
///    build a widget, a [State.setState] call would require Flutter to entirely
///    rebuild the returned wrapping widget. If a [Widget] was used instead,
///    Flutter would be able to efficiently re-render only those parts that
///    really need to be updated. Even better, if the created widget is `const`,
///    Flutter would short-circuit most of the rebuild work.
/// {@endtemplate}
///
/// This video gives more explainations on why `const` constructors are important
/// and why a [Widget] is better than a helper method.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=IOyq-eTRhvo}
///
/// {@tool snippet}
///
/// The following is a skeleton of a stateless widget subclass called `GreenFrog`.
///
/// Normally, widgets have more constructor arguments, each of which corresponds
/// to a `final` property.
///
/// ```dart
/// class GreenFrog extends StatelessWidget {
///   const GreenFrog({ super.key });
///
///   @override
///   Widget build(BuildContext context) {
///     return Container(color: const Color(0xFF2DBD3A));
///   }
/// }
/// ```
/// {@end-tool}
///
/// {@tool snippet}
///
/// This next example shows the more generic widget `Frog` which can be given
/// a color and a child:
///
/// ```dart
/// class Frog extends StatelessWidget {
///   const Frog({
///     super.key,
///     this.color = const Color(0xFF2DBD3A),
///     this.child,
///   });
///
///   final Color color;
///   final Widget? child;
///
///   @override
///   Widget build(BuildContext context) {
///     return Container(color: color, child: child);
///   }
/// }
/// ```
/// {@end-tool}
///
/// By convention, widget constructors only use named arguments. Also by
/// convention, the first argument is [key], and the last argument is `child`,
/// `children`, or the equivalent.
///
/// See also:
///
///  * [StatefulWidget] and [State], for widgets that can build differently
///    several times over their lifetime.
///  * [InheritedWidget], for widgets that introduce ambient state that can
///    be read by descendant widgets. ¿ O8M ¿ Of¿ Ou%/// Initializes [key] for subclasses.¿ Ox	¿ O     ¿ OâÄ€¿ P:Äç/// Creates a [StatelessElement] to manage this widget's location in the tree.
///
/// It is uncommon for subclasses to override this method.  ¿ P¿ P¿ Phá„¿ X/áf/// Describes the part of the user interface represented by this widget.
///
/// The framework calls this method when this widget is inserted into the tree
/// in a given [BuildContext] and when the dependencies of this widget change
/// (e.g., an [InheritedWidget] referenced by this widget changes). This
/// method can potentially be called in every frame and should not have any side
/// effects beyond building a widget.
///
/// The framework replaces the subtree below this widget with the widget
/// returned by this method, either by updating the existing subtree or by
/// removing the subtree and inflating a new subtree, depending on whether the
/// widget returned by this method can update the root of the existing
/// subtree, as determined by calling [Widget.canUpdate].
///
/// Typically implementations return a newly created constellation of widgets
/// that are configured with information from this widget's constructor and
/// from the given [BuildContext].
///
/// The given [BuildContext] contains information about the location in the
/// tree at which this widget is being built. For example, the context
/// provides the set of inherited widgets for this location in the tree. A
/// given widget might be built with multiple different [BuildContext]
/// arguments over time if the widget is moved around the tree or if the
/// widget is inserted into the tree in multiple places at once.
///
/// The implementation of this method must only depend on:
///
/// * the fields of the widget, which themselves must not change over time,
///   and
/// * any ambient state obtained from the `context` using
///   [BuildContext.dependOnInheritedWidgetOfExactType].
///
/// If a widget's [build] method is to depend on anything else, use a
/// [StatefulWidget] instead.
///
/// See also:
///
///  * [StatelessWidget], which contains the discussion on performance considerations. ¿ X5¿ XC  ¿ X¿ X ¿ XO®B¿ {©£J/// A widget that has mutable state.
///
/// State is information that (1) can be read synchronously when the widget is
/// built and (2) might change during the lifetime of the widget. It is the
/// responsibility of the widget implementer to ensure that the [State] is
/// promptly notified when such state changes, using [State.setState].
///
/// A stateful widget is a widget that describes part of the user interface by
/// building a constellation of other widgets that describe the user interface
/// more concretely. The building process continues recursively until the
/// description of the user interface is fully concrete (e.g., consists
/// entirely of [RenderObjectWidget]s, which describe concrete [RenderObject]s).
///
/// Stateful widgets are useful when the part of the user interface you are
/// describing can change dynamically, e.g. due to having an internal
/// clock-driven state, or depending on some system state. For compositions that
/// depend only on the configuration information in the object itself and the
/// [BuildContext] in which the widget is inflated, consider using
/// [StatelessWidget].
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=AqCMFXEmf3w}
///
/// [StatefulWidget] instances themselves are immutable and store their mutable
/// state either in separate [State] objects that are created by the
/// [createState] method, or in objects to which that [State] subscribes, for
/// example [Stream] or [ChangeNotifier] objects, to which references are stored
/// in final fields on the [StatefulWidget] itself.
///
/// The framework calls [createState] whenever it inflates a
/// [StatefulWidget], which means that multiple [State] objects might be
/// associated with the same [StatefulWidget] if that widget has been inserted
/// into the tree in multiple places. Similarly, if a [StatefulWidget] is
/// removed from the tree and later inserted in to the tree again, the framework
/// will call [createState] again to create a fresh [State] object, simplifying
/// the lifecycle of [State] objects.
///
/// A [StatefulWidget] keeps the same [State] object when moving from one
/// location in the tree to another if its creator used a [GlobalKey] for its
/// [key]. Because a widget with a [GlobalKey] can be used in at most one
/// location in the tree, a widget that uses a [GlobalKey] has at most one
/// associated element. The framework takes advantage of this property when
/// moving a widget with a global key from one location in the tree to another
/// by grafting the (unique) subtree associated with that widget from the old
/// location to the new location (instead of recreating the subtree at the new
/// location). The [State] objects associated with [StatefulWidget] are grafted
/// along with the rest of the subtree, which means the [State] object is reused
/// (instead of being recreated) in the new location. However, in order to be
/// eligible for grafting, the widget must be inserted into the new location in
/// the same animation frame in which it was removed from the old location.
///
/// ## Performance considerations
///
/// There are two primary categories of [StatefulWidget]s.
///
/// The first is one which allocates resources in [State.initState] and disposes
/// of them in [State.dispose], but which does not depend on [InheritedWidget]s
/// or call [State.setState]. Such widgets are commonly used at the root of an
/// application or page, and communicate with subwidgets via [ChangeNotifier]s,
/// [Stream]s, or other such objects. Stateful widgets following such a pattern
/// are relatively cheap (in terms of CPU and GPU cycles), because they are
/// built once then never update. They can, therefore, have somewhat complicated
/// and deep build methods.
///
/// The second category is widgets that use [State.setState] or depend on
/// [InheritedWidget]s. These will typically rebuild many times during the
/// application's lifetime, and it is therefore important to minimize the impact
/// of rebuilding such a widget. (They may also use [State.initState] or
/// [State.didChangeDependencies] and allocate resources, but the important part
/// is that they rebuild.)
///
/// There are several techniques one can use to minimize the impact of
/// rebuilding a stateful widget:
///
///  * Push the state to the leaves. For example, if your page has a ticking
///    clock, rather than putting the state at the top of the page and
///    rebuilding the entire page each time the clock ticks, create a dedicated
///    clock widget that only updates itself.
///
///  * Minimize the number of nodes transitively created by the build method and
///    any widgets it creates. Ideally, a stateful widget would only create a
///    single widget, and that widget would be a [RenderObjectWidget].
///    (Obviously this isn't always practical, but the closer a widget gets to
///    this ideal, the more efficient it will be.)
///
///  * If a subtree does not change, cache the widget that represents that
///    subtree and re-use it each time it can be used. To do this, simply assign
///    a widget to a `final` state variable and re-use it in the build method. It
///    is massively more efficient for a widget to be re-used than for a new (but
///    identically-configured) widget to be created. Another caching stragegy
///    consists in extracting the mutable part of the widget into a [StatefulWidget]
///    which accepts a child parameter.
///
///  * Use `const` widgets where possible. (This is equivalent to caching a
///    widget and re-using it.)
///
///  * Avoid changing the depth of any created subtrees or changing the type of
///    any widgets in the subtree. For example, rather than returning either the
///    child or the child wrapped in an [IgnorePointer], always wrap the child
///    widget in an [IgnorePointer] and control the [IgnorePointer.ignoring]
///    property. This is because changing the depth of the subtree requires
///    rebuilding, laying out, and painting the entire subtree, whereas just
///    changing the property will require the least possible change to the
///    render tree (in the case of [IgnorePointer], for example, no layout or
///    repaint is necessary at all).
///
///  * If the depth must be changed for some reason, consider wrapping the
///    common parts of the subtrees in widgets that have a [GlobalKey] that
///    remains consistent for the life of the stateful widget. (The
///    [KeyedSubtree] widget may be useful for this purpose if no other widget
///    can conveniently be assigned the key.)
///
/// {@macro flutter.flutter.widgets.framework.prefer_const_over_helper}
///
/// This video gives more explainations on why `const` constructors are important
/// and why a [Widget] is better than a helper method.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=IOyq-eTRhvo}
///
/// {@tool snippet}
///
/// This is a skeleton of a stateful widget subclass called `YellowBird`.
///
/// In this example, the [State] has no actual state. State is normally
/// represented as private member fields. Also, normally widgets have more
/// constructor arguments, each of which corresponds to a `final` property.
///
/// ```dart
/// class YellowBird extends StatefulWidget {
///   const YellowBird({ super.key });
///
///   @override
///   State<YellowBird> createState() => _YellowBirdState();
/// }
///
/// class _YellowBirdState extends State<YellowBird> {
///   @override
///   Widget build(BuildContext context) {
///     return Container(color: const Color(0xFFFFE306));
///   }
/// }
/// ```
/// {@end-tool}
/// {@tool snippet}
///
/// This example shows the more generic widget `Bird` which can be given a
/// color and a child, and which has some internal state with a method that
/// can be called to mutate it:
///
/// ```dart
/// class Bird extends StatefulWidget {
///   const Bird({
///     super.key,
///     this.color = const Color(0xFFFFE306),
///     this.child,
///   });
///
///   final Color color;
///   final Widget? child;
///
///   @override
///   State<Bird> createState() => _BirdState();
/// }
///
/// class _BirdState extends State<Bird> {
///   double _size = 1.0;
///
///   void grow() {
///     setState(() { _size += 0.1; });
///   }
///
///   @override
///   Widget build(BuildContext context) {
///     return Container(
///       color: widget.color,
///       transform: Matrix4.diagonal3Values(_size, _size, 1.0),
///       child: widget.child,
///     );
///   }
/// }
/// ```
/// {@end-tool}
///
/// By convention, widget constructors only use named arguments. Also by
/// convention, the first argument is [key], and the last argument is `child`,
/// `children`, or the equivalent.
///
/// See also:
///
///  * [State], where the logic behind a [StatefulWidget] is hosted.
///  * [StatelessWidget], for widgets that always build the same way given a
///    particular configuration and ambient state.
///  * [InheritedWidget], for widgets that introduce ambient state that can
///    be read by descendant widgets. ¿ {ÀL ¿ {˘¿ |%/// Initializes [key] for subclasses.¿ |
	¿ |     ¿ |Äÿ¿ | Äå/// Creates a [StatefulElement] to manage this widget's location in the tree.
///
/// It is uncommon for subclasses to override this method.  ¿ |Æ¿ |Ø¿ |˜ÉZ¿ ÄCÉ/// Creates the mutable state for this widget at a given location in the tree.
///
/// Subclasses should override this method to return a newly created
/// instance of their associated [State] subclass:
///
/// ```dart
/// @override
/// State<MyWidget> createState() => _MyWidgetState();
/// ```
///
/// The framework can call this method multiple times over the lifetime of
/// a [StatefulWidget]. For example, if the widget is inserted into the tree
/// in multiple locations, the framework will create a separate [State] object
/// for each location. Similarly, if the widget is removed from the tree and
/// later inserted into the tree again, the framework will call [createState]
/// again to create a fresh [State] object, simplifying the lifecycle of
/// [State] objects.  ¿ Ä%¿ Ä&¿ Ä2¿ Ä3 ¿ ÉP¿ hƒ¿ ö#ñ±/// The logic and internal state for a [StatefulWidget].
///
/// State is information that (1) can be read synchronously when the widget is
/// built and (2) might change during the lifetime of the widget. It is the
/// responsibility of the widget implementer to ensure that the [State] is
/// promptly notified when such state changes, using [State.setState].
///
/// [State] objects are created by the framework by calling the
/// [StatefulWidget.createState] method when inflating a [StatefulWidget] to
/// insert it into the tree. Because a given [StatefulWidget] instance can be
/// inflated multiple times (e.g., the widget is incorporated into the tree in
/// multiple places at once), there might be more than one [State] object
/// associated with a given [StatefulWidget] instance. Similarly, if a
/// [StatefulWidget] is removed from the tree and later inserted in to the tree
/// again, the framework will call [StatefulWidget.createState] again to create
/// a fresh [State] object, simplifying the lifecycle of [State] objects.
///
/// [State] objects have the following lifecycle:
///
///  * The framework creates a [State] object by calling
///    [StatefulWidget.createState].
///  * The newly created [State] object is associated with a [BuildContext].
///    This association is permanent: the [State] object will never change its
///    [BuildContext]. However, the [BuildContext] itself can be moved around
///    the tree along with its subtree. At this point, the [State] object is
///    considered [mounted].
///  * The framework calls [initState]. Subclasses of [State] should override
///    [initState] to perform one-time initialization that depends on the
///    [BuildContext] or the widget, which are available as the [context] and
///    [widget] properties, respectively, when the [initState] method is
///    called.
///  * The framework calls [didChangeDependencies]. Subclasses of [State] should
///    override [didChangeDependencies] to perform initialization involving
///    [InheritedWidget]s. If [BuildContext.dependOnInheritedWidgetOfExactType] is
///    called, the [didChangeDependencies] method will be called again if the
///    inherited widgets subsequently change or if the widget moves in the tree.
///  * At this point, the [State] object is fully initialized and the framework
///    might call its [build] method any number of times to obtain a
///    description of the user interface for this subtree. [State] objects can
///    spontaneously request to rebuild their subtree by callings their
///    [setState] method, which indicates that some of their internal state
///    has changed in a way that might impact the user interface in this
///    subtree.
///  * During this time, a parent widget might rebuild and request that this
///    location in the tree update to display a new widget with the same
///    [runtimeType] and [Widget.key]. When this happens, the framework will
///    update the [widget] property to refer to the new widget and then call the
///    [didUpdateWidget] method with the previous widget as an argument. [State]
///    objects should override [didUpdateWidget] to respond to changes in their
///    associated widget (e.g., to start implicit animations). The framework
///    always calls [build] after calling [didUpdateWidget], which means any
///    calls to [setState] in [didUpdateWidget] are redundant.
///  * During development, if a hot reload occurs (whether initiated from the
///    command line `flutter` tool by pressing `r`, or from an IDE), the
///    [reassemble] method is called. This provides an opportunity to
///    reinitialize any data that was prepared in the [initState] method.
///  * If the subtree containing the [State] object is removed from the tree
///    (e.g., because the parent built a widget with a different [runtimeType]
///    or [Widget.key]), the framework calls the [deactivate] method. Subclasses
///    should override this method to clean up any links between this object
///    and other elements in the tree (e.g. if you have provided an ancestor
///    with a pointer to a descendant's [RenderObject]).
///  * At this point, the framework might reinsert this subtree into another
///    part of the tree. If that happens, the framework will ensure that it
///    calls [build] to give the [State] object a chance to adapt to its new
///    location in the tree. If the framework does reinsert this subtree, it
///    will do so before the end of the animation frame in which the subtree was
///    removed from the tree. For this reason, [State] objects can defer
///    releasing most resources until the framework calls their [dispose]
///    method.
///  * If the framework does not reinsert this subtree by the end of the current
///    animation frame, the framework will call [dispose], which indicates that
///    this [State] object will never build again. Subclasses should override
///    this method to release any resources retained by this object (e.g.,
///    stop any active animations).
///  * After the framework calls [dispose], the [State] object is considered
///    unmounted and the [mounted] property is false. It is an error to call
///    [setState] at this point. This stage of the lifecycle is terminal: there
///    is no way to remount a [State] object that has been disposed.
///
/// See also:
///
///  * [StatefulWidget], where the current configuration of a [State] is hosted,
///    and whose documentation has sample code for [State].
///  * [StatelessWidget], for widgets that always build the same way given a
///    particular configuration and ambient state.
///  * [InheritedWidget], for widgets that introduce ambient state that can
///    be read by descendant widgets.
///  * [Widget], for an overview of widgets in general.¿ ö)¿ ö) ¿ úÄ
¿ úÉ  ¿ úèÅ ¿ ùÅÄŸ/// The current stage in the lifecycle for this state object.
///
/// This field is used by the framework when asserts are enabled to verify
/// that [State] objects move through their lifecycle in an orderly fashion.¿ ùò¿ ùß¿ ù®¿ ¢¿ ¢-  ¿ ö[Ç"¿ újÅˆ/// The current configuration.
///
/// A [State] object's configuration is the corresponding [StatefulWidget]
/// instance. This property is initialized by the framework before calling
/// [initState]. If the parent updates this location in the tree to a new
/// widget with the same [runtimeType] and [Widget.key] as the current
/// configuration, the framework will update this property to refer to the new
/// widget and then call [didUpdateWidget], passing the old configuration as
/// an argument.   ¿ ûfÉ≥¿ †zÅÓ/// The location in the tree where this widget builds.
///
/// The framework associates [State] objects with a [BuildContext] after
/// creating them with [StatefulWidget.createState] and before calling
/// [initState]. The association is permanent: the [State] object will never
/// change its [BuildContext]. However, the [BuildContext] itself can be moved
/// around the tree.
///
/// After calling [dispose], the framework severs the [State] object's
/// connection with the [BuildContext].   ¿ ¢:Å˘¿ §Å¡/// Whether this [State] object is currently in a tree.
///
/// After creating a [State] object and before calling [initState], the
/// framework "mounts" the [State] object by associating it with a
/// [BuildContext]. The [State] object remains mounted until the framework
/// calls [dispose], after which time the framework will never ask the [State]
/// object to [build] again.
///
/// It is an error to call [setState] unless [mounted] is true.   ¿ ù¥ÄÆ¿ û0r/// Verifies that the [State] that was created is one that expects to be
/// created for that particular [Widget]. ¿ ûD¿ ûL   ¿ §7Ü<¿ ™%Öå/// Called when this object is inserted into the tree.
///
/// The framework will call this method exactly once for each [State] object
/// it creates.
///
/// Override this method to perform initialization that depends on the
/// location at which this object was inserted into the tree (i.e., [context])
/// or on the widget used to configure this object (i.e., [widget]).
///
/// {@template flutter.widgets.State.initState}
/// If a [State]'s [build] method depends on an object that can itself
/// change state, for example a [ChangeNotifier] or [Stream], or some
/// other object to which one can subscribe to receive notifications, then
/// be sure to subscribe and unsubscribe properly in [initState],
/// [didUpdateWidget], and [dispose]:
///
///  * In [initState], subscribe to the object.
///  * In [didUpdateWidget] unsubscribe from the old object and subscribe
///    to the new one if the updated widget configuration requires
///    replacing the object.
///  * In [dispose], unsubscribe from the object.
///
/// {@endtemplate}
///
/// You cannot use [BuildContext.dependOnInheritedWidgetOfExactType] from this
/// method. However, [didChangeDependencies] will be called immediately
/// following this method, and [BuildContext.dependOnInheritedWidgetOfExactType] can
/// be used there.
///
/// Implementations of this method should start with a call to the inherited
/// method, as in `super.initState()`.  ¿ ™¿ ™¿ ™¿ ™¿ ™wÉ∂¿ ÆÉD/// Called whenever the widget configuration changes.
///
/// If the parent widget rebuilds and request that this location in the tree
/// update to display a new widget with the same [runtimeType] and
/// [Widget.key], the framework will update the [widget] property of this
/// [State] object to refer to the new widget and then call this method
/// with the previous widget as an argument.
///
/// Override this method to respond when the [widget] changes (e.g., to start
/// implicit animations).
///
/// The framework always calls [build] after calling [didUpdateWidget], which
/// means any calls to [setState] in [didUpdateWidget] are redundant.
///
/// {@macro flutter.widgets.State.initState}
///
/// Implementations of this method should start with a call to the inherited
/// method, as in `super.didUpdateWidget(oldWidget)`. ¿ Æ¿ Æ   ¿ ≠‡¿ ≠·¿ ≠Ò¿ ≠Ú¿ Æ1ÅË¿ ∞	Åû/// {@macro flutter.widgets.Element.reassemble}
///
/// In addition to this method being invoked, it is guaranteed that the
/// [build] method will be invoked when a reassemble is signaled. Most
/// widgets therefore do not need to do anything in the [reassemble] method.
///
/// See also:
///
///  * [Element.reassemble]
///  * [BindingBase.reassembleApplication]
///  * [Image], which uses this to reload images.  ¿ ØÊ¿ ØÁ¿ ØÛ¿ ØÙ¿ ∞íî¿ ∑ëá/// Notify the framework that the internal state of this object has changed.
///
/// Whenever you change the internal state of a [State] object, make the
/// change in a function that you pass to [setState]:
///
/// ```dart
/// setState(() { _myState = newValue; });
/// ```
///
/// The provided callback is immediately called synchronously. It must not
/// return a future (the callback cannot be `async`), since then it would be
/// unclear when the state was actually being set.
///
/// Calling [setState] notifies the framework that the internal state of this
/// object has changed in a way that might impact the user interface in this
/// subtree, which causes the framework to schedule a [build] for this [State]
/// object.
///
/// If you just change the state directly without calling [setState], the
/// framework might not schedule a [build] and the user interface for this
/// subtree might not be updated to reflect the new state.
///
/// Generally it is recommended that the `setState` method only be used to
/// wrap the actual changes to the state, not any computation that might be
/// associated with the change. For example, here a value used by the [build]
/// function is incremented, and then the change is written to disk, but only
/// the increment is wrapped in the `setState`:
///
/// ```dart
/// Future<void> _incrementCounter() async {
///   setState(() {
///     _counter++;
///   });
///   Directory directory = await getApplicationDocumentsDirectory();
///   final String dirName = directory.path;
///   await File('$dir/counter.txt').writeAsString('$_counter');
/// }
/// ```
///
/// It is an error to call this method after the framework calls [dispose].
/// You can determine whether it is legal to call this method by checking
/// whether the [mounted] property is true. ¿ ∑ö¿ ∑®  ¿ ∑¿ ∑Ä¿ ¬µÖÓ¿ »ìÖÜ/// Called when this object is removed from the tree.
///
/// The framework calls this method whenever it removes this [State] object
/// from the tree. In some cases, the framework will reinsert the [State]
/// object into another part of the tree (e.g., if the subtree containing this
/// [State] object is grafted from one location in the tree to another due to
/// the use of a [GlobalKey]). If that happens, the framework will call
/// [activate] to give the [State] object a chance to reacquire any resources
/// that it released in [deactivate]. It will then also call [build] to give
/// the [State] object a chance to adapt to its new location in the tree. If
/// the framework does reinsert this subtree, it will do so before the end of
/// the animation frame in which the subtree was removed from the tree. For
/// this reason, [State] objects can defer releasing most resources until the
/// framework calls their [dispose] method.
///
/// Subclasses should override this method to clean up any links between
/// this object and other elements in the tree (e.g. if you have provided an
/// ancestor with a pointer to a descendant's [RenderObject]).
///
/// Implementations of this method should end with a call to the inherited
/// method, as in `super.deactivate()`.
///
/// See also:
///
///  * [dispose], which is called after [deactivate] if the widget is removed
///    from the tree permanently.  ¿ »p¿ »q¿ »}¿ »~¿ »ßÜ©¿ œBÜ;/// Called when this object is reinserted into the tree after having been
/// removed via [deactivate].
///
/// In most cases, after a [State] object has been deactivated, it is _not_
/// reinserted into the tree, and its [dispose] method will be called to
/// signal that it is ready to be garbage collected.
///
/// In some cases, however, after a [State] object has been deactivated, the
/// framework will reinsert it into another part of the tree (e.g., if the
/// subtree containing this [State] object is grafted from one location in
/// the tree to another due to the use of a [GlobalKey]). If that happens,
/// the framework will call [activate] to give the [State] object a chance to
/// reacquire any resources that it released in [deactivate]. It will then
/// also call [build] to give the object a chance to adapt to its new
/// location in the tree. If the framework does reinsert this subtree, it
/// will do so before the end of the animation frame in which the subtree was
/// removed from the tree. For this reason, [State] objects can defer
/// releasing most resources until the framework calls their [dispose] method.
///
/// The framework does not call this method the first time a [State] object
/// is inserted into the tree. Instead, the framework calls [initState] in
/// that situation.
///
/// Implementations of this method should start with a call to the inherited
/// method, as in `super.activate()`.
///
/// See also:
///
///  * [Element.activate], the corresponding method when an element
///    transitions from the "inactive" to the "active" lifecycle state.  ¿ œ¿ œ ¿ œ,¿ œ-¿ œTÑ0¿ “◊É9/// Called when this object is removed from the tree permanently.
///
/// The framework calls this method when this [State] object will never
/// build again. After the framework calls [dispose], the [State] object is
/// considered unmounted and the [mounted] property is false. It is an error
/// to call [setState] at this point. This stage of the lifecycle is terminal:
/// there is no way to remount a [State] object that has been disposed.
///
/// Subclasses should override this method to release any resources retained
/// by this object (e.g., stop any active animations).
///
/// {@macro flutter.widgets.State.initState}
///
/// Implementations of this method should end with a call to the inherited
/// method, as in `super.dispose()`.
///
/// See also:
///
///  * [deactivate], which is called prior to [dispose].  ¿ “¥¿ “µ¿ “¡¿ “¬¿ ”àì[¿ Ê«í\/// Describes the part of the user interface represented by this widget.
///
/// The framework calls this method in a number of different situations. For
/// example:
///
///  * After calling [initState].
///  * After calling [didUpdateWidget].
///  * After receiving a call to [setState].
///  * After a dependency of this [State] object changes (e.g., an
///    [InheritedWidget] referenced by the previous [build] changes).
///  * After calling [deactivate] and then reinserting the [State] object into
///    the tree at another location.
///
/// This method can potentially be called in every frame and should not have
/// any side effects beyond building a widget.
///
/// The framework replaces the subtree below this widget with the widget
/// returned by this method, either by updating the existing subtree or by
/// removing the subtree and inflating a new subtree, depending on whether the
/// widget returned by this method can update the root of the existing
/// subtree, as determined by calling [Widget.canUpdate].
///
/// Typically implementations return a newly created constellation of widgets
/// that are configured with information from this widget's constructor, the
/// given [BuildContext], and the internal state of this [State] object.
///
/// The given [BuildContext] contains information about the location in the
/// tree at which this widget is being built. For example, the context
/// provides the set of inherited widgets for this location in the tree. The
/// [BuildContext] argument is always the same as the [context] property of
/// this [State] object and will remain the same for the lifetime of this
/// object. The [BuildContext] argument is provided redundantly here so that
/// this method matches the signature for a [WidgetBuilder].
///
/// ## Design discussion
///
/// ### Why is the [build] method on [State], and not [StatefulWidget]?
///
/// Putting a `Widget build(BuildContext context)` method on [State] rather
/// than putting a `Widget build(BuildContext context, State state)` method
/// on [StatefulWidget] gives developers more flexibility when subclassing
/// [StatefulWidget].
///
/// For example, [AnimatedWidget] is a subclass of [StatefulWidget] that
/// introduces an abstract `Widget build(BuildContext context)` method for its
/// subclasses to implement. If [StatefulWidget] already had a [build] method
/// that took a [State] argument, [AnimatedWidget] would be forced to provide
/// its [State] object to subclasses even though its [State] object is an
/// internal implementation detail of [AnimatedWidget].
///
/// Conceptually, [StatelessWidget] could also be implemented as a subclass of
/// [StatefulWidget] in a similar manner. If the [build] method were on
/// [StatefulWidget] rather than [State], that would not be possible anymore.
///
/// Putting the [build] function on [State] rather than [StatefulWidget] also
/// helps avoid a category of bugs related to closures implicitly capturing
/// `this`. If you defined a closure in a [build] function on a
/// [StatefulWidget], that closure would implicitly capture `this`, which is
/// the current widget instance, and would have the (immutable) fields of that
/// instance in scope:
///
/// ```dart
/// class MyButton extends StatefulWidget {
///   ...
///   final Color color;
///
///   @override
///   Widget build(BuildContext context, MyButtonState state) {
///     ... () { print("color: $color"); } ...
///   }
/// }
/// ```
///
/// For example, suppose the parent builds `MyButton` with `color` being blue,
/// the `$color` in the print function refers to blue, as expected. Now,
/// suppose the parent rebuilds `MyButton` with green. The closure created by
/// the first build still implicitly refers to the original widget and the
/// `$color` still prints blue even through the widget has been updated to
/// green.
///
/// In contrast, with the [build] function on the [State] object, closures
/// created during [build] implicitly capture the [State] instance instead of
/// the widget instance:
///
/// ```dart
/// class MyButtonState extends State<MyButton> {
///   ...
///   @override
///   Widget build(BuildContext context) {
///     ... () { print("color: ${widget.color}"); } ...
///   }
/// }
/// ```
///
/// Now when the parent rebuilds `MyButton` with green, the closure created by
/// the first build still refers to [State] object, which is preserved across
/// rebuilds, but the framework has updated that [State] object's [widget]
/// property to refer to the new `MyButton` instance and `${widget.color}`
/// prints green, as expected.
///
/// See also:
///
///  * [StatefulWidget], which contains the discussion on performance considerations. ¿ ÊÕ¿ Ê€  ¿ Ê≥¿ Ê¥¿ ÊÁÉ@¿ ÍÇÂ/// Called when a dependency of this [State] object changes.
///
/// For example, if the previous call to [build] referenced an
/// [InheritedWidget] that later changed, the framework would call this
/// method to notify this object about the change.
///
/// This method is also called immediately after [initState]. It is safe to
/// call [BuildContext.dependOnInheritedWidgetOfExactType] from this method.
///
/// Subclasses rarely override this method because the framework always
/// calls [build] after a dependency changes. Some subclasses do override
/// this method because they need to do some expensive work (e.g., network
/// fetches) when their dependencies change, and that work would be too
/// expensive to do for every build.  ¿ ÈÈ¿ ÈÍ¿ Èˆ¿ È˜¿ Í+ÅÁ¿ Í<  ¿ ÍP&¿ Ím  ¿ Í+¿ Í,¿ ö¿ ö¿ ÏÖL¿ ÔMÉ'/// A widget that has a child widget provided to it, instead of building a new
/// widget.
///
/// Useful as a base class for other widgets, such as [InheritedWidget] and
/// [ParentDataWidget].
///
/// See also:
///
///  * [InheritedWidget], for widgets that introduce ambient state that can
///    be read by descendant widgets.
///  * [ParentDataWidget], for widgets that populate the
///    [RenderObject.parentData] slot of their child's [RenderObject] to
///    configure the parent widget's layout.
///  * [StatefulWidget] and [State], for widgets that can build differently
///    several times over their lifetime.
///  * [StatelessWidget], for widgets that always build the same way given a
///    particular configuration and ambient state.
///  * [Widget], for an overview of widgets in general. ¿ Ôlp ¿ Ô¨¿ Ô∑7/// Creates a widget that has exactly one child widget.¿ Ô∫	¿ Ô¡  ¿ Ô≈¿ Ô‘   ¿ Ô‡Å¿ ÒZÅ^/// The widget below this widget in the tree.
///
/// {@template flutter.widgets.ProxyWidget.child}
/// This widget can only have one child. To lay out multiple children, let this
/// widget's child be a widget such as [Row], [Column], or [Stack], which have a
/// `children` property, and then provide the children to that widget.
/// {@endtemplate}    ¿ Òdó©¿ ¯ºáH/// Base class for widgets that hook [ParentData] information to children of
/// [RenderObjectWidget]s.
///
/// This can be used to provide per-child configuration for
/// [RenderObjectWidget]s with more than one child. For example, [Stack] uses
/// the [Positioned] parent data widget to position each child.
///
/// A [ParentDataWidget] is specific to a particular kind of [ParentData]. That
/// class is `T`, the [ParentData] type argument.
///
/// {@tool snippet}
///
/// This example shows how you would build a [ParentDataWidget] to configure a
/// `FrogJar` widget's children by specifying a [Size] for each one.
///
/// ```dart
/// class FrogSize extends ParentDataWidget<FrogJarParentData> {
///   const FrogSize({
///     super.key,
///     required this.size,
///     required super.child,
///   });
///
///   final Size size;
///
///   @override
///   void applyParentData(RenderObject renderObject) {
///     final FrogJarParentData parentData = renderObject.parentData! as FrogJarParentData;
///     if (parentData.size != size) {
///       parentData.size = size;
///       final RenderFrogJar targetParent = renderObject.parent! as RenderFrogJar;
///       targetParent.markNeedsLayout();
///     }
///   }
///
///   @override
///   Type get debugTypicalAncestorWidgetClass => FrogJar;
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [RenderObject], the superclass for layout algorithms.
///  * [RenderObject.parentData], the slot that this class configures.
///  * [ParentData], the superclass of the data that will be placed in
///    [RenderObject.parentData] slots. The `T` type parameter for
///    [ParentDataWidget] is a [ParentData].
///  * [RenderObjectWidget], the class for widgets that wrap [RenderObject]s.
///  * [StatefulWidget] and [State], for widgets that can build differently
///    several times over their lifetime.¿ ¯Õ¿ ¯Õ¿ ¯˚Ä’ ¿ ˘ö¿ ˘™Äî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿ ˘≠	¿ ˘¥  ¿ ˘∏¿ ˘»    ¿ ¸mÅ¿ ˝jÄÈ/// The [RenderObjectWidget] that is typically used to set up the [ParentData]
/// that [applyParentData] will write to.
///
/// This is only used in error messages to tell users what widget typically
/// wraps this ParentDataWidget.   ¿ ˘‘O¿ ˘ı   ¿ ˘‘¿ ˘’¿ ˙'ÇB¿ ˚–Åë/// Checks if this widget can apply its parent data to the provided
/// `renderObject`.
///
/// The [RenderObject.parentData] of the provided `renderObject` is
/// typically set up by an ancestor [RenderObjectWidget] of the type returned
/// by [debugTypicalAncestorWidgetClass].
///
/// This is called just before [applyParentData] is invoked with the same
/// [RenderObject] provided to that method. ¿ ˚È¿ ˚˜   ¿ ˝éÖa¿ ˝®  ¿ ˝‘¿ ˝Í  ¿ ˝˘%¿ ˛  ¿ ˛$¿ ˛6   ¿ÛÑc¿+Ñ/// Write the data from this widget into the given render object's parent data.
///
/// The framework calls this function whenever it detects that the
/// [RenderObject] associated with the [child] has outdated
/// [RenderObject.parentData]. For example, if the render object was recently
/// inserted into the render tree, the render object's parent data might not
/// match the data in this widget.
///
/// Subclasses are expected to override this function to copy data from their
/// fields into the [RenderObject.parentData] field of the given render
/// object. The render object's parent is guaranteed to have been created by a
/// widget of type `T`, which usually means that this function can assume that
/// the render object's parent data object inherits from a particular class.
///
/// If this function modifies data that can change the parent's layout or
/// painting, this function is responsible for calling
/// [RenderObject.markNeedsLayout] or [RenderObject.markNeedsPaint] on the
/// parent, as appropriate. ¿;¿I  ¿¿¿ZÅ±¿ÈÅh/// Whether the [ParentDataElement.applyWidgetOutOfTurn] method is allowed
/// with this widget.
///
/// This should only return true if this widget represents a [ParentData]
/// configuration that will have no impact on the layout or paint phase.
///
/// See also:
///
///  * [ParentDataElement.applyWidgetOutOfTurn], which verifies this in debug
///    mode.  ¿◊¿ÿ ¿	ïä¿^ë?/// Base class for widgets that efficiently propagate information down the tree.
///
/// To obtain the nearest instance of a particular type of inherited widget from
/// a build context, use [BuildContext.dependOnInheritedWidgetOfExactType].
///
/// Inherited widgets, when referenced in this way, will cause the consumer to
/// rebuild when the inherited widget itself changes state.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=Zbm3hjPjQMk}
///
/// {@tool snippet}
///
/// The following is a skeleton of an inherited widget called `FrogColor`:
///
/// ```dart
/// class FrogColor extends InheritedWidget {
///   const FrogColor({
///     super.key,
///     required this.color,
///     required super.child,
///   });
///
///   final Color color;
///
///   static FrogColor of(BuildContext context) {
///     final FrogColor? result = context.dependOnInheritedWidgetOfExactType<FrogColor>();
///     assert(result != null, 'No FrogColor found in context');
///     return result!;
///   }
///
///   @override
///   bool updateShouldNotify(FrogColor old) => color != old.color;
/// }
/// ```
/// {@end-tool}
///
/// ## Implementing the `of` method
///
/// The convention is to provide a static method `of` on the [InheritedWidget]
/// which does the call to [BuildContext.dependOnInheritedWidgetOfExactType]. This
/// allows the class to define its own fallback logic in case there isn't
/// a widget in scope. In the example above, the value returned will be
/// null in that case, but it could also have defaulted to a value.
///
/// Sometimes, the `of` method returns the data rather than the inherited
/// widget; for example, in this case it could have returned a [Color] instead
/// of the `FrogColor` widget.
///
/// Occasionally, the inherited widget is an implementation detail of another
/// class, and is therefore private. The `of` method in that case is typically
/// put on the public class instead. For example, [Theme] is implemented as a
/// [StatelessWidget] that builds a private inherited widget; [Theme.of] looks
/// for that inherited widget using [BuildContext.dependOnInheritedWidgetOfExactType]
/// and then returns the [ThemeData].
///
/// ## Calling the `of` method
///
/// When using the `of` method, the `context` must be a descendant of the
/// [InheritedWidget], meaning it must be "below" the [InheritedWidget] in the
/// tree.
///
/// {@tool snippet}
///
/// In this example, the `context` used is the one from the [Builder], which is
/// a child of the FrogColor widget, so this works.
///
/// ```dart
/// class MyPage extends StatelessWidget {
///   const MyPage({super.key});
///
///   @override
///   Widget build(BuildContext context) {
///     return Scaffold(
///       body: FrogColor(
///         color: Colors.green,
///         child: Builder(
///           builder: (BuildContext innerContext) {
///             return Text(
///               'Hello Frog',
///               style: TextStyle(color: FrogColor.of(innerContext).color),
///             );
///           },
///         ),
///       ),
///     );
///   }
/// }
/// ```
/// {@end-tool}
///
/// {@tool snippet}
///
/// In this example, the `context` used is the one from the MyOtherPage widget,
/// which is a parent of the FrogColor widget, so this does not work.
///
/// ```dart
/// class MyOtherPage extends StatelessWidget {
///   const MyOtherPage({super.key});
///
///   @override
///   Widget build(BuildContext context) {
///     return Scaffold(
///       body: FrogColor(
///         color: Colors.green,
///         child: Text(
///           'Hello Frog',
///           style: TextStyle(color: FrogColor.of(context).color),
///         ),
///       ),
///     );
///   }
/// }
/// ```
/// {@end-tool}
/// {@youtube 560 315 https://www.youtube.com/watch?v=1t-8rBCGBYw}
///
/// See also:
///
///  * [StatefulWidget] and [State], for widgets that can build differently
///    several times over their lifetime.
///  * [StatelessWidget], for widgets that always build the same way given a
///    particular configuration and ambient state.
///  * [Widget], for an overview of widgets in general.
///  * [InheritedNotifier], an inherited widget whose value can be a
///    [Listenable], and which will notify dependents whenever the value
///    sends notifications.
///  * [InheritedModel], an inherited widget that allows clients to subscribe
///    to changes for subparts of the value. ¿ÜÄ‘ ¿%¿4Äî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿7	¿>  ¿B¿R     ¿^G¿{   ¿^¿_¿©ÇÓ¿_Çã/// Whether the framework should notify widgets that inherit from this widget.
///
/// When this widget is rebuilt, sometimes we need to rebuild the widgets that
/// inherit from this widget but sometimes we do not. For example, if the data
/// held by this widget is the same as the data held by `oldWidget`, then we
/// do not need to rebuild the widgets that inherited the data held by
/// `oldWidget`.
///
/// The framework distinguishes these cases by calling this function with the
/// widget that previously occupied this location in the tree as an argument.
/// The given widget is guaranteed to have the same [runtimeType] as this
/// object. ¿r#¿ç  ¿M¿N ¿õâ¿ kÅ¿/// RenderObjectWidgets provide the configuration for [RenderObjectElement]s,
/// which wrap [RenderObject]s, which provide the actual rendering of the
/// application.
///
/// See also:
///
///  * [MultiChildRenderObjectWidget], which configures a [RenderObject] with
///    a single list of children.
///  * [SlottedMultiChildRenderObjectWidgetMixin], which configures a
///    [RenderObject] that organizes its children in different named slots. ¿ ëÄ¡ ¿!0¿!BÄî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿!E	¿!L     ¿!VÄâ¿!œK/// RenderObjectWidgets always inflate to a [RenderObjectElement] subclass.  ¿!§¿!•¿!∞¿!±¿!„Ç<¿#ˆÅ€/// Creates an instance of the [RenderObject] class that this
/// [RenderObjectWidget] represents, using the configuration described by this
/// [RenderObjectWidget].
///
/// This method should not do anything with the children of the render object.
/// That should instead be handled by the method that overrides
/// [RenderObjectElement.mount] in the object rendered by this object's
/// [createElement] method. See, for example,
/// [SingleChildRenderObjectElement.mount]. ¿$	¿$  ¿#—¿#“¿#ﬁ¿#ﬂ¿$#Çl¿&>Åˆ/// Copies the configuration described by this [RenderObjectWidget] to the
/// given [RenderObject], which will be of the same type as returned by this
/// object's [createRenderObject].
///
/// This method should not do anything to update the children of the render
/// object. That should instead be handled by the method that overrides
/// [RenderObjectElement.update] in the object rendered by this object's
/// [createElement] method. See, for example,
/// [SingleChildRenderObjectElement.update]. ¿&Q¿&_  ¿&g#¿&  ¿&,¿&-¿&ìÅ¿'sÄ«/// A render object previously associated with this widget has been removed
/// from the tree. The given [RenderObject] will be of the same type as
/// returned by this object's [createRenderObject]. ¿'ä#¿'¢  ¿'a¿'b ¿'∂Å–¿(0j/// A superclass for RenderObjectWidgets that configure RenderObject subclasses
/// that have no children. ¿(fÄ≈ ¿)¿)Äî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿)	¿)%     ¿)/U¿)S   ¿)/¿)0 ¿)àÑ¿+¢Ç
/// A superclass for [RenderObjectWidget]s that configure [RenderObject] subclasses
/// that have a single child slot. (This superclass only provides the storage
/// for that child, it doesn't actually provide the updating logic.)
///
/// Typically, the render object assigned to this widget will make use of
/// [RenderObjectWithChildMixin] to implement a single-child model. The mixin
/// exposes a [RenderObjectWithChildMixin.child] property that allows
/// retrieving the render object belonging to the [child] widget. ¿+ﬂÄÿ ¿,~¿,õÄî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿,û	¿,•  ¿,©
¿,Ø   ¿,ªz¿-0`/// The widget below this widget in the tree.
///
/// {@macro flutter.widgets.ProxyWidget.child}  ¿-:c¿-e   ¿-:¿-; ¿-°é¿1ûÉÌ/// A superclass for [RenderObjectWidget]s that configure [RenderObject] subclasses
/// that have a single list of children. (This superclass only provides the
/// storage for that child list, it doesn't actually provide the updating
/// logic.)
///
/// Subclasses must return a [RenderObject] that mixes in
/// [ContainerRenderObjectMixin], which provides the necessary functionality to
/// visit the children of the container render object (the render object
/// belonging to the [children] widgets). Typically, subclasses will return a
/// [RenderBox] that mixes in both [ContainerRenderObjectMixin] and
/// [RenderBoxContainerDefaultsMixin].
///
/// See also:
///
///  * [Stack], which uses [MultiChildRenderObjectWidget].
///  * [RenderStack], for an example implementation of the associated render
///    object.
///  * [SlottedMultiChildRenderObjectWidgetMixin], which configures a
///    [RenderObject] that instead of having a single list of children organizes
///    its children in named slots. ¿1⁄Ç… ¿2e¿2ÅÄÇ/// Initializes fields for subclasses.
///
/// The [children] argument must not be null and must not contain any null
/// objects.¿2Ñ	¿2ã  ¿2è ¿2ï  ¿2ü¿2≠¿2Æ¿2•¿2¨¿2¶¿2π¿2ø¿2–¿2…¿2¿¿2Ã¿4ßá¿;∞ÜÉ/// The widgets below this widget in the tree.
///
/// If this list is going to be mutated, it is usually wise to put a [Key] on
/// each of the child widgets, so that the framework can match old
/// configurations to new configurations and maintain the underlying render
/// objects.
///
/// Also, a [Widget] in Flutter is immutable, so directly modifying the
/// [children] such as `someMultiChildRenderObjectWidget.children.add(...)` or
/// as the example code below will result in incorrect behaviors. Whenever the
/// children list is modified, a new list object should be provided.
///
/// ```dart
/// class SomeWidgetState extends State<SomeWidget> {
///   List<Widget> _children;
///
///   void initState() {
///     _children = [];
///   }
///
///   void someHandler() {
///     setState(() {
///         _children.add(...);
///     });
///   }
///
///   Widget build(...) {
///     // Reusing `List<Widget> _children` here is problematic.
///     return Row(children: _children);
///   }
/// }
/// ```
///
/// The following code corrects the problem mentioned above.
///
/// ```dart
/// class SomeWidgetState extends State<SomeWidget> {
///   List<Widget> _children;
///
///   void initState() {
///     _children = [];
///   }
///
///   void someHandler() {
///     setState(() {
///       // The key here allows Flutter to reuse the underlying render
///       // objects even if the children list is recreated.
///       _children.add(ChildWidget(key: ...));
///     });
///   }
///
///   Widget build(...) {
///     // Always create a new list of children as a Widget is immutable.
///     return Row(children: List.of(_children));
///   }
/// }
/// ```  ¿;Ωa¿;Á   ¿;Ω¿;æ ¿<xá•¿<~   ¿<î¿<ô ¿<£¿<¨1¿<ø ¿<À¿<“¿<⁄¿<”¿<€¿<‹ ¿<‚Ç¿<Á  ¿<¿<˘   ¿?Å¿?    ¿@ÅY¿@%  ¿@<¿@E   ¿AvÅ¿A{  ¿A¿Aà   ¿BÜÄÊ¿Bã  ¿Bí¿Bõ   ¿CpÄ´¿Cu  ¿CÉ¿Cå    ¿E-¿ M¿T|è?/// A handle to the location of a widget in the widget tree.
///
/// This class presents a set of methods that can be used from
/// [StatelessWidget.build] methods and from methods on [State] objects.
///
/// [BuildContext] objects are passed to [WidgetBuilder] functions (such as
/// [StatelessWidget.build]), and are available from the [State.context] member.
/// Some static functions (e.g. [showDialog], [Theme.of], and so forth) also
/// take build contexts so that they can act on behalf of the calling widget, or
/// obtain data specifically for the given context.
///
/// Each widget has its own [BuildContext], which becomes the parent of the
/// widget returned by the [StatelessWidget.build] or [State.build] function.
/// (And similarly, the parent of any children for [RenderObjectWidget]s.)
///
/// In particular, this means that within a build method, the build context of
/// the widget of the build method is not the same as the build context of the
/// widgets returned by that build method. This can lead to some tricky cases.
/// For example, [Theme.of(context)] looks for the nearest enclosing [Theme] of
/// the given build context. If a build method for a widget Q includes a [Theme]
/// within its returned widget tree, and attempts to use [Theme.of] passing its
/// own context, the build method for Q will not find that [Theme] object. It
/// will instead find whatever [Theme] was an ancestor to the widget Q. If the
/// build context for a subpart of the returned tree is needed, a [Builder]
/// widget can be used: the build context passed to the [Builder.builder]
/// callback will be that of the [Builder] itself.
///
/// For example, in the following snippet, the [ScaffoldState.showBottomSheet]
/// method is called on the [Scaffold] widget that the build method itself
/// creates. If a [Builder] had not been used, and instead the `context`
/// argument of the build method itself had been used, no [Scaffold] would have
/// been found, and the [Scaffold.of] function would have returned null.
///
/// ```dart
/// @override
/// Widget build(BuildContext context) {
///   // here, Scaffold.of(context) returns null
///   return Scaffold(
///     appBar: const AppBar(title: Text('Demo')),
///     body: Builder(
///       builder: (BuildContext context) {
///         return TextButton(
///           child: const Text('BUTTON'),
///           onPressed: () {
///             Scaffold.of(context).showBottomSheet<void>(
///               (BuildContext context) {
///                 return Container(
///                   alignment: Alignment.center,
///                   height: 200,
///                   color: Colors.amber,
///                   child: Center(
///                     child: Column(
///                       mainAxisSize: MainAxisSize.min,
///                       children: <Widget>[
///                         const Text('BottomSheet'),
///                         ElevatedButton(
///                           child: const Text('Close BottomSheet'),
///                           onPressed: () {
///                             Navigator.pop(context),
///                           },
///                         )
///                       ],
///                     ),
///                   ),
///                 );
///               },
///             );
///           },
///         );
///       },
///     )
///   );
/// }
/// ```
///
/// The [BuildContext] for a particular widget can change location over time as
/// the widget is moved around the tree. Because of this, values returned from
/// the methods on this class should not be cached beyond the execution of a
/// single synchronous function.
///
/// {@youtube 560 315 https://www.youtube.com/watch?v=rIaaH87z1-g}
///
/// [BuildContext] objects are actually [Element] objects. The [BuildContext]
/// interface is used to discourage direct manipulation of [Element] objects.   ¿Tç`¿TÊK/// The current configuration of the [Element] that is this [BuildContext].   ¿TÒÄò¿UÉ}/// The [BuildOwner] for this context. The [BuildOwner] is in charge of
/// managing the rendering pipeline for this context.   ¿UçÇ…¿XFÇì/// Whether the [widget] is currently updating the widget or render tree.
///
/// For [StatefulWidget]s and [StatelessWidget]s this flag is true while
/// their respective build methods are executing.
/// [RenderObjectWidget]s set this to true while creating or configuring their
/// associated [RenderObject]s.
/// Other [Widget] types may set this to true for conceptually similar phases
/// of their lifecycle.
///
/// When this is true, it is safe for [widget] to establish a dependency to an
/// [InheritedWidget] by calling [dependOnInheritedElement] or
/// [dependOnInheritedWidgetOfExactType].
///
/// Accessing this flag in release mode is not valid.   ¿]ØÑ+¿a’Éı/// The size of the [RenderBox] returned by [findRenderObject].
///
/// This getter will only return a valid result after the layout phase is
/// complete. It is therefore not valid to call this from a build method.
/// It should only be called from paint callbacks or interaction event
/// handlers (e.g. gesture callbacks).
///
/// For details on the different phases of a frame, see the discussion at
/// [WidgetsBinding.drawFrame].
///
/// This getter will only return a valid result if [findRenderObject] actually
/// returns a [RenderBox]. If [findRenderObject] returns a render object that
/// is not a subtype of [RenderBox] (e.g., [RenderView]), this getter will
/// throw an exception in debug mode and will return null in release mode.
///
/// Calling this getter is theoretically relatively expensive (O(N) in the
/// depth of the tree), but in practice is usually cheap because the tree
/// usually has many render objects and therefore the distance to the nearest
/// render object is usually short.   ¿XZÖQ¿]òÑˇ/// The current [RenderObject] for the widget. If the widget is a
/// [RenderObjectWidget], this is the render object that the widget created
/// for itself. Otherwise, it is the render object of the first descendant
/// [RenderObjectWidget].
///
/// This method will only return a valid result after the build phase is
/// complete. It is therefore not valid to call this from a build method.
/// It should only be called from interaction event handlers (e.g.
/// gesture callbacks) or layout or paint callbacks. It is also not valid to
/// call if [State.mounted] returns false.
///
/// If the render object is a [RenderBox], which is the common case, then the
/// size of the render object can be obtained from the [size] getter. This is
/// only valid after the layout phase, and should therefore only be examined
/// from paint callbacks or interaction event handlers (e.g. gesture
/// callbacks).
///
/// For details on the different phases of a frame, see the discussion at
/// [WidgetsBinding.drawFrame].
///
/// Calling this method is theoretically relatively expensive (O(N) in the
/// depth of the tree), but in practice is usually cheap because the tree
/// usually has many render objects and therefore the distance to the nearest
/// render object is usually short.   ¿aﬁÇ^¿cıÅ/// Registers this build context with [ancestor] such that when
/// [ancestor]'s widget changes this build context is rebuilt.
///
/// Returns `ancestor.widget`.
///
/// This method is rarely called directly. Most applications should use
/// [dependOnInheritedWidgetOfExactType], which calls this method after finding
/// the appropriate [InheritedElement] ancestor.
///
/// All of the qualifications about when [dependOnInheritedWidgetOfExactType] can
/// be called apply to this method as well. ¿d¿d   ¿d+¿d3   ¿d@â¿l˘àg/// Obtains the nearest widget of the given type `T`, which must be the type of a
/// concrete [InheritedWidget] subclass, and registers this build context with
/// that widget such that when that widget changes (or a new widget of that
/// type is introduced, or the widget goes away), this build context is
/// rebuilt so that it can obtain new values from that widget.
///
/// This is typically called implicitly from `of()` static methods, e.g.
/// [Theme.of].
///
/// This method should not be called from widget constructors or from
/// [State.initState] methods, because those methods would not get called
/// again if the inherited value were to change. To ensure that the widget
/// correctly updates itself when the inherited value changes, only call this
/// (directly or indirectly) from build methods, layout and paint callbacks, or
/// from [State.didChangeDependencies].
///
/// This method should not be called from [State.dispose] because the element
/// tree is no longer stable at that time. To refer to an ancestor from that
/// method, save a reference to the ancestor in [State.didChangeDependencies].
/// It is safe to use this method from [State.deactivate], which is called
/// whenever the widget is removed from the tree.
///
/// It is also possible to call this method from interaction event handlers
/// (e.g. gesture callbacks) or timers, to obtain a value once, if that value
/// is not going to be cached and reused later.
///
/// Calling this method is O(1) with a small constant factor, but will lead to
/// the widget being rebuilt more often.
///
/// Once a widget registers a dependency on a particular type by calling this
/// method, it will be rebuilt, and [State.didChangeDependencies] will be
/// called, whenever changes occur relating to that widget until the next time
/// the widget or one of its ancestors is moved (for example, because an
/// ancestor is added or removed).
///
/// The [aspect] parameter is only used when `T` is an
/// [InheritedWidget] subclasses that supports partial updates, like
/// [InheritedModel]. It specifies what "aspect" of the inherited
/// widget this context depends on.¿m¿m¿m9¿mB   ¿mOÉß¿p±É//// Obtains the element corresponding to the nearest widget of the given type `T`,
/// which must be the type of a concrete [InheritedWidget] subclass.
///
/// Returns null if no such element is found.
///
/// Calling this method is O(1) with a small constant factor.
///
/// This method does not establish a relationship with the target in the way
/// that [dependOnInheritedWidgetOfExactType] does.
///
/// This method should not be called from [State.dispose] because the element
/// tree is no longer stable at that time. To refer to an ancestor from that
/// method, save a reference to the ancestor by calling
/// [dependOnInheritedWidgetOfExactType] in [State.didChangeDependencies]. It is
/// safe to use this method from [State.deactivate], which is called whenever
/// the widget is removed from the tree.¿pŸ¿pŸ  ¿p˙Ü¿vœÖ°/// Returns the nearest ancestor widget of the given type `T`, which must be the
/// type of a concrete [Widget] subclass.
///
/// In general, [dependOnInheritedWidgetOfExactType] is more useful, since
/// inherited widgets will trigger consumers to rebuild when they change. This
/// method is appropriate when used in interaction event handlers (e.g.
/// gesture callbacks) or for performing one-off tasks such as asserting that
/// you have or don't have a widget of a specific type as an ancestor. The
/// return value of a Widget's build method should not depend on the value
/// returned by this method, because the build context will not rebuild if the
/// return value of this method changes. This could lead to a situation where
/// data used in the build method changes, but the widget is not rebuilt.
///
/// Calling this method is relatively expensive (O(N) in the depth of the
/// tree). Only call this method if the distance from this widget to the
/// desired ancestor is known to be small and bounded.
///
/// This method should not be called from [State.deactivate] or [State.dispose]
/// because the widget tree is no longer stable at that time. To refer to
/// an ancestor from one of those methods, save a reference to the ancestor
/// by calling [findAncestorWidgetOfExactType] in [State.didChangeDependencies].
///
/// Returns null if a widget of the requested type does not appear in the
/// ancestors of this context.¿vÌ¿vÌ  ¿wÜô¿}sÜ,/// Returns the [State] object of the nearest ancestor [StatefulWidget] widget
/// that is an instance of the given type `T`.
///
/// This should not be used from build methods, because the build context will
/// not be rebuilt if the value that would be returned by this method changes.
/// In general, [dependOnInheritedWidgetOfExactType] is more appropriate for such
/// cases. This method is useful for changing the state of an ancestor widget in
/// a one-off manner, for example, to cause an ancestor scrolling list to
/// scroll this build context's widget into view, or to move the focus in
/// response to user interaction.
///
/// In general, though, consider using a callback that triggers a stateful
/// change in the ancestor rather than using the imperative style implied by
/// this method. This will usually lead to more maintainable and reusable code
/// since it decouples widgets from each other.
///
/// Calling this method is relatively expensive (O(N) in the depth of the
/// tree). Only call this method if the distance from this widget to the
/// desired ancestor is known to be small and bounded.
///
/// This method should not be called from [State.deactivate] or [State.dispose]
/// because the widget tree is no longer stable at that time. To refer to
/// an ancestor from one of those methods, save a reference to the ancestor
/// by calling [findAncestorStateOfType] in [State.didChangeDependencies].
///
/// {@tool snippet}
///
/// ```dart
/// ScrollableState? scrollable = context.findAncestorStateOfType<ScrollableState>();
/// ```
/// {@end-tool}¿}ã¿}ã  ¿}¢ÅÒ¿dÅ¨/// Returns the [State] object of the furthest ancestor [StatefulWidget] widget
/// that is an instance of the given type `T`.
///
/// Functions the same way as [findAncestorStateOfType] but keeps visiting subsequent
/// ancestors until there are none of the type instance of `T` remaining.
/// Then returns the last one found.
///
/// This operation is O(N) as well though N is the entire widget tree rather than
/// a subtree.¿Ä¿Ä  ¿óÖ¿ÑbÑ°/// Returns the [RenderObject] object of the nearest ancestor [RenderObjectWidget] widget
/// that is an instance of the given type `T`.
///
/// This should not be used from build methods, because the build context will
/// not be rebuilt if the value that would be returned by this method changes.
/// In general, [dependOnInheritedWidgetOfExactType] is more appropriate for such
/// cases. This method is useful only in esoteric cases where a widget needs
/// to cause an ancestor to change its layout or paint behavior. For example,
/// it is used by [Material] so that [InkWell] widgets can trigger the ink
/// splash on the [Material]'s actual render object.
///
/// Calling this method is relatively expensive (O(N) in the depth of the
/// tree). Only call this method if the distance from this widget to the
/// desired ancestor is known to be small and bounded.
///
/// This method should not be called from [State.deactivate] or [State.dispose]
/// because the widget tree is no longer stable at that time. To refer to
/// an ancestor from one of those methods, save a reference to the ancestor
/// by calling [findAncestorRenderObjectOfType] in [State.didChangeDependencies].¿ÑÅ¿ÑÅ  ¿ÑüÉÄ¿á·É /// Walks the ancestor chain, starting with the parent of this build context's
/// widget, invoking the argument for each ancestor. The callback is given a
/// reference to the ancestor widget's corresponding [Element] object. The
/// walk stops when it reaches the root widget or when the callback returns
/// false. The callback must not return null.
///
/// This is useful for inspecting the widget tree.
///
/// Calling this method is relatively expensive (O(N) in the depth of the tree).
///
/// This method should not be called from [State.deactivate] or [State.dispose]
/// because the element tree is no longer stable at that time. To refer to
/// an ancestor from one of those methods, save a reference to the ancestor
/// by calling [visitAncestorElements] in [State.didChangeDependencies]. ¿á˜&¿à   ¿à#Ñ¿åÉ»/// Walks the children of this widget.
///
/// This is useful for applying changes to children after they are built
/// without waiting for the next frame, especially if the children are known,
/// and especially if there is exactly one child (as is always the case for
/// [StatefulWidget]s or [StatelessWidget]s).
///
/// Calling this method is very cheap for build contexts that correspond to
/// [StatefulWidget]s or [StatelessWidget]s (O(1), since there's only one
/// child).
///
/// Calling this method is potentially expensive for build contexts that
/// correspond to [RenderObjectWidget]s (O(N) in the number of children).
///
/// Calling this method recursively is extremely expensive (O(N) in the number
/// of descendants), and should be avoided if possible. Generally it is
/// significantly cheaper to use an [InheritedWidget] and have the descendants
/// pull data down, than it is to use [visitChildElements] recursively to push
/// data down to them. ¿å*¿å:   ¿åFÅ.¿çDÄÓ/// Start bubbling this notification at the given build context.
///
/// The notification will be delivered to any [NotificationListener] widgets
/// with the appropriate type parameters that are ancestors of the given
/// [BuildContext]. ¿çY¿çg   ¿çxÅè¿éßÅ/// Returns a description of the [Element] associated with the current build context.
///
/// The `name` is typically something like "The element being rebuilt was".
///
/// See also:
///
///  * [Element.describeElements], which can be used to describe a list of elements. ¿é∑¿éø  ¿é≈?¿é€  ¿é‚¿éˆ¿é˜¿èÅ¿è≈Ä£/// Returns a description of the [Widget] associated with the current build context.
///
/// The `name` is typically something like "The widget being rebuilt was". ¿è‘¿è‹  ¿è‚?¿è¯  ¿èˇ¿ê¿ê¿ê(Å¿ëÄ¿/// Adds a description of a specific type of widget missing from the current
/// build context's ancestry tree.
///
/// You can find an example of using this method in [debugCheckHasMaterial]. ¿ë!"¿ë0   ¿ëKÄÎ¿íÄÆ/// Adds a description of the ownership chain from a specific [Element]
/// to the error report.
///
/// The ownership chain is useful for debugging the source of an element. ¿í)¿í1    ¿í:¿ vú¿ñgÑ&/// Manager class for the widgets framework.
///
/// This class tracks which widgets need rebuilding, and handles other tasks
/// that apply to widget trees as a whole, such as managing the inactive element
/// list for the tree and triggering the "reassemble" command when necessary
/// during hot reload when debugging.
///
/// The main build owner is typically owned by the [WidgetsBinding], and is
/// driven from the operating system along with the rest of the
/// build/layout/paint pipeline.
///
/// Additional build owners can be built to manage off-screen widget trees.
///
/// To assign a build owner to a tree, use the
/// [RootRenderObjectElement.assignOwner] method on the root element of the
/// widget tree.
///
/// {@tool dartpad}
/// This example shows how to build an off-screen widget tree used to measure
/// the layout size of the rendered tree. For some use cases, the simpler
/// [Offstage] widget may be a better alternative to this approach.
///
/// ** See code in examples/api/lib/widgets/framework/build_owner.0.dart **
/// {@end-tool} ¿ñvÇ ¿óˆ¿ò Åq/// Creates an object that manages widgets.
///
/// If the `focusManager` argument is not specified or is null, this will
/// construct a new [FocusManager] and register its global input handlers
/// via [FocusManager.registerGlobalHandlers], which will modify static
/// state. Callers wishing to avoid altering this state can explicitly pass
/// a focus manager here.¿ò¿ò	  ¿ò¿ò)  ¿òM¿ò@¿ò\¿òO¿ò_¿òà¿ò`¿òl¿òm¿òn¿òp¿òÜ¿òá¿òév¿òÙS/// Called on each build pass when the first buildable element is marked
/// dirty. ¿ô	?¿ô! ¿ô5¿ôF¿ôG¿ôM0¿ôa ¿ô{¿ô|¿ôr¿ôz¿ôs¿ôÅ)¿ôÜ ¿ô•¿ôØÅ\¿öÔÅ+/// Whether [_dirtyElements] need to be sorted again as a result of more
/// elements becoming dirty during the build.
///
/// This is necessary to preserve the sort order defined by [Element._sort].
///
/// This field is set to null when [buildScope] is not actively rebuilding
/// the widget tree. ¿õÎÇU¿û4Ç#/// The object in charge of the focus tree.
///
/// Rarely used directly. Instead, consider using [FocusScope.of] to obtain
/// the [FocusScopeNode] for a given [BuildContext].
///
/// See [FocusManager] for more details.
///
/// This field will default to a [FocusManager] that has registered its
/// global input handlers via [FocusManager.registerGlobalHandlers]. Callers
/// wishing to avoid registering those handlers (and modifying the associated
/// static state) can explicitly pass a focus manager to the [BuildOwner.new]
/// constructor. ¿ß£¿ßß ¿ßæ¿®ë¿®ñ ¿®ß¿®∞!¿®π  ¿Ã—\¿ÃÔ  ¿œ:I¿œX ¿œÅ¿œÇ¿œm¿œÄ¿œn¿œy¿–a¿–< ¿–¿–¿–`¿–u¿–U¿–b¿–i¿–q¿–j¿–r¿–s¿–w¿—ıÄë¿“0 ¿—ı¿—ˆ¿“Y¿“Ä¿“N¿“}¿“~¿“[¿“|¿“\¿“e¿“h¿“{¿“i¿“r¿“Ç¿õÄ◊¿õ™Ää/// Whether [buildScope] is actively rebuilding the widget tree.
///
/// [scheduleBuildFor] should only be called when this value is true.   ¿ß√7¿ßÃ    ¿ß˛Äê¿®n`/// Whether this widget tree is in the build phase.
///
/// Only valid when asserts are enabled.   ¿“ãÄº¿”ÄÉ/// The number of [GlobalKey] instances that are currently associated with
/// [Element]s that have been built by this build owner.   ¿ûEâZ¿û–ÄÅ/// Adds an element to the dirty elements list so that it will be rebuilt
/// when [WidgetsBinding.drawFrame] calls [buildScope]. ¿û·¿ûÍ   ¿®÷ÇV¿©ƒÄﬁ/// Establishes a scope in which calls to [State.setState] are forbidden, and
/// calls the given `callback`.
///
/// This mechanism is used to ensure that, for instance, [State.dispose] does
/// not call [State.setState]. ¿©Œ¿©‹   ¿´0°ù¿∞cÑŒ/// Establishes a scope for updating the widget tree, and calls the given
/// `callback`, if any. Then, builds all the elements that were marked as
/// dirty using [scheduleBuildFor], in depth order.
///
/// This mechanism prevents build methods from transitively requiring other
/// build methods to run, potentially causing infinite loops.
///
/// The dirty list is processed after `callback` returns, building all the
/// elements that were marked as dirty using [scheduleBuildFor], in depth
/// order. If elements are marked as dirty while this method is running, they
/// must be deeper than the `context` node, and deeper than any
/// previously-built node in this pass.
///
/// To flush the current dirty list without performing any other work, this
/// function can be called with no callback. This is what the framework does
/// each frame, in [WidgetsBinding.drawFrame].
///
/// Only one [buildScope] can be active at a time.
///
/// A [buildScope] implies a [lockState] scope as well.
///
/// To print a console message every time this method is called, set
/// [debugPrintBuildScope] to true. This is useful when debugging problems
/// involving widgets not getting marked dirty, or getting marked dirty too
/// often. ¿∞n¿∞w  ¿∞Å¿∞ê  ¿∞1¿∞2¿∞8¿∞Z¿∞9¿Õ2Å~¿Õ7  ¿Õz¿ÕÉ  ¿Õà¿Õì   ¿Œ¥ÄÇ¿Œπ  ¿Œ—¿Œ⁄   ¿”KÄ¿”P  ¿”t¿”}  ¿”Ñ¿”ç   ¿‘?Åÿ¿‘D  ¿‘W¿‘b  ¿‘f¿‘o   ¿÷Ç¿÷   ¿÷5¿÷@  ¿÷D¿÷M   ¿ÿ!Å;¿ÿ&  ¿ÿ@¿ÿI  ¿ÿP¿ÿY  ¿ÿ_¿ÿj   ¿Ÿ`ç4¿Ÿe    ¿ÊòáX¿Êù    ¿ÌÙó·¿ÔπÅ~/// Complete the element build pass by unmounting any elements that are no
/// longer active.
///
/// This is called by [WidgetsBinding.drawFrame].
///
/// In debug mode, this also runs some sanity checks, for example checking for
/// duplicate global keys.
///
/// After the current call stack unwinds, a microtask that notifies listeners
/// about changes to global keys will run.  ¿Ôá¿Ôà¿Ôé¿Ô∞¿Ôè¿ŸÇ˚¿;ÅP/// Cause the entire subtree rooted at the given [Element] to be entirely
/// rebuilt. This is used by development tools when the application code has
/// changed and is being hot-reloaded, to cause the widget tree to pick up any
/// changed implementations.
///
/// This is expensive and should not be called except during development. ¿F¿O  ¿T'¿l    ¿~ÅG¿Ñ  ¿ö- ¿ö¿´ ¿¨¿≤  ¿π¿ø   ¿À¿„  ¿Ó¿   ¿Ä∑¿  ¿&¿4    ¿¿ Òµ¿Dåµ/// An instantiation of a [Widget] at a particular location in the tree.
///
/// Widgets describe how to configure a subtree but the same widget can be used
/// to configure multiple subtrees simultaneously because widgets are immutable.
/// An [Element] represents the use of a widget to configure a specific location
/// in the tree. Over time, the widget associated with a given element can
/// change, for example, if the parent widget rebuilds and creates a new widget
/// for this location.
///
/// Elements form a tree. Most elements have a unique child, but some widgets
/// (e.g., subclasses of [RenderObjectElement]) can have multiple children.
///
/// Elements have the following lifecycle:
///
///  * The framework creates an element by calling [Widget.createElement] on the
///    widget that will be used as the element's initial configuration.
///  * The framework calls [mount] to add the newly created element to the tree
///    at a given slot in a given parent. The [mount] method is responsible for
///    inflating any child widgets and calling [attachRenderObject] as
///    necessary to attach any associated render objects to the render tree.
///  * At this point, the element is considered "active" and might appear on
///    screen.
///  * At some point, the parent might decide to change the widget used to
///    configure this element, for example because the parent rebuilt with new
///    state. When this happens, the framework will call [update] with the new
///    widget. The new widget will always have the same [runtimeType] and key as
///    old widget. If the parent wishes to change the [runtimeType] or key of
///    the widget at this location in the tree, it can do so by unmounting this
///    element and inflating the new widget at this location.
///  * At some point, an ancestor might decide to remove this element (or an
///    intermediate ancestor) from the tree, which the ancestor does by calling
///    [deactivateChild] on itself. Deactivating the intermediate ancestor will
///    remove that element's render object from the render tree and add this
///    element to the [owner]'s list of inactive elements, causing the framework
///    to call [deactivate] on this element.
///  * At this point, the element is considered "inactive" and will not appear
///    on screen. An element can remain in the inactive state only until
///    the end of the current animation frame. At the end of the animation
///    frame, any elements that are still inactive will be unmounted.
///  * If the element gets reincorporated into the tree (e.g., because it or one
///    of its ancestors has a global key that is reused), the framework will
///    remove the element from the [owner]'s list of inactive elements, call
///    [activate] on the element, and reattach the element's render object to
///    the render tree. (At this point, the element is again considered "active"
///    and might appear on screen.)
///  * If the element does not get reincorporated into the tree by the end of
///    the current animation frame, the framework will call [unmount] on the
///    element.
///  * At this point, the element is considered "defunct" and will not be
///    incorporated into the tree in the future. ¿ÉÄ› ¿¿Ää/// Creates an element that uses the given widget as its configuration.
///
/// Typically called by an override of [Widget.createElement].¿¿$  	¿1¿7¿F¿?¿8¿B¿W¿O¿Y¿d¿m  ¿x-¿è  ¿©$¿º  ¿!π¿!¡  ¿#R¿#[  ¿)•¿)≠  ¿-3¿-?  ¿?ï=¿?ß ¿?π¿? ¿?À¿ê o¿êB ¿ê ¿ê!¿êt¿êâ¿êi¿êv¿ê}¿êÖ¿ê~¿êÜ¿êá¿êã¿∆d.¿∆Å  ¿∆ñ$¿∆≠  ¿∆æ(¿∆√ ¿∆·¿ÍÖ¿Íä ¿Íì¿Î6¿Î; ¿ÎJ¿Îè¿Îî ¿Î¶¿Ï⁄4¿Ïﬂ ¿Ì		¿ {Å;¿!®Å/// Information set by parent to define where this child fits in its parent's
/// child list.
///
/// A child widget's slot is determined when the parent's [updateChild] method
/// is called to inflate the child widget. See [RenderObjectElement] for more
/// details on slots.   ¿!ÀÅÑ¿"lÄî/// An integer that is guaranteed to be greater than the parent's, if any.
/// The element at the root of the tree must have a depth greater than 0.   ¿'ëÇ¿)èÅ÷/// The configuration for this element.
///
/// Avoid overriding this field on [Element] subtypes to provide a more
/// specific widget type (i.e. [StatelessElement] and [StatelessWidget]).
/// Instead, cast at any callsites where the more specific type is required.
/// This avoids significant cast overhead on the getter which is accessed
/// throughout the framework internals during the build phase - and for which
/// the more specific type information is not used.  ¿)x¿)y¿)πÅÜ¿*åÄ¡/// Returns true if the Element is defunct.
///
/// This getter always returns false in profile and release builds.
/// See the lifecycle documentation for [Element] for additional information.   ¿+CÅÄ¿,Ä¿/// Returns true if the Element is active.
///
/// This getter always returns false in profile and release builds.
/// See the lifecycle documentation for [Element] for additional information.   ¿,«i¿- :/// The object that manages the lifecycle of this element.  ¿-¿-¿4ºÇ‘¿5‰Å/// The render object at (or below) this location in the tree.
///
/// If this object is a [RenderObjectElement], the render object is the one at
/// this location in the tree. Otherwise, this getter will walk down the tree
/// until it finds a [RenderObjectElement].   ¿ÆìóÕ¿Æ©   ¿Æì¿Æî¿Í b¿ÍrF/// Returns true if the element has been marked as needing rebuilding.   ;¿“Ñ•¿ LÉ‚/// Compare two widgets for equality.
///
/// When a widget is rebuilt with another that compares equal according
/// to `operator ==`, it is assumed that the update is redundant and the
/// work to update that branch of the tree is skipped.
///
/// It is generally discouraged to override `operator ==` on any widget that
/// has children, since a correct implementation would have to defer to the
/// children's equality operator also, and that is an O(N¬≤) operation: each
/// child would need to itself walk all its children, each step of the tree.
///
/// It is sometimes reasonable for a leaf widget (one with no children) to
/// implement this method, if rebuilding the widget is known to be much more
/// expensive than checking the widgets' parameters for equality and if the
/// widget is expected to often be rebuilt with identical parameters.
///
/// In general, however, it is more efficient to cache the widgets used
/// in a build method if it is known that they will not change. ¿ O¿ W  ¿ÿ¿Ÿ¿Ê¿Á¿#fÇ9¿#ÿb/// Returns result < 0 when [a] < [b], result == 0 when [a] == [b], result > 0
/// when [a] > [b]. ¿#ﬁ	¿#Á  ¿#È	¿#Ú   ¿&ÔÄû¿&˙  ¿'¿'   ¿-JÜê¿2úÑ¯/// {@template flutter.widgets.Element.reassemble}
/// Called whenever the application is reassembled during debugging, for
/// example during hot reload.
///
/// This method should rerun any initialization logic that depends on global
/// state, for example, image loading from asset bundles (since the asset
/// bundle may have changed).
///
/// This function will only be called during development. In release builds,
/// the `ext.flutter.reassemble` hook is not available, and so this code will
/// never execute.
///
/// Implementers should not rely on any ordering for hot reload source update,
/// reassemble, and build methods after a hot reload has been initiated. It is
/// possible that a [Timer] (e.g. an [Animation]) or a debugging session
/// attached to the isolate could trigger a build with reloaded code _before_
/// reassemble is called. Code that expects preconditions to be set by
/// reassemble after a hot reload must be resilient to being called out of
/// order, e.g. by fizzling instead of throwing. That said, once reassemble is
/// called, build will be called after it at least once.
/// {@endtemplate}
///
/// See also:
///
///  * [State.reassemble]
///  * [BindingBase.reassembleApplication]
///  * [Image], which uses this to reload images.  ¿2y¿2z¿2ä¿2ã¿3ﬁÄ⁄¿3„  ¿3Û¿3¸   ¿7îÉh¿7∂  ¿7–"¿7ﬂ  ¿7î¿7ï¿; Åv¿;nT/// Returns a list of [Element]s from the current build context to the error report. ¿;¿;á  ¿;å¿;ü   ¿<zÄƒ¿<ñ  ¿<¶¿<Æ  ¿<¥?¿<   ¿<z¿<{¿<—¿<Â¿<Ê¿=BÄ√¿=^  ¿=m¿=u  ¿={?¿=ë  ¿=B¿=C¿=ò¿=¨¿=≠¿>	Å)¿>%  ¿><¿>D  ¿>	¿>
¿?◊ÇX¿BÇ/// Calls the argument for each child. Must be overridden by subclasses that
/// support having children.
///
/// There is no guaranteed order in which the children will be visited, though
/// it should be consistent over time.
///
/// Calling this during build is dangerous: the child list might still be
/// being updated at that point, so the children might not be constructed yet,
/// or might be old children that are going to be replaced. This method should
/// only be called if it is provable that the children are available. ¿B¿B$   ¿B3É¡¿E®ÉG/// Calls the argument for each child considered onstage.
///
/// Classes like [Offstage] and [Overlay] override this method to hide their
/// children.
///
/// Being onstage affects the element's discoverability during testing when
/// you use Flutter's [Finder] objects. For example, when you instruct the
/// test framework to tap on a widget, by default the finder will look for
/// onstage elements and ignore the offstage ones.
///
/// The default implementation defers to [visitChildren] and therefore treats
/// the element as onstage.
///
/// See also:
///
///  * [Offstage] widget that hides its children.
///  * [Finder] that skips offstage widgets by default.
///  * [RenderObject.visitChildrenForSemantics], in contrast to this method,
///    designed specifically for excluding parts of the UI from the semantics
///    tree. ¿E¬¿E“   ¿E¯ÇŒ¿FB6/// Wrapper around [visitChildren] for [BuildContext]. ¿FU¿Fe  ¿F1¿F2¿H òt¿Q˜à¶/// Update the given child with the given new configuration.
///
/// This method is the core of the widgets system. It is called each time we
/// are to add, update, or remove a child based on an updated configuration.
///
/// The `newSlot` argument specifies the new value for this element's [slot].
///
/// If the `child` is null, and the `newWidget` is not null, then we have a new
/// child for which we need to create an [Element], configured with `newWidget`.
///
/// If the `newWidget` is null, and the `child` is not null, then we need to
/// remove it because it no longer has a configuration.
///
/// If neither are null, then we need to update the `child`'s configuration to
/// be the new configuration given by `newWidget`. If `newWidget` can be given
/// to the existing child (as determined by [Widget.canUpdate]), then it is so
/// given. Otherwise, the old child needs to be disposed and a new child
/// created for the new configuration.
///
/// If both are null, then we don't have a child and won't have a child, so we
/// do nothing.
///
/// The [updateChild] method returns the new child, if it had to create one,
/// or the child that was passed in, if it just had to update the child, or
/// null, if it removed the child and did not replace it.
///
/// The following table summarizes the above:
///
/// |                     | **newWidget == null**  | **newWidget != null**   |
/// | :-----------------: | :--------------------- | :---------------------- |
/// |  **child == null**  |  Returns null.         |  Returns new [Element]. |
/// |  **child != null**  |  Old child is removed, returns null. | Old child updated if possible, returns child or new [Element]. |
///
/// The `newSlot` argument is used only if `newWidget` is not null. If `child`
/// is null (or if the old child cannot be updated), then the `newSlot` is
/// given to the new [Element] that is created for the child, via
/// [inflateWidget]. If `child` is not null (and the old child _can_ be
/// updated), then the `newSlot` is given to [updateSlotForChild] to update
/// its slot, in case it has moved around since it was last built.
///
/// See the [RenderObjectElement] documentation for more information on slots. ¿R¿R  ¿R¿R  ¿R&¿R/  ¿Q√¿Qƒ¿Q–¿Q—¿Q◊¿QÍ¿Qÿ¿aBÜ˛¿d‹Éa/// Add this element to the tree in the given slot of the given parent.
///
/// The framework calls this function when a newly created element is added to
/// the tree for the first time. Use this method to initialize state that
/// depends on having a parent. State that is independent of the parent can
/// more easily be initialized in the constructor.
///
/// This method transitions the element from the "initial" lifecycle state to
/// the "active" lifecycle state.
///
/// Subclasses that override this method are likely to want to also override
/// [update], [visitChildren], [RenderObjectElement.insertRenderObjectChild],
/// [RenderObjectElement.moveRenderObjectChild], and
/// [RenderObjectElement.removeRenderObjectChild].
///
/// Implementations of this method should start with a call to the inherited
/// method, as in `super.mount(parent, newSlot)`. ¿d‚¿dÏ  ¿dÛ¿d¸  ¿d∆¿d«¿hDÄí¿hI  ¿hj¿hs   ¿h⁄Ö)¿jKÅL/// Change the widget used to configure this element.
///
/// The framework calls this function when the parent wishes to use a
/// different widget to configure this element. The new widget is guaranteed
/// to have the same [runtimeType] as the old widget.
///
/// This function is called only during the "active" lifecycle state. ¿jR¿jd  ¿j5¿j6¿nÇî¿o3Å/// Change the slot that the given child occupies in its parent.
///
/// Called by [MultiChildRenderObjectElement], and other [RenderObjectElement]
/// subclasses that have multiple children, when child moves from one position
/// to another in this element's child list. ¿oF¿oO  ¿oU¿o^  ¿o!¿o"¿püÅ¿p§  ¿p∞¿pπ   ¿qÆÄ¯¿q≥  ¿q¿¿q≈   ¿r™ÅÂ¿tÅU/// Remove [renderObject] from the render tree.
///
/// The default implementation of this function simply calls
/// [detachRenderObject] recursively on each child. The
/// [RenderObjectElement.detachRenderObject] override does the actual work of
/// removing [renderObject] from the render tree.
///
/// This is called by [deactivateChild].   ¿tìÇ\¿vAÅò/// Add [renderObject] to the render tree at the location specified by `newSlot`.
///
/// The default implementation of this function simply calls
/// [attachRenderObject] recursively on each child. The
/// [RenderObjectElement.attachRenderObject] override does the actual work of
/// adding [renderObject] to the render tree.
///
/// The `newSlot` argument specifies the new value for this element's [slot]. ¿vT¿v]   ¿vÛà`¿v¸  ¿w¿w  ¿w"¿w*   ¿Wâ`¿ÇøÉ/// Create an element for the given widget and add it as a child of this
/// element in the given slot.
///
/// This method is typically called by [updateChild] but can be called
/// directly by subclasses that need finer-grained control over creating
/// elements.
///
/// If the given widget has a global key and an element already exists that
/// has a widget with that global key, this function will reuse that element
/// (potentially grafting it from another location in the tree or reactivating
/// it from the list of inactive elements) rather than creating a new element.
///
/// The `newSlot` argument specifies the new value for this element's [slot].
///
/// The element returned by this function will already have been mounted and
/// will be in the "active" lifecycle state. ¿ÇÕ¿Ç’  ¿Çﬂ¿ÇË  ¿Çå¿Çç¿Çô¿Çö¿Ç†¿Ç≥¿Ç°¿àªÅ6¿à¿  ¿à’¿àﬁ   ¿âıÑı¿çÇÙ/// Move the given element to the list of inactive elements and detach its
/// render object from the render tree.
///
/// This method stops the given element from being a child of this element by
/// detaching its render object from the render tree and moving the element to
/// the list of inactive elements.
///
/// This method (indirectly) calls [deactivate] on the child.
///
/// The caller is responsible for removing the child from its child model.
/// Typically [deactivateChild] is called by the element itself while it is
/// updating its child model; however, during [GlobalKey] reparenting, the new
/// parent proactively calls the old parent's [deactivateChild], first using
/// [forgetChild] to cause the old parent to update its child model. ¿ç(¿ç1  ¿ç¿ç¿êîÑˇ¿ì-Ç[/// Remove the given child from the element's child list, in preparation for
/// the child being reused elsewhere in the element tree.
///
/// This updates the child model such that, e.g., [visitChildren] does not
/// walk that child anymore.
///
/// The element will still have a valid parent when this is called, and the
/// child's [Element.slot] value will be valid in the context of that parent.
/// After this is called, [deactivateChild] is called to sever the link to
/// this object.
///
/// The [update] is responsible for updating or creating the new child that
/// will replace this [child]. ¿ì9¿ìB  ¿ì
¿ì¿ì¿ì¿ïóÅ÷¿ïú  ¿ï∞¿ïπ  ¿ï¿¿ï…   ¿óqÅ¿ó}  ¿óí¿óõ   ¿òyÖ@¿öËÇB/// Transition from the "inactive" to the "active" lifecycle state.
///
/// The framework calls this method when a previously deactivated element has
/// been reincorporated into the tree. The framework does not call this method
/// the first time an element becomes active (i.e., from the "initial"
/// lifecycle state). Instead, the framework calls [mount] in that situation.
///
/// See the lifecycle documentation for [Element] for additional information.
///
/// Implementations of this method should start with a call to the inherited
/// method, as in `super.activate()`.  ¿ö“¿ö”¿ùΩÜì¿†÷Ç‰/// Transition from the "active" to the "inactive" lifecycle state.
///
/// The framework calls this method when a previously active element is moved
/// to the list of inactive elements. While in the inactive state, the element
/// will not appear on screen. The element can remain in the inactive state
/// only until the end of the current animation frame. At the end of the
/// animation frame, if the element has not be reactivated, the framework will
/// unmount the element.
///
/// This is (indirectly) called by [deactivateChild].
///
/// See the lifecycle documentation for [Element] for additional information.
///
/// Implementations of this method should end with a call to the inherited
/// method, as in `super.deactivate()`.  ¿†¿¿†¡¿§TÄ¯¿§˘Äà/// Called, in debug mode, after children have been deactivated (see [deactivate]).
///
/// This method is not called in release builds.  ¿§„¿§‰¿•PÜ"¿®˘Én/// Transition from the "inactive" to the "defunct" lifecycle state.
///
/// Called when the framework determines that an inactive element will never
/// be reactivated. At the end of each animation frame, the framework calls
/// [unmount] on any remaining inactive elements, preventing inactive elements
/// from remaining inactive for longer than a single animation frame.
///
/// After this function is called, the element will not be incorporated into
/// the tree again.
///
/// Any resources this element holds should be released at this point. For
/// example, [RenderObjectElement.unmount] calls [RenderObject.dispose] and
/// nulls out its reference to the render object.
///
/// See the lifecycle documentation for [Element] for additional information.
///
/// Implementations of this method should end with a call to the inherited
/// method, as in `super.unmount()`.  ¿®„¿®‰¿´vÉ¿´ê   ¿´v¿´w¿∆ÎÇÎ¿∆    ¿…⁄ÄË¿ FW/// Returns `true` if [dependOnInheritedElement] was previously called with [ancestor]. ¿ c¿ u  ¿ 4¿ 5¿ ∆Å:¿ ‚  ¿ ˚¿À  ¿À¿À!  ¿ ∆¿ «¿ÃÅü¿Ã ¿Ã6¿Ã6¿ÃR¿Ã[  ¿Ã¿Ã¿ÕßÅ¿Õ≈ ¿ÕÌ¿ÕÌ ¿Õß¿Õ®¿Œ¬Ç ¿–pÅâ/// Called in [Element.mount] and [Element.activate] to register this element in
/// the notification tree.
///
/// This method is only exposed so that [NotifiableElementMixin] can be implemented.
/// Subclasses of [Element] that wish to respond to notifications should mix that
/// in instead.
///
/// See also:
///   * [NotificationListener], a widget that allows listening to notifications.  ¿–^¿–_¿–∆Äå¿–À    ¿—VÅ/¿—e ¿—É¿—É ¿—V¿—W¿“âÅæ¿“ò ¿“∞¿“∞ ¿“â¿“ä¿‘KÅ≥¿‘Z ¿‘v¿‘v ¿‘K¿‘L¿÷Å~¿÷ ¿÷0¿÷0 ¿÷¿÷¿◊ÑÅ¿◊ï  ¿◊´&¿◊À  ¿◊Ñ¿◊Ö¿ÿìÇ›¿⁄ïÅ€/// Called when a dependency of this element changes.
///
/// The [dependOnInheritedWidgetOfExactType] registers this element as depending on
/// inherited information of the given type. When the information of that type
/// changes at this location in the tree (e.g., because the [InheritedElement]
/// updated to a new [InheritedWidget] and
/// [InheritedWidget.updateShouldNotify] returned true), the framework calls
/// this function to notify this element of the change.  ¿⁄¿⁄Ä¿€tÉ%¿€y  ¿€õ¿€£   ¿ﬁùÅ ¿ﬂ&{/// Returns a description of what caused this element to be created.
///
/// Useful for debugging the source of an element. ¿ﬂ;	¿ﬂ@   ¿‡kÅ¥¿·MÄÀ/// Returns the parent chain from this element back to the root of the tree.
///
/// Useful for debug display of a tree of Elements with only nodes in the path
/// from the root to this Element expanded.   ¿‚#ÄÅ¿‚4  ¿‚I¿‚W  ¿‚#¿‚$¿‚®Äõ¿‚Ô1/// A short, textual description of this element.  ¿‚‹¿‚›¿„GÄÕ¿„c  ¿„w¿„Ä  ¿„Ö¿„ú  ¿„G¿„H¿‰Ö¿‰)  ¿‰=&¿‰Z  ¿‰¿‰¿È-ÄÔ¿ÈO   ¿È-¿È.¿ÌÄ∆¿Ì  ¿ÌB
¿ÌH   ¿Ì‹ãw¿ÔIÅY/// Marks the element as dirty and adds it to the global list of widgets to
/// rebuild in the next frame.
///
/// Since it is inefficient to build an element twice in one frame,
/// applications and widgets should be structured so as to only mark
/// widgets dirty during event handlers before the frame begins, not during
/// the build itself.   ¿˘WÖ>¿˙µÅ./// Cause the widget to update itself. In debug builds, also verify various
/// invariants.
///
/// Called by the [BuildOwner] when [BuildOwner.scheduleBuildFor] has been
/// called to mark this element dirty, by [mount] when the element is first
/// built, and by [update] when the widget has changed.  ¿˙í¿˙ì¿˙ô¿˙¨¿˙ö¿˛ôÄô¿ˇ!o/// Cause the widget to update itself.
///
/// Called by [rebuild] after the appropriate checks have been made.  ¿ˇ¿ˇ ¿ˇ6Ça¿ˇ<  ¿ˇ~Äç ¿ˇ~¿ˇú ¿ˇ£
¿ˇ™  ¿ˇ≥¿ˇÀ  ¿ˇ’¿ˇÂ  ¿ˇÔ¿ˇı  ¿ˇˇ¿ ¿    ¿ 'Ån¿ H  ¿ R)¿ t  ¿ '¿ ( ¿æìF¿°É‹/// A widget that renders an exception's message.
///
/// This widget is used when a build method fails, to help with determining
/// where the problem lies. Exceptions are also logged to the console, which you
/// can read using `flutter logs`. The console will also include additional
/// information such as the stack trace for the exception.
///
/// It is possible to override this widget.
///
/// {@tool dartpad}
/// This example shows how to override the standard error widget builder in release
/// mode, but use the standard one in debug mode.
///
/// The error occurs when you click the "Error Prone" button.
///
/// ** See code in examples/api/lib/widgets/framework/error_widget.0.dart **
/// {@end-tool}
///
/// See also:
///
///  * [FlutterError.onError], which can be set to a method that exits the
///    application if that is preferable to showing an error message.
///  * <https://flutter.dev/docs/testing/errors>, more information about error
///    handling in Flutter. ¿–Çl ¿	ï¿	†Å≤/// Creates a widget that displays the given exception.
///
/// The message will be the stringification of the given exception, unless
/// computing that value itself throws an exception, in which case it will
/// be the string "Error".
///
/// If this object is inspected from an IDE or the devtools, and the original
/// exception is a [FlutterError] object, the original exception itself will
/// be shown in the inspection output.¿	°¿	©  ¿	¡¿	π¿	√¿	Õ¿	◊¿	Œ¿	Ó¿	‡¿

¿
¿	˙¿	¿	˝¿
¿
¿
$¿
)¿
:¿
-¿
*¿
/¿
8¿
9¿
@Å=¿	¿
¿Äµ/// Creates a widget that displays the given error message.
///
/// An explicit [FlutterError] can be provided to be reported to inspection
/// tools. It need not match the message.¿¿  ¿+¿:  ¿'¿V¿H¿X¿e¿j¿{¿n¿k¿p¿y¿z¿ÅÜ?¿úÖ∆/// The configurable factory for [ErrorWidget].
///
/// When an error occurs while building a widget, the broken widget is
/// replaced by the widget returned by this function. By default, an
/// [ErrorWidget] is returned.
///
/// The system is typically in an unstable state when this function is called.
/// An exception has just been thrown in the middle of build (and possibly
/// layout), so surrounding widgets and render objects may be in a rather
/// fragile state. The framework itself (especially the [BuildOwner]) may also
/// be confused, and additional exceptions are quite likely to be thrown.
///
/// Because of this, it is highly recommended that the widget returned from
/// this function perform the least amount of work possible. A
/// [LeafRenderObjectWidget] is the best choice, especially one that
/// corresponds to a [RenderBox] that can handle the most absurd of incoming
/// constraints. The default constructor maps to a [RenderErrorBox].
///
/// The default behavior is to show the exception's message in debug mode,
/// and to show nothing but a gray background in release builds.
///
/// See also:
///
///  * [FlutterError.onError], which is typically called with the same
///    [FlutterErrorDetails] object immediately prior to this callback being
///    invoked, and which can also be configured to control how errors are
///    reported.
///  * <https://flutter.dev/docs/testing/errors>, more information about error
///    handling in Flutter.¿¶¿Ó2¿/// The message to display. ¿$!¿8   ¿≈Åì¿”  ¿Ó¿   ¿\Åé¿j  ¿u¿~   ¿JZ¿`  ¿s¿Å  ¿J¿K¿®ÅZ¿π  ¿Õ&¿Í  ¿®¿© ¿!å¿¿"ÄÔ/// An [Element] that composes other [Element]s.
///
/// Rather than creating a [RenderObject] directly, a [ComponentElement] creates
/// [RenderObject]s indirectly by creating other [Element]s.
///
/// Contrast with [RenderObjectElement]. ¿"Bi ¿"å¿"úG/// Creates an element that uses the given widget as its configuration.¿"ù¿"§   ¿"Ø¿"∏  ¿"√¿"» ¿"€¿"‰9¿"˘   ¿"‰¿"Â¿#!Ä‰¿#2  ¿#8¿#B  ¿#I¿#R  ¿#!¿#"¿$	Ä†¿$    ¿$≠ád¿&NÅV/// Calls the [StatelessWidget.build] method of the [StatelessWidget] object
/// (for stateless widgets) or the [State.build] method of the [State] object
/// (for stateful widgets) and then updates the widget tree.
///
/// Called automatically during [mount] to generate the first build, and by
/// [rebuild] when the element needs updating.  ¿&¿&¿&¿&¿&#¿&E¿&$¿,ÄÃ¿,ŸÄ©/// Subclasses should override this function to actually call the appropriate
/// `build` function (e.g., [StatelessWidget.build] or [State.build]) for
/// their widget.  ¿,≈¿,∆¿,Ât¿,ˆ  ¿-¿-  ¿,Â¿,Ê¿-]¿-n  ¿-z¿-É  ¿-]¿-^ ¿-‡Å⁄¿.+D/// An [Element] that uses a [StatelessWidget] as its configuration. ¿.Yy ¿.£¿.≥G/// Creates an element that uses the given widget as its configuration.¿.¥¿.À     ¿.÷F¿.È   ¿.÷¿.◊¿/ Äò¿/1  ¿/8¿/I  ¿/ ¿/! ¿/º¶!¿0C/// An [Element] that uses a [StatefulWidget] as its configuration. ¿03Ñf ¿0}¿0åG/// Creates an element that uses the given widget as its configuration.¿0ç¿0ù  ¿0≥¿0¨¿0µ¿0ª¿0º¿0«¿0»¿0”¿0ÿ¿0ﬂ¿0Ÿ¿6¿6"  ¿Q=ÇX¿SwÇ"/// This controls whether we should call [State.didChangeDependencies] from
/// the start of [build], to avoid calls when the [State] will not get built.
/// This can happen when the widget has dropped out of the tree, but depends
/// on an [InheritedWidget] that is still in the tree.
///
/// It is set initially to false, since [_firstBuild] makes the initial call
/// on the [state]. When it is true, [build] will call
/// `state.didChangeDependencies` and then sets it to false. Subsequent calls
/// to [didChangeDependencies] set it to true.¿Sê¿4—Å7¿5˜Å/// The [State] instance associated with this location in the tree.
///
/// There is a one-to-one relationship between [State] objects and the
/// [StatefulElement] objects that hold them. The [State] objects are created
/// by [StatefulElement] in [mount].   ¿4ù0¿4∞   ¿4ù¿4û¿6-Äû¿6>   ¿6-¿6.¿6œÑî¿6‡   ¿6œ¿6–¿;gÄ∂¿;x   ¿;g¿;h¿<!Ñ›¿<2  ¿<9¿<I  ¿<!¿<"¿AÅô¿A   ¿A¿A¿BüS¿B∞   ¿Bü¿B†¿BˆÇŸ¿C   ¿Bˆ¿B˜¿E”ãf¿EÔ  ¿F¿F  ¿F¿F%  ¿E”¿E‘¿Söt¿S´   ¿Sö¿Sõ¿TÄ„¿T.  ¿TB¿TK  ¿TP¿Tg  ¿T¿T¿T˘Ä‚¿U
  ¿U&¿U;  ¿T˘¿T˙ ¿UﬂÑ¡¿V/@/// An [Element] that uses a [ProxyWidget] as its configuration. ¿VYP ¿VÇ¿Vé&/// Initializes fields for subclasses.¿Vè¿V¢     ¿V≠<¿V¿   ¿V≠¿VÆ¿VÌÅ"¿V˛  ¿W¿W  ¿VÌ¿VÓ¿XÅW¿YÄÓ/// Called during build when the [widget] has changed.
///
/// By default, calls [notifyClients]. Subclasses may override this method to
/// avoid calling [notifyClients] unnecessarily (e.g. if the old and new
/// widgets are equivalent). ¿Y&¿Y=  ¿Y¿Y¿YnÅ0¿ZoÄ‰/// Notify other objects that the widget associated with this element has
/// changed.
///
/// Called during [update] (via [updated]) after changing the widget
/// associated with this element but before rebuilding this element. ¿Z}¿Zî  ¿Z]¿Z^ ¿Z¢äÏ¿ZÓE/// An [Element] that uses a [ParentDataWidget] as its configuration.¿[ ¿[ ¿[/~ ¿[y¿[äG/// Creates an element that uses the given widget as its configuration.¿[ã ¿[¶     ¿[±Åq¿[∂  ¿[«¿[‹   ¿]&áÍ¿d!Üµ/// Calls [ParentDataWidget.applyParentData] on the given widget, passing it
/// the [RenderObject] whose parent data this element is ultimately
/// responsible for.
///
/// This allows a render object's [RenderObject.parentData] to be modified
/// without triggering a build. This is generally ill-advised, but makes sense
/// in situations such as the following:
///
///  * Build and layout are currently under way, but the [ParentData] in question
///    does not affect layout, and the value to be applied could not be
///    determined before build and layout (e.g. it depends on the layout of a
///    descendant).
///
///  * Paint is currently under way, but the [ParentData] in question does not
///    affect layout or paint, and the value to be applied could not be
///    determined before paint (e.g. it depends on the compositing phase).
///
/// In either case, the next build is expected to cause this element to be
/// configured with the given new widget (or a widget with equivalent data).
///
/// Only [ParentDataWidget]s that return true for
/// [ParentDataWidget.debugCanApplyOutOfTurn] can be applied this way.
///
/// The new widget must have the same child as the current widget.
///
/// An example of when this is used is the [AutomaticKeepAlive] widget. If it
/// receives a notification during the build of one of its descendants saying
/// that its child must be kept alive, it will apply a [KeepAlive] widget out
/// of turn. This is safe, because by definition the child is already alive,
/// and therefore this will not change the behavior of the parent this frame.
/// It is more efficient than requesting an additional frame just for the
/// purpose of updating the [KeepAlive] widget. ¿d6¿dK   ¿ex¿e%  ¿e3¿eH  ¿e¿e ¿eêõ¿e‹E/// An [Element] that uses an [InheritedWidget] as its configuration. ¿fy ¿fP¿f`G/// Creates an element that uses the given widget as its configuration.¿fa¿fx   ¿fÉE¿fü ¿f≠¿f¥¿f≈¿fµ¿fƒ¿fæ¿f∆¿f« ¿fÕÅÆ¿fﬁ   ¿fÕ¿fŒ¿hÄó¿hê   ¿h¿hÄ¿iÑ∞¿mÑ/// Returns the dependencies value recorded for [dependent]
/// with [setDependencies].
///
/// Each dependent element is mapped to a single object value
/// which represents how the element depends on this
/// [InheritedElement]. This value is null by default and by default
/// dependent elements are rebuilt unconditionally.
///
/// Subclasses can manage these values with [updateDependencies]
/// so that they can selectively rebuild dependents in
/// [notifyDependent].
///
/// This method is typically only called in overrides of [updateDependencies].
///
/// See also:
///
///  * [updateDependencies], which is called each time a dependency is
///    created with [dependOnInheritedWidgetOfExactType].
///  * [setDependencies], which sets dependencies value for a dependent
///    element.
///  * [notifyDependent], which can be overridden to use a dependent's
///    dependencies value to decide if the dependent needs to be rebuilt.
///  * [InheritedModel], which is an example of a class that uses this method
///    to manage dependency values. ¿mè¿mò  ¿mj¿mk¿mŒÑ ¿r=Ñ0/// Sets the value returned by [getDependencies] value for [dependent].
///
/// Each dependent element is mapped to a single object value
/// which represents how the element depends on this
/// [InheritedElement]. The [updateDependencies] method sets this value to
/// null by default so that dependent elements are rebuilt unconditionally.
///
/// Subclasses can manage these values with [updateDependencies]
/// so that they can selectively rebuild dependents in [notifyDependent].
///
/// This method is typically only called in overrides of [updateDependencies].
///
/// See also:
///
///  * [updateDependencies], which is called each time a dependency is
///    created with [dependOnInheritedWidgetOfExactType].
///  * [getDependencies], which returns the current value for a dependent
///    element.
///  * [notifyDependent], which can be overridden to use a dependent's
///    [getDependencies] value to decide if the dependent needs to be rebuilt.
///  * [InheritedModel], which is an example of a class that uses this method
///    to manage dependency values. ¿rM¿rV  ¿r`¿ri  ¿r+¿r,¿rúÑä¿v≈ÉÍ/// Called by [dependOnInheritedWidgetOfExactType] when a new [dependent] is added.
///
/// Each dependent element can be mapped to a single object value with
/// [setDependencies]. This method can lookup the existing dependencies with
/// [getDependencies].
///
/// By default this method sets the inherited dependencies for [dependent]
/// to null. This only serves to record an unconditional dependency on
/// [dependent].
///
/// Subclasses can manage their own dependencies values so that they
/// can selectively rebuild dependents in [notifyDependent].
///
/// See also:
///
///  * [getDependencies], which returns the current value for a dependent
///    element.
///  * [setDependencies], which sets the value for a dependent element.
///  * [notifyDependent], which can be overridden to use a dependent's
///    dependencies value to decide if the dependent needs to be rebuilt.
///  * [InheritedModel], which is an example of a class that uses this method
///    to manage dependency values. ¿vÿ¿v·  ¿vÎ¿vÙ  ¿v≥¿v¥¿w*ÉF¿y¸Çü/// Called by [notifyClients] for each dependent.
///
/// Calls `dependent.didChangeDependencies()` by default.
///
/// Subclasses can override this method to selectively call
/// [didChangeDependencies] based on the value of [getDependencies].
///
/// See also:
///
///  * [updateDependencies], which is called each time a dependency is
///    created with [dependOnInheritedWidgetOfExactType].
///  * [getDependencies], which returns the current value for a dependent
///    element.
///  * [setDependencies], which sets the value for a dependent element.
///  * [InheritedModel], which is an example of a class that uses this method
///    to manage dependency values. ¿z#¿z'  ¿z1¿z:  ¿yÍ¿yÎ¿ztÅÆ¿{èÄ˝/// Calls [Element.didChangeDependencies] of all dependent elements, if
/// [InheritedWidget.updateShouldNotify] returns true.
///
/// Called by [update], immediately prior to [build].
///
/// Calls [notifyClients] to actually trigger the notifications. ¿{ó¿{®  ¿{~¿{¿|&Ñj¿~LÅ˛/// Notifies all dependent elements that this inherited widget has changed, by
/// calling [Element.didChangeDependencies].
///
/// This method must only be called during the build phase. Usually this
/// method is called automatically when an inherited widget is rebuilt, e.g.
/// as a result of calling [State.setState] above the inherited widget.
///
/// See also:
///
///  * [InheritedNotifier], a subclass of [InheritedWidget] that also calls
///    this method when its [Listenable] sends a notification. ¿~Z¿~k  ¿~;¿~< ¿Äî¿ {é¿†™†/// An [Element] that uses a [RenderObjectWidget] as its configuration.
///
/// [RenderObjectElement] objects have an associated [RenderObject] widget in
/// the render tree, which handles concrete operations like laying out,
/// painting, and hit testing.
///
/// Contrast with [ComponentElement].
///
/// For details on the lifecycle of an element, see the discussion at [Element].
///
/// ## Writing a RenderObjectElement subclass
///
/// There are three common child models used by most [RenderObject]s:
///
/// * Leaf render objects, with no children: The [LeafRenderObjectElement] class
///   handles this case.
///
/// * A single child: The [SingleChildRenderObjectElement] class handles this
///   case.
///
/// * A linked list of children: The [MultiChildRenderObjectElement] class
///   handles this case.
///
/// Sometimes, however, a render object's child model is more complicated. Maybe
/// it has a two-dimensional array of children. Maybe it constructs children on
/// demand. Maybe it features multiple lists. In such situations, the
/// corresponding [Element] for the [Widget] that configures that [RenderObject]
/// will be a new subclass of [RenderObjectElement].
///
/// Such a subclass is responsible for managing children, specifically the
/// [Element] children of this object, and the [RenderObject] children of its
/// corresponding [RenderObject].
///
/// ### Specializing the getters
///
/// [RenderObjectElement] objects spend much of their time acting as
/// intermediaries between their [widget] and their [renderObject]. It is
/// generally recommended against specializing the [widget] getter and
/// instead casting at the various callsites to avoid adding overhead
/// outside of this particular implementation.
///
/// ```dart
/// class FooElement extends RenderObjectElement {
///
///   @override
///   RenderFoo get renderObject => super.renderObject as RenderFoo;
///
///   void _foo() {
///     final Foo foo = widget as Foo;
///   }
///   // ...
/// }
/// ```
///
/// ### Slots
///
/// Each child [Element] corresponds to a [RenderObject] which should be
/// attached to this element's render object as a child.
///
/// However, the immediate children of the element may not be the ones that
/// eventually produce the actual [RenderObject] that they correspond to. For
/// example a [StatelessElement] (the element of a [StatelessWidget]) simply
/// corresponds to whatever [RenderObject] its child (the element returned by
/// its [StatelessWidget.build] method) corresponds to.
///
/// Each child is therefore assigned a _[slot]_ token. This is an identifier whose
/// meaning is private to this [RenderObjectElement] node. When the descendant
/// that finally produces the [RenderObject] is ready to attach it to this
/// node's render object, it passes that slot token back to this node, and that
/// allows this node to cheaply identify where to put the child render object
/// relative to the others in the parent render object.
///
/// A child's [slot] is determined when the parent calls [updateChild] to
/// inflate the child (see the next section). It can be updated by calling
/// [updateSlotForChild].
///
/// ### Updating children
///
/// Early in the lifecycle of an element, the framework calls the [mount]
/// method. This method should call [updateChild] for each child, passing in
/// the widget for that child, and the slot for that child, thus obtaining a
/// list of child [Element]s.
///
/// Subsequently, the framework will call the [update] method. In this method,
/// the [RenderObjectElement] should call [updateChild] for each child, passing
/// in the [Element] that was obtained during [mount] or the last time [update]
/// was run (whichever happened most recently), the new [Widget], and the slot.
/// This provides the object with a new list of [Element] objects.
///
/// Where possible, the [update] method should attempt to map the elements from
/// the last pass to the widgets in the new pass. For example, if one of the
/// elements from the last pass was configured with a particular [Key], and one
/// of the widgets in this new pass has that same key, they should be paired up,
/// and the old element should be updated with the widget (and the slot
/// corresponding to the new widget's new position, also). The [updateChildren]
/// method may be useful in this regard.
///
/// [updateChild] should be called for children in their logical order. The
/// order can matter; for example, if two of the children use [PageStorage]'s
/// `writeState` feature in their build method (and neither has a [Widget.key]),
/// then the state written by the first will be overwritten by the second.
///
/// #### Dynamically determining the children during the build phase
///
/// The child widgets need not necessarily come from this element's widget
/// verbatim. They could be generated dynamically from a callback, or generated
/// in other more creative ways.
///
/// #### Dynamically determining the children during layout
///
/// If the widgets are to be generated at layout time, then generating them in
/// the [mount] and [update] methods won't work: layout of this element's render
/// object hasn't started yet at that point. Instead, the [update] method can
/// mark the render object as needing layout (see
/// [RenderObject.markNeedsLayout]), and then the render object's
/// [RenderObject.performLayout] method can call back to the element to have it
/// generate the widgets and call [updateChild] accordingly.
///
/// For a render object to call an element during layout, it must use
/// [RenderObject.invokeLayoutCallback]. For an element to call [updateChild]
/// outside of its [update] method, it must use [BuildOwner.buildScope].
///
/// The framework provides many more checks in normal operation than it does
/// when doing a build during layout. For this reason, creating widgets with
/// layout-time build semantics should be done with great care.
///
/// #### Handling errors when building
///
/// If an element calls a builder function to obtain widgets for its children,
/// it may find that the build throws an exception. Such exceptions should be
/// caught and reported using [FlutterError.reportError]. If a child is needed
/// but a builder has failed in this way, an instance of [ErrorWidget] can be
/// used instead.
///
/// ### Detaching children
///
/// It is possible, when using [GlobalKey]s, for a child to be proactively
/// removed by another element before this element has been updated.
/// (Specifically, this happens when the subtree rooted at a widget with a
/// particular [GlobalKey] is being moved from this element to an element
/// processed earlier in the build phase.) When this happens, this element's
/// [forgetChild] method will be called with a reference to the affected child
/// element.
///
/// The [forgetChild] method of a [RenderObjectElement] subclass must remove the
/// child element from its child list, so that when it next [update]s its
/// children, the removed child is not considered.
///
/// For performance reasons, if there are many elements, it may be quicker to
/// track which elements were forgotten by storing them in a [Set], rather than
/// proactively mutating the local record of the child list and the identities
/// of all the slots. For example, see the implementation of
/// [MultiChildRenderObjectElement].
///
/// ### Maintaining the render object tree
///
/// Once a descendant produces a render object, it will call
/// [insertRenderObjectChild]. If the descendant's slot changes identity, it
/// will call [moveRenderObjectChild]. If a descendant goes away, it will call
/// [removeRenderObjectChild].
///
/// These three methods should update the render tree accordingly, attaching,
/// moving, and detaching the given child render object from this element's own
/// render object respectively.
///
/// ### Walking the children
///
/// If a [RenderObjectElement] object has any children [Element]s, it must
/// expose them in its implementation of the [visitChildren] method. This method
/// is used by many of the framework's internal mechanisms, and so should be
/// fast. It is also used by the test framework and [debugDumpApp]. ¿†“ ¿°¿°/G/// Creates an element that uses the given widget as its configuration.¿°0¿°J   ¿¢_¿¢m  ¿¢¿¢Ñ ¿¢ó¿¢›1¿¢Ú  ¿°UÅ¿°Úy/// The underlying [RenderObject] for this element.
///
/// If this element has been [unmount]ed, this getter will throw.  ¿°’¿°÷¿¢†9¿¢µ   ¿¢†¿¢°¿£Ä˜¿£(    ¿§â>¿§-    ¿≠PÇ¿≠a  ¿≠g¿≠q  ¿≠x¿≠Å  ¿≠P¿≠Q¿ØmÅ¿Ø~  ¿ØÖ&¿Ø£  ¿Øm¿Øn¿∞ÑÄç¿∞â    ¿±c¿±&   ¿±¿±¿±|Å2¿±ü   ¿±|¿±}¿±É¿±ñ¿±Ñ¿≤≤©o¿æ≈ãô/// Updates the children of this element to use new widgets.
///
/// Attempts to update the given old children list using the given new
/// widgets, removing obsolete elements and introducing new ones as necessary,
/// and then returns the new child list.
///
/// During this function the `oldChildren` list must not be modified. If the
/// caller wishes to remove elements from `oldChildren` re-entrantly while
/// this function is on the stack, the caller can supply a `forgottenChildren`
/// argument, which can be modified while this function is on the stack.
/// Whenever this function reads from `oldChildren`, this function first
/// checks whether the child is in `forgottenChildren`. If it is, the function
/// acts as if the child was not in `oldChildren`.
///
/// This function is a convenience wrapper around [updateChild], which updates
/// each individual child. If `slots` is non-null, the value for the `newSlot`
/// argument of [updateChild] is retrieved from that list using the index that
/// the currently processed `child` corresponds to in the `newWidgets` list
/// (`newWidgets` and `slots` must have the same length). If `slots` is null,
/// an [IndexedSlot<Element>] is used as the value for the `newSlot` argument.
/// In that case, [IndexedSlot.index] is set to the index that the currently
/// processed `child` corresponds to in the `newWidgets` list and
/// [IndexedSlot.value] is set to the [Element] of the previous widget in that
/// list (or null if it is the first child).
///
/// When the [slot] value of an [Element] changes, its
/// associated [renderObject] needs to move to a new position in the child
/// list of its parents. If that [RenderObject] organizes its children in a
/// linked list (as is done by the [ContainerRenderObjectMixin]) this can
/// be implemented by re-inserting the child [RenderObject] into the
/// list after the [RenderObject] associated with the [Element] provided as
/// [IndexedSlot.value] in the [slot] object.
///
/// Simply using the previous sibling as a [slot] is not enough, though, because
/// child [RenderObject]s are only moved around when the [slot] of their
/// associated [RenderObjectElement]s is updated. When the order of child
/// [Element]s is changed, some elements in the list may move to a new index
/// but still have the same previous sibling. For example, when
/// `[e1, e2, e3, e4]` is changed to `[e1, e3, e4, e2]` the element e4
/// continues to have e3 as a previous sibling even though its index in the list
/// has changed and its [RenderObject] needs to move to come before e2's
/// [RenderObject]. In order to trigger this move, a new [slot] value needs to
/// be assigned to its [Element] whenever its index in its
/// parent's child list changes. Using an [IndexedSlot<Element>] achieves
/// exactly that and also ensures that the underlying parent [RenderObject]
/// knows where a child needs to move to in a linked list by providing its new
/// previous sibling. ¿æ‘¿æ„  ¿æÔ¿æ˝  ¿ø
¿ø  ¿ø+¿ø;  ¿æ™¿æ´¿‹%ÄÂ¿‹6   ¿‹%¿‹&¿›Ç/¿›   ¿›¿›¿ﬂAÑÈ¿ﬂF  ¿ﬂX-¿ﬂv   ¿‰.Å¿‰?  ¿‰K¿‰T  ¿‰.¿‰/¿Â:Å˜¿ÂK  ¿Â^¿Âg  ¿Â:¿Â;¿Á5ÄÔ¿ÁF   ¿Á5¿Á6¿Ë(Ü)¿ÍÅ¬/// Insert the given child into [renderObject] at the given slot.
///
/// {@template flutter.widgets.RenderObjectElement.insertRenderObjectChild}
/// The semantics of `slot` are determined by this element. For example, if
/// this element has a single child, the slot should always be null. If this
/// element has a list of children, the previous sibling element wrapped in an
/// [IndexedSlot] is a convenient value for the slot.
/// {@endtemplate} ¿Í%¿Í=  ¿ÍC¿ÍV  ¿È˚¿È¸¿ÓUáÕ¿Ò ÉF/// Move the given child from the given old slot to the given new slot.
///
/// The given child is guaranteed to have [renderObject] as its parent.
///
/// {@macro flutter.widgets.RenderObjectElement.insertRenderObjectChild}
///
/// This method is only ever called if [updateChild] can end up being called
/// with an existing [Element] child and a `slot` that differs from the slot
/// that element was previously given. [MultiChildRenderObjectElement] does this,
/// for example. [SingleChildRenderObjectElement] does not (since the `slot` is
/// always null). An [Element] that has a specific set of slots with each child
/// always having the same slot (and where children in different slots are never
/// compared against each other for the purposes of updating one slot with the
/// element from another slot) would never call this. ¿Ò‡¿Ò¯  ¿Ò˛¿Ú  ¿Ú¿Ú,  ¿Ò∏¿Òπ¿ˆ&Ö¿ˆÎÄ™/// Remove the given child from [renderObject].
///
/// The given child is guaranteed to have been inserted at the given `slot`
/// and have [renderObject] as its parent. ¿˜¿˜  ¿˜!¿˜4  ¿ˆŸ¿ˆ⁄¿˚9ÄÁ¿˚J  ¿˚^&¿˚{  ¿˚9¿˚: ¿¸$Ñâ¿¸⁄Ä¶/// The element at the root of the tree.
///
/// Only root elements may have their owner set explicitly. All other
/// elements inherit their owner from their parent. ¿˝O ¿˝;¿˝R&/// Initializes fields for subclasses.¿˝S¿˝Z     ¿˝eÇy¿ˇßÅ◊/// Set the owner of the element. The owner will be propagated to all the
/// descendants of this element.
///
/// The owner manages the dirty elements list.
///
/// The [WidgetsBinding] introduces the primary owner,
/// [WidgetsBinding.buildOwner], and assigns it to the widget tree in the call
/// to [runApp]. The binding is responsible for driving the build pipeline by
/// calling the build owner's [BuildOwner.buildScope] method. See
/// [WidgetsBinding.drawFrame]. ¿ˇ≥¿ˇø   ¿ˇ‚Ä…¿ˇÛ  ¿ˇ˘¿   ¿ 
¿   ¿ˇ‚¿ˇ„ ¿ ØÉ.¿K/// An [Element] that uses a [LeafRenderObjectWidget] as its configuration. ¿9Äá ¿É¿öG/// Creates an element that uses the given widget as its configuration.¿õ#¿π     ¿ƒb¿’  ¿·¿Í  ¿ƒ¿≈¿*c¿;  ¿S¿a  ¿g¿p  ¿*¿+¿ëu¿¢  ¿∏¿∆  ¿Ã¿’  ¿›¿Ê  ¿ë¿í¿
c¿  ¿3¿A  ¿G¿P  ¿
¿¿qj¿ì   ¿q¿r ¿ﬂà!¿,ÅF/// An [Element] that uses a [SingleChildRenderObjectWidget] as its configuration.
///
/// The child is optional.
///
/// This element subclass can be used for RenderObjectWidgets whose
/// RenderObjects use the [RenderObjectWithChildMixin] mixin. Such widgets are
/// expected to inherit from [SingleChildRenderObjectWidget]. ¿kÄï ¿µ¿”G/// Creates an element that uses the given widget as its configuration.¿‘*¿˘   ¿¿   ¿t¿)  ¿7¿G  ¿¿¿ê¿°  ¿≠¿∂  ¿ê¿ë¿Äπ¿$  ¿*¿4  ¿;¿D  ¿¿¿–Ä›¿·  ¿Ë'¿  ¿–¿—¿±Ån¿¬  ¿⁄¿Ë  ¿Ó¿˜  ¿±¿≤¿
#u¿
4  ¿
J¿
X  ¿
^¿
g  ¿
o¿
x  ¿
#¿
$¿
úÅb¿
≠  ¿
≈¿
”  ¿
Ÿ¿
‚  ¿
ú¿
ù ¿ï¿áÇ~/// An [Element] that uses a [MultiChildRenderObjectWidget] as its configuration.
///
/// This element subclass can be used for RenderObjectWidgets whose
/// RenderObjects use the [ContainerRenderObjectMixin] mixin with a parent data
/// type that implements [ContainerParentDataMixin<RenderObject>]. Such widgets
/// are expected to inherit from [MultiChildRenderObjectWidget].
///
/// See also:
///
/// * [IndexedSlot], which is used as [Element.slot]s for the children of a
///   [MultiChildRenderObjectElement].
/// * [RenderObjectElement.updateChildren], which discusses why [IndexedSlot]
///   is used for the slots of the children. ¿≈Ä⁄ ¿¿,G/// Creates an element that uses the given widget as its configuration.¿-)¿Q  ¿^¿d¿ù¿e¿f¿Ñ¿ú¿Ö¿ç¿ì¿î¿∫¿Õ  ¿N:¿a ¿v¿}¿Ö¿~¿Ü¿á¿£ÄÊ¿   ¿£¿§¿çÅ)¿bÄî/// The current list of children of this element.
///
/// This list is filtered to hide elements that have been forgotten (using
/// [forgetChild]).  ¿*¿+¿7¿8	¿çÅ¿û  ¿∂¿ƒ  ¿ ¿·  ¿ç¿é¿Åñ¿!  ¿7¿E  ¿K¿b  ¿j¿Å  ¿¿¿™ÅF¿ª  ¿”¿·  ¿Á¿  ¿™¿´¿ÙÄ¿¿  ¿¿#  ¿Ù¿ı¿∏Ä ¿…  ¿’¿ﬁ  ¿∏¿π¿ÜÉ?¿ã  ¿∞¿π   ¿…Ä·¿›  ¿Î¿Û  ¿˝¿  ¿…¿ ¿ÆÇz¿ø  ¿≈¿œ  ¿÷¿ﬂ  ¿Æ¿Ø¿,ÅÊ¿=  ¿D&¿b  ¿,¿- ¿!Å±¿!”Ä∂/// A wrapper class for the [Element] that is the creator of a [RenderObject].
///
/// Setting a [DebugCreator] as [RenderObject.debugCreator] will lead to better
/// error messages. ¿!‰X ¿"!¿"-:/// Create a [DebugCreator] instance with input [Element].¿".¿"4   ¿"@>¿"w&/// The creator of the [RenderObject].  ¿"ÉB¿"ñ   ¿"É¿"Ñ ¿$yÑ›¿&‹ÇQ/// A value for [Element.slot] used for children of
/// [MultiChildRenderObjectElement]s.
///
/// A slot for a [MultiChildRenderObjectElement] consists of an [index]
/// identifying where the child occupying this slot is located in the
/// [MultiChildRenderObjectElement]'s child list and an arbitrary [value] that
/// can further define where the child occupying this slot fits in its
/// parent's child list.
///
/// See also:
///
///  * [RenderObjectElement.updateChildren], which discusses why this class is
///    used as slot values for the children of a [MultiChildRenderObjectElement].¿&Ë¿&Ë¿' u ¿'Q¿'\H/// Creates an [IndexedSlot] with the provided [index] and slot [value].¿']
¿'c  ¿'i
¿'o   ¿'yt¿'Ëb/// Information to define where the child occupying this slot fits in its
/// parent's child list. ¿'ÚH¿(56/// The index of this slot in the parent's child list. ¿):¿).   ¿)¿)¿(?Ä◊¿(Y  ¿(\¿(d  ¿(?¿(@¿&À¿&Ã¿)XÅ|¿)»i/// Used as a placeholder in [List<Element>] objects when the actual
/// elements are not yet determined. ¿)È, ¿)È¿)ı  ¿)˙¿)ˇ¿*¿* ¿*¿*¿*¿*-¿*- ¿*8¿*D¿*E¿*KC¿*`   ¿*K¿*L¿*í@¿*£   ¿*í¿*ì ¿*÷ÄÅ¿*‹  ¿*˚ ¿+¿+     ¿+B¿+'   ¿+¿+  ¿ ÄìÇS¿ ÄﬁE/// Tracks the lifecycle of [State] objects when asserts are enabled.  ¿ ÄÚb¿ ÅMV/// The [State] object has been created. [State.initState] is called at this
/// time. ¿ ÅYÄ¨¿ Å˙Äú/// The [State.initState] method has been called but the [State] object is
/// not yet ready to build. [State.didChangeDependencies] is called at this time. ¿ Ç
c¿ ÇhY/// The [State] object is ready to build and [State.dispose] has not yet been
/// called. ¿ Çrq¿ Ç‹e/// The [State.dispose] method has been called and the [State] object is
/// no longer able to build.    ¿<0F¿<5   ¿<K¿<K  ¿<V¿<V  ¿<`¿<`  ¿<l¿<l       ¿«Ä∂¿Ã  ¿Á¿Ô   ¿"…ÅÆ¿"›  ¿"ˆ¿#  ¿#¿#  ¿#%¿#2  ¿#<*¿#S   ¿+√Äª¿+»  ¿+ﬂ¿+˜  ¿+˛¿,    ¿ ÇËf¿ É!0/// The signature of [State.setState] functions.  ¿ É=¿ ÉK   ¿DÅ¿D˚Ä”/// Signature for the callback to [BuildContext.visitChildElements].
///
/// The argument is the child being visited.
///
/// It is safe to call `element.visitChildElements` reentrantly within
/// this callback.  ¿E¿E#   ¿ôÇ#¿zÅÿ/// Signature for the constructor that is called when an error occurs while
/// building a widget.
///
/// The argument provides information regarding the cause of the error.
///
/// See also:
///
///  * [ErrorWidget.builder], which can be set to override the default
///    [ErrorWidget] builder.
///  * [FlutterError.reportError], which is typically called with the same
///    [FlutterErrorDetails] object immediately prior to [ErrorWidget.builder]
///    being called.  ¿ü¿¥   ¿Å÷¿¶Åó/// Signature for a function that creates a widget, e.g. [StatelessWidget.build]
/// or [State.build].
///
/// Used by [Builder.builder], [OverlayEntry.builder], etc.
///
/// See also:
///
///  * [IndexedWidgetBuilder], which is similar but also takes an index.
///  * [TransitionBuilder], which is similar but also takes a child.
///  * [ValueWidgetBuilder], which is similar but takes a value and a child.  ¿∆¿‘   ¿ﬁÅÚ¿àÅ°/// Signature for a function that creates a widget for a given index, e.g., in a
/// list.
///
/// Used by [ListView.builder] and other APIs that use lazily-generated widgets.
///
/// See also:
///
///  * [WidgetBuilder], which is similar but only takes a [BuildContext].
///  * [TransitionBuilder], which is similar but also takes a child.
///  * [NullableIndexedWidgetBuilder], which is similar but may return null.  ¿Ø¿Ω  ¿≈	¿    ¿“Ñ¿ûÉ√/// Signature for a function that creates a widget for a given index, e.g., in a
/// list, but may return null.
///
/// Used by [SliverChildBuilderDelegate.builder] and other APIs that
/// use lazily-generated widgets where the child count is not known
/// ahead of time.
///
/// Unlike most builders, this callback can return null, indicating the index
/// is out of range. Whether and when this is valid depends on the semantics
/// of the builder. For example, [SliverChildBuilderDelegate.builder] returns
/// null when the index is out of range, where the range is defined by the
/// [SliverChildBuilderDelegate.childCount]; so in that case the `index`
/// parameter's value may determine whether returning null is valid or not.
///
/// See also:
///
///  * [WidgetBuilder], which is similar but only takes a [BuildContext].
///  * [TransitionBuilder], which is similar but also takes a child.
///  * [IndexedWidgetBuilder], which is similar but not nullable.  ¿Œ¿‹  ¿‰	¿È   ¿ÒÇ+¿ ”ÅŸ/// A builder that builds a widget given a child.
///
/// The child should typically be part of the returned widget tree.
///
/// Used by [AnimatedBuilder.builder], as well as [WidgetsApp.builder] and
/// [MaterialApp.builder].
///
/// See also:
///
///  * [WidgetBuilder], which is similar but only takes a [BuildContext].
///  * [IndexedWidgetBuilder], which is similar but also takes an index.
///  * [ValueWidgetBuilder], which is similar but takes a value and a child.  ¿ ˜¿!  ¿!¿!   ¿ÿÇ§¿	£Äƒ/// Mixin this class to allow receiving [Notification] objects dispatched by
/// child elements.
///
/// See also:
///   * [NotificationListener], for a widget that allows consuming notifications.    ¿	…Å1¿
–Ä˜/// Called when a notification of the appropriate type arrives at this
/// location in the tree.
///
/// Return true to cancel the notification bubbling. Return false to
/// allow the notification to continue to be dispatched to further ancestors. ¿
ﬂ¿
Ì   ¿
˛|¿   ¿
˛¿
ˇ áH*áY áfápáq  ô¢ <ÄÜÄ§Ä•Ä∫Ä‘ÄÌÄÓÅÅAÅBÅYÅnÅãÅ™ÅœÅÔÅÇÇ)Ç6ÇGÇ[ÇhÇtÇâÉÉqÉ¡ÑÑwÑxÑêÑÆÑ‘ÖÖbÖ≠ÖÆÖ˝ÜHÜõÜƒÜ«Ü“Ü·áááá/áEáGáHátáuá}á~á√á«àà/à3àAàEàpà¡àŒàÒâ<â[â\â†â∑â∏âƒâÁää'ä-äKäuäyäzäÜäœä–ä‹äÚããCãIãúã†ã¢ã£ã”ã◊å'åtåªåøçç\ç´ç¸é
ééZé©éıèè!èqè¶è™èˆê2ê6êFêJêôêÿê‹ë)ëxë¡ííaítíxí≈ììì"ì&ìwìÑìñìﬁî/î@îFîñî®î¯î˘ï%ï+ïyïåïΩïæñññañgñ∏ñœóóóHóNóûóµóÌóÓò?òEòêò·ôô2ô`ôÜôΩôÓööö$ö*ö;ö?öAöBököoöºö‰öˆõEõxõ~õ≤úúDúEúbúcúoúÖú úıù*ù0ù`ùdùfùgù≥ù∑ûûû#ûtû∂üüSühülüxü£ü‘ü⁄ü‚üÊ†0†}†à†å†Õ†ﬂ°-°°∫°ª°ˇ¢¢¢"¢E¢q¢Ö¢ã¢≤¢‹¢‡¢·¢Ì£££)£?£Å£Á§D§a§ñ§ª••
•?•C•E•F•x•|•À¶¶\¶`¶Ø¶˙ß4ßÇß¢ß¶ß˜®G®í®‡®Ù®¯©F©ë©‡™0™~™œ™Ÿ™›™Î™Ô´;´e´±´◊¨$¨W¨b¨ï¨Ω¨€¨‹≠≠%≠l≠ΩÆÆ_Æ≤ÆæÆƒØØeØ≥Ø˛∞O∞p∞v∞«∞ﬁ∞‰∞Ù∞˙±-±?±@±z±Ä±”≤%≤r≤¬≤ÿ≤Â≤≥≥≥?≥K≥f≥°≥œ≥”≥‘≥‡¥%¥P¥ô¥ù¥û¥™¥∏¥Ï¥Ì¥˘µµ-µ.µ~µÆµ¥∂∂T∂ô∂ü∂∑>∑O∑ç∑«∑Ú∑ˆ∑˜∏A∏ñ∏ÍπCπwπ°πÃπ⁄πﬁπ‡π·∫∫∫g∫∂ª ªHªôªùª‡ª‰º0ºxº»ΩΩaΩÜΩäΩ¨Ω∞ΩˇæKæõæ≥æ∑øøYø£øæø¬¿ @	¿ @,¿ @0¿ @Å¿ @—¿ A ¿ Aq¿ A¿¿ B¿ BC¿ BG¿ Bò¿ B÷¿ B⁄¿ C*¿ Cz¿ CÀ¿ C‚¿ CÊ¿ D1¿ D{¿ DÀ¿ E¿ Ej¿ Eª¿ F
¿ F ¿ Fk¿ F∂¿ G¿ GX¿ G•¿ GÒ¿ HB¿ H¿ Hí¿ Hñ¿ HË¿ I¿ I#¿ If¿ Ij¿ I~¿ IÇ¿ I’¿ IŸ¿ J*¿ JE¿ JI¿ JU¿ JÉ¿ J©¿ J≠¿ JΩ¿ JË¿ K"¿ K*¿ K0¿ K8¿ KH¿ KL¿ K`¿ Kd¿ K≤¿ KÀ¿ Kœ¿ K€¿ L¿ L¿ L*¿ LX¿ Ll¿ Lv¿ Lz¿ Lì¿ LÆ¿ L≤¿ L¬¿ LÌ¿ M#¿ M+¿ M1¿ M9¿ MI¿ MM¿ Mñ¿ MÂ¿ N¿ N¿ N¿ N¿ Nj¿ Nî¿ N‡¿ O¿ O6¿ O^¿ OÜ¿ Oá¿ Oÿ¿ Oﬁ¿ P¿ P'¿ Pe¿ Pf¿ P±¿ P∑¿ Q¿ QX¿ Q£¿ Qˆ¿ R¿ R$¿ Ro¿ Rº¿ S¿ SV¿ Sí¿ Sò¿ SË¿ T6¿ T[¿ Ta¿ TØ¿ T¯¿ UE¿ Ué¿ UŸ¿ V¿ V"¿ V_¿ Ve¿ V≥¿ Vø¿ V˚¿ W6¿ W<¿ WÑ¿ W§¿ W™¿ W∫¿ W¿¿ X¿ X&¿ XL¿ XN¿ XO¿ Xt¿ Xx¿ X«¿ Y¿ Y^¿ Y•¿ Y©¿ Y¯¿ ZG¿ Zë¿ ZŸ¿ [*¿ [.¿ [z¿ [¿¿ \¿ \_¿ \¢¿ \π¿ \Ω¿ ] ¿ ]¿ ]T¿ ]ô¿ ]Á¿ ^8¿ ^l¿ ^p¿ ^≠¿ ^ˆ¿ _E¿ _è¿ _‡¿ `0¿ `V¿ `Z¿ `§¿ `Ú¿ a<¿ aá¿ a”¿ b"¿ bp¿ bø¿ c¿ c`¿ cÆ¿ c˛¿ dJ¿ dN¿ dp¿ dt¿ dØ¿ d≥¿ e¿ eT¿ e£¿ eÛ¿ fC¿ fè¿ f‡¿ f¸¿ g ¿ gJ¿ gï¿ gÊ¿ h/¿ hÄ¿ hõ¿ hü¿ hÊ¿ i¿ i¿ iY¿ i†¿ i¿ j¿ j"¿ js¿ j¡¿ k¿ kW¿ kä¿ ké¿ kŸ¿ l*¿ l|¿ lŒ¿ m¿ mq¿ mô¿ mù¿ mÈ¿ n	¿ n¿ n]¿ nÆ¿ n˝¿ oJ¿ oñ¿ o„¿ p.¿ p|¿ p°¿ p•¿ p¿ q<¿ qÄ¿ qœ¿ q˝¿ r¿ rI¿ rM¿ rü¿ r÷¿ r⁄¿ s¿ s!¿ s5¿ s9¿ sÉ¿ sá¿ sœ¿ t¿ tf¿ tj¿ tv¿ t§¿ tÀ¿ tœ¿ tﬂ¿ u¿ u"¿ u&¿ u]¿ um¿ uò¿ u“¿ u⁄¿ u‡¿ uË¿ u¯¿ v¿ v¿ v[¿ vß¿ v«¿ vÀ¿ v◊¿ vˇ¿ w¿ w%¿ wS¿ wg¿ wq¿ wu¿ wé¿ w©¿ w≠¿ wΩ¿ wÓ¿ wÙ¿ w¯¿ x#¿ x=¿ xA¿ xU¿ x}¿ xÖ¿ xâ¿ xô¿ xƒ¿ xﬁ¿ x˝¿ y>¿ y]¿ yh¿ yp¿ yv¿ y~¿ yé¿ yí¿ y€¿ z*¿ zM¿ zQ¿ z_¿ zc¿ z®¿ zı¿ {(¿ {t¿ {ö¿ {…¿ {Ò¿ |¿ |¿ |i¿ |o¿ |¨¿ |∏¿ |Ù¿ |ı¿ }F¿ }L¿ }ì¿ }»¿ }Œ¿ }‹¿ }Ï¿ ~%¿ ~/¿ ~5¿ ~Ç¿ ~—¿ "¿ q¿ ¡¿ Ä¿ Ä#¿ Ä0¿ Ä;¿ Äê¿ Äí¿ Äì¿ ÄŸ¿ Ä¿ Å?¿ ÅK¿ ÅV¿ ÅW¿ Å§¿ Å¯¿ Ç¿ Ç¿ ÇX¿ Çf¿ Ço¿ Çp¿ Çª¿ Ç⁄¿ ÇÂ¿ ÇÁ¿ ÇË¿ É¿ ÉO¿ ÉP¿ Éâ¿ Éç¿ É‹¿ Ñ(¿ Ñs¿ Ñ∫¿ Ñæ¿ Ñ˛¿ ÖK¿ Öô¿ ÖË¿ Ü2¿ Üy¿ Ü…¿ á¿ ác¿ ág¿ áô¿ áù¿ á÷¿ á˚¿ àH¿ àó¿ àÂ¿ â2¿ âO¿ âù¿ âÁ¿ ä5¿ ä~¿ äç¿ äﬁ¿ ã*¿ ã}¿ ãÀ¿ å¿ ål¿ å±¿ ç ¿ çH¿ çî¿ ç›¿ çÌ¿ é:¿ éÉ¿ é–¿ è!¿ èr¿ è¬¿ ê¿ ê\¿ êõ¿ êÈ¿ ë2¿ ëx¿ ë¬¿ í¿ í^¿ íØ¿ í¸¿ ìI¿ ìÇ¿ ìœ¿ î¿ îh¿ îµ¿ ï¿ ïO¿ ïô¿ ï®¿ ï˘¿ ñI¿ ñó¿ ñ‚¿ ó¿ óS¿ ó†¿ ó¿ ò5¿ ò9¿ òG¿ òK¿ òú¿ òÿ¿ ô%¿ ôX¿ ô§¿ ô ¿ ö¿ ö¿ öY¿ öz¿ öÄ¿ öÕ¿ õ¿ õf¿ õØ¿ ú ¿ úO¿ úb¿ ú~¿ úå¿ úç¿ úÕ¿ ú”¿ ù ¿ ùo¿ ù±¿ ù≤¿ ù˝¿ û)¿ ûc¿ ûd¿ ûù¿ û£¿ ûÓ¿ ü7¿ üÜ¿ ü◊¿ üÓ¿ üÙ¿ †=¿ †g¿ †Ñ¿ †î¿ †≤¿ †Œ¿ °F¿ °–¿ °€¿ °„¿ °ˆ¿ ¢ ¿ ¢¿ ¢¿ ¢7¿ ¢8¿ ¢r¿ ¢x¿ ¢¬¿ £¿ £T¿ £•¿ £ƒ¿ £ ¿ §¿ §4¿ §5¿ §n¿ §t¿ §√¿ §’¿ §€¿ •$¿ •u¿ •º¿ •¬¿ •Ù¿ ¶=¿ ¶Ö¿ ¶“¿ ß¿ ß>¿ ßD¿ ßv¿ ß¬¿ ®¿ ®&¿ ®Z¿ ®`¿ ®u¿ ®{¿ ®Ã¿ ©¿ ©m¿ ©Ç¿ ©à¿ ©◊¿ ™ ¿ ™¿ ™¿ ™3¿ ™p¿ ™t¿ ™u¿ ™≠¿ ™≥¿ ´¿ ´G¿ ´ì¿ ´›¿ ¨¿ ¨¿ ¨b¿ ¨~¿ ¨Ñ¿ ¨‘¿ ≠¿ ≠"¿ ≠Q¿ ≠W¿ ≠¶¿ ≠ﬁ¿ ≠Ô¿ ≠¸¿ Æ.¿ Æ/¿ Æa¿ Æg¿ Æ±¿ Æ˙¿ ØI¿ ØO¿ Ø_¿ Øe¿ ØÉ¿ Ø∞¿ Ø‰¿ ØÒ¿ ∞¿ ∞¿ ∞¿ ∞j¿ ∞p¿ ∞ª¿ ∞Û¿ ∞˘¿ ±¿ ±4¿ ±>¿ ±D¿ ±ë¿ ±‡¿ ≤¿ ≤¿ ≤k¿ ≤∫¿ ≥¿ ≥¿ ≥¿ ≥k¿ ≥∏¿ ≥ı¿ ≥˚¿ ¥H¿ ¥ñ¿ ¥Ê¿ µ6¿ µh¿ µn¿ µ|¿ µ´¿ µ¡¿ µ◊¿ µ„¿ ∂+¿ ∂Z¿ ∂ù¿ ∂•¿ ∂Ø¿ ∂µ¿ ∑¿ ∑O¿ ∑}¿ ∑ä¿ ∑≠¿ ∑≈¿ ∑’¿ ∏¿ ∏J¿ ∏é¿ ∏™¿ π¿ π`¿ π∑¿ π¯¿ ∫¿ ∫¿ ∫C¿ ∫ö¿ ∫Ô¿ ªD¿ ªY¿ ªf¿ ª{¿ ª–¿ º$¿ ºs¿ º√¿ º–¿ º‹¿ º‰¿ Ω-¿ Ωe¿ Ω®¿ ΩΩ¿ æ¿ æp¿ æÕ¿ æ˙¿ ø¿ ø¿ ø¿ ø.¿ ø8¿ ød¿ øt¿ øí¿ ø ¿ ¿¿ ¿1¿ ¿à¿ ¿…¿ ¿÷¿ ¿Î¿ ¡E¿ ¡°¿ ¡ﬁ¿ ¡Î¿ ¡˜¿ ¡ˇ¿ ¬O¿ ¬q¿ ¬Ñ¿ ¬é¿ ¬Æ¿ ¬≤¿ ¬≥¿ ¬Î¿ ¬Ò¿ √?¿ √ã¿ √‹¿ ƒ,¿ ƒv¿ ƒ∆¿ ≈¿ ≈d¿ ≈¥¿ ∆¿ ∆R¿ ∆Ä¿ ∆Ü¿ ∆—¿ « ¿ «a¿ «g¿ «¥¿ «ﬁ¿ «‰¿ «Ù¿ «˙¿ »J¿ »n¿ »{¿ »å¿ »§¿ »•¿ »Ò¿ …¿ …¿ …e¿ …∞¿ …Á¿ …Ì¿  <¿  â¿  ÷¿ À#¿ Às¿ À¿¿ Ã¿ ÃT¿ Ã§¿ ÃÏ¿ Õ=¿ ÕC¿ Õë¿ Õﬁ¿ ÕÙ¿ Õ˙¿ ŒI¿ Œq¿ Œw¿ Œá¿ Œç¿ Œ”¿ œ¿ œ*¿ œ;¿ œQ¿ œR¿ œñ¿ œú¿ œÊ¿ –4¿ –É¿ –‘¿ —¿ —$¿ —s¿ —¨¿ —≤¿ —·¿ —Á¿ “4¿ “[¿ “a¿ “q¿ “w¿ “≤¿ “ø¿ “–¿ “„¿ ”¿ ”.¿ ”d¿ ”w¿ ”Å¿ ”Ö¿ ”Ü¿ ”—¿ ”◊¿ ‘&¿ ‘5¿ ‘;¿ ‘_¿ ‘â¿ ‘∏¿ ‘˝¿ ’E¿ ’ñ¿ ’Ω¿ ’√¿ ÷¿ ÷C¿ ÷I¿ ÷î¿ ÷·¿ ◊2¿ ◊{¿ ◊∑¿ ◊Ω¿ ÿ¿ ÿ\¿ ÿß¿ ÿ≠¿ ÿ˚¿ ŸD¿ Ÿì¿ Ÿ·¿ ⁄-¿ ⁄|¿ ⁄ª¿ ⁄¡¿ ⁄‹¿ ⁄‚¿ €,¿ €2¿ €Ä¿ €Œ¿ ‹¿ ‹3¿ ‹9¿ ‹Ñ¿ ‹’¿ ›%¿ ›u¿ ›¡¿ ›˚¿ ﬁ¿ ﬁR¿ ﬁú¿ ﬁÏ¿ ﬁÚ¿ ﬂB¿ ﬂê¿ ﬂ“¿ ‡!¿ ‡r¿ ‡ã¿ ‡ë¿ ‡ü¿ ‡Õ¿ ‡Ÿ¿ ‡Ù¿ ‡˙¿ ·¿ ·N¿ ·¿ ·â¿ ·ë¿ ·õ¿ ·°¿ ·Ú¿ ‚=¿ ‚ç¿ ‚⁄¿ „'¿ „4¿ „:¿ „á¿ „◊¿ „Ú¿ „¯¿ ‰¿ ‰:¿ ‰F¿ ‰X¿ ‰Ö¿ ‰ø¿ ‰…¿ ‰—¿ ‰€¿ ‰·¿ Â2¿ ÂÇ¿ Âœ¿ Ê¿ Ê=¿ ÊC¿ ÊS¿ ÊY¿ Ê±¿ Êæ¿ Ê‰¿ ÊÂ¿ Á$¿ Á*¿ Ák¿ Áµ¿ ÁÍ¿ Á¿ Ë>¿ Ëç¿ Ëì¿ Ë›¿ È)¿ Èv¿ È¿¿ ÈÁ¿ ÈÙ¿ Í¿ Í(¿ Í)¿ Í5¿ Íz¿ Í•¿ Íµ¿ Î8¿ ÎK¿ ÎU¿ Î©¿ Ï¿ Ï¿ Ï¿ Ï¿ Ïe¿ Ïq¿ Ïu¿ Ï¡¿ ÏŸ¿ Ï›¿ ÏÎ¿ ÏÔ¿ Ì;¿ Ìa¿ Ìö¿ Ì„¿ Ó¿ Ó\¿ ÓÜ¿ Ó”¿ Ô¿ Ô>¿ Ôj¿ Ô§¿ Ô›¿ Ôﬁ¿ ¿ ¿ H¿ ö¿ Ì¿ Ò6¿ ÒK¿ Òa¿ Òc¿ Òd¿ Ò±¿ ÒÃ¿ Ò–¿ Ú¿ ÚZ¿ Úö¿ Úû¿ ÚÓ¿ Û ¿ Û$¿ Û8¿ Û<¿ Ûã¿ Û–¿ Û‘¿ Û‡¿ Ù!¿ Ù8¿ ÙK¿ Ùg¿ ÙÖ¿ Ùè¿ Ùì¿ Ù™¿ ÙÆ¿ Ùæ¿ Ùˆ¿ ıR¿ ıy¿ ıõ¿ ıÔ¿ ˆ¿ ˆ#¿ ˆ+¿ ˆ/¿ ˆ?¿ ˆz¿ ˆÄ¿ ˆà¿ ˆò¿ ˆú¿ ˆ™¿ ˆÆ¿ ˆÎ¿ ˜2¿ ˜y¿ ˜º¿ ˜È¿ ¯7¿ ¯É¿ ¯≠¿ ¯˘¿ ˘J¿ ˘í¿ ˘—¿ ˘“¿ ˘ﬁ¿ ˙$¿ ˙%¿ ˙k¿ ˙Å¿ ˙á¿ ˙Õ¿ ˚¿ ˚I¿ ˚O¿ ˚õ¿ ˚…¿ ¸¿ ¸ ¿ ¸=¿ ¸f¿ ¸j¿ ¸k¿ ¸º¿ ¸Ë¿ ¸Ó¿ ˝<¿ ˝_¿ ˝ã¿ ˝å¿ ˝–¿ ˝ı¿ ˛ ¿ ˛E¿ ˛L¿ ˛f¿ ˛É¿ ˛∏¿ ˛π¿ ˇ-¿ ˇK¿ ˇi¿ ˇÉ¿ ˇ”¿ ˇ›¿ ˇË¿ ¿ x¿ É¿ î¿ ˚¿k¿t¿ô¿¨¿¿%¿G¿a¿⁄¿Â¿Ï¿¿Ò¿C¿I¿é¿Ã¿¿k¿ê¿ñ¿Ê¿0¿Å¿“¿!¿'¿s¿¨¿˘¿¿$¿W¿X¿•¿Ω¿√¿¿Z¿`¿p¿v¿∆¿’¿‚¿	¿	¿	¿	`¿	d¿	µ¿
¿
¿
T¿
ê¿
î¿
◊¿
€¿
Ô¿
Û¿>¿B¿N¿|¿î¿ß¿ƒ¿‚¿Ï¿¿	¿¿?¿ö¿€¿Û¿˚¿ˇ¿¿S¿Y¿a¿q¿u¿ô¿ù¿Ï¿?¿â¿—¿¿¿c¿≤¿—¿’¿#¿r¿¿¿¿e¿ã¿è¿Æ¿≤¿¸¿K¿U¿Y¿m¿q¿¡¿ı¿˘¿¿0¿Q¿U¿e¿ê¿©¿ƒ¿Â¿¿6¿S¿s¿¿¿”¿‰¿Û¿ ¿¿¿¿!¿1¿5¿I¿M¿ù¿„¿Á¿Û¿#¿I¿M¿]¿à¿°¿º¿›¿ˆ¿¿V¿e¿r¿}¿Ö¿ã¿ì¿£¿Ê¿Í¿¯¿¸¿H¿r¿ø¿Ú¿*¿o¿∏¿‘¿"¿O¿Ñ¿’¿¿[¿\¿h¿¶¿ß¿¯¿˛¿O¿†¿Ô¿8¿K¿Q¿°¿Ò¿=¿K¿X¿ò¿ö¿õ¿È¿3¿D¿H¿V¿Z¿®¿ ¿ ¿ \¿ è¿ ‡¿!(¿!S¿!T¿!¢¿!Æ¿!π¿!‡¿!·¿"!¿"r¿"é¿"î¿"Â¿#'¿#q¿#°¿#œ¿#‹¿#Á¿$ ¿$!¿$n¿$Ω¿$‚¿$Ë¿%6¿%Ä¿%À¿%˚¿&*¿&7¿&ê¿&ë¿&ﬂ¿')¿'_¿'l¿'≥¿'µ¿'∂¿(¿(!¿(d¿(µ¿(˝¿),¿)-¿)9¿)Ö¿)á¿)à¿)‹¿**¿*o¿*s¿*Ω¿+¿+Q¿+ì¿+›¿,.¿,v¿,∏¿,π¿,È¿,Ô¿- ¿-7¿-8¿-D¿-û¿-†¿-°¿-ı¿.A¿.ã¿.ó¿.õ¿.’¿/%¿/n¿/º¿0 ¿0'¿0+¿09¿0=¿0x¿0≈¿0‘¿1¿1k¿1è¿1ÿ¿2¿2¿2T¿2c¿2≥¿2‘¿2‰¿3"¿3k¿3í¿3∞¿3˘¿43¿4@¿4J¿4R¿4e¿4†¿4§¿4•¿4÷¿4‹¿5,¿5q¿5ø¿5Œ¿5‘¿6¿6o¿6¿¿7¿7¿7¿7S¿7s¿7y¿7î¿7Æ¿7∏¿7æ¿7€¿7Û¿8¿8#¿8-¿83¿8O¿8í¿8Ω¿8«¿8œ¿8Ÿ¿8ﬂ¿9¿9$¿92¿9j¿9ä¿9ê¿9´¿9≈¿9œ¿9’¿9Ú¿:
¿:T¿:ì¿:≈¿:”¿:›¿:„¿:ˇ¿;K¿;¿;â¿;ë¿;õ¿;∫¿;ª¿;«¿<¿<!¿<"¿<#¿</¿<0¿<I¿<T¿<^¿<j¿<u¿<w¿<x¿<í¿<™¿<ﬂ¿<‡¿=¿=F¿=V¿=à¿=∑¿>¿>¿>¿>&¿>0¿>\¿>Ñ¿>õ¿>£¿>∫¿>¸¿? ¿?¿?¿?,¿?x¿?è¿?ô¿?ƒ¿?‘¿?ı¿@¿@¿@¿@¿@O¿@ê¿@™¿@Ì¿A ¿A0¿AR¿Ae¿Ao¿As¿At¿Aí¿A®¿A“¿A˜¿B6¿B]¿Bc¿B¿BÉ¿BÑ¿B•¿Bª¿B‰¿C	¿C(¿Ci¿Cm¿Cn¿Cñ¿C¨¿Cº¿CË¿C˚¿D¿D¿D¿D¿D¿Dd¿Dh¿Dï¿Dô¿D‡¿DÛ¿E,¿E-¿Ej¿En¿E≠¿Eˆ¿E˙¿FF¿Fó¿F‰¿G5¿Gi¿Gm¿Gπ¿H¿HR¿HV¿H•¿HÙ¿IC¿Iì¿I‰¿J4¿JÇ¿J—¿K¿Kg¿Kö¿Kû¿KÌ¿L8¿LÅ¿L—¿M¿M¿M*¿M8¿Ma¿Mí¿M©¿M‹¿MÛ¿N¿N>¿Ni¿Ná¿N√¿NÓ¿O¿OG¿Oj¿Oï¿O∫¿O·¿P¿PI¿PÄ¿P¨¿PÚ¿Q ¿QX¿Qy¿Qó¿Q¥¿Qœ¿QË¿Qˇ¿R¿R'¿R8¿RG¿RT¿R^¿Rg¿Rm¿Ru¿Ry¿R…¿S¿Se¿SÜ¿Sä¿SÕ¿S—¿T¿Tm¿Tã¿TŸ¿TÓ¿TÔ¿U9¿Uq¿Uä¿Uã¿U◊¿U›¿V(¿V\¿V≠¿Vœ¿W¿W9¿W?¿Wê¿W—¿W˝¿X¿X;¿XW¿XX¿Xú¿XÍ¿Y7¿YS¿YY¿Y§¿Y¿Z5¿ZÑ¿Z±¿Z∑¿[¿[W¿[¶¿[Ì¿[ˇ¿\¿\Q¿\s¿\y¿\∆¿]¿]b¿]à¿]¨¿]≠¿]Ô¿]ı¿^A¿^ç¿^÷¿^ˇ¿_¿_Q¿_s¿_y¿_ ¿`¿`g¿`¥¿`∫¿a¿aS¿a£¿a…¿a€¿a‹¿b¿b_¿be¿bÜ¿bå¿b÷¿c(¿c[¿ca¿cµ¿c„¿d=¿d>¿dí¿d„¿e1¿e{¿eº¿e¬¿f¿f¿f%¿fm¿fπ¿g¿gV¿g®¿g“¿gÿ¿h(¿hw¿h»¿i¿iI¿iO¿iù¿iÌ¿j¿j%¿jv¿j°¿jß¿j˜¿kC¿kî¿kﬂ¿l¿l
¿lC¿lä¿lŒ¿lÙ¿mL¿mM¿m¢¿mÈ¿mÔ¿n¿n%¿ne¿nk¿n∫¿n¿nˆ¿oF¿oï¿oœ¿p"¿pr¿pù¿p˜¿p¯¿qK¿qw¿q}¿q ¿r¿re¿rµ¿s¿sO¿s†¿s¿t<¿tB¿té¿tŸ¿u¿u¿uj¿u∂¿v¿vW¿v]¿v©¿v ¿w¿w¿wT¿wÖ¿wã¿w‹¿x-¿xÅ¿x‘¿y ¿yl¿yê¿yñ¿y„¿z2¿zÉ¿zµ¿zª¿{¿{R¿{ã¿{ë¿{„¿|/¿|}¿| ¿|–¿|Ê¿|Ï¿|˙¿}R¿}\¿}n¿}ü¿}†¿}Ú¿~#¿~)¿~Å¿~Õ¿~Ù¿~˙¿N¿_¿î¿ï¿Ò¿Ä"¿Ä(¿Äy¿Ä ¿Å¿Åm¿ÅΩ¿Ç
¿ÇA¿ÇG¿Çì¿Çﬁ¿É¿É¿Éo¿Éª¿Ñ	¿Ñ]¿Ñú¿Ñù¿ÑÓ¿Ö=¿Öä¿Öÿ¿Ü¿Ü¿ÜC¿ÜI¿Üú¿Ü¢¿ÜÙ¿áA¿áè¿á⁄¿à ¿à!¿àJ¿àP¿àõ¿àÎ¿â9¿âi¿âo¿âΩ¿ä	¿ä¿ä¿äh¿ä¥¿ä∫¿ã¿ãU¿ã¶¿ã˜¿å¿åC¿åD¿åá¿åç¿å‹¿ç'¿ç=¿çu¿çv¿çŒ¿ç‘¿é"¿é(¿é8¿é>¿éï¿è¿è	¿è`¿èf¿è≥¿ê%¿ê&¿êu¿êö¿ê†¿êÔ¿ëH¿ëI¿ëì¿ëÆ¿ë¥¿í ¿í7¿í9¿í:¿íg¿ík¿í∏¿ì	¿ìV¿ì|¿ìÄ¿ìÃ¿î¿î-¿î1¿î}¿îÅ¿î∞¿î¸¿ï¿ï¿ï%¿ïs¿ïΩ¿ñ¿ñ¿ñQ¿ña¿ñt¿ñ¢¿ñ®¿ñÙ¿ó@¿óä¿óÿ¿óÙ¿ò:¿òã¿òå¿ò◊¿ò‰¿ô¿ô¿ôJ¿ôK¿ô¿ô¨¿ô≠¿ô¯¿ö(¿ö.¿ö}¿öÉ¿ö–¿öÁ¿õ¿õ¿õQ¿õW¿õü¿õË¿õÈ¿ú¿ú¿úk¿ú¢¿ú®¿ú”¿úŸ¿ù#¿ùr¿ù¬¿û¿û%¿ûB¿ûC¿ûè¿û…¿ûÙ¿ü¿ü4¿üD¿ür¿ü˚¿†¿†¿†W¿†∂¿°¿°(¿°ã¿°∂¿°√¿°ÿ¿¢6¿¢Ç¿¢”¿¢‡¿¢Ï¿¢Ù¿£¿£¿£1¿£C¿£s¿§(¿§2¿§W¿§ë¿§‰¿§˚¿•U¿•¢¿•±¿•ø¿•…¿•ﬁ¿•Í¿¶¿¶#¿¶)¿¶n¿¶ô¿¶¥¿¶∫¿¶€¿¶¸¿ß¿ß:¿ßw¿ß¿ßí¿ßú¿ß†¿ß°¿ß¡¿ß˚¿ß¸¿®2¿®8¿®c¿®è¿®Æ¿®”¿®‘¿©$¿©F¿©L¿©ú¿©Ω¿©Á¿™¿™,¿™<¿™]¿™p¿™z¿™Ñ¿™ñ¿™¶¿™∏¿™€¿™¿™¸¿´¿´)¿´-¿´.¿´z¿´∆¿´¸¿¨¿¨P¿¨ê¿¨ñ¿¨„¿≠/¿≠¿≠¡¿≠Î¿≠Ò¿Æ?¿Æé¿Æø¿Æ≈¿Æ˙¿Ø ¿Ø:¿Ø@¿Øá¿Ø‘¿∞"¿∞/¿∞\¿∞ù¿∞”¿∞·¿∞Á¿±¿±+¿±H¿±X¿±z¿±Ÿ¿±·¿≤¿≤¿≤2¿≤<¿≤U¿≤à¿≤ö¿≤Ã¿≥¿≥8¿≥e¿≥ò¿≥¡¿≥Œ¿≥ÿ¿≥Ì¿≥˘¿¥¿¥$¿¥N¿¥W¿¥]¿¥g¿¥í¿¥∞¿¥”¿¥˛¿µ¿µV¿µï¿µ√¿µ⁄¿µË¿∂¿∂$¿∂:¿∂N¿∂d¿∂´¿∂‰¿∑%¿∑S¿∑l¿∑|¿∑Ü¿∑é¿∑∏¿∑‰¿∏¿∏'¿∏J¿∏Å¿∏¢¿∏»¿∏‹¿πF¿πÇ¿π◊¿π˜¿∫\¿∫∂¿∫«¿∫‡¿ªG¿ªÆ¿º¿ºg¿ºx¿º§¿º◊¿º¿Ω+¿Ω<¿Ωh¿Ωﬂ¿Ω¯¿æ3¿æD¿æT¿æ`¿æw¿æÖ¿æÈ¿ø
¿øA¿øW¿øõ¿ø¸¿¿
¿¿#¿¿3¿¿Q¿¿~¿¿≠¿¿∫¿¿ƒ¿¿“¿¿Ô¿¡¿¡-¿¡n¿¡}¿¡ê¿¡À¿¬
¿¬J¿¬{¿¬Ï¿¬ˇ¿√€¿√Í¿√˜¿ƒ¿ƒ"¿ƒC¿ƒM¿ƒa¿ƒ¥¿ƒ‚¿≈¿≈@¿≈Å¿≈‰¿∆=¿∆†¿«¿«c¿«ø¿«˙¿»¿»¿»(¿»0¿»B¿»ø¿»˘¿…=¿…™¿ $¿ 2¿ <¿ Q¿ ]¿ m¿ £¿ …¿ Ô¿ ˜¿À¿ÀA¿Àl¿Àá¿À¶¿ÀÆ¿ÀÃ¿Àﬁ¿À˛¿Ã!¿ÃE¿Ãr¿Ã|¿Ãë¿Ãù¿Ã£¿Ã ¿ÃŒ¿Ãœ¿Õ/¿Õ0¿Õô¿Œ¿Œd¿Œö¿Œ≠¿Œ±¿Œ≤¿Œ·¿œ3¿œ7¿œ8¿œÖ¿œÜ¿œﬁ¿–¿–&¿–}¿–~¿–Õ¿–Ô¿—?¿—\¿—a¿—π¿—Û¿“¿“à¿“â¿“÷¿”¿”H¿”I¿”ï¿”•¿”√¿”‡¿‘¿‘.¿‘8¿‘<¿‘=¿‘y¿‘â¿‘∫¿‘‚¿’¿’J¿’ó¿’»¿’–¿’„¿’Ì¿÷¿÷¿÷¿÷W¿÷g¿÷æ¿÷Ê¿◊#¿◊N¿◊õ¿◊£¿◊∂¿◊¿¿◊Ó¿ÿ¿ÿ¿ÿ¿ÿ¿ÿp¿ÿÄ¿ÿû¿ÿª¿Ÿ¿Ÿ<¿ŸO¿ŸY¿Ÿ]¿Ÿ^¿Ÿä¿Ÿö¿Ÿ‰¿⁄F¿⁄Ç¿⁄Ô¿€¿€¿€G¿€ì¿€·¿€Ù¿‹¿‹/¿‹;¿‹á¿‹”¿›¿›C¿›ê¿›‹¿ﬁ%¿ﬁZ¿ﬁÑ¿ﬁ™¿ﬁ‚¿ﬂ"¿ﬂm¿ﬂè¿ﬂÛ¿‡¿‡1¿‡î¿‡ß¿‡π¿‡Œ¿·¿·Y¿·{¿·›¿‚.¿‚N¿‚±¿‚ƒ¿‚÷¿‚‰¿„1¿„¿„Õ¿„Û¿‰¿‰X¿‰Ö¿‰±¿‰√¿‰’¿‰„¿Â¿ÂH¿Âu¿Â°¿Â≥¿Â≈¿Â”¿ÂÏ¿Âˇ¿Ê&¿Ê2¿Ê>¿ÊH¿Êt¿Êá¿Êë¿Êï¿Êñ¿Ê¿¿Ê–¿Á ¿ÁS¿Áó¿Á∫¿Á‰¿Ë¿ËT¿Ëã¿Ë¡¿È¿Èi¿Èä¿Èº¿È∆¿ÈŒ¿Èı¿Í¿Í\¿Í∞¿ÍÁ¿Î!¿Îp¿Î¿¿Ï¿Ï`¿Ïô¿Ì¿Ì¿Ìï¿Ì»¿Ì–¿Ì„¿ÌÌ¿ÌÒ¿ÌÚ¿Ó?¿ÓT¿ÓZ¿Óé¿Óî¿ÓÂ¿Ô¿Ô¿ÔX¿ÔÖ¿Ô≤¿Ô ¿Ô„¿¿¿¿q¿É¿ë¿ø¿Î¿ÒC¿Òü¿Ò›¿ÚO¿Úô¿Û¿Û¿Û¿ÛB¿Ûê¿ÛÓ¿Ù%¿Ùm¿ÙÜ¿Ù±¿Ù√¿Ù”¿ı¿ıK¿ım¿ıì¿ı¨¿ˆ¿ˆ)¿ˆ;¿ˆ≤¿˜¿˜p¿˜Ø¿˜ˇ¿¯¿¯K¿¯]¿¯m¿¯™¿¯Ò¿˘¿˘A¿˘Z¿˘—¿˘„¿˘ı¿˙!¿˙b¿˙û¿˙„¿˚*¿˚Ç¿˚ ¿¸¿¸b¿¸Ø¿˝¿˝M¿˝π¿˝˜¿˛G¿˛ô¿˛¿¿˛‚¿ˇV¿ˇ…¿ $¿ V¿ À¿Q¿…¿9¿¨¿Â¿¿~¿ë¿£¿±¿Ω¿—¿$¿.¿C¿O¿h¿∂¿¿!¿z¿ä¿•¿ƒ¿Ã¿“¿÷¿◊¿#¿r¿√¿‚¿Ë¿4¿¿ò¿‘¿⁄¿‰¿¿*¿`¿y¿â¿§¿√¿À¿—¿’¿◊¿ÿ¿	%¿	9¿	=¿	K¿	ù¿	«¿
¿
,¿
2¿
y¿
…¿
˚¿
¸¿¿*¿w¿{¿}¿~¿ò¿»¿…¿Ï¿	¿
¿C¿|¿ä¿ê¿¿¿ƒ¿∆¿«¿¯¿¿M¿|¿~¿¿»¿Ã¿¿m¿æ¿	¿Y¿p¿t¿¬¿¿¿=¿A¿í¿⁄¿*¿z¿¡¿¿[¿j¿µ¿¿S¿§¿Ú¿B¿Ä¿Õ¿¿m¿∫¿¿8¿á¿–¿¿a¿≤¿ˇ¿L¿ö¿Î¿¿]¿™¿∫¿¿5¿Å¿À¿—¿¿+¿I¿a¿b¿v¿ß¿œ¿–¿¯¿˛¿H¿ì¿Ã¿“¿!¿o¿Ω¿¿¿_¿Æ¿¸¿D¿J¿î¿÷¿‰¿¿ <¿ x¿ y¿ …¿ €¿ ·¿!2¿!Ç¿!ö¿!∑¿!»¿!…¿"¿"b¿"t¿"Ñ¿"æ¿#¿#¿#/¿#9¿#L¿#P¿#c¿#d¿#µ¿#À¿#ˆ¿$¿$U¿$j¿$}¿$É¿$“¿$Û¿%¿%5¿%U¿%[¿%é¿%ú¿%†¿%°¿%Ï¿&A¿&ñ¿&Ì¿'#¿'O¿'|¿'ä¿'é¿'è¿'π¿'ø¿(	¿(U¿(§¿(¿)@¿)v¿)Ç¿)£¿)∂¿)∑¿)Â¿)Î¿*1¿*Å¿*ù¿*π¿*…¿+	¿+¿+&¿+<¿+@¿+A¿+n¿+t¿+∫¿,
¿,%¿,@¿,P¿,é¿,°¿,´¿,¿¿,ƒ¿,≈¿-¿-¿-1¿-G¿-H¿-}¿-»¿-È¿-Ô¿.>¿.ä¿.™¿.∞¿.ˇ¿/O¿/d¿/j¿/ª¿0¿0W¿0ß¿0¿1=¿1é¿1…¿1ﬁ¿1‰¿1Ù¿1˙¿2¿2C¿2w¿2à¿2ï¿2´¿2Ó¿3¿3+¿31¿3U¿3í¿3¨¿3¥¿3◊¿3€¿3‹¿4¿4"¿4@¿4_¿4t¿4|¿4ù¿4£¿4µ¿4π¿4∫¿4˚¿5¿5R¿5¢¿5–¿5Û¿6¿6/¿6z¿6º¿6Ã¿6ˇ¿7&¿75¿7[¿7c¿7i¿7z¿7ç¿7ë¿7í¿7û¿7¯¿8;¿8l¿8ö¿8∏¿8À¿8”¿8‘¿9¿9\¿9h¿9ô¿9°¿9¢¿9¬¿:¿:(¿:P¿:ç¿:—¿:€¿:·¿:˘¿:˝¿:˛¿;U¿;™¿;«¿;Ÿ¿<Q¿<l¿<s¿<w¿<x¿<Ñ¿<¯¿=;¿=?¿=@¿=L¿=ø¿>¿>¿>¿>¿>K¿>ñ¿>·¿>Ù¿?/¿?3¿?4¿?}¿?ì¿?‘¿?’¿@$¿@C¿@I¿@ö¿@√¿@…¿A¿Af¿A∑¿Aˇ¿B0¿B1¿Bm¿Bs¿B¬¿B“¿Bÿ¿C&¿Cs¿C¿¿Cı¿C˚¿DK¿Di¿Do¿D¿DÖ¿Dπ¿DÛ¿EB¿Eí¿E°¿Eı¿Eˆ¿F/¿F;¿Fo¿F¿F∑¿FÃ¿F‘¿G
¿GM¿Gg¿G∏¿H¿H\¿Hà¿Hì¿Hù¿Hß¿H√¿H«¿H»¿I¿I¿I\¿I´¿I±¿J¿J¿JY¿J¨¿J≤¿K¿K;¿KA¿Kí¿K„¿L4¿L¿L®¿LÆ¿Lˇ¿M¿M¿Mf¿M¥¿M¿Mˆ¿N&¿N,¿N}¿NŒ¿O¿O•¿O´¿O¸¿PI¿Pç¿P◊¿Q%¿Qj¿Qp¿Q¡¿QŒ¿QÏ¿R9¿RV¿Rq¿Rë¿Rô¿R¨¿R≤¿R≥¿Rœ¿RË¿S¿S^¿SÆ¿T¿TY¿T¶¿TØ¿U¿U_¿U≥¿U…¿U“¿V!¿Vm¿Væ¿W¿W¿Wc¿WØ¿WÓ¿X¿X¿XK¿Xî¿Xﬂ¿Y¿Y6¿Yd¿Yn¿Yà¿Y€¿Z ¿Z.¿Z8¿Zó¿Z∏¿ZÔ¿[¿[I¿[•¿[≥¿[Ã¿[‹¿[˙¿\"¿\Q¿\^¿\h¿\â¿\™¿\À¿\’¿] ¿]¿]K¿]b¿]p¿]ä¿]ô¿]π¿]‡¿^*¿^z¿^≠¿^„¿^Î¿^¯¿_@¿_é¿_ø¿_Û¿_˘¿_˙¿`
¿`%¿`V¿`^¿`Ñ¿`¢¿`¡¿a ¿a¿a¿a%¿a&¿a;¿a?¿a@¿aä¿aê¿a·¿b-¿b{¿b∞¿b∂¿c¿c*¿c0¿c¿cœ¿d¿d;¿dA¿dê¿dƒ¿d’¿e¿e@¿e\¿ey¿eÀ¿eÂ¿e˚¿f¿f@¿fw¿fë¿f›¿g$¿gX¿gu¿g{¿gñ¿g∑¿g”¿gˇ¿h¿h¿h=¿hA¿hB¿h{¿hñ¿h”¿h◊¿hÿ¿i¿i¿i^¿i≠¿iÂ¿iÎ¿j3¿jD¿jp¿j©¿j„¿jÔ¿k!¿k;¿kX¿kw¿kê¿k¿¿k«¿l¿li¿l∫¿m¿m.¿m>¿mï¿m ¿m›¿mÁ¿n ¿n¿n¿nH¿nN¿nü¿n¿o¿o,¿oh¿o°¿oº¿oﬂ¿p¿p%¿pR¿px¿pÄ¿pÜ¿pò¿pú¿pù¿p√¿p¸¿q¿q5¿qw¿qí¿qß¿q´¿q¨¿q”¿r¿r$¿rB¿rh¿rì¿rù¿r£¿rß¿r®¿r⁄¿r‡¿s¿sY¿s©¿s›¿s„¿t¿t,¿tP¿tr¿tz¿tå¿tê¿të¿tÂ¿tÎ¿u*¿ud¿u¥¿u‰¿uÍ¿v:¿vg¿vÇ¿v¶¿vœ¿v◊¿vÏ¿v¿vÒ¿w6¿wã¿wﬂ¿x-¿x~¿xÀ¿y!¿yS¿yn¿yÅ¿yá¿yø¿y“¿yÿ¿yË¿z¿zí¿zö¿z≠¿z∑¿z‰¿z˛¿{¿{.¿{h¿{…¿|¿|l¿|Õ¿}k¿}⁄¿}Ë¿}Ú¿~L¿~^¿~m¿~x¿~ç¿~ô¿~º¿~„¿~È¿¿<¿P¿T¿U¿†¿¡¿«¿Ä¿Ä[¿Äk¿Äq¿Äø¿Å¿Å_¿Å∞¿Å∂¿Ç¿Ç¿Ç[¿Çä¿Çó¿Çµ¿ÇÚ¿É¿É¿Ém¿Éä¿ÉΩ¿Éœ¿Ñ¿Ñg¿Ñq¿ÑÜ¿Ñí¿Ñ¨¿Ñ–¿Ñ˚¿Ö¿Ö
¿Ö¿Ö¿Ö;¿ÖY¿Ö£¿Ö√¿ÖÔ¿Ü¿Ü1¿ÜJ¿ÜZ¿Üë¿Ü‰¿á¿á0¿á:¿áB¿á|¿áé¿á∂¿áÀ¿á◊¿á¸¿à@¿àA¿àX¿àh¿àá¿à¶¿àÆ¿à¥¿à∏¿àπ¿àÈ¿â¿â¿â:¿â_¿â}¿âÖ¿â—¿â‰¿âÓ¿âÚ¿âÛ¿ä@¿äj¿äp¿ä¿¿ã¿ã6¿ã<¿ã|¿ãÇ¿ãœ¿å¿ån¿åΩ¿ç¿ç¿ç9¿çT¿çw¿çë¿ç±¿é¿é¿éH¿éu¿é∏¿é¬¿é ¿é›¿éÁ¿éÎ¿éÏ¿è<¿èá¿èå¿è‰¿ê¿ê,¿êë¿êí¿ê·¿ë¿ë#¿ëp¿ëè¿ëï¿ë„¿í3¿íÄ¿íì¿íô¿íÁ¿ì¿ì¿ì&¿ìJ¿ìñ¿ì‡¿î.¿îy¿î»¿îˆ¿ï¿ï1¿ïk¿ïs¿ïÜ¿ïê¿ïî¿ïï¿ï”¿ñ¿ñ$¿ñ4¿ñf¿ñ©¿ñ±¿ñƒ¿ñŒ¿ñ¿ó¿ó1¿ój¿ón¿óo¿ó•¿óË¿ò ¿òA¿òr¿òv¿òw¿òΩ¿ò√¿ô¿ôd¿ô≠¿ô˝¿ö¿öS¿öY¿ö®¿ö–¿ö·¿öı¿õ0¿õL¿õg¿õÇ¿õ¯¿ú(¿ú{¿úº¿úÿ¿ù¿ù¿ù9¿ùK¿ùp¿ùv¿ùë¿ù∞¿ù∂¿ù∫¿ùª¿û¿û¿ûW¿û®¿ûˆ¿üA¿üí¿ü≠¿ü≥¿üÎ¿üÒ¿†A¿†G¿†î¿†æ¿†œ¿†Â¿°¿°¿°ö¿°ÿ¿¢¿¢G¿¢O¿¢†¿¢Ó¿£>¿£é¿£€¿£˜¿£˝¿§¿§M¿§Q¿§R¿§®¿§Æ¿§·¿§Ú¿•¿•I¿•M¿•N¿•ï¿•õ¿•Í¿¶8¿¶â¿¶—¿¶◊¿ß&¿ß<¿ßB¿ßè¿ß›¿®¿®¿®g¿®m¿®∫¿®·¿®Ú¿©¿©@¿©°¿©º¿©◊¿™¿™B¿™^¿™å¿™í¿™‹¿´¿´$¿´>¿´o¿´s¿´t¿´Ä¿´•¿´µ¿´Ó¿¨&¿¨n¿¨ä¿¨⁄¿≠¿≠^¿≠Æ¿≠‘¿≠·¿ÆB¿ÆN¿ÆV¿Æi¿Æs¿Æå¿Æê¿Æë¿Æù¿Æ∞¿Æ¿¿Æ˘¿ØI¿Øx¿Ø∞¿Ø¿∞¿∞]¿∞ô¿∞‡¿∞Ì¿±@¿±L¿±T¿±w¿±Ø¿±Ë¿≤¿≤V¿≤¶¿≤˜¿≥D¿≥à¿≥ï¿≥Æ¿≥√¿¥¿¥e¿¥π¿µ¿µ,¿µ9¿µR¿µ•¿µ±¿µπ¿µÃ¿µ÷¿∂¿∂!¿∂C¿∂{¿∂ø¿∂‘¿∑'¿∑|¿∑–¿∏#¿∏Y¿∏f¿∏π¿∏≈¿∏Õ¿∏˜¿π/¿πo¿πÑ¿π«¿∫¿∫d¿∫™¿∫ˆ¿ª¿ª$¿ªw¿ªƒ¿ª–¿ªÿ¿º ¿º8¿ºë¿º¶¿º˚¿ΩN¿Ωü¿Ω–¿Ω›¿æ0¿æ}¿æâ¿æë¿æª¿æ’¿ø¿øo¿øÑ¿ø÷¿¿)¿¿x¿¿ ¿¡¿¡!¿¡t¿¡‘¿¡‡¿¡Ë¿¬
¿¬B¿¬©¿¬æ¿√¿√u¿√œ¿ƒ&¿ƒL¿ƒY¿ƒ¨¿≈¿≈!¿≈{¿≈√¿≈–¿≈‹¿≈‰¿≈˜¿∆¿∆&¿∆F¿∆L¿∆]¿∆a¿∆b¿∆î¿∆º¿∆Ë¿∆È¿«¿«.¿«g¿«ü¿«¿»¿»]¿»t¿»Å¿»ñ¿»Â¿…E¿…Ñ¿…ë¿…ù¿…•¿…∏¿…¬¿…”¿…◊¿…ÿ¿ 2¿ ?¿ Å¿ √¿ ƒ¿ –¿À,¿ÀJ¿À}¿Àü¿ÀŒ¿À˝¿Ã¿Ã¿Ã¿Ãe¿Ãû¿Ãˇ¿Õ¿Õa¿Õg¿Õè¿Õ†¿Õ§¿Õ•¿Õ±¿Œ¿ŒE¿Œ¶¿Œª¿Œø¿Œ¿¿œ¿œ0¿œ6¿œç¿œ·¿œÛ¿œ˘¿–	¿–\¿–i¿–ã¿–ø¿–√¿–ƒ¿–‚¿—¿—O¿—S¿—T¿—`¿—ô¿—“¿—Û¿“6¿“Y¿“_¿“Ç¿“Ü¿“á¿“ì¿“’¿”¿”/¿”N¿”é¿”ù¿”•¿”»¿”Œ¿‘¿‘D¿‘H¿‘I¿‘U¿‘õ¿‘‘¿‘ı¿’¿’;¿’{¿’†¿’®¿’À¿’—¿’˚¿’ˇ¿÷ ¿÷¿÷L¿÷Ö¿÷¶¿÷≈¿◊¿◊;¿◊C¿◊f¿◊l¿◊}¿◊Å¿◊Ç¿◊é¿◊’¿ÿ¿ÿ/¿ÿc¿ÿÜ¿ÿå¿ÿê¿ÿë¿ÿ…¿ÿœ¿Ÿ%¿Ÿv¿Ÿ«¿ŸÙ¿⁄C¿⁄}¿⁄é¿⁄Ø¿€¿€W¿€m¿€q¿€r¿€∞¿€¿¿€ı¿‹-¿‹E¿‹ã¿‹Æ¿‹ª¿›¿›(¿›{¿›ì¿›∏¿›⁄¿›Û¿ﬁG¿ﬁT¿ﬁ`¿ﬁh¿ﬁ{¿ﬁÖ¿ﬁñ¿ﬁö¿ﬁõ¿ﬁ‚¿ﬁË¿ﬂ¿ﬂH¿ﬂs¿ﬂç¿ﬂ¿¿ﬂÁ¿‡¿‡¿‡ ¿‡;¿‡A¿‡d¿‡h¿‡i¿‡∏¿‡æ¿·¿·=¿·i¿·ö¿·∑¿·“¿·È¿‚¿‚
¿‚¿‚ ¿‚!¿‚-¿‚f¿‚°¿‚•¿‚¶¿‚⁄¿‚Ê¿„D¿„E¿„Q¿„¶¿„—¿„„¿„ˆ¿‰
¿‰¿‰¿‰¿‰"¿‰g¿‰í¿‰⁄¿Â¿Âe¿Âk¿Â√¿ÊJ¿Êx¿Ê¬¿Ê˘¿Á$¿Áj¿Á•¿Á‚¿Ë1¿Ë¢¿Ëµ¿È ¿È&¿È*¿È+¿È7¿Èi¿È©¿ÈÕ¿È¸¿Í¿Í¿Í¿Í¿Íg¿ÍÉ¿Íô¿Íö¿ÍË¿Î4¿ÎQ¿ÎR¿Îç¿Î≠¿ÎÆ¿Î¸¿ÏL¿Ïò¿Ïÿ¿Ì¿ÌP¿Ìè¿Ìƒ¿Ì’¿ÌŸ¿Ì⁄¿Ó(¿ÓI¿ÓO¿Óï¿Ó‹¿Ô*¿ÔB¿Ô\¿Ôñ¿ÔÕ¿Ô€¿Ô·¿Ô¸¿5¿E¿h¿°¿À¿Ò¿Ò#¿Ò-¿Òe¿Ò¨¿Ò˝¿Ú¿Úâ¿Ú„¿Û<¿Ûî¿ÛÎ¿Ù@¿Ùq¿ÙÄ¿Ù‚¿ÙÔ¿ı(¿ı…¿ı’¿ˆ
¿ˆ¿ˆ∏¿ˆÂ¿˜¿˜W¿˜µ¿˜—¿¯'¿¯W¿¯d¿¯ƒ¿¯–¿¯ÿ¿¯Î¿¯ı¿˘¿˘¿˘¿˘-¿˘P¿˘T¿˘U¿˘£¿˘µ¿˘ª¿˙¿˙V¿˙ê¿˙Æ¿˙¡¿˙˚¿˚=¿˚K¿˚Q¿˚a¿˚ü¿˚ ¿˚Í¿¸¿¸4¿¸E¿¸o¿¸y¿¸Å¿¸î¿¸û¿¸◊¿¸˝¿˝$¿˝4¿˝v¿˝§¿˝∑¿˝¡¿˝◊¿˝Á¿˛¿˛`¿˛s¿˛}¿˛í¿˛ñ¿˛ó¿˛¿¿˛∆¿ˇ¿ˇ¿ˇ3¿ˇ5¿ˇ6¿ˇ|¿ˇü¿ˇØ¿ˇ—¿ˇÎ¿ ¿ ¿ ¿ $¿ %¿ 1¿ ¿ ¿¿ Ó¿¿Z¿`¿Å¿í¿ñ¿ò¿ô¿Â¿¸¿ ¿H¿L¿Z¿^¿•¿√¿¿]¿r¿Ω¿æ¿¿Ù¿@¿ë¿›¿¿¿H¿L¿`¿¥¿Ê¿Í¿(¿,¿y¿â¿ç¿õ¿ü¿Í¿0¿¿õ¿Œ¿¿¿[¿®¿≈¿À¿	¿	j¿	ì¿	≥¿	⁄¿
¿
=¿
>¿
|¿
Ç¿
–¿
¸¿B¿_¿~¿¿±¿∑¿ ¿G¿h¿n¿ø¿¿X¿©¿ı¿˚¿I¿ä¿—¿ ¿g¿m¿∫¿˝¿¿¿¿b¿±¿˛¿¿b¿Ä¿¬¿√¿¿&¿6¿ù¿∞¿∫¿Í¿U¿Y¿Z¿ä¿î¿∑¿Õ¿'¿¿Õ¿”¿Á¿Î¿Ï¿
¿"¿G¿H¿T¿•¿¶¿≤¿˜¿"¿C¿å¿ô¿˘¿ˇ¿¿¿¿W¿m¿q¿≠¿±¿ø¿√¿¿Q¿û¿›¿ﬁ¿/¿9¿=¿é¿í¿†¿§¿Ó¿3¿Ä¿—¿“¿#¿B¿F¿ã¿œ¿‚¿Ê¿4¿Å¿œ¿¿c¿Ø¿≥¿¡¿≈¿¿T¿ñ¿¿Ò¿#¿'¿k¿o¿∫¿’¿Ÿ¿Á¿Î¿ 5¿ ~¿ À¿!¿!¿!O¿!S¿!§¿!·¿!Â¿"¿"@¿"ä¿"¨¿"≠¿"¿¿"¡¿"‚¿"Ó¿#¿#¿#+¿#\¿#~¿#ö¿#”¿#Ê¿$¿$¿$¿$¿$n¿$¶¿$™¿$´¿$˙¿%J¿%â¿%è¿%›¿&¿&¿&G¿&a¿&ü¿&≤¿&º¿&Œ¿&Ô¿'¿'¿''¿'9¿'[¿'p¿'|¿'™¿'√¿'„¿(¿(%¿(S¿(`¿(q¿(™¿(∆¿)¿)¿)¿)"¿)2¿)Ä¿)À¿)·¿*"¿*(¿*2¿*c¿*Å¿*ö¿*Ω¿*‹¿+
¿+¿+(¿+a¿+}¿+∏¿+≈¿+–¿+Ÿ¿,¿,¿,¿,¿,c¿,Ø¿,√¿,–¿,‚¿,„¿,Ô¿-¿-8¿-P¿-V¿-Z¿-[¿-g¿-ã¿-®¿-ª¿-Ÿ¿-›¿-ﬂ¿-‡¿.%¿.W¿.°¿.”¿.‘¿.‡¿/¿/¿/*¿/U¿/r¿/ì¿/¶¿/µ¿/π¿/ª¿/º¿0 ¿01¿0{¿0§¿0À¿0„¿0Û¿1#¿1[¿1«¿1„¿26¿2}¿2“¿2ﬂ¿2Î¿2Û¿3¿3¿34¿3O¿3[¿3x¿3«¿4¿40¿47¿4S¿4ñ¿4ö¿4õ¿4ß¿4Œ¿4œ¿5¿5¿5d¿5¥¿5€¿6	¿6*¿6+¿67¿6M¿6ê¿6™¿6∞¿6»¿6Ã¿6Õ¿6Ÿ¿6¿73¿7=¿7u¿7≈¿7◊¿8¿8F¿8ó¿8¸¿9¿9l¿9π¿9»¿9÷¿9‡¿9ı¿:¿:¿:J¿:P¿:`¿:†¿:≥¿:Ω¿:‡¿:¿;*¿;=¿;G¿;`¿;d¿;e¿;q¿;ã¿;≠¿;“¿;¯¿;˛¿<¿<¿<¿<+¿<U¿<r¿<ì¿<»¿=¿=\¿=l¿=¿=≠¿=∑¿=Ô¿>N¿>`¿>ï¿>œ¿?&¿?í¿?©¿@¿@U¿@d¿@r¿@|¿@ë¿@ù¿@≠¿@Ê¿@Ï¿@˚¿@ˇ¿A ¿A¿A ¿A6¿AL¿Aù¿AÎ¿B"¿BÇ¿Bò¿Bú¿Bù¿B©¿Bø¿B◊¿BÔ¿BÛ¿BÙ¿C ¿C¿C(¿C=¿CM¿Cê¿C•¿C≠¿C„¿D7¿DQ¿D∂¿E¿E¿E¿E ¿E;¿EÖ¿Eπ¿EÃ¿E–¿E—¿E›¿F0¿FN¿F^¿Fô¿F‹¿G¿GΩ¿GŸ¿H:¿Hì¿HÂ¿I:¿I[¿Ih¿I}¿IÌ¿J_¿Jπ¿J∆¿J“¿J⁄¿K¿KU¿K‚¿K˛¿LX¿L´¿L˙¿M6¿Më¿Mû¿M≥¿N	¿N^¿Nû¿N˜¿O¿O¿O.¿Oh¿O√¿P¿Pe¿Pü¿P¨¿P∏¿P¿¿P”¿P›¿Q6¿Q:¿Q;¿Qâ¿QŸ¿R(¿Ra¿Rg¿R∂¿RÔ¿S?¿Sp¿Só¿Sò¿S§¿S≈¿SË¿T¿T¿T¿T¿Tq¿Tú¿TÆ¿T¡¿T’¿TÎ¿TÚ¿Tˆ¿T˜¿U¿UH¿Us¿Uÿ¿U‹¿Uﬁ¿Uﬂ¿V ¿VW¿VÄ¿V™¿V´¿V∑¿VÍ¿VÎ¿V˜¿W¿WW¿Ws¿Wî¿W±¿W“¿WÍ¿W˝¿X¿X¿X¿XJ¿XP¿X†¿XÎ¿Y
¿Y¿YI¿Yg¿Yk¿Yl¿Y∏¿Y«¿YÕ¿Z¿Z[¿Zh¿Zü¿Z°¿Z¢¿ZË¿[-¿[w¿[Æ¿[Ø¿[Â¿\¿\@¿\i¿\x¿\±¿\Ê¿\Ó¿\Ù¿]¿]#¿]$¿]s¿]π¿]–¿]÷¿^#¿^t¿^ü¿^•¿^˘¿_C¿_ì¿_©¿_Ø¿` ¿`J¿`ó¿`ù¿`Í¿a9¿a?¿as¿aº¿a¬¿b¿b¿b]¿b≠¿b˝¿cL¿cú¿cË¿d¿dW¿dv¿d¶¿dÏ¿e¿e¿e¿e¿eT¿eâ¿eç¿eè¿eê¿e÷¿f¿fN¿fÄ¿fÅ¿f ¿fÀ¿f◊¿fı¿g.¿gÉ¿g¶¿gı¿h¿h?¿hE¿hx¿h|¿h}¿hâ¿h•¿hµ¿hÿ¿hÎ¿hı¿i¿i¿i¿iV¿it¿iz¿i∫¿iÒ¿j8¿jn¿jt¿j∑¿j¿k	¿k¿k`¿kf¿kv¿k|¿k≈¿l¿lK¿l]¿l¶¿lÚ¿mB¿mh¿mu¿m§¿m«¿mÀ¿mÃ¿n¿n¿n\¿nì¿n‡¿o.¿o4¿ow¿o√¿o…¿p¿p ¿p0¿p6¿p¿pª¿q¿q¿qb¿q≥¿r¿r)¿r6¿rq¿rï¿rô¿rö¿r¿rˆ¿s?¿sé¿sß¿s≠¿s˙¿tC¿tV¿t\¿t£¿t‚¿tË¿t¯¿t˛¿uJ¿u\¿u¶¿uÔ¿v;¿vã¿v±¿væ¿v˝¿w#¿w'¿w(¿w\¿wb¿wû¿w§¿w‚¿x)¿x/¿x?¿xE¿xé¿x ¿y¿y(¿yr¿y¬¿yË¿yı¿zF¿zm¿zq¿zr¿zº¿zı¿z˚¿{3¿{9¿{|¿{à¿{¥¿{˘¿|¿|¿|#¿|$¿|u¿|§¿|™¿|ı¿}D¿}é¿}î¿}§¿}™¿}¯¿~9¿~E¿~w¿~∑¿~Ô¿¿3¿b¿ô¿¿¿ ¿Î¿˜¿Ä#¿ÄZ¿Äá¿Äç¿Äë¿Äì¿Äî¿Ä‹¿Ä‡¿Å.¿Åv¿Åï¿Åô¿Åø¿Å√¿Ç¿Ç¿ÇF¿ÇJ¿Çê¿Çî¿ÇÂ¿Ç˛¿É¿ÉP¿É\¿É`¿É´¿Éƒ¿É»¿Ñ¿Ñi¿ÑØ¿Ö ¿Ö5¿Ö9¿ÖÑ¿Ö“¿ÖÙ¿Ö¯¿Ü¿Ü¿Üb¿Ü¨¿ÜÛ¿á9¿áh¿ál¿áx¿á´¿áØ¿áø¿à¿à¿à¿àC¿àK¿àX¿à^¿àf¿àj¿àx¿à|¿à≈¿à˛¿â¿âN¿âú¿âÈ¿ä7¿äo¿äs¿ä∆¿ã¿ã`¿ã∞¿ã˛¿å6¿å:¿åÑ¿åœ¿åÈ¿åÌ¿ç¿ç¿çU¿ç¢¿çÔ¿é¿é¿é`¿é∞¿è ¿èP¿èì¿èó¿èÁ¿ê4¿êÑ¿ê’¿ë¿ëm¿ëñ¿ëö¿ëÊ¿í4¿íÖ¿í–¿í‘¿ì¿ì¿ìh¿ì∏¿ìŸ¿ì›¿î¿î¿îl¿îΩ¿ï¿ï=¿ï¿ïœ¿ñ¿ñ¿ñV¿ñ§¿ñÌ¿ñÒ¿ó>¿óã¿óÀ¿óœ¿óˆ¿ó˙¿òI¿òó¿òÊ¿ô4¿ôF¿ôJ¿ôe¿ôi¿ô¥¿ô˘¿öD¿öé¿ö€¿õ*¿õ7¿õ;¿õå¿õ÷¿ú	¿ú¿ú[¿ú´¿ú˙¿ù7¿ù\¿ù`¿ùã¿ùè¿ùÃ¿û¿ûh¿ûá¿ûã¿ûŸ¿ü)¿üI¿üM¿üj¿ün¿üπ¿†
¿†W¿†õ¿†–¿°¿°R¿°S¿°â¿°è¿°”¿°ﬂ¿¢¿¢>¿¢Y¿¢]¿¢|¿¢}¿¢û¿¢™¿¢⁄¿¢€¿£¿£¿£M¿£n¿£±¿£‘¿£⁄¿§¿§¿§¿§P¿§q¿§ú¿§ﬂ¿•¿•1¿•@¿•H¿•k¿•q¿•Å¿•±¿•∆¿•Œ¿¶¿¶|¿¶†¿¶Â¿ß¿ßf¿ßp¿ßñ¿ßû¿ß√¿ßÎ¿ß˘¿®H¿®ï¿®≈¿®ˇ¿©?¿©¥¿™¿™º¿´5¿´Â¿¨q¿¨¿¨•¿≠¿≠¿≠¿≠,¿≠6¿≠I¿≠M¿≠N¿≠Z¿≠ã¿≠≠¿≠Ω¿≠‹¿≠Ô¿≠˘¿ÆF¿Ær¿ÆÇ¿Æ¢¿Æµ¿Æø¿Æœ¿Æˆ¿Ø	¿Ø¿Ø1¿ØR¿Øf¿Øj¿Øk¿Øw¿ØØ¿ØÃ¿ØÌ¿Ø˝¿∞$¿∞7¿∞A¿∞}¿∞Å¿∞Ç¿∞´¿∞ª¿∞Ò¿±¿±¿±¿±¿±¿±9¿±u¿±y¿±z¿±ò¿±≥¿±√¿±‚¿±ı¿±ˇ¿≤J¿≤Z¿≤z¿≤ç¿≤ó¿≤´¿≤Ø¿≤∞¿≤Ô¿≤ı¿≥>¿≥è¿≥∫¿≥¿¿¥¿¥\¿¥≠¿¥¯¿µC¿µî¿µ…¿µœ¿∂ ¿∂q¿∂¬¿∑¿∑`¿∑±¿∏ ¿∏D¿∏ï¿∏ƒ¿∏ ¿π¿πP¿πû¿πÍ¿∫1¿∫¿∫Ø¿∫µ¿ª¿ªS¿ªü¿ªÓ¿º0¿ºy¿ºÃ¿Ω¿Ωh¿Ω•¿ΩÒ¿æ?¿æê¿æ®¿æµ¿øE¿øf¿øÜ¿ø∆¿ø«¿¿ ¿¿\¿¿b¿¿c¿¿§¿¿ø¿¿ﬁ¿¡¿¡#¿¡$¿¡f¿¡µ¿¬¿¬F¿¬G¿¬v¿¬ñ¿¬∏¿¬˝¿√"¿√e¿√¨¿√≠¿√ˇ¿ƒN¿ƒh¿ƒ∂¿≈¿≈O¿≈p¿≈¥¿≈‹¿∆ ¿∆S¿∆é¿∆∫¿«¿«F¿«å¿«ü¿«†¿«º¿«ÿ¿»¿»?¿»@¿»ê¿»Ê¿»Á¿…¿…¿…'¿…Ñ¿…›¿ ¿ p¿ ø¿ Œ¿ ÷¿À@¿ÀÑ¿À≤¿À“¿ÀÌ¿Ã¿Ã¿Ã¿Ã3¿Ãê¿ÃÏ¿Õ*¿ÕÇ¿Õ—¿Õ‡¿ÕË¿Œ¿Œ$¿Œ*¿Œ+¿Œc¿Œ©¿Œ“¿ŒÌ¿œ¿œL¿œß¿–¿–!¿–N¿–ç¿–†¿–«¿–”¿–›¿–˙¿—¿—¿—	¿—/¿—a¿—z¿—µ¿—“¿—˙¿“¿“B¿“d¿“§¿“«¿”¿”@¿”U¿”õ¿”∫¿”»¿”‘¿”ﬁ¿”Ê¿‘6¿‘†¿‘‰¿’T¿’Ç¿’¢¿’Ω¿’√¿’ƒ¿’È¿÷¿÷S¿÷™¿÷Ÿ¿◊	¿◊
¿◊0¿◊ç¿◊…¿ÿ¿ÿI¿ÿÑ¿ÿ¿¿Ÿ*¿Ÿn¿Ÿﬁ¿⁄¿⁄,¿⁄G¿⁄b¿⁄h¿⁄i¿⁄Æ¿⁄È¿€)¿€{¿€†¿€™¿€≤¿€∏¿‹¿‹¿‹"¿‹#¿‹/¿‹E¿‹]¿‹i¿‹á¿‹‘¿› ¿›¿›¿›¿›¿›+¿›7¿›[¿›≠¿›ƒ¿›À¿ﬁ¿ﬁ'¿ﬁ3¿ﬁQ¿ﬁõ¿ﬁ«¿ﬁŒ¿ﬂ¿ﬂ ¿ﬂ:¿ﬂ>¿ﬂ?¿ﬂâ¿ﬂ™¿ﬂ∫¿ﬂ∆¿‡¿‡1¿‡k¿‡´¿‡Ú¿·%¿·Ç¿·Ã¿·€¿·È¿·Û¿‚¿‚g¿‚∑¿„¿„N¿„´¿„≥¿„∆¿„–¿„Î¿‰!¿‰'¿‰+¿‰,¿‰8¿‰^¿‰Ä¿‰†¿‰¿¿‰›¿Â3¿Â7¿Â8¿ÂD¿Âq¿Â£¿Â∏¿Âˇ¿ÊQ¿Ê∞¿Ê’¿Á(¿Á.¿Á2¿Á3¿Á?¿Á]¿Áç¿Áﬁ¿Ë	¿Ë¿Ë!¿Ë%¿Ë&¿Ëj¿Ëp¿Ëæ¿È¿È[¿È¨¿È‰¿È˘¿Í¿Í]¿Ím¿Í£¿Í˘¿Î¿Î\¿Îã¿Îñ¿Î∞¿Î˜¿ÏS¿Ïm¿Ïx¿Ïã¿Ï—¿Ì(¿Ì~¿Ì¬¿Ó¿Ó/¿Ó:¿ÓD¿ÓN¿ÓR¿ÓS¿Óù¿Ó£¿ÓÌ¿ÓÛ¿Ô>¿ÔD¿Ôì¿Ô‚¿6¿à¿⁄¿Ò-¿Ò~¿Ò∂¿Ò√¿Ú6¿ÚF¿Ú|¿Ú–¿ÚÎ¿Û7¿Ûf¿Ûq¿Ûã¿Û–¿Ù*¿ÙD¿ÙO¿Ùb¿Ù¶¿Ù˚¿ıO¿ıì¿ıÿ¿ˆ ¿ˆ¿ˆ¿ˆ¿ˆ#¿ˆ$¿ˆV¿ˆ\¿ˆ™¿ˆ◊¿ˆ‰¿˜;¿˜K¿˜Å¿˜◊¿˜Ú¿¯@¿¯o¿¯z¿¯î¿¯€¿˘7¿˘Q¿˘\¿˘o¿˘µ¿˙¿˙b¿˙¶¿˙Î¿˚¿˚¿˚(¿˚2¿˚6¿˚7¿˚C¿˚à¿˚≥¿¸¿¸!¿¸#¿¸$¿¸M¿¸Q¿¸ó¿¸À¿˝¿˝9¿˝b¿˝c¿˝Ø¿˝“¿˝ÿ¿˛	¿˛¿˛H¿˛ô¿˛È¿ˇ-¿ˇO¿ˇ†¿ˇ«¿ˇ€¿ˇﬂ¿ˇ‡¿ˇÏ¿ ¿ M¿ i¿ Ü¿ ®¿ ¨¿ Æ¿ Ø¿ ˚¿7¿Å¿¡¿¬¿Œ¿Ú¿¿#¿'¿(¿4¿w¿ä¿é¿è¿õ¿¿¿¿¿¿W¿j¿n¿o¿{¿≠¿ÿ¿‹¿ﬁ¿ﬂ¿2¿6¿Q¿U¿ô¿Ë¿&¿i¿≥¿¿¿¿¿"¿Q¿k¿É¿â¿ç¿é¿ö¿æ¿€¿Ó¿¿¿¿¿N¿p¿…¿Õ¿Œ¿⁄¿¿0¿Q¿™¿Æ¿Ø¿ª¿˛¿	¿	ô¿	Õ¿	Ì¿
¿
 ¿
!¿
-¿
Ç¿
ï¿
ô¿
ö¿
¶¿
È¿j¿Ñ¿≠¿Ã¿˚¿ˇ¿¿¿T¿X¿ú¿Ï¿<¿}¿Å¿è¿ì¿ﬂ¿¿T¿Å¿√¿¿X¿†¿°¿≠¿¿Ü¿ä¿ã¿ø¿≈¿¿(¿5¿J¿∑¿∏¿ÿ¿(¿L¿ä¿ã¿ó¿Ë¿e¿ô¿⁄¿	¿¿¿¿ã¿¿2¿t¿£¿ß¿®¿¥¿˜¿t¿û¿æ¿Ì¿Ò¿Ú¿˛¿-¿Z¿ã¿£¿´¿±¿µ¿∂¿¬¿Ê¿¿>¿a¿¿É¿Ñ¿ƒ¿‘¿ˇ¿!¿@¿Å¿˚¿¿k¿©¿∫¿%¿d¿t¿Å¿å¿î¿ß¿±¿¬¿∆¿«¿”¿¿V¿í¿ß¿´¿¨¿∏¿È¿¿y¿˜¿¿F¿«¿Â¿¿¿%¿)¿*¿6¿n¿ã¿˘¿ ¿ v¿ Ô¿!¿!¿!¿!¿!e¿!i¿!π¿!Õ¿!‚¿"¿"=¿">¿"g¿"Ä¿"Å¿"ç¿"∆¿"»¿"…¿"Ù¿#¿##¿#:¿#h¿#m¿#®¿#¬¿#‘¿#Ù¿$
¿$:¿$?¿$d¿$v¿$x¿$y¿$≠¿$”¿$◊¿%¿%e¿%¥¿%˚¿&¿&¿&&¿&*¿&y¿&À¿&÷¿&˛¿'I¿'v¿'w¿'√¿'ﬁ¿'Ô¿'¿()¿(<¿(=¿(I¿(l¿(ò¿(¨¿(≤¿(“¿(Ú¿)¿)¿)¿)$¿)U¿)W¿)X¿)ù¿)¬¿)Á¿*¿*¿*H¿*I¿*U¿*è¿*ê¿*ú¿*”¿*’¿*÷¿*˘¿+¿+¿+¿+V¿+X¿+Y¿+≤¿+√¿,¿,}¿,    -
_DebugOnly
_debugOnly	ObjectKey	GlobalKeyLabeledGlobalKeyGlobalObjectKeyWidgetStatelessWidgetStatefulWidget_StateLifecycleStateProxyWidgetParentDataWidgetInheritedWidgetRenderObjectWidgetLeafRenderObjectWidgetSingleChildRenderObjectWidgetMultiChildRenderObjectWidget_ElementLifecycle_InactiveElementsBuildContext
BuildOwnerNotifiableElementMixin_NotificationNode_isProfileBuildsEnabledForElement_ElementDiagnosticableTreeNodeErrorWidgetComponentElementStatelessElementStatefulElementProxyElementParentDataElementInheritedElementRenderObjectElementRootRenderObjectElementLeafRenderObjectElementSingleChildRenderObjectElementMultiChildRenderObjectElementDebugCreator_debugReportExceptionIndexedSlot_NullElement_NullWidget_debugShouldReassemble ˛¶