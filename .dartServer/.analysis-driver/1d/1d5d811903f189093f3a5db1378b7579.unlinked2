Ä£shouldPainttoStringbuildHandlegetHandleAnchorbuildToolbargetHandleSizecanCutcanCopycanPastecanSelectAll	handleCut
handleCopyhandlePastehandleSelectAllfadeDurationrenderObjectselectionControlsselectionDelegate_selectionOverlayvalue_value
_selection_effectiveStartHandleVisibility_effectiveEndHandleVisibility_effectiveToolbarVisibility'_updateTextSelectionOverlayVisibilitieshandlesVisible_handlesVisibleshowHandleshideHandlesshowToolbarupdate_updateSelectionOverlayupdateForScrollhandlesAreVisibletoolbarIsVisiblehidehideToolbardispose_getStartGlyphHeight_getEndGlyphHeight_dragEndPosition"_handleSelectionEndHandleDragStart#_handleSelectionEndHandleDragUpdate_dragStartPosition$_handleSelectionStartHandleDragStart%_handleSelectionStartHandleDragUpdate_handleSelectionHandleChanged_chooseTypecontextstartHandleType_startHandleTypelineHeightAtStart_lineHeightAtStartstartHandlesVisibleonStartHandleDragStartonStartHandleDragUpdateonStartHandleDragEndendHandleType_endHandleTypelineHeightAtEnd_lineHeightAtEndendHandlesVisibleonEndHandleDragStartonEndHandleDragUpdateonEndHandleDragEndtoolbarVisibleselectionEndpoints_selectionEndpointsdebugRequiredFortoolbarLayerLinkstartHandleLayerLinkendHandleLayerLinkdragStartBehavioronSelectionHandleTappedclipboardStatustoolbarLocation_toolbarLocation_handles_toolbar_buildScheduled_markNeedsBuild_buildStartHandle_buildEndHandle_buildToolbarpreferredLineHeight	layerLinkeditingRegion
visibilitymidpointcreateState_controller_opacity	initStatedidUpdateWidget_toolbarVisibilityChangedbuildhandleLayerLinkonSelectionHandleDragStartonSelectionHandleDragUpdateonSelectionHandleDragEndtype_handleVisibilityChangededitableTextKeyforcePressEnabledselectionEnableddelegate_lastSecondaryTapWasOnSelection_expandSelection_extendSelectionshouldShowSelectionToolbar_shouldShowSelectionToolbareditableTextrenderEditable_dragStartViewportOffset_isShiftPressed_isShiftTapping_shiftTapDragSelection	onTapDownonForcePressStartonForcePressEndonSingleTapUponSingleTapCancelonSingleLongTapStartonSingleLongTapMoveUpdateonSingleLongTapEndonSecondaryTaponSecondaryTapDownonDoubleTapDownonDragSelectionStartonDragSelectionUpdateonDragSelectionEndbuildGestureDetectorbehaviorchild_doubleTapTimer_lastTapOffset_isDoubleTap_handleTapDown_handleTapUp_handleTapCancel_lastDragStartDetails_lastDragUpdateDetails_dragUpdateThrottleTimer_handleDragStart_handleDragUpdate_handleDragUpdateThrottled_handleDragEnd_forcePressStarted_forcePressEnded_handleLongPressStart_handleLongPressMoveUpdate_handleLongPressEnd_doubleTapTimeout_isWithinDoubleTapTolerance	_disposeddisposedaddListenerremoveListenerdidChangeAppLifecycleState	pasteableunknownnotPasteable_kDragSelectionUpdateThrottleDragSelectionUpdateCallbackToolbarBuilderToolbarItemsParentDataTextSelectionControlsTextSelectionOverlaySelectionOverlay_SelectionToolbarOverlay_SelectionToolbarOverlayState_SelectionHandleOverlay_SelectionHandleOverlayState+TextSelectionGestureDetectorBuilderDelegate#TextSelectionGestureDetectorBuilderTextSelectionGestureDetector"_TextSelectionGestureDetectorStateClipboardStatusNotifierClipboardStatusÅkTextSelectionDelegateDurationmillisecondsstartDetailsupdateDetailsDragGestureRecognizeronUpdateGestureDragUpdateCallbackvoidDragStartDetailsDragUpdateDetailsTextSelectionToolbartoolbarBuilderCupertinoTextSelectionToolbarWidgetBuildContextContainerBoxParentData	RenderBoxbooloverrideStringtoStringonTapcupertinoTextSelectionControlsTextSelectionHandleTypedoubleVoidCallbackOffsetRenderEditableRectListTextSelectionPointSize	Clipboard
cutEnabledtextEditingValue	selectionisCollapsedcopyEnabledpasteEnabledselectAllEnabledtext
isNotEmptycutSelectionSelectionChangedCausetoolbarcopySelection	pasteTextFuture	selectAllbringIntoViewextentcontextOverlayTextEditingValue	LayerLinkDragStartBehaviorstartselectionStartInViewportaddListenerselectionEndInViewportdebugRequiredForstartHandleType	collapsedstartHandlesVisiblelineHeightAtStartonStartHandleDragStartonStartHandleDragUpdateendHandleTypeendHandlesVisiblelineHeightAtEndonEndHandleDragStartonEndHandleDragUpdatetoolbarVisibleselectionEndpointsselectionControlsselectionDelegateclipboardStatusstartHandleLayerLinkendHandleLayerLinktoolbarLayerLinkonSelectionHandleTappeddragStartBehaviortoolbarLocationlastSecondaryTapDownPosition
DeprecatedfadeDurationvisibleForTestingTextSelectionValueNotifiervalueshowHandleshideHandlesshowToolbarSchedulerBindingschedulerPhaseSchedulerPhasepersistentCallbacksWidgetsBinding	drawFrametextDirectionleftrightgetEndpointsForSelection_handles_toolbarhidehideToolbardisposeremoveListener
InlineSpantoPlainTextintisValid
textInside
charactersfirstlengthgetRectForComposingRange	TextRangeendheightpreferredLineHeightlastgetHandleSizeglobalPositiondeltaTextPositiongetPositionForPointfromPositionisEnddefaultTargetPlatformTargetPlatformiOSmacOSextentOffsetoffset
baseOffsetandroidfuchsialinuxwindowsbaseuserUpdateTextEditingValuecopyWithdragTextDirectionltrrtlOverlayStateofrootOverlayFadeTransitionValueListenableValueChangedDragEndDetails
listEqualsCompositedTransformTargetdownbuildHandleMaterialTextSelectionControlsCupertinoTextSelectionControlsgetDataOverlayEntrybuilder	insertAllremoveinsertinstanceaddPostFrameCallbackmarkNeedsBuild	ContainertypehandleLayerLinkonSelectionHandleDragStartonSelectionHandleDragUpdateonSelectionHandleDragEnd
visibilityExcludeSemanticschildfindRenderObject
fromPointslocalToGlobalzerosizebottomRightpointdywidthdxDirectionality	layerLinkeditingRegionmidpointStatefulWidgetStateSingleTickerProviderStateMixinAnimationController	Animationview	initStatedurationvsyncwidgetdidUpdateWidgetforwardreverseopacityCompositedTransformFollowerlinkshowWhenUnlinkedtopLeftBuilderbuildToolbargetHandleAnchorfromLTWHexpandToInclude
fromCirclecenterradiuskMinInteractiveDimensionRelativeRectfromLTRBmax	alignment	AlignmentRawGestureDetectorbehaviorHitTestBehaviortranslucentgesturesTypeGestureRecognizerFactoryPanGestureRecognizer$GestureRecognizerFactoryWithHandlers
debugOwnersupportedDevicesPointerDeviceKindtouchstylusunknownonStartonEndPaddingpadding
EdgeInsetsonlytopbottomEditableText	TextFieldCupertinoTextField	GlobalKeyEditableTextState	protectedfromSelectionabseditableTextKeycurrentStateRenderObjectrenderEditableHardwareKeyboardlogicalKeysPressedanyLogicalKeyboardKey	shiftLeft
shiftRightcontains	onTapDownhandleTapDownTapDownDetailsselectionEnabledkindhasFocustapselectPositioncauseonForcePressStartForcePressDetailsforcePressEnabledselectWordsInRangefrom
forcePressonForcePressEndonSingleTapUpTapUpDetailsmousetrackpadinvertedStylusselectWordEdgeonSingleTapCancelonSingleLongTapStartLongPressStartDetailsselectPositionAt	longPressonSingleLongTapMoveUpdateLongPressMoveUpdateDetailsonSingleLongTapEndLongPressEndDetailsonSecondaryTap
selectWordtoggleToolbaronSecondaryTapDownhandleSecondaryTapDownonDoubleTapDownonDragSelectionStartpixelsonDragSelectionUpdatemaxLinestoonDragSelectionEndKeykeyGestureDetectorGestureTapDownCallbackForcePressGestureRecognizerstartPressureGestureForcePressStartCallbackGestureForcePressEndCallbackGestureTapCallbackGestureTapUpCallbackGestureTapCancelCallbackkLongPressTimeoutGestureLongPressStartCallback"GestureLongPressMoveUpdateCallbackGestureLongPressEndCallbackkDoubleTapTimeoutGestureDragStartCallbackGestureDragEndCallbackdeferToChildTimercancelcalldistancekDoubleTapSlopMapTapGestureRecognizeronTapUponTapCancelLongPressGestureRecognizeronLongPressStartonLongPressMoveUpdateonLongPressEndexcludeFromSemanticsWidgetsBindingObserver
hasStringsFlutterErrorreportErrorFlutterErrorDetails	exceptionstacklibraryErrorDescription	pasteablenotPasteablehasListenersaddObserverremoveObserverAppLifecycleStateresumeddetachedinactivepausedContainerBoxParentDataStatefulWidgetStateSingleTickerProviderStateMixinValueNotifierWidgetsBindingObserverò_ù∞·K¬Â±¡áˆ◊QX  package:flutter/services.dart  
dart:async  	dart:math  "package:characters/characters.dart  package:flutter/foundation.dart  package:flutter/gestures.dart  package:flutter/rendering.dart  package:flutter/scheduler.dart  package:flutter/services.dart  
basic.dart  binding.dart  constants.dart  container.dart  editable_text.dart  framework.dart  gesture_detector.dart  overlay.dart  ticker_provider.dart  transitions.dart  	dart:core¿ îê ¿I+â <ÄÜÄ§Ä•Ä∫Ä÷Ä◊ÅÅ.ÅVÅÅ®Å–Å—ÅÊÅ˝ÇÇ/ÇLÇeÇÖÇúÇªÇ÷Ç◊ÉÉÉhÉtÉøÉ¿ÑÑÑbÑ~ÑÇÑŒÖ)Ö-ÖyÖ ÖÚÜgÜhÜµÜ¿ÜƒÜ“Ü÷áá*áxáüáÌáÓà>àBàìàﬁââLâxâ~âœää/ä0ä<äÑäÜäáäÕäÙä¯ã4ã[ãêãñã‚ã¸ååRå¢åÓç"çöçõçÏé8éhé∑é∏éÊéÏè+è1èÑèùè£èÚêêêkêµêÃê„ê˝ëë7ëLëtëòë‡í+íYíÉíàíâíπíÊíÁì2ìzìçììì„ìÈî/îPîÄî‘îÿîŸï$ïWï]ï≠ï≥ï˙ññLñ°ñ•ñ¶ñÙóóó\ó}óÉó”ò ò.ò`òÇòÜòáò“ôô*ô0ô}ôûô‘öZö^ö_ö©öØö¸õõSõàõÁú!ú%ú&úrúxú∆ú÷ùùRù≤ùÌùÒùÚû.û4ûÉûìûôûÂü.üAüÇü≈ü¸† ††N†s†y†ö†††Ò°°=°t°º°¿°¬°√¢¢¢¢n¢π¢Ÿ¢ˆ£B£H£ò£±£÷£˘§§@§m§ò§∏§‘§ı••]•à•∂•‘•Ù¶¶D¶\¶ºßßIßsßãßµßÈ®#®_®}®¡©©?©w©ì©”™™H™Ä™¨™ÿ´ ´2´`´ä´¬´Ó¨0¨7¨;¨<¨å¨õ¨œ≠≠≠R≠S≠û≠ÁÆ.ÆSÆTÆñÆ»Æ…ØØ<Ø=ØnØoØçØ¢Ø ØÀØÊØÁ∞∞∞v∞Œ±$±W±√≤+≤≠≤±≤≤≤ﬂ≤Â≥6≥e≥k≥Ñ≥≤≥“≥˜¥¥:¥H¥N¥m¥ú¥†¥°¥›¥Ùµµ8µ<µ=µyµ≤µ≥µÔ∂∂%∂J∂N∂O∂ä∂ê∂ﬁ∑,∑|∑≈∏∏e∏ñ∏¡∏ﬂ∏Ì∏Ûπ
π)π-π.πQπgπëπ∏π‹∫∫)∫1∫d∫â∫≠∫‘∫˙ªª1ª\ª´ªªÙªıº'º-º~º∑ºÓºÔΩ ΩvΩwΩßΩÍΩÎæ æKæLæàæ¡æ¬æ˙øø.øëøÚ¿ @¿ @L¿ @y¿ @}¿ @~¿ @†¿ @–¿ A ¿ AE¿ Ap¿ Aã¿ A–¿ B¿ Bj¿ B≤¿ C¿ CI¿ Cr¿ CŸ¿ D!¿ Dp¿ E¿ E¿ EV¿ EZ¿ E[¿ E{¿ E´¿ E€¿ F ¿ FJ¿ Fc¿ Fó¿ F˛¿ GF¿ Gì¿ H$¿ H*¿ Hp¿ Ht¿ Hu¿ Hï¿ Hñ¿ H‹¿ I¿ IB¿ II¿ Iö¿ Iû¿ Iü¿ IÁ¿ J¿ Jd¿ Je¿ Já¿ Jﬂ¿ JÌ¿ JÛ¿ JÙ¿ K¿ K?¿ Kä¿ K©¿ K ¿ K¿ L¿ LA¿ LL¿ L¿ L∞¿ L∫¿ L…¿ LÏ¿ M¿ M0¿ MS¿ My¿ M¶¿ Mœ¿ M⁄¿ N¿ NO¿ NY¿ Nh¿ Nn¿ No¿ N≠¿ N±¿ N≤¿ N‘¿ N’¿ O¿ O[¿ OÉ¿ Oä¿ O›¿ O·¿ O‚¿ P,¿ PU¿ P≠¿ PÆ¿ P–¿ Q)¿ Q7¿ Q=¿ Q>¿ Qd¿ Qâ¿ Q‘¿ QÛ¿ R¿ R:¿ Rc¿ Râ¿ Rî¿ Rœ¿ S ¿ S
¿ S¿ S<¿ S_¿ SÄ¿ S£¿ S…¿ S¿ T!¿ T,¿ Tp¿ T°¿ T´¿ T∫¿ T¿¿ T¡¿ U ¿ U¿ U¿ U_¿ U∂¿ UË¿ V¿ V:¿ VA¿ Vt¿ Vx¿ Vy¿ V†¿ V√¿ VÍ¿ W¿ W¿ W=¿ Wm¿ Ws¿ Wt¿ Wó¿ W¥¿ W“¿ WÍ¿ X¿ X ¿ X&¿ X*¿ X,¿ X-¿ Xe¿ Xi¿ X¥¿ X€¿ XÙ¿ Y@¿ YF¿ Yñ¿ Y´¿ Y∆¿ Y·¿ Z¿ Z>¿ Z\¿ Z}¿ Zü¿ Zæ¿ ZÚ¿ [¿ [3¿ [R¿ [r¿ [è¿ [®¿ [‚¿ \¿ \,¿ \O¿ \w¿ \ù¿ \¡¿ \˜¿ ]¿ ]6¿ ]a¿ ]ê¿ ]∑¿ ]‚¿ ^¿ ^?¿ ^â¿ ^ï¿ ^¨¿ ^ﬂ¿ _7¿ _ì¿ _ö¿ _û¿ _ü¿ _ﬂ¿ _Â¿ `2¿ `s¿ `ë¿ `í¿ `º¿ `¬¿ a¿ aT¿ aÄ¿ a∑¿ a‹¿ aÍ¿ a¿ b¿ b%¿ b)¿ b*¿ bX¿ b^¿ bØ¿ bµ¿ c¿ c:¿ cW¿ c¿ c¶¿ c¥¿ c∫¿ c⁄¿ cÒ¿ cı¿ cˆ¿ d!¿ d'¿ dx¿ dú¿ d¢¿ dÏ¿ e ¿ e!¿ ei¿ e©¿ e™¿ e˘¿ f;¿ f<¿ fé¿ fù¿ fŸ¿ f⁄¿ g¿ g¿ gW¿ gñ¿ g¿¿ gı¿ h¿ h&¿ h,¿ hH¿ h_¿ hc¿ hd¿ hê¿ hñ¿ hÂ¿ hÎ¿ i:¿ il¿ iá¿ i≠¿ i“¿ i‡¿ iÊ¿ j¿ j¿ j¿ j ¿ jI¿ jO¿ jû¿ j¬¿ j»¿ k¿ kB¿ kC¿ kâ¿ k«¿ k»¿ l¿ lU¿ lV¿ l¶¿ lµ¿ lÔ¿ l¿ m¿ m¿ mh¿ må¿ mí¿ mÃ¿ m˚¿ m¸¿ n;¿ nÖ¿ nµ¿ n¿ o#¿ o<¿ oB¿ oc¿ og¿ oh¿ o≤¿ o‘¿ o’¿ p&¿ p3¿ pW¿ pX¿ p•¿ pœ¿ p˜¿ p¯¿ qE¿ qm¿ qì¿ qî¿ qŸ¿ r
¿ r¿ rQ¿ rR¿ ró¿ rﬂ¿ rÒ¿ s¿ s7¿ s8¿ sv¿ s|¿ s¡¿ t¿ tW¿ tv¿ t|¿ t«¿ u¿ uF¿ uL¿ uî¿ uö¿ u™¿ u∞¿ v¿ vE¿ vF¿ vë¿ vﬂ¿ vÂ¿ w1¿ wx¿ wª¿ x
¿ x;¿ xä¿ x◊¿ y	¿ y¿ yn¿ yÉ¿ y≤¿ y≥¿ z¿ z¿ z!¿ zl¿ zú¿ zŒ¿ zœ¿ {¿ {@¿ {F¿ {î¿ {¬¿ {»¿ |¿ |2¿ |e¿ |Å¿ |®¿ |Õ¿ |€¿ |·¿ |ˇ¿ }¿ }¿ }¿ }k¿ }Ø¿ }∞¿ }˝¿ ~5¿ ~U¿ ~V¿ ~r¿ ~å¿ ~ç¿ ~Ã¿ ¿ *¿ A¿ ]¿ k¿ q¿ r¿ ë¿ ¡¿ Ô¿ ˆ¿ ˜¿ ÄG¿ Äd¿ Äh¿ Äi¿ Ä®¿ Ä‚¿ Ä˜¿ Å¿ Å*¿ ÅG¿ Åd¿ Å{¿ ÅÅ¿ ÅÖ¿ ÅÜ¿ Å≈¿ Ç¿ Ç ¿ Ç7¿ ÇS¿ Ça¿ Çg¿ Çú¿ Çˇ¿ É¿ É¿ É$¿ É?¿ Éo¿ É}¿ ÉÉ¿ ÉŒ¿ Ñ¿ Ña¿ Ñ~¿ Ñé¿ Ññ¿ Ñ¥¿ Ñˇ¿ Ö ¿ Ö@¿ Öi¿ Öí¿ Öú¿ Ö¿¿ Ö ¿ Ö◊¿ Öı¿ Ü¿ ÜC¿ ÜK¿ Üm¿ Üs¿ Üw¿ Üx¿ Ü∞¿ Üˆ¿ á¿ á¿ á7¿ áT¿ áq¿ áà¿ áé¿ á™¿ áø¿ á≈¿ á…¿ á ¿ à	¿ à6¿ à<¿ ài¿ à~¿ àï¿ à±¿ àø¿ à≈¿ à›¿ àÚ¿ àˆ¿ à˜¿ â2¿ âd¿ ây¿ âå¿ âò¿ âú¿ âù¿ â–¿ âÈ¿ ä6¿ ä[¿ äw¿ äÑ¿ ä¨¿ äÃ¿ ä˚¿ ã5¿ ãq¿ ãØ¿ ãÁ¿ å¿ å>¿ åo¿ åù¿ å¶¿ å¨¿ å…¿ åﬁ¿ åÂ¿ åÈ¿ åÍ¿ ç¿ ç4¿ çÅ¿ çﬂ¿ é¿ é+¿ é8¿ é`¿ é~¿ é´¿ éÂ¿ è¿ è[¿ èë¿ èø¿ èÊ¿ ê¿ êC¿ êL¿ êR¿ êo¿ êÑ¿ êã¿ êè¿ êê¿ êø¿ ê‰¿ ê˛¿ ë¿ ë¿ ëT¿ ëU¿ ëÖ¿ ë±¿ ë˘¿ í ¿ í¿ íe¿ íÇ¿ íÉ¿ íÿ¿ ì¿ ì&¿ ìF¿ ìö¿ ìõ¿ ìø¿ ìÀ¿ î¿ îD¿ îK¿ îL¿ îg¿ îù¿ îƒ¿ îÙ¿ ï¿ ïC¿ ïi¿ ïó¿ ï≥¿ ï„¿ ñ¿ ñ5¿ ñ_¿ ñh¿ ño¿ ñs¿ ñu¿ ñv¿ ñ¶¿ ñﬁ¿ ñˇ¿ ó"¿ óI¿ ól¿ óâ¿ ó™¿ óœ¿ ó‰¿ ò ¿ ò&¿ òK¿ òn¿ òt¿ òu¿ òô¿ ò∫¿ ò◊¿ òÛ¿ ô%¿ ôP¿ ôi¿ ôû¿ ô–¿ ö¿ ö¿ ö¿ öa¿ öc¿ öd¿ ö÷¿ ö˛¿ õ4¿ õ5¿ õA¿ õV¿ õm¿ õn¿ õÀ¿ õÃ¿ õÌ¿ ú,¿ ú0¿ ú1¿ ú=¿ úz¿ ú†¿ ú’¿ ú„¿ úÈ¿ ù.¿ ùO¿ ùé¿ ùí¿ ùì¿ ùü¿ ù≤¿ ùÙ¿ û¿ û$¿ û(¿ û)¿ ûN¿ ûz¿ ûó¿ û§¿ û¡¿ û«¿ ûÀ¿ ûÃ¿ ûÿ¿ ûˇ¿ ü¿ ü3¿ ü]¿ ü}¿ üû¿ üÕ¿ üÂ¿ †¿ †L¿ †c¿ †á¿ †±¿ †–¿ †˘¿ °"¿ °H¿ °n¿ °}¿ °ä¿ °ï¿ °û¿ °•¿ °©¿ °´¿ °¨¿ °Ï¿ ¢#¿ ¢C¿ ¢e¿ ¢}¿ ¢†¿ ¢¬¿ ¢Á¿ £¿ £0¿ £U¿ £j¿ £ë¿ £«¿ £Õ¿ £Œ¿ £Ò¿ § ¿ §d¿ §™¿ §Í¿ •¿ •F¿ •j¿ •ê¿ •Ω¿ •æ¿ • ¿ ¶¿ ¶¿ ¶¿ ¶ ¿ ¶ê¿ ¶∏¿ ¶Ó¿ ¶Ô¿ ¶˚¿ ß¿ ß'¿ ß(¿ ßÖ¿ ßÜ¿ ß¶¿ ß‰¿ ßË¿ ßÈ¿ ®¿ ®9¿ ®V¿ ®c¿ ®Ä¿ ®Ü¿ ®ä¿ ®ã¿ ®ó¿ ®”¿ ®˘¿ ©=¿ ©]¿ ©õ¿ ©ü¿ ©†¿ ©¨¿ ©ø¿ ™ ¿ ™¿ ™0¿ ™4¿ ™5¿ ™A¿ ™h¿ ™≤¿ ™≈¿ ™Á¿ ™Ó¿ ´2¿ ´T¿ ´[¿ ´\¿ ´á¿ ´ü¿ ´∑¿ ´œ¿ ´Ë¿ ´Ô¿ ´¿ ¨=¿ ¨z¿ ¨—¿ ¨ÿ¿ ≠¿ ≠S¿ ≠ò¿ ≠€¿ Æ ¿ Æ'¿ Æ(¿ ÆP¿ Æt¿ Æõ¿ Æ∫¿ Æ◊¿ ÆÚ¿ Ø¿ Ø4¿ Ø\¿ ØÜ¿ Ø´¿ Øﬁ¿ ∞¿ ∞v¿ ∞¢¿ ∞∆¿ ±¿ ±M¿ ±z¿ ±®¿ ±◊¿ ±Ï¿ ±ˇ¿ ≤1¿ ≤L¿ ≤è¿ ≤—¿ ≥¿ ≥T¿ ≥g¿ ≥x¿ ≥á¿ ≥£¿ ≥À¿ ≥Ô¿ ¥¿ ¥7¿ ¥_¿ ¥p¿ ¥´¿ ¥ƒ¿ ¥·¿ µ¿ µ=¿ µN¿ µ]¿ µj¿ µu¿ µ~¿ µÖ¿ µâ¿ µã¿ µå¿ µ“¿ µ÷¿ ∂&¿ ∂v¿ ∂…¿ ∑¿ ∑c¿ ∑Ä¿ ∑Ñ¿ ∑í¿ ∑ñ¿ ∑Ê¿ ∏4¿ ∏G¿ ∏Ñ¿ ∏∫¿ π¿ πG¿ πH¿ πÜ¿ π§¿ π•¿ πﬂ¿ π¸¿ π˛¿ πˇ¿ ∫F¿ ∫J¿ ∫ê¿ ∫·¿ ª*¿ ªy¿ ª∆¿ ª·¿ ªÂ¿ º3¿ ºc¿ ºg¿ ºu¿ ºy¿ º∆¿ ºÒ¿ Ω5¿ Ωs¿ Ωü¿ Ω÷¿ Ω‹¿ æ¿ æ+¿ æG¿ æh¿ æi¿ æ¨¿ æ≤¿ ø¿ øR¿ øé¿ øõ¿ øŸ¿ ø⁄¿ ¿¿ ¿L¿ ¿ç¿ ¿π¿ ¿Õ¿ ¿”¿ ¿‘¿ ¡¿ ¡R¿ ¡Y¿ ¡Z¿ ¡ú¿ ¡›¿ ¡·¿ ¡‚¿ ¬¿ ¬¿ ¬o¿ ¬µ¿ ¬∫¿ √	¿ √3¿ √8¿ √G¿ √L¿ √ö¿ √≠¿ ƒ¿ ƒ.¿ ƒJ¿ ƒÑ¿ ƒÖ¿ ƒŸ¿ ≈)¿ ≈G¿ ≈Ñ¿ ≈∆¿ ∆¿ ∆R¿ ∆}¿ ∆Ñ¿ ∆Ö¿ ∆≤¿ ∆‡¿ «¿ «¿ «¿ «¿ «#¿ «$¿ «\¿ «a¿ «î¿ «ô¿ «®¿ «≠¿ «¸¿ »¿ »Z¿ »u¿ »ë¿ »À¿ »Ã¿ … ¿ …_¿ …õ¿ …∆¿ …Õ¿ …Œ¿ …˚¿  )¿  K¿  T¿  a¿  h¿  l¿  m¿  ö¿  †¿  Ò¿ À@¿ ÀP¿ Àñ¿ À¡¿ À¬¿ Ã¿ Ã5¿ ÃB¿ Ãí¿ Ãì¿ Ã›¿ Õ¿ Õ¿ Õ^¿ Õ_¿ ÕØ¿ Õÿ¿ ÕŸ¿ Œ¿ Œ0¿ Œh¿ Œâ¿ ŒØ¿ Œ÷¿ ŒÈ¿ ŒÌ¿ ŒÓ¿ œ=¿ œ]¿ œ^¿ œ´¿ œÙ¿ –#¿ –L¿ –M¿ –â¿ –è¿ –‡¿ —;¿ —A¿ —Q¿ —W¿ —®¿ —µ¿ —‡¿ “¿ “¿ “¿ “E¿ “î¿ “Á¿ ”¿ ”Y¿ ”ã¿ ”∫¿ ”„¿ ‘¿ ‘¿ ‘@¿ ‘¶¿ ‘À¿ ‘Ó¿ ’¿ ’0¿ ’o¿ ’é¿ ’±¿ ’ª¿ ’ ¿ ’Î¿ ÷<¿ ÷[¿ ÷~¿ ÷†¿ ÷Á¿ ÷¸¿ ◊6¿ ◊R¿ ◊v¿ ◊ù¿ ◊∏¿ ◊≈¿ ◊◊¿ ◊·¿ ÿ.¿ ÿ¿ ÿ ¿ ÿÁ¿ Ÿ0¿ Ÿ?¿ Ÿ`¿ ŸÉ¿ Ÿ¶¿ Ÿ»¿ ⁄¿ ⁄)¿ ⁄3¿ ⁄|¿ ⁄ã¿ ⁄ë¿ ⁄ï¿ ⁄ñ¿ ⁄⁄¿ ⁄‡¿ €*¿ €I¿ €O¿ €ì¿ €ô¿ €©¿ €Ø¿ €˛¿ ‹¿ ‹¿ ‹T¿ ‹|¿ ‹§¿ ‹…¿ ‹Ú¿ ›¿ ›I¿ ›R¿ ›X¿ ›\¿ ›]¿ ›ü¿ ›•¿ ›ˆ¿ ﬁ¿ ﬁ¿ ﬁb¿ ﬁh¿ ﬁx¿ ﬁ~¿ ﬁÀ¿ ﬁﬁ¿ ﬁÎ¿ ﬂ¿ ﬂG¿ ﬂn¿ ﬂí¿ ﬂ¡¿ ﬂ»¿ ﬂÓ¿ ‡¿ ‡¿ ‡¿ ‡¿ ‡[¿ ‡a¿ ‡°¿ ‡ß¿ ‡∑¿ ‡Ω¿ ·¿ ·¿ ·(¿ ·U¿ ·z¿ ·≠¿ ‚¿ ‚<¿ ‚_¿ ‚Ç¿ ‚ß¿ ‚Î¿ „¿ „1¿ „=¿ „N¿ „s¿ „ò¿ „Ω¿ „·¿ ‰2¿ ‰F¿ ‰R¿ ‰ù¿ ‰Æ¿ ‰œ¿ ‰Ù¿ ÂC¿ Âj¿ Âé¿ Â◊¿ ÂÓ¿ Ê*¿ ÊH¿ Ên¿ Êó¿ Ê¥¿ Ê√¿ Ê◊¿ Ê„¿ Á¿ Á/¿ Á\¿ Áá¿ Á∫¿ Ë
¿ ËY¿ Ën¿ Ëò¿ Ëƒ¿ È¿ Èi¿ È~¿ Èä¿ Èõ¿ È£¿ È©¿ È≠¿ ÈÆ¿ ÈÚ¿ È¯¿ ÍC¿ ÍI¿ ÍY¿ Í_¿ Í©¿ Í¡¿ ÍŒ¿ Î!¿ Î"¿ Îi¿ Îo¿ Îæ¿ Î–¿ Î÷¿ ÎÊ¿ ÎÏ¿ Ï9¿ ÏQ¿ Ï^¿ Ïõ¿ Ï¿¿ ÏÁ¿ Ì¿ Ì=¿ ÌF¿ ÌL¿ ÌP¿ ÌQ¿ Ìù¿ Ì£¿ ÌÒ¿ Ó¿ Ó¿ Ó#¿ Ó)¿ Ór¿ Óì¿ Ó†¿ ÓÁ¿ Ô¿ Ô3¿ ÔY¿ Ôâ¿ Ôí¿ Ôò¿ Ôú¿ Ôù¿ Ô‚¿ ÔË¿ ¿ ¿ /¿ 5¿ Ö¿ ò¿ •¿ ﬁ¿ Ò¿ Ò&¿ Ò,¿ Ò0¿ Ò1¿ Òr¿ Òx¿ Òæ¿ ÒÀ¿ ÒÂ¿ Ú¿ Ú¿ Ú¿ ÚD¿ Úc¿ ÚÑ¿ Ú–¿ Û¿ Û!¿ ÛK¿ Ûq¿ Ûó¿ Û°¿ Û∞¿ Û”¿ Ûˆ¿ Ù¿ Ù:¿ Ùb¿ Ù≠¿ Ù∑¿ Ù›¿ ÙÏ¿ ÙÚ¿ Ùˆ¿ Ù˜¿ ı<¿ ıB¿ ıR¿ ıX¿ ı®¿ ıª¿ ı¸¿ ˆ	¿ ˆ=¿ ˆq¿ ˆô¿ ˆù¿ ˆû¿ ˆ‡¿ ˆÊ¿ ˜1¿ ˜h¿ ˜n¿ ˜~¿ ˜Ñ¿ ˜—¿ ˜‰¿ ˜Ò¿ ¯"¿ ¯G¿ ¯ä¿ ¯≤¿ ¯÷¿ ¯ﬁ¿ ¯‰¿ ¯Ë¿ ¯È¿ ˘0¿ ˘6¿ ˘{¿ ˘Å¿ ˘ë¿ ˘ó¿ ˘‰¿ ˘¸¿ ˙	¿ ˙A¿ ˙g¿ ˙u¿ ˙{¿ ˙≠¿ ˙‹¿ ˚¿ ˚0¿ ˚1¿ ˚ï¿ ˚≥¿ ˚⁄¿ ˚˚¿ ¸¿ ¸n¿ ¸¿ ¸§¿ ¸…¿ ¸Ï¿ ˝¿ ˝a¿ ˝r¿ ˝z¿ ˝≥¿ ˝¿¿ ˝Á¿ ˛¿ ˛8¿ ˛A¿ ˛G¿ ˛H¿ ˛Ö¿ ˛â¿ ˛ä¿ ˛“¿ ˛ÿ¿ ˇ&¿ ˇ=¿ ˇC¿ ˇS¿ ˇY¿ ˇß¿ ˇ‡¿ ˇÌ¿ L¿ r¿ Ä¿ Ü¿ á¿ £¿ Ô¿-¿~¿–¿—¿ˇ¿8¿b¿ç¿ñ¿ú¿ù¿…¿¿B¿õ¿°¿¢¿Ó¿ ¿M¿≥¿„¿6¿q¿≤¿Ù¿H¿w¿ß¿À¿	¿6¿C¿N¿r¿{¿ñ¿Ÿ¿"¿Q¿Å¿•¿·¿	¿	¿	&¿	J¿	S¿	`¿	≤¿	∏¿	º¿	Ω¿
¿
¿
R¿
l¿
r¿
Ç¿
à¿
ÿ¿
Î¿
¯¿,¿G¿f¿ã¿ë¿ï¿ñ¿‚¿¿¿H¿h¿v¿ï¿∞¿∑¿‡¿¿¿\¿®¿Œ¿¸¿ ¿L¿~¿∫¿Ë¿¿B¿v¿§¿æ¿“¿Ÿ¿›¿ﬂ¿‡¿2¿6¿Å¿–¿ ¿0¿4¿B¿F¿í¿ﬁ¿Ô¿+¿Z¿`¿™¿ÿ¿ˇ¿¿"¿>¿X¿q¿é¿¶¿¬¿·¿¿"¿<¿[¿{¿ò¿´¿ƒ¿‚¿„¿-¿}¿≤¿›¿ﬁ¿+¿w¿≤¿≥¿¿!¿X¿Y¿ó¿√¿ƒ¿¿;¿<¿å¿”¿!¿k¿ò¿ô¿Ë¿5¿i¿û¿ü¿„¿*¿h¿•¿¶¿Ì¿4¿5¿{¿¥¿µ¿¿D¿u¿v¿∞¿Ë¿È¿"¿(¿q¿ø¿Ê¿"¿#¿g¿õ¿ú¿ﬁ¿‰¿ ¿ >¿ ?¿ ^¿ t¿ u¿ Å¿ –¿ “¿ ”¿!*¿!v¿!ê¿!™¿!ˆ¿")¿"F¿"G¿"S¿"f¿"Ö¿"≠¿"¬¿"∆¿"«¿#¿#>¿#n¿#ì¿#‡¿$3¿$Ç¿$∞¿%
¿%V¿%p¿%ù¿%û¿%ø¿%⁄¿%ı¿%˚¿%ˇ¿& ¿&,¿&E¿&p¿&ü¿&‰¿&Í¿'¿'¿'	¿'%¿'K¿'O¿'P¿'{¿'®¿'À¿'Ã¿( ¿(+¿(P¿(Ä¿(Ñ¿(Ö¿(ª¿(·¿)¿)Ä¿)Ñ¿)Ö¿)‘¿*¿*D¿*J¿*í¿*ª¿*·¿+¿+8¿+ë¿+∂¿+Ÿ¿+›¿+ﬁ¿,¿,9¿,e¿,±¿,Ã¿,ˆ¿-¿- ¿-N¿-s¿-ï¿-∏¿-º¿-Ω¿-Ù¿.¿./¿.\¿.`¿.a¿.ñ¿.¡¿.≈¿.∆¿/¿/D¿/q¿/w¿/{¿/|¿/ƒ¿0	¿0;¿0A¿0E¿0F¿0Ä¿0æ¿0È¿0Ô¿1	¿1¿1¿1+¿1G¿1b¿1f¿1g¿1§¿1…¿1Î¿1ˇ¿2¿2¿2G¿2y¿2}¿2~¿2ä¿2±¿3¿3¿3p¿3§¿3Ã¿3›¿4¿4K¿4r¿4ï¿4¡¿4 ¿4—¿4“¿5¿55¿5b¿5—¿6,¿6\¿6o¿6¶¿6Á¿7¿7&¿7/¿75¿76¿7e¿7ï¿7¬¿8%¿8ù¿8«¿8⁄¿9,¿9G¿9Ä¿9©¿9‘¿9˙¿:¿:¿:¿:¿:c¿:‘¿;¿;B¿;U¿;™¿;˙¿<¿<¿<¿<¿<4¿<N¿<p¿<ë¿<¨¿<≥¿<∑¿<π¿<∫¿=¿=)¿=-¿=t¿=∏¿>¿>f¿>í¿>Æ¿>„¿>¯¿>˘¿?¿?S¿?à¿?∑¿?Ÿ¿?⁄¿@¿@4¿@I¿@W¿@]¿@^¿@y¿@É¿@¥¿@’¿A	¿A'¿A=¿A`¿A≤¿Aº¿B¿BB¿B}¿Bç¿Bï¿Bº¿B ¿B–¿B—¿C¿C'¿CO¿CP¿C|¿Cä¿Cê¿C®¿C¨¿C≠¿Cπ¿CÂ¿C˛¿D/¿D5¿Da¿Dq¿Dw¿Dò¿Dú¿Dù¿D©¿Dÿ¿D¸¿E#¿EW¿E]¿Ea¿Eb¿En¿E´¿E¿¿EÊ¿E¯¿F¿F.¿FU¿Fz¿Fî¿Fö¿Fû¿Fü¿F´¿Fæ¿F¿G¿G¿G¿G!¿G"¿Gk¿GÇ¿G—¿Gﬁ¿Gﬂ¿H-¿Hz¿Hæ¿H…¿H ¿I¿I)¿I+    Ä•  Ä∫Ä— Ä◊  Å  Å.  ÅV  Å  Å®  Å—  ÅÊ  Å˝  Ç  Ç/  ÇL  Çe  ÇÖ  Çú  Çª  Ç◊Ç˛É áÓÇóâ	Å/// ParentData that determines whether or not to paint the corresponding child.
///
/// Used in the layout of the Cupertino and Material text selection menus, which
/// decide whether or not to paint their buttons after laying them out and
/// determining where they overflow.  âNÄﬂäÄæ/// Whether or not this child is painted.
///
/// Children in the selection toolbar may be laid out for measurement purposes
/// but not painted. This allows these children to be identified.ä( ä2QäE   ä2ä3 äáó:ãCÄ¨/// An interface for building the selection UI, to be provided by the
/// implementer of the toolbar widget.
///
/// Override text operations such as [handleCut] if needed.    ã]Ç<ç+Å¥/// Builds a selection handle of the given `type`.
///
/// The top left corner of this widget is positioned at the bottom of the
/// selection position.
///
/// The supplied [onTap] should be invoked when the handle is tapped, if such
/// interaction is allowed. As a counterexample, the default selection handle
/// on iOS [cupertinoTextSelectionControls] does not call [onTap] at all,
/// since its handles are not meant to be tapped. ç7çE  çMçf  çkçs  çÉçí   çùÅéqÄ∆/// Get the anchor point of the handle relative to itself. The anchor point is
/// the point that is aligned with a specific point in the text. A handle
/// often visually "points to" that location. éÅéö  éüéß   é∫ÉÕê’Å˘/// Builds a toolbar near a text selection.
///
/// Typically displays buttons for copying and pasting text.
///
/// [globalEditableRegion] is the TextField size of the global coordinate system
/// in logical pixels.
///
/// [textLineHeight] is the `preferredLineHeight` of the [RenderEditable] we
/// are building a toolbar for.
///
/// The [position] is a general calculation midpoint parameter of the toolbar.
/// If you want more detailed position information, can use [endpoints]
/// to calculate it. êÁêı  ëë  ë ë(  ë;ëC  ëP"ëj  ëxëè  í/(íI  í]$íf   íãZí¿-/// Returns the size of the selection handle. íŒí÷   íÈÅÓîWÅX/// Whether the current selection of the text field managed by the given
/// `delegate` can be removed from the text field and placed into the
/// [Clipboard].
///
/// By default, false is returned when nothing is selected in the text field.
///
/// Subclasses can use this to decide if they should expose the cut
/// functionality to the user. î^îu   î€Å…ñ"Å3/// Whether the current selection of the text field managed by the given
/// `delegate` can be copied to the [Clipboard].
///
/// By default, false is returned when nothing is selected in the text field.
///
/// Subclasses can use this to decide if they should expose the copy
/// functionality to the user. ñ*ñA   ñ®Å›ò5Åu/// Whether the text field managed by the given `delegate` supports pasting
/// from the clipboard.
///
/// Subclasses can use this to decide if they should expose the paste
/// functionality to the user.
///
/// This does not consider the contents of the clipboard. Subclasses may want
/// to, for example, disallow pasting when the clipboard contains an empty
/// string. ò>òU   òâÅ‘ô•Å
/// Whether the current selection of the text field managed by the given
/// `delegate` can be extended to include the entire content of the text
/// field.
///
/// Subclasses can use this to decide if they should expose the select all
/// functionality to the user. ô≤ô…   öaÅ√õèÄ§/// Call [TextSelectionDelegate.cutSelection] to cut current selection.
///
/// This is called by subclasses when their cut affordance is activated by
/// the user. õôõ∞  õ∫(õ‘   ú(Å»ùYÄß/// Call [TextSelectionDelegate.copySelection] to copy current selection.
///
/// This is called by subclasses when their copy affordance is activated by
/// the user. ùdù{  ùÖ(ùü   ùÙÇüëÅ>/// Call [TextSelectionDelegate.pasteText] to paste text.
///
/// This is called by subclasses when their paste affordance is activated by
/// the user.
///
/// This function is asynchronous since interacting with the clipboard is
/// asynchronous. Race conditions may exist with this API as currently
/// implemented. üùü¥   †Åº°ÄÙ/// Call [TextSelectionDelegate.selectAll] to set the current selection to
/// contain the entire text value.
///
/// Does not hide the toolbar.
///
/// This is called by subclasses when their select-all affordance is activated
/// by the user. °°2    °√∂h¢ﬂÅ/// An object that manages a pair of text selection handles for a
/// [RenderEditable].
///
/// This class is a wrapper of [SelectionOverlay] to provide APIs specific for
/// [RenderEditable]s. To manage selection handles for custom widgets, use
/// [SelectionOverlay] instead. ¢¯âB £ö£ÆÄõ/// Creates an object that manages overlay entries for selection handles.
///
/// The [context] must not be null and must have an [Overlay] as an ancestor.£µ£–  £⁄£Ò  £˝§  §#§/  §D'§X  §q%§Ö  §ú§´  §º§¬  §ÿ§ﬁ  §˘•  •=•1  •a%•p  •å(•¶  §Ó•D•U•V•Ω•√•—• •ƒ•Õ•€•·•Ò•Í•‚•Ì•˚¶¶¶¶¶¶2¶"¶4¶R¶K¶T¨>Å≠$M/// Controls the fade-in and fade-out animations for the toolbar and handles.	¨é¨è¨ô≠
¨ü¨”≠3≠C≠D≠ÈhÆED/// The editable line in which the selected text is being displayed. ÆVpÆµ?/// {@macro flutter.widgets.SelectionOverlay.selectionControls} ÆÀoØ)?/// {@macro flutter.widgets.SelectionOverlay.selectionDelegate} Ø?-Ø[  ØÕØﬁ  ∞V∞8 ∞Z∞g∞l∞h∞m∞s∞n∞xT∞í ∞≤∞ø∞ƒ∞¿∞≈∞À∞∆∞–R∞Í ±±±±±±!±≥¥≥π ≥À¿ Hw¿ HÉ  ¿ N¥¿ N¿  ØqXØπ/// Retrieve current value.  ØèØêØÈ1Ø˚    ≤¥Ä˝≥èÄ≈/// Whether selection handles are visible.
///
/// Set to false if you want to hide the handles. Use this property to show or
/// hide the handle without rebuilding them.
///
/// Defaults to false.   ≥‘ÄÀ≥ÿ  ≥Á≥Ì   ºÒÄÑΩ+./// Whether the handles are currently visible.   ΩypΩ≤-/// Whether the toolbar is currently visible.   ±&Åä±+    ¥£Äò¥‰9/// {@macro flutter.widgets.SelectionOverlay.showHandles}   µ?rµÄ9/// {@macro flutter.widgets.SelectionOverlay.hideHandles}   µµÄòµˆ9/// {@macro flutter.widgets.SelectionOverlay.showToolbar}   ∂QÇ€∏ùÇ4/// Updates the overlay after the selection has changed.
///
/// If this method is called while the [SchedulerBinding.schedulerPhase] is
/// [SchedulerPhase.persistentCallbacks], i.e. during the build, layout, or
/// paint phases (see [WidgetsBinding.drawFrame]), then the update is delayed
/// until the post-frame callbacks phase. Otherwise the update is done
/// synchronously. This means that it is safe to call during builds, but also
/// that if you do call this during a build, the UI will not update until the
/// next frame (i.e. many milliseconds later). ∏§∏∂   π0Ç√π5    ª˜ÄˆºæÄπ/// Causes the overlay to update its rendering.
///
/// This is intended to be called when the [renderObject] may have changed its
/// text metrics (e.g. because the text was scrolled).   ΩÌ]æ'2/// {@macro flutter.widgets.SelectionOverlay.hide}   æNræè9/// {@macro flutter.widgets.SelectionOverlay.hideToolbar}   æƒÅ∏ø5/// {@macro flutter.widgets.SelectionOverlay.dispose}   ¿ @ÄÑŸ¿ @á    ¿ E]É¿ Ed    ¿ HòÅ¿ Hù  ¿ H¿¿ H“   ¿ I°Ö¿ I¶  ¿ I ¿ I›   ¿ N◊Å	¿ N‹  ¿ O¿ O   ¿ O‰Ö¿ OÈ  ¿ P¿ P"   ¿ UÅp¿ U  ¿ U*¿ U9  ¿ UG¿ UV   ¿ V{ÅÆ¿ Vì  ¿ V¶¿ Vµ  ¿ V…¿ V‚  ¿ V¿ W	    ¿ X-æG¿ X·Ä≠/// An object that manages a pair of selection handles.
///
/// The selection handles are displayed in the [Overlay] that most closely
/// encloses the given [BuildContext]. ¿ XˆÜß ¿ Yò¿ Y®Äõ/// Creates an object that manages overlay entries for selection handles.
///
/// The [context] must not be null and must have an [Overlay] as an ancestor.¿ YØ¿ Yæ  ¿ Y ¿ Y–  ¿ YÂ0¿ Z  ¿ Z!¿ Z,  ¿ ZB¿ ZH  ¿ Z`¿ Zf  ¿ ZÅ¿ Zá  ¿ Z£¿ Z©  ¿ Z¬.¿ Z‰  ¿ Zˆ¿ [  ¿ [¿ [!  ¿ [7¿ [=  ¿ [V¿ [\  ¿ [v¿ [|  ¿ [ì¿ [ô  ¿ [¨4¿ [œ  ¿ [Ê¿ [ı  ¿ \¿ \  ¿ \0¿ \?  ¿ \S"¿ \b  ¿ \{ ¿ \ä  ¿ \°¿ \∞  ¿ \≈0¿ \À  ¿ \˚¿ ]  ¿ ]¿ ]&  ¿ \ﬁ¿ \Ô¿ \¿ ]N¿ ]=¿ ]P¿ ]{¿ ]h¿ ]}¿ ]¶¿ ]ó¿ ]®¿ ]œ¿ ]æ¿ ]—¿ ]˝¿ ]È¿ ]ˇ¿ ^+¿ ^¿ ^-¿ _°ÄÓ¿ `àÄÀ/// The context in which the selection handles should appear.
///
/// This context must have an [Overlay] as an ancestor because this object
/// will display the text selection handles in that [Overlay]. ¿ aV(¿ an  ¿ c<¿ cC  ¿ c¯Å&¿ eÄÈ/// Whether the start handle is visible.
///
/// If the value changes, the start handle uses [FadeTransition] to transition
/// itself on and off the screen.
///
/// If this is null, the start selection handle will always be visible. ¿ e#ÄÑ¿ eëE/// Called when the users start dragging the start selection handles. ¿ e¨Äç¿ f"L/// Called when the users drag the start selection handles to new locations. ¿ f>Äô¿ f√\/// Called when the users lift their fingers after dragging the start selection
/// handles. ¿ gò&¿ g∞  ¿ in¿ iu  ¿ j"Å¿ k/Ä„/// Whether the end handle is visible.
///
/// If the value changes, the end handle uses [FadeTransition] to transition
/// itself on and off the screen.
///
/// If this is null, the end selection handle will always be visible. ¿ kEÄÄ¿ k±C/// Called when the users start dragging the end selection handles. ¿ k Äâ¿ l>J/// Called when the users drag the end selection handles to new locations. ¿ lXÄï¿ l€Z/// Called when the users lift their fingers after dragging the end selection
/// handles. ¿ lÚÅ¿ mÎÄœ/// Whether the toolbar is visible.
///
/// If the value changes, the toolbar uses [FadeTransition] to transition
/// itself on and off the screen.
///
/// If this is null the toolbar will always be visible. ¿ ná,¿ n†  ¿ ojh¿ o¬G/// Debugging information for explaining why the [Overlay] is required. ¿ o◊~¿ pEY/// The object supplied to the [CompositedTransformTarget] that wraps the text
/// field. ¿ pZÄõ¿ p·r/// The objects supplied to the [CompositedTransformTarget] that wraps the
/// location of start selection handle. ¿ p˙Äó¿ qp/// The objects supplied to the [CompositedTransformTarget] that wraps the
/// location of end selection handle. ¿ qñÄπ¿ r>ÄÑ/// {@template flutter.widgets.SelectionOverlay.selectionControls}
/// Builds text selection handles and toolbar.
/// {@endtemplate} ¿ rTÄ·¿ s$Ä´/// {@template flutter.widgets.SelectionOverlay.selectionDelegate}
/// The delegate for manipulating the current selection in the owning
/// text field.
/// {@endtemplate} ¿ s:É	¿ v2Çø/// Determines the way that drag start behavior is handled.
///
/// If set to [DragStartBehavior.start], handle drag behavior will
/// begin at the position where the drag gesture won the arena. If set to
/// [DragStartBehavior.down] it will begin at the position where a down
/// event is first detected.
///
/// In general, setting this to [DragStartBehavior.start] will make drag
/// animation smoother and setting it to [DragStartBehavior.down] will make
/// drag behavior feel slightly more reactive.
///
/// By default, the drag start behavior is [DragStartBehavior.start].
///
/// See also:
///
///  * [DragGestureRecognizer.dragStartBehavior], which gives an example for the different behaviors. ¿ vHÉh¿ yôÇø/// {@template flutter.widgets.SelectionOverlay.onSelectionHandleTapped}
/// A callback that's optionally invoked when a selection handle is tapped.
///
/// The [TextSelectionControls.buildHandle] implementation the text field
/// uses decides where the handle's tap "hotspot" is, or whether the
/// selection handle supports tap gestures at all. For instance,
/// [MaterialTextSelectionControls] calls [onSelectionHandleTapped] when the
/// selection handle's "knob" is tapped, while
/// [CupertinoTextSelectionControls] builds a handle that's not sufficiently
/// large for tapping (as it's not meant to be tapped) so it does not call
/// [onSelectionHandleTapped] even when tapped.
/// {@endtemplate} ¿ yµÅ¿ zΩÄﬁ/// Maintains the status of the clipboard for determining if its contents can
/// be pasted or not.
///
/// Useful because the actual value of the clipboard can only be checked
/// asynchronously (see [Clipboard.getData]). ¿ |g¿ |o  ¿ }Äê¿ }ÉM/// Controls the fade-in and fade-out animations for the toolbar and handles.¿ }í¿ }ö¿ }¨¿ }ß¿ }õ¿ }©¿ }≤Ä°¿ ~KÄÄ/// A pair of handles. If this is non-null, there are always 2, though the
/// second is hidden when the selection is collapsed. ¿ ~X2¿ ~Ç/// A copy/paste toolbar. ¿ É¿ É ¿ É¿ `îÄø¿ a/x/// The type of start selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ aÇÄ¶¿ aÜ  ¿ añ¿ aØ   ¿ b,Å¿ cÄœ/// The line height at the selection start.
///
/// This value is used for calculating the size of the start selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ cYÄõ¿ c]  ¿ co¿ cw   ¿ f‹Äπ¿ guv/// The type of end selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ g¬Ä†¿ g∆  ¿ g‘¿ gÌ   ¿ hfÅ¿ iGÄÀ/// The line height at the selection end.
///
/// This value is used for calculating the size of the end selection handle.
///
/// Changing the value while the handles are visible causes them to rebuild.   ¿ iâÄï¿ iç  ¿ iù¿ i•   ¿ m˛ÄÜ¿ nZ</// The text selection positions of selection start and end.   ¿ n∑ÄØ¿ nª  ¿ nŒ¿ nË   ¿ z—Åì¿ |@ÅR/// The location of where the toolbar should be drawn in relative to the
/// location of [toolbarLayerLink].
///
/// If this is null, the toolbar is drawn based on [selectionEndpoints] and
/// the rect of render object of [context].
///
/// This is useful for displaying toolbars at the mouse right-click locations
/// in desktop devices.   ¿ |ÉÄñ¿ |á  ¿ |ó¿ |†   
¿ ~èÅÿ¿ 1Äñ/// {@template flutter.widgets.SelectionOverlay.showHandles}
/// Builds the handles by inserting them into the [context]'s overlay.
/// {@endtemplate}   ¿ ÄkÅ¿ Ä˛Äá/// {@template flutter.widgets.SelectionOverlay.hideHandles}
/// Destroys the handles by removing them from overlay.
/// {@endtemplate}   ¿ ÅàÅz¿ Ç'Äì/// {@template flutter.widgets.SelectionOverlay.showToolbar}
/// Shows the toolbar by inserting it into the [context]'s overlay.
/// {@endtemplate}   ¿ É&ÉP¿ É+    ¿ ÜzÅN¿ áÄå/// {@template flutter.widgets.SelectionOverlay.hide}
/// Hides the entire overlay including the toolbar and the handles.
/// {@endtemplate}   ¿ áÃÅ)¿ àÖÄ©/// {@template flutter.widgets.SelectionOverlay.hideToolbar}
/// Hides the toolbar part of the overlay.
///
/// To hide the whole overlay, see [hide].
/// {@endtemplate}   ¿ à˘Ä¢¿ âÄ{/// {@template flutter.widgets.SelectionOverlay.dispose}
/// Disposes this object and release resources.
/// {@endtemplate}   ¿ âüÉI¿ â¶  ¿ â∏¿ â∆   ¿ åÏÉ¢¿ åÛ  ¿ ç¿ ç   ¿ êíÖ‡¿ êô  ¿ êß¿ êµ    ¿ ñvÉÏ¿ ñ¨//// This widget represents a selection toolbar. ¿ ñ‡Åì ¿ ó¿ ó/// Creates a toolbar overlay.
¿ ó&!¿ ó5  ¿ óM¿ ó\  ¿ óp¿ ó  ¿ óç¿ óú  ¿ óÆ¿ óΩ  ¿ ó”¿ óŸ  ¿ óË¿ ó˜  ¿ ò ¿ ò  ¿ ò*¿ ò9  ¿ òO¿ ò^   
¿ òw ¿ òÑ  ¿ òõ¿ ò©  ¿ òº¿ òÃ  ¿ òŸ¿ ò‰  ¿ òı.¿ ô  ¿ ô''¿ ôD  ¿ ôR¿ ô_  ¿ ôk1¿ ôä  ¿ ô†.¿ ôΩ  ¿ ô“.¿ ôÒ   ¿ ö[¿ ö/   ¿ ö¿ ö ¿ ödáF¿ öj   ¿ öÿ$¿ öÒ  ¿ õ 3¿ õ    ¿ õ7Ä¯¿ õH   ¿ õ7¿ õ8¿ ú3Å^¿ úD  ¿ úT"¿ ún  ¿ ú3¿ ú4¿ ùïÄí¿ ù¶   ¿ ùï¿ ùñ¿ û+Äü¿ û0    ¿ ûŒÇ⁄¿ û·  ¿ ûÁ¿ ûı  ¿ ûŒ¿ ûœ ¿ °¨Ñr¿ °Ú?/// This widget represents a single draggable selection handle. ¿ ¢%Åß ¿ ¢K¿ ¢b/// Create selection overlay.
¿ ¢i¿ ¢x  ¿ ¢Å¿ ¢ê  ¿ ¢§¿ ¢™  ¿ ¢∆¿ ¢Ã  ¿ ¢Î ¿ ¢Ò  ¿ £¿ £  ¿ £4¿ £C  ¿ £Y¿ £_  ¿ £n!¿ £}  ¿ £ï0¿ £õ  ¿ £Æ¿ £ø¿ £¿
¿ £–¿ £‡  ¿ £Û+¿ §  ¿ §"@¿ §H  ¿ §fB¿ §ç  ¿ §¨<¿ §–  ¿ §Ï-¿ •  ¿ •'¿ •:  ¿ •H ¿ •U  ¿ •l"¿ •ä  ¿ •í)¿ •™   ¿ •¿[¿ •Î   ¿ •¿¿ •¡ ¿ ¶ èj¿ ¶&   ¿ ¶í$¿ ¶´  ¿ ¶∫3¿ ¶–    ¿ ¶ÒÄˆ¿ ß   ¿ ¶Ò¿ ¶Ú¿ ßÎÄû¿ ß    ¿ ®çÅ¿ ®û  ¿ ®Æ!¿ ®«  ¿ ®ç¿ ®é¿ ©¢Äë¿ ©≥   ¿ ©¢¿ ©£¿ ™7ãQ¿ ™J  ¿ ™P¿ ™^  ¿ ™7¿ ™8 ¿ µåÑq¿ ∏VÇ∫/// Delegate interface for the [TextSelectionGestureDetectorBuilder].
///
/// The interface is usually implemented by text field implementations wrapping
/// [EditableText], that use a [TextSelectionGestureDetectorBuilder] to build a
/// [TextSelectionGestureDetector] for their [EditableText]. The delegate provides
/// the builder with information about the current state of the text field.
/// Based on these information, the builder adds the correct gesture handlers
/// to the gesture detector.
///
/// See also:
///
///  * [TextField], which implements this delegate for the Material text field.
///  * [CupertinoTextField], which implements this delegate for the Cupertino
///    text field.   ¿ ∏ÜÄ¿¿ π6Ää/// [GlobalKey] to the [EditableText] for which the
/// [TextSelectionGestureDetectorBuilder] will build a [TextSelectionGestureDetector].   ¿ πJY¿ πë;/// Whether the text field should respond to force presses.   ¿ πßT¿ πÍ7/// Whether the user may select text in the text field.     ¿ πˇ¿ Uﬂ¿ ΩyÉs/// Builds a [TextSelectionGestureDetector] to wrap an [EditableText].
///
/// The class implements sensible defaults for many user interactions
/// with an [EditableText] (see the documentation of the various gesture handler
/// methods, e.g. [onTapDown], [onForcePressStart], etc.). Subclasses of
/// [TextSelectionGestureDetectorBuilder] can change the behavior performed in
/// responds to these gesture events by overriding the corresponding handler
/// methods of this class.
///
/// The resulting [TextSelectionGestureDetector] to wrap an [EditableText] is
/// obtained by calling [buildGestureDetector].
///
/// See also:
///
///  * [TextField], which uses a subclass to implement the Material-specific
///    gesture logic of an [EditableText].
///  * [CupertinoTextField], which uses a subclass to implement the
///    Cupertino-specific gesture logic of an [EditableText]. ¿ Ω°Ä∆ ¿ æ¿ æ(]/// Creates a [TextSelectionGestureDetectorBuilder].
///
/// The [delegate] must not be null.¿ æ/¿ æ>  ¿ æN¿ æT¿ æe¿ æ^¿ æU¿ æa¿ ækÅl¿ øœÅ/// The delegate for this [TextSelectionGestureDetectorBuilder].
///
/// The delegate provides the builder with information about what actions can
/// currently be performed on the text field. Based on this, the builder adds
/// the correct gesture handlers to the gesture detector.¿ øê¿ øë¿ Àò'¿ Àù ¿ Àª¿ Õ±%¿ Õ∏ ¿ Õ”¿ œ?¿ œD ¿ œV¿ –%%¿ –4  ¿ ø‹Ç¿ ¿*B/// Returns true if lastSecondaryTapDownPosition was on selection.   ¿  oÅ&¿ À[Äÿ/// Whether to show the selection toolbar.
///
/// It is based on the signal source when a [onTapDown] is called. This getter
/// will return true if current [onTapDown] event is triggered by a touch or
/// a stylus.   ¿ ÀƒÄÕ¿ ÃZn/// The [State] of the [EditableText] for which the builder will provide a
/// [TextSelectionGestureDetector].  ¿ Ã7¿ Ã8¿ ÃïÄ»¿ Õ/u/// The [RenderObject] of the [EditableText] for which the builder will
/// provide a [TextSelectionGestureDetector].  ¿ Õ¿ Õ¿ ŒÄ◊¿ Œ    ¿ √ØÉs¿ √¥  ¿ √≈¿ √Õ  ¿ √‘¿ √Î  ¿ √Ú¿ ƒ   ¿ »ÇU¿ »  ¿ »,¿ »4  ¿ »;¿ »R   ¿ –OäE¿ —ºÅJ/// Handler for [TextSelectionGestureDetector.onTapDown].
///
/// By default, it forwards the tap to [RenderEditable.handleTapDown] and sets
/// [shouldShowSelectionToolbar] to true if the tap was initiated by a finger or stylus.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onTapDown], which triggers this callback. ¿ —∆¿ —÷  ¿ —™¿ —´¿ ⁄òÇ√¿ ‹%Åd/// Handler for [TextSelectionGestureDetector.onForcePressStart].
///
/// By default, it selects the word at the position of the force press,
/// if selection is enabled.
///
/// This callback is only applicable when force press is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onForcePressStart], which triggers this
///    callback. ¿ ‹7¿ ‹J  ¿ ‹¿ ‹¿ ›_Ç∫¿ ﬁÚÅj/// Handler for [TextSelectionGestureDetector.onForcePressEnd].
///
/// By default, it selects words in the range specified in [details] and shows
/// toolbar if it is necessary.
///
/// This callback is only applicable when force press is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onForcePressEnd], which triggers this
///    callback. ¿ ﬂ¿ ﬂ  ¿ ﬁ‡¿ ﬁ·¿ ‡âè¿ ·/ÄÔ/// Handler for [TextSelectionGestureDetector.onSingleTapUp].
///
/// By default, it selects word edge if selection is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleTapUp], which triggers
///    this callback. ¿ ·=¿ ·K  ¿ ·¿ ·¿ È∞Åp¿ Í’Å/// Handler for [TextSelectionGestureDetector.onSingleTapCancel].
///
/// By default, it services as place holder to enable subclass override.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleTapCancel], which triggers
///    this callback.  ¿ Í√¿ Íƒ¿ Î$Ç+¿ ÏeÅ/// Handler for [TextSelectionGestureDetector.onSingleLongTapStart].
///
/// By default, it selects text position specified in [details] if selection
/// is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleLongTapStart], which triggers
///    this callback. ¿ Ïz¿ Ïë  ¿ ÏS¿ ÏT¿ ÌSÇH¿ ÓßÅ//// Handler for [TextSelectionGestureDetector.onSingleLongTapMoveUpdate].
///
/// By default, it updates the selection location specified in [details] if
/// selection is enabled.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleLongTapMoveUpdate], which
///    triggers this callback. ¿ Ó¡"¿ Ó›  ¿ Óï¿ Óñ¿ ÔüÅê¿ ¨ÄÍ/// Handler for [TextSelectionGestureDetector.onSingleLongTapEnd].
///
/// By default, it shows toolbar if necessary.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSingleLongTapEnd], which triggers this
///    callback. ¿ ø¿ ‘  ¿ ö¿ õ¿ Ò3É¬¿ Ò“ÄÜ/// Handler for [TextSelectionGestureDetector.onSecondaryTap].
///
/// By default, selects the word if possible and shows the toolbar.  ¿ Ò¿¿ Ò¡¿ Ù˘Å£¿ ˆÄˆ/// Handler for [TextSelectionGestureDetector.onSecondaryTapDown].
///
/// See also:
///
///  * [TextSelectionGestureDetector.onSecondaryTapDown], which triggers this
///    callback.
///  * [onSecondaryTap], which is typically called after this. ¿ ˆ#¿ ˆ3  ¿ ı˛¿ ıˇ¿ ˆ†ÇG¿ ˜¯Å3/// Handler for [TextSelectionGestureDetector.onDoubleTapDown].
///
/// By default, it selects a word through [RenderEditable.selectWord] if
/// selectionEnabled and shows toolbar if necessary.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDoubleTapDown], which triggers this
///    callback. ¿ ¯¿ ¯  ¿ ˜Ê¿ ˜Á¿ ¯ÎÖù¿ ˙Å/// Handler for [TextSelectionGestureDetector.onDragSelectionStart].
///
/// By default, it selects a text position specified in [details].
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDragSelectionStart], which triggers
///    this callback. ¿ ˙%¿ ˙7  ¿ ˘˛¿ ˘ˇ¿ ˛åã/¿ ˇÙÅC/// Handler for [TextSelectionGestureDetector.onDragSelectionUpdate].
///
/// By default, it updates the selection location specified in the provided
/// details objects.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDragSelectionUpdate], which triggers
///    this callback./lib/src/material/text_field.dart ¿ 
¿   ¿ )¿ <  ¿ ˇ‚¿ ˇ„¿	øÅ’¿
ˇÅ/// Handler for [TextSelectionGestureDetector.onDragSelectionEnd].
///
/// By default, it simply cleans up the state used for handling certain
/// built-in behaviors.
///
/// See also:
///
///  * [TextSelectionGestureDetector.onDragSelectionEnd], which triggers this
///    callback. ¿¿"  ¿
Ì¿
Ó¿òÑD¿QÄ©/// Returns a [TextSelectionGestureDetector] configured with the handlers
/// provided by this builder.
///
/// The [child] or its subtree should contain [EditableText]. ¿l¿r  ¿z¿å  ¿ô¿™    ¿‡êÒ¿ıÇ/// A gesture detector to respond to non-exclusive event chains for a text field.
///
/// An ordinary [GestureDetector] configured to handle events like tap and
/// double tap will only recognize one or the other. This widget detects both:
/// first the tap and then, if another tap down occurs within a time limit, the
/// double tap.
///
/// See also:
///
///  * [TextField], a Material text field which uses this gesture detector.
///  * [CupertinoTextField], a Cupertino text field which uses this gesture
///    detector. ¿-Ç¥ ¿‡¿¸Ä§/// Create a [TextSelectionGestureDetector].
///
/// Multiple callbacks can be called for one sequence of input gesture.
/// The [child] parameter must not be null.¿	¿
  ¿¿  ¿&¿,  ¿B¿H  ¿\¿b  ¿u¿{  ¿í¿ò  ¿™¿∞  ¿∆¿Ã  ¿Â¿Î  ¿	¿  ¿&¿,  ¿@¿F  ¿_¿e  ¿¿Ö  ¿ú¿¢  ¿Ø¿æ  ¿À¿—¿ﬂ¿ÿ¿“¿€¿ÂÄˆ¿“Ä»/// Called for every tap down including every tap down that's part of a
/// double click or a long press, except touches that include enough movement
/// to not qualify as taps (e.g. pans and flings). ¿‡Ä–¿üÄî/// Called when a pointer has tapped down and the force of the pointer has
/// just become greater than [ForcePressGestureRecognizer.startPressure]. ¿µÄ°¿Gi/// Called when a pointer that had previously triggered [onForcePressStart] is
/// lifted off the screen. ¿[f¿≥;/// Called for a tap event with the secondary mouse button. ¿∆s¿'@/// Called for a tap down event with the secondary mouse button. ¿>ÅX¿âÅ&/// Called for each distinct tap except for every second tap of a double tap.
/// For example, if the detector was configured with [onTapDown] and
/// [onDoubleTapDown], three quick taps would be recognized as a single tap
/// down, followed by a double tap down, followed by a single tap down. ¿õÅ¿ãÄ…/// Called for each touch that becomes recognized as a gesture that is not a
/// short tap, such as a long tap or drag. It is called at the moment when
/// another gesture from the touch is recognized. ¿°Å¿èÄ¬/// Called for a single long tap that's sustained for longer than
/// [kLongPressTimeout] but not necessarily lifted. Not called for a
/// double-tap-hold, which calls [onDoubleTapDown] instead. ¿®Ää¿D/// Called after [onSingleLongTapStart] when the pointer is dragged. ¿7{¿†C/// Called after [onSingleLongTapStart] when the pointer is lifted. ¿∑Äº¿dÄä/// Called after a momentary hold or a short tap that is close in space and
/// time (within [kDoubleTapTimeout]) to a previous short tap. ¿xn¿“7/// Called when a mouse starts dragging to select text. ¿ÎÅ5¿ÄÚ/// Called repeatedly as a mouse moves while dragging.
///
/// The frequency of calls is throttled to avoid excessive text layout
/// operations in text fields. The throttling is controlled by the constant
/// [_kDragSelectionUpdateThrottle]. ¿%t¿áA/// Called when a mouse that was previously dragging is released. ¿ûÄû¿ 4x/// How this gesture detector should behave during hit testing.
///
/// This defaults to [HitTestBehavior.deferToChild]. ¿ A1¿ m/// Child below this widget.  ¿ wX¿ ô   ¿ w¿ x ¿ ”õÂ¿ Ÿ   ¿!x¿!  ¿!í¿!ö  ¿"+¿"0 ¿"?¿'R'¿'d  ¿'})¿'ê  ¿'™¿'±   ¿"I|¿"Z   ¿"I¿"J¿#@Çæ¿#E  ¿#T¿#d   ¿&Å¿&  ¿&¿&"   ¿'C¿'    ¿'ŒÄµ¿'”  ¿'‰¿'ˆ   ¿(áÄ¸¿(å  ¿(û¿(±   ¿)áÇU¿*¬Å)/// Drag updates are being throttled to avoid excessive text layouts in text
/// fields. The frequency of invocations is controlled by the constant
/// [_kDragSelectionUpdateThrottle].
///
/// Once the drag gesture ends, any pending drag update will be fired
/// immediately. See [_handleDragEnd].   ¿+‡Å€¿+Â  ¿+Ù¿,   ¿-øÄ†¿-ƒ  ¿-◊¿-Í   ¿.ca¿.h  ¿.y¿.å   ¿.»Ä≤¿.Õ  ¿.„¿.˙   ¿/~Ä∆¿/É  ¿/û"¿/∫   ¿0HÄƒ¿0M  ¿0a¿0v   ¿1U¿1    ¿1iÅ¿1n  ¿1ä¿1í   ¿2Ää6¿2ì  ¿2ô¿2ß  ¿2Ä¿2Å ¿<∫äf¿>	ÅH/// A [ValueNotifier] whose [value] indicates whether the current contents of
/// the clipboard can be pasted.
///
/// The contents of the clipboard can only be read asynchronously, via
/// [Clipboard.getData], so this maintains a value that can be used
/// synchronously. Call [update] to asynchronously update value if needed. ¿>hÄè ¿>î¿>´)/// Create a new ClipboardStatusNotifier.¿>≤/¿>√  ¿> ¿>Ÿ¿>⁄¿>Í¿>Ô¿>ı¿>¿>˚¿?  ¿?¿?äN¿?¬,/// True if this instance has been disposed.   ¿?‹Éœ¿@#7/// Check the [Clipboard] and update [value] if needed.   ¿CØÄÏ¿C¿  ¿CÃ¿C⁄  ¿CØ¿C∞¿DüÄ¡¿D∞  ¿Dø¿DÕ  ¿Dü¿D†¿EdÅ9¿Eu  ¿Eê¿E£  ¿Ed¿Ee¿F°}¿F≤   ¿F°¿F¢  ¿G"Ç¿GpH/// An enumeration of the status of the content on the user's clipboard.  ¿GÑX¿G”L/// The clipboard content can be pasted, such as a String of nonzero length. ¿G·ÄÊ¿H¿Äÿ/// The status of the clipboard is unknown. Since getting clipboard data is
/// asynchronous (see [Clipboard.getData]), this status often exists while
/// waiting to receive the clipboard contents for the first time. ¿HÃ[¿IL/// The content on the clipboard is not pasteable, such as when it is empty.        É¿Ç¶Ö˙Ç1/// Signature for when a pointer that's dragging to select text has moved again.
///
/// The first argument [startDetails] contains the details of the event that
/// initiated the dragging.
///
/// The second argument [updateDetails] contains the details of the current
/// pointer movement. It's the same as the one passed to [DragGestureRecognizer.onUpdate].
///
/// This signature is different from [GestureDragUpdateCallback] to make it
/// easier for various text fields to use [TextSelectionGestureDetector] without
/// having to store the start position.  Ü&Ü8  ÜEÜX   ÜhÅÑáßÅ6/// The type for a Function that builds a toolbar's container with the given
/// child.
///
/// See also:
///
///   * [TextSelectionToolbar.toolbarBuilder], which is of this type.
///     type.
///   * [CupertinoTextSelectionToolbar.toolbarBuilder], which is similar, but
///     for a Cupertino-style toolbar.  á»á÷  áﬁáÊ    ÉÄ¢ÉÉX/// A duration that controls how often the drag selection update callback is
/// called.É£É´ÉºÉ∏É¨É∫  â <ÄÜÄ§Ä•Ä∫Ä÷Ä◊ÅÅ.ÅVÅÅ®Å–Å—ÅÊÅ˝ÇÇ/ÇLÇeÇÖÇúÇªÇ÷Ç◊ÉÉÉhÉtÉøÉ¿ÑÑÑbÑ~ÑÇÑŒÖ)Ö-ÖyÖ ÖÚÜgÜhÜµÜ¿ÜƒÜ“Ü÷áá*áxáüáÌáÓà>àBàìàﬁââLâxâ~âœää/ä0ä<äÑäÜäáäÕäÙä¯ã4ã[ãêãñã‚ã¸ååRå¢åÓç"çöçõçÏé8éhé∑é∏éÊéÏè+è1èÑèùè£èÚêêêkêµêÃê„ê˝ëë7ëLëtëòë‡í+íYíÉíàíâíπíÊíÁì2ìzìçììì„ìÈî/îPîÄî‘îÿîŸï$ïWï]ï≠ï≥ï˙ññLñ°ñ•ñ¶ñÙóóó\ó}óÉó”ò ò.ò`òÇòÜòáò“ôô*ô0ô}ôûô‘öZö^ö_ö©öØö¸õõSõàõÁú!ú%ú&úrúxú∆ú÷ùùRù≤ùÌùÒùÚû.û4ûÉûìûôûÂü.üAüÇü≈ü¸† ††N†s†y†ö†††Ò°°=°t°º°¿°¬°√¢¢¢¢n¢π¢Ÿ¢ˆ£B£H£ò£±£÷£˘§§@§m§ò§∏§‘§ı••]•à•∂•‘•Ù¶¶D¶\¶ºßßIßsßãßµßÈ®#®_®}®¡©©?©w©ì©”™™H™Ä™¨™ÿ´ ´2´`´ä´¬´Ó¨0¨7¨;¨<¨å¨õ¨œ≠≠≠R≠S≠û≠ÁÆ.ÆSÆTÆñÆ»Æ…ØØ<Ø=ØnØoØçØ¢Ø ØÀØÊØÁ∞∞∞v∞Œ±$±W±√≤+≤≠≤±≤≤≤ﬂ≤Â≥6≥e≥k≥Ñ≥≤≥“≥˜¥¥:¥H¥N¥m¥ú¥†¥°¥›¥Ùµµ8µ<µ=µyµ≤µ≥µÔ∂∂%∂J∂N∂O∂ä∂ê∂ﬁ∑,∑|∑≈∏∏e∏ñ∏¡∏ﬂ∏Ì∏Ûπ
π)π-π.πQπgπëπ∏π‹∫∫)∫1∫d∫â∫≠∫‘∫˙ªª1ª\ª´ªªÙªıº'º-º~º∑ºÓºÔΩ ΩvΩwΩßΩÍΩÎæ æKæLæàæ¡æ¬æ˙øø.øëøÚ¿ @¿ @L¿ @y¿ @}¿ @~¿ @†¿ @–¿ A ¿ AE¿ Ap¿ Aã¿ A–¿ B¿ Bj¿ B≤¿ C¿ CI¿ Cr¿ CŸ¿ D!¿ Dp¿ E¿ E¿ EV¿ EZ¿ E[¿ E{¿ E´¿ E€¿ F ¿ FJ¿ Fc¿ Fó¿ F˛¿ GF¿ Gì¿ H$¿ H*¿ Hp¿ Ht¿ Hu¿ Hï¿ Hñ¿ H‹¿ I¿ IB¿ II¿ Iö¿ Iû¿ Iü¿ IÁ¿ J¿ Jd¿ Je¿ Já¿ Jﬂ¿ JÌ¿ JÛ¿ JÙ¿ K¿ K?¿ Kä¿ K©¿ K ¿ K¿ L¿ LA¿ LL¿ L¿ L∞¿ L∫¿ L…¿ LÏ¿ M¿ M0¿ MS¿ My¿ M¶¿ Mœ¿ M⁄¿ N¿ NO¿ NY¿ Nh¿ Nn¿ No¿ N≠¿ N±¿ N≤¿ N‘¿ N’¿ O¿ O[¿ OÉ¿ Oä¿ O›¿ O·¿ O‚¿ P,¿ PU¿ P≠¿ PÆ¿ P–¿ Q)¿ Q7¿ Q=¿ Q>¿ Qd¿ Qâ¿ Q‘¿ QÛ¿ R¿ R:¿ Rc¿ Râ¿ Rî¿ Rœ¿ S ¿ S
¿ S¿ S<¿ S_¿ SÄ¿ S£¿ S…¿ S¿ T!¿ T,¿ Tp¿ T°¿ T´¿ T∫¿ T¿¿ T¡¿ U ¿ U¿ U¿ U_¿ U∂¿ UË¿ V¿ V:¿ VA¿ Vt¿ Vx¿ Vy¿ V†¿ V√¿ VÍ¿ W¿ W¿ W=¿ Wm¿ Ws¿ Wt¿ Wó¿ W¥¿ W“¿ WÍ¿ X¿ X ¿ X&¿ X*¿ X,¿ X-¿ Xe¿ Xi¿ X¥¿ X€¿ XÙ¿ Y@¿ YF¿ Yñ¿ Y´¿ Y∆¿ Y·¿ Z¿ Z>¿ Z\¿ Z}¿ Zü¿ Zæ¿ ZÚ¿ [¿ [3¿ [R¿ [r¿ [è¿ [®¿ [‚¿ \¿ \,¿ \O¿ \w¿ \ù¿ \¡¿ \˜¿ ]¿ ]6¿ ]a¿ ]ê¿ ]∑¿ ]‚¿ ^¿ ^?¿ ^â¿ ^ï¿ ^¨¿ ^ﬂ¿ _7¿ _ì¿ _ö¿ _û¿ _ü¿ _ﬂ¿ _Â¿ `2¿ `s¿ `ë¿ `í¿ `º¿ `¬¿ a¿ aT¿ aÄ¿ a∑¿ a‹¿ aÍ¿ a¿ b¿ b%¿ b)¿ b*¿ bX¿ b^¿ bØ¿ bµ¿ c¿ c:¿ cW¿ c¿ c¶¿ c¥¿ c∫¿ c⁄¿ cÒ¿ cı¿ cˆ¿ d!¿ d'¿ dx¿ dú¿ d¢¿ dÏ¿ e ¿ e!¿ ei¿ e©¿ e™¿ e˘¿ f;¿ f<¿ fé¿ fù¿ fŸ¿ f⁄¿ g¿ g¿ gW¿ gñ¿ g¿¿ gı¿ h¿ h&¿ h,¿ hH¿ h_¿ hc¿ hd¿ hê¿ hñ¿ hÂ¿ hÎ¿ i:¿ il¿ iá¿ i≠¿ i“¿ i‡¿ iÊ¿ j¿ j¿ j¿ j ¿ jI¿ jO¿ jû¿ j¬¿ j»¿ k¿ kB¿ kC¿ kâ¿ k«¿ k»¿ l¿ lU¿ lV¿ l¶¿ lµ¿ lÔ¿ l¿ m¿ m¿ mh¿ må¿ mí¿ mÃ¿ m˚¿ m¸¿ n;¿ nÖ¿ nµ¿ n¿ o#¿ o<¿ oB¿ oc¿ og¿ oh¿ o≤¿ o‘¿ o’¿ p&¿ p3¿ pW¿ pX¿ p•¿ pœ¿ p˜¿ p¯¿ qE¿ qm¿ qì¿ qî¿ qŸ¿ r
¿ r¿ rQ¿ rR¿ ró¿ rﬂ¿ rÒ¿ s¿ s7¿ s8¿ sv¿ s|¿ s¡¿ t¿ tW¿ tv¿ t|¿ t«¿ u¿ uF¿ uL¿ uî¿ uö¿ u™¿ u∞¿ v¿ vE¿ vF¿ vë¿ vﬂ¿ vÂ¿ w1¿ wx¿ wª¿ x
¿ x;¿ xä¿ x◊¿ y	¿ y¿ yn¿ yÉ¿ y≤¿ y≥¿ z¿ z¿ z!¿ zl¿ zú¿ zŒ¿ zœ¿ {¿ {@¿ {F¿ {î¿ {¬¿ {»¿ |¿ |2¿ |e¿ |Å¿ |®¿ |Õ¿ |€¿ |·¿ |ˇ¿ }¿ }¿ }¿ }k¿ }Ø¿ }∞¿ }˝¿ ~5¿ ~U¿ ~V¿ ~r¿ ~å¿ ~ç¿ ~Ã¿ ¿ *¿ A¿ ]¿ k¿ q¿ r¿ ë¿ ¡¿ Ô¿ ˆ¿ ˜¿ ÄG¿ Äd¿ Äh¿ Äi¿ Ä®¿ Ä‚¿ Ä˜¿ Å¿ Å*¿ ÅG¿ Åd¿ Å{¿ ÅÅ¿ ÅÖ¿ ÅÜ¿ Å≈¿ Ç¿ Ç ¿ Ç7¿ ÇS¿ Ça¿ Çg¿ Çú¿ Çˇ¿ É¿ É¿ É$¿ É?¿ Éo¿ É}¿ ÉÉ¿ ÉŒ¿ Ñ¿ Ña¿ Ñ~¿ Ñé¿ Ññ¿ Ñ¥¿ Ñˇ¿ Ö ¿ Ö@¿ Öi¿ Öí¿ Öú¿ Ö¿¿ Ö ¿ Ö◊¿ Öı¿ Ü¿ ÜC¿ ÜK¿ Üm¿ Üs¿ Üw¿ Üx¿ Ü∞¿ Üˆ¿ á¿ á¿ á7¿ áT¿ áq¿ áà¿ áé¿ á™¿ áø¿ á≈¿ á…¿ á ¿ à	¿ à6¿ à<¿ ài¿ à~¿ àï¿ à±¿ àø¿ à≈¿ à›¿ àÚ¿ àˆ¿ à˜¿ â2¿ âd¿ ây¿ âå¿ âò¿ âú¿ âù¿ â–¿ âÈ¿ ä6¿ ä[¿ äw¿ äÑ¿ ä¨¿ äÃ¿ ä˚¿ ã5¿ ãq¿ ãØ¿ ãÁ¿ å¿ å>¿ åo¿ åù¿ å¶¿ å¨¿ å…¿ åﬁ¿ åÂ¿ åÈ¿ åÍ¿ ç¿ ç4¿ çÅ¿ çﬂ¿ é¿ é+¿ é8¿ é`¿ é~¿ é´¿ éÂ¿ è¿ è[¿ èë¿ èø¿ èÊ¿ ê¿ êC¿ êL¿ êR¿ êo¿ êÑ¿ êã¿ êè¿ êê¿ êø¿ ê‰¿ ê˛¿ ë¿ ë¿ ëT¿ ëU¿ ëÖ¿ ë±¿ ë˘¿ í ¿ í¿ íe¿ íÇ¿ íÉ¿ íÿ¿ ì¿ ì&¿ ìF¿ ìö¿ ìõ¿ ìø¿ ìÀ¿ î¿ îD¿ îK¿ îL¿ îg¿ îù¿ îƒ¿ îÙ¿ ï¿ ïC¿ ïi¿ ïó¿ ï≥¿ ï„¿ ñ¿ ñ5¿ ñ_¿ ñh¿ ño¿ ñs¿ ñu¿ ñv¿ ñ¶¿ ñﬁ¿ ñˇ¿ ó"¿ óI¿ ól¿ óâ¿ ó™¿ óœ¿ ó‰¿ ò ¿ ò&¿ òK¿ òn¿ òt¿ òu¿ òô¿ ò∫¿ ò◊¿ òÛ¿ ô%¿ ôP¿ ôi¿ ôû¿ ô–¿ ö¿ ö¿ ö¿ öa¿ öc¿ öd¿ ö÷¿ ö˛¿ õ4¿ õ5¿ õA¿ õV¿ õm¿ õn¿ õÀ¿ õÃ¿ õÌ¿ ú,¿ ú0¿ ú1¿ ú=¿ úz¿ ú†¿ ú’¿ ú„¿ úÈ¿ ù.¿ ùO¿ ùé¿ ùí¿ ùì¿ ùü¿ ù≤¿ ùÙ¿ û¿ û$¿ û(¿ û)¿ ûN¿ ûz¿ ûó¿ û§¿ û¡¿ û«¿ ûÀ¿ ûÃ¿ ûÿ¿ ûˇ¿ ü¿ ü3¿ ü]¿ ü}¿ üû¿ üÕ¿ üÂ¿ †¿ †L¿ †c¿ †á¿ †±¿ †–¿ †˘¿ °"¿ °H¿ °n¿ °}¿ °ä¿ °ï¿ °û¿ °•¿ °©¿ °´¿ °¨¿ °Ï¿ ¢#¿ ¢C¿ ¢e¿ ¢}¿ ¢†¿ ¢¬¿ ¢Á¿ £¿ £0¿ £U¿ £j¿ £ë¿ £«¿ £Õ¿ £Œ¿ £Ò¿ § ¿ §d¿ §™¿ §Í¿ •¿ •F¿ •j¿ •ê¿ •Ω¿ •æ¿ • ¿ ¶¿ ¶¿ ¶¿ ¶ ¿ ¶ê¿ ¶∏¿ ¶Ó¿ ¶Ô¿ ¶˚¿ ß¿ ß'¿ ß(¿ ßÖ¿ ßÜ¿ ß¶¿ ß‰¿ ßË¿ ßÈ¿ ®¿ ®9¿ ®V¿ ®c¿ ®Ä¿ ®Ü¿ ®ä¿ ®ã¿ ®ó¿ ®”¿ ®˘¿ ©=¿ ©]¿ ©õ¿ ©ü¿ ©†¿ ©¨¿ ©ø¿ ™ ¿ ™¿ ™0¿ ™4¿ ™5¿ ™A¿ ™h¿ ™≤¿ ™≈¿ ™Á¿ ™Ó¿ ´2¿ ´T¿ ´[¿ ´\¿ ´á¿ ´ü¿ ´∑¿ ´œ¿ ´Ë¿ ´Ô¿ ´¿ ¨=¿ ¨z¿ ¨—¿ ¨ÿ¿ ≠¿ ≠S¿ ≠ò¿ ≠€¿ Æ ¿ Æ'¿ Æ(¿ ÆP¿ Æt¿ Æõ¿ Æ∫¿ Æ◊¿ ÆÚ¿ Ø¿ Ø4¿ Ø\¿ ØÜ¿ Ø´¿ Øﬁ¿ ∞¿ ∞v¿ ∞¢¿ ∞∆¿ ±¿ ±M¿ ±z¿ ±®¿ ±◊¿ ±Ï¿ ±ˇ¿ ≤1¿ ≤L¿ ≤è¿ ≤—¿ ≥¿ ≥T¿ ≥g¿ ≥x¿ ≥á¿ ≥£¿ ≥À¿ ≥Ô¿ ¥¿ ¥7¿ ¥_¿ ¥p¿ ¥´¿ ¥ƒ¿ ¥·¿ µ¿ µ=¿ µN¿ µ]¿ µj¿ µu¿ µ~¿ µÖ¿ µâ¿ µã¿ µå¿ µ“¿ µ÷¿ ∂&¿ ∂v¿ ∂…¿ ∑¿ ∑c¿ ∑Ä¿ ∑Ñ¿ ∑í¿ ∑ñ¿ ∑Ê¿ ∏4¿ ∏G¿ ∏Ñ¿ ∏∫¿ π¿ πG¿ πH¿ πÜ¿ π§¿ π•¿ πﬂ¿ π¸¿ π˛¿ πˇ¿ ∫F¿ ∫J¿ ∫ê¿ ∫·¿ ª*¿ ªy¿ ª∆¿ ª·¿ ªÂ¿ º3¿ ºc¿ ºg¿ ºu¿ ºy¿ º∆¿ ºÒ¿ Ω5¿ Ωs¿ Ωü¿ Ω÷¿ Ω‹¿ æ¿ æ+¿ æG¿ æh¿ æi¿ æ¨¿ æ≤¿ ø¿ øR¿ øé¿ øõ¿ øŸ¿ ø⁄¿ ¿¿ ¿L¿ ¿ç¿ ¿π¿ ¿Õ¿ ¿”¿ ¿‘¿ ¡¿ ¡R¿ ¡Y¿ ¡Z¿ ¡ú¿ ¡›¿ ¡·¿ ¡‚¿ ¬¿ ¬¿ ¬o¿ ¬µ¿ ¬∫¿ √	¿ √3¿ √8¿ √G¿ √L¿ √ö¿ √≠¿ ƒ¿ ƒ.¿ ƒJ¿ ƒÑ¿ ƒÖ¿ ƒŸ¿ ≈)¿ ≈G¿ ≈Ñ¿ ≈∆¿ ∆¿ ∆R¿ ∆}¿ ∆Ñ¿ ∆Ö¿ ∆≤¿ ∆‡¿ «¿ «¿ «¿ «¿ «#¿ «$¿ «\¿ «a¿ «î¿ «ô¿ «®¿ «≠¿ «¸¿ »¿ »Z¿ »u¿ »ë¿ »À¿ »Ã¿ … ¿ …_¿ …õ¿ …∆¿ …Õ¿ …Œ¿ …˚¿  )¿  K¿  T¿  a¿  h¿  l¿  m¿  ö¿  †¿  Ò¿ À@¿ ÀP¿ Àñ¿ À¡¿ À¬¿ Ã¿ Ã5¿ ÃB¿ Ãí¿ Ãì¿ Ã›¿ Õ¿ Õ¿ Õ^¿ Õ_¿ ÕØ¿ Õÿ¿ ÕŸ¿ Œ¿ Œ0¿ Œh¿ Œâ¿ ŒØ¿ Œ÷¿ ŒÈ¿ ŒÌ¿ ŒÓ¿ œ=¿ œ]¿ œ^¿ œ´¿ œÙ¿ –#¿ –L¿ –M¿ –â¿ –è¿ –‡¿ —;¿ —A¿ —Q¿ —W¿ —®¿ —µ¿ —‡¿ “¿ “¿ “¿ “E¿ “î¿ “Á¿ ”¿ ”Y¿ ”ã¿ ”∫¿ ”„¿ ‘¿ ‘¿ ‘@¿ ‘¶¿ ‘À¿ ‘Ó¿ ’¿ ’0¿ ’o¿ ’é¿ ’±¿ ’ª¿ ’ ¿ ’Î¿ ÷<¿ ÷[¿ ÷~¿ ÷†¿ ÷Á¿ ÷¸¿ ◊6¿ ◊R¿ ◊v¿ ◊ù¿ ◊∏¿ ◊≈¿ ◊◊¿ ◊·¿ ÿ.¿ ÿ¿ ÿ ¿ ÿÁ¿ Ÿ0¿ Ÿ?¿ Ÿ`¿ ŸÉ¿ Ÿ¶¿ Ÿ»¿ ⁄¿ ⁄)¿ ⁄3¿ ⁄|¿ ⁄ã¿ ⁄ë¿ ⁄ï¿ ⁄ñ¿ ⁄⁄¿ ⁄‡¿ €*¿ €I¿ €O¿ €ì¿ €ô¿ €©¿ €Ø¿ €˛¿ ‹¿ ‹¿ ‹T¿ ‹|¿ ‹§¿ ‹…¿ ‹Ú¿ ›¿ ›I¿ ›R¿ ›X¿ ›\¿ ›]¿ ›ü¿ ›•¿ ›ˆ¿ ﬁ¿ ﬁ¿ ﬁb¿ ﬁh¿ ﬁx¿ ﬁ~¿ ﬁÀ¿ ﬁﬁ¿ ﬁÎ¿ ﬂ¿ ﬂG¿ ﬂn¿ ﬂí¿ ﬂ¡¿ ﬂ»¿ ﬂÓ¿ ‡¿ ‡¿ ‡¿ ‡¿ ‡[¿ ‡a¿ ‡°¿ ‡ß¿ ‡∑¿ ‡Ω¿ ·¿ ·¿ ·(¿ ·U¿ ·z¿ ·≠¿ ‚¿ ‚<¿ ‚_¿ ‚Ç¿ ‚ß¿ ‚Î¿ „¿ „1¿ „=¿ „N¿ „s¿ „ò¿ „Ω¿ „·¿ ‰2¿ ‰F¿ ‰R¿ ‰ù¿ ‰Æ¿ ‰œ¿ ‰Ù¿ ÂC¿ Âj¿ Âé¿ Â◊¿ ÂÓ¿ Ê*¿ ÊH¿ Ên¿ Êó¿ Ê¥¿ Ê√¿ Ê◊¿ Ê„¿ Á¿ Á/¿ Á\¿ Áá¿ Á∫¿ Ë
¿ ËY¿ Ën¿ Ëò¿ Ëƒ¿ È¿ Èi¿ È~¿ Èä¿ Èõ¿ È£¿ È©¿ È≠¿ ÈÆ¿ ÈÚ¿ È¯¿ ÍC¿ ÍI¿ ÍY¿ Í_¿ Í©¿ Í¡¿ ÍŒ¿ Î!¿ Î"¿ Îi¿ Îo¿ Îæ¿ Î–¿ Î÷¿ ÎÊ¿ ÎÏ¿ Ï9¿ ÏQ¿ Ï^¿ Ïõ¿ Ï¿¿ ÏÁ¿ Ì¿ Ì=¿ ÌF¿ ÌL¿ ÌP¿ ÌQ¿ Ìù¿ Ì£¿ ÌÒ¿ Ó¿ Ó¿ Ó#¿ Ó)¿ Ór¿ Óì¿ Ó†¿ ÓÁ¿ Ô¿ Ô3¿ ÔY¿ Ôâ¿ Ôí¿ Ôò¿ Ôú¿ Ôù¿ Ô‚¿ ÔË¿ ¿ ¿ /¿ 5¿ Ö¿ ò¿ •¿ ﬁ¿ Ò¿ Ò&¿ Ò,¿ Ò0¿ Ò1¿ Òr¿ Òx¿ Òæ¿ ÒÀ¿ ÒÂ¿ Ú¿ Ú¿ Ú¿ ÚD¿ Úc¿ ÚÑ¿ Ú–¿ Û¿ Û!¿ ÛK¿ Ûq¿ Ûó¿ Û°¿ Û∞¿ Û”¿ Ûˆ¿ Ù¿ Ù:¿ Ùb¿ Ù≠¿ Ù∑¿ Ù›¿ ÙÏ¿ ÙÚ¿ Ùˆ¿ Ù˜¿ ı<¿ ıB¿ ıR¿ ıX¿ ı®¿ ıª¿ ı¸¿ ˆ	¿ ˆ=¿ ˆq¿ ˆô¿ ˆù¿ ˆû¿ ˆ‡¿ ˆÊ¿ ˜1¿ ˜h¿ ˜n¿ ˜~¿ ˜Ñ¿ ˜—¿ ˜‰¿ ˜Ò¿ ¯"¿ ¯G¿ ¯ä¿ ¯≤¿ ¯÷¿ ¯ﬁ¿ ¯‰¿ ¯Ë¿ ¯È¿ ˘0¿ ˘6¿ ˘{¿ ˘Å¿ ˘ë¿ ˘ó¿ ˘‰¿ ˘¸¿ ˙	¿ ˙A¿ ˙g¿ ˙u¿ ˙{¿ ˙≠¿ ˙‹¿ ˚¿ ˚0¿ ˚1¿ ˚ï¿ ˚≥¿ ˚⁄¿ ˚˚¿ ¸¿ ¸n¿ ¸¿ ¸§¿ ¸…¿ ¸Ï¿ ˝¿ ˝a¿ ˝r¿ ˝z¿ ˝≥¿ ˝¿¿ ˝Á¿ ˛¿ ˛8¿ ˛A¿ ˛G¿ ˛H¿ ˛Ö¿ ˛â¿ ˛ä¿ ˛“¿ ˛ÿ¿ ˇ&¿ ˇ=¿ ˇC¿ ˇS¿ ˇY¿ ˇß¿ ˇ‡¿ ˇÌ¿ L¿ r¿ Ä¿ Ü¿ á¿ £¿ Ô¿-¿~¿–¿—¿ˇ¿8¿b¿ç¿ñ¿ú¿ù¿…¿¿B¿õ¿°¿¢¿Ó¿ ¿M¿≥¿„¿6¿q¿≤¿Ù¿H¿w¿ß¿À¿	¿6¿C¿N¿r¿{¿ñ¿Ÿ¿"¿Q¿Å¿•¿·¿	¿	¿	&¿	J¿	S¿	`¿	≤¿	∏¿	º¿	Ω¿
¿
¿
R¿
l¿
r¿
Ç¿
à¿
ÿ¿
Î¿
¯¿,¿G¿f¿ã¿ë¿ï¿ñ¿‚¿¿¿H¿h¿v¿ï¿∞¿∑¿‡¿¿¿\¿®¿Œ¿¸¿ ¿L¿~¿∫¿Ë¿¿B¿v¿§¿æ¿“¿Ÿ¿›¿ﬂ¿‡¿2¿6¿Å¿–¿ ¿0¿4¿B¿F¿í¿ﬁ¿Ô¿+¿Z¿`¿™¿ÿ¿ˇ¿¿"¿>¿X¿q¿é¿¶¿¬¿·¿¿"¿<¿[¿{¿ò¿´¿ƒ¿‚¿„¿-¿}¿≤¿›¿ﬁ¿+¿w¿≤¿≥¿¿!¿X¿Y¿ó¿√¿ƒ¿¿;¿<¿å¿”¿!¿k¿ò¿ô¿Ë¿5¿i¿û¿ü¿„¿*¿h¿•¿¶¿Ì¿4¿5¿{¿¥¿µ¿¿D¿u¿v¿∞¿Ë¿È¿"¿(¿q¿ø¿Ê¿"¿#¿g¿õ¿ú¿ﬁ¿‰¿ ¿ >¿ ?¿ ^¿ t¿ u¿ Å¿ –¿ “¿ ”¿!*¿!v¿!ê¿!™¿!ˆ¿")¿"F¿"G¿"S¿"f¿"Ö¿"≠¿"¬¿"∆¿"«¿#¿#>¿#n¿#ì¿#‡¿$3¿$Ç¿$∞¿%
¿%V¿%p¿%ù¿%û¿%ø¿%⁄¿%ı¿%˚¿%ˇ¿& ¿&,¿&E¿&p¿&ü¿&‰¿&Í¿'¿'¿'	¿'%¿'K¿'O¿'P¿'{¿'®¿'À¿'Ã¿( ¿(+¿(P¿(Ä¿(Ñ¿(Ö¿(ª¿(·¿)¿)Ä¿)Ñ¿)Ö¿)‘¿*¿*D¿*J¿*í¿*ª¿*·¿+¿+8¿+ë¿+∂¿+Ÿ¿+›¿+ﬁ¿,¿,9¿,e¿,±¿,Ã¿,ˆ¿-¿- ¿-N¿-s¿-ï¿-∏¿-º¿-Ω¿-Ù¿.¿./¿.\¿.`¿.a¿.ñ¿.¡¿.≈¿.∆¿/¿/D¿/q¿/w¿/{¿/|¿/ƒ¿0	¿0;¿0A¿0E¿0F¿0Ä¿0æ¿0È¿0Ô¿1	¿1¿1¿1+¿1G¿1b¿1f¿1g¿1§¿1…¿1Î¿1ˇ¿2¿2¿2G¿2y¿2}¿2~¿2ä¿2±¿3¿3¿3p¿3§¿3Ã¿3›¿4¿4K¿4r¿4ï¿4¡¿4 ¿4—¿4“¿5¿55¿5b¿5—¿6,¿6\¿6o¿6¶¿6Á¿7¿7&¿7/¿75¿76¿7e¿7ï¿7¬¿8%¿8ù¿8«¿8⁄¿9,¿9G¿9Ä¿9©¿9‘¿9˙¿:¿:¿:¿:¿:c¿:‘¿;¿;B¿;U¿;™¿;˙¿<¿<¿<¿<¿<4¿<N¿<p¿<ë¿<¨¿<≥¿<∑¿<π¿<∫¿=¿=)¿=-¿=t¿=∏¿>¿>f¿>í¿>Æ¿>„¿>¯¿>˘¿?¿?S¿?à¿?∑¿?Ÿ¿?⁄¿@¿@4¿@I¿@W¿@]¿@^¿@y¿@É¿@¥¿@’¿A	¿A'¿A=¿A`¿A≤¿Aº¿B¿BB¿B}¿Bç¿Bï¿Bº¿B ¿B–¿B—¿C¿C'¿CO¿CP¿C|¿Cä¿Cê¿C®¿C¨¿C≠¿Cπ¿CÂ¿C˛¿D/¿D5¿Da¿Dq¿Dw¿Dò¿Dú¿Dù¿D©¿Dÿ¿D¸¿E#¿EW¿E]¿Ea¿Eb¿En¿E´¿E¿¿EÊ¿E¯¿F¿F.¿FU¿Fz¿Fî¿Fö¿Fû¿Fü¿F´¿Fæ¿F¿G¿G¿G¿G!¿G"¿Gk¿GÇ¿G—¿Gﬁ¿Gﬂ¿H-¿Hz¿Hæ¿H…¿H ¿I¿I)¿I+    _kDragSelectionUpdateThrottleToolbarItemsParentDataTextSelectionControlsTextSelectionOverlaySelectionOverlay_SelectionToolbarOverlay_SelectionToolbarOverlayState_SelectionHandleOverlay_SelectionHandleOverlayState+TextSelectionGestureDetectorBuilderDelegate#TextSelectionGestureDetectorBuilderTextSelectionGestureDetector"_TextSelectionGestureDetectorStateClipboardStatusNotifierClipboardStatus ;¬