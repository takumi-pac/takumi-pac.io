ÅnametoStringlabelhintactionhashCode==_nextId_actions_idsgetIdentifier	getActionstring
attributes+showWhenEmptyisInterestingvalueToStringflagsactionsattributedLabelvalueattributedValueincreasedValueattributedIncreasedValuedecreasedValueattributedDecreasedValueattributedHinttooltiptextDirectiontextSelectionscrollChildCountscrollIndexscrollPositionscrollExtentMaxscrollExtentMinplatformViewIdmaxValueLengthcurrentValueLengthrecttags	transform	elevation	thicknesscustomSemanticsActionIdshasFlag	hasActiontoStringShortdebugFillProperties_sortedListsEqual
childOrdergetChildren	onTapHintonLongPressHint
isNotEmptyenabledcheckedtoggledselectedbuttonlinkheader	textFieldsliderkeyboardKeyreadOnly	focusablefocusedinMutuallyExclusiveGrouphiddenobscured	multilinescopesRoute
namesRouteimage
liveRegionhintOverridessortKeytagForChildrenonTaponLongPressonScrollLeftonScrollRight
onScrollUponScrollDown
onIncrease
onDecreaseonCopyonCutonPasteonMoveCursorForwardByCharacteronMoveCursorBackwardByCharacteronMoveCursorForwardByWordonMoveCursorBackwardByWordonSetSelection	onSetTextonDidGainAccessibilityFocusonDidLoseAccessibilityFocus	onDismisscustomSemanticsActions$_maxFrameworkAccessibilityIdentifier_lastIdentifier_generateNewIdkeyid_id_showOnScreen
_transform_rectparentSemanticsClipRectparentPaintClipRectelevationAdjustmentindexInParentisInvisibleisMergedIntoParent_isMergedIntoParentisPartOfNodeMergingmergeAllDescendantsIntoThisNode _mergeAllDescendantsIntoThisNode	_children_debugPreviousSnapshot_replaceChildrenhasChildren_deadchildrenCountvisitChildren_visitDescendantsownerparentredepthChildrenattachdetach_dirty
_markDirty)_isDifferentFromCurrentSemanticAnnotation_customSemanticsActions_actionsAsBitsisTagged_flags_attributedLabel_attributedValue_attributedIncreasedValue_attributedDecreasedValue_attributedHint_tooltip
_elevation
_thickness_hintOverrides_textDirection_sortKey_textSelectionisMultiline_isMultiline_scrollChildCount_scrollIndex_scrollPosition_scrollExtentMax_scrollExtentMin_platformViewId_maxValueLength_currentValueLength_canPerformAction_kEmptyConfig
updateWithgetSemanticsData_initIdentityTransform_kEmptyChildList!_kEmptyCustomSemanticsActionsList_kIdentityTransform_addToUpdate_childrenInTraversalOrder	sendEventtoStringDeeptoDiagnosticsNodedebugDescribeChildrendebugListChildrenInOrderisLeadingEdgeoffsetnode	compareTostartOffsetnodessortedWithinVerticalGroupsortedWithinKnotposition_dirtyNodes_nodes_detachedNodesrootSemanticsNodedisposesendSemanticsUpdate_getSemanticsActionHandlerForIdperformAction%_getSemanticsActionHandlerForPositionperformActionAtisSemanticBoundary_isSemanticBoundaryexplicitChildNodes+isBlockingSemanticsOfPreviouslyPaintedNodeshasBeenAnnotated_hasBeenAnnotated
_addAction_addArgumentlessAction_onTap_onLongPress_onScrollLeft
_onDismiss_onScrollRight_onScrollUp_onScrollDown_onIncrease_onDecrease_onCopy_onCut_onPasteonShowOnScreen_onShowOnScreen_onMoveCursorForwardByCharacter _onMoveCursorBackwardByCharacter_onMoveCursorForwardByWord_onMoveCursorBackwardByWord_onSetSelection
_onSetText_onDidGainAccessibilityFocus_onDidLoseAccessibilityFocusgetActionHandler_indexInParentisMergingSemanticsOfDescendants _isMergingSemanticsOfDescendants_onCustomSemanticsActionisImage
isSelected	isEnabled	isChecked	isToggledisInMutuallyExclusiveGroupisFocusable	isFocusedisButtonisLinkisHeaderisSliderisKeyboardKeyisHiddenisTextField
isReadOnly
isObscuredhasImplicitScrollingtagsForChildren_tagsForChildrenaddTagForChildren_setFlag_hasFlagisCompatibleWithabsorbcopyinverseHitTesttraversalOrder	doCompareorderSemanticsNodeVisitorMoveCursorHandlerSetSelectionHandlerSetTextHandlerSemanticsActionHandlerSemanticsTagCustomSemanticsActionAttributedStringAttributedStringPropertySemanticsData_SemanticsDiagnosticableNodeSemanticsHintOverridesSemanticsPropertiesdebugResetSemanticsIdCounterSemanticsNode_BoxEdge_SemanticsSortGroup_pointInParentCoordinates_childrenInDefaultOrder_TraversalSortNodeSemanticsOwnerSemanticsConfigurationDebugSemanticsDumpOrder_concatAttributedStringSemanticsSortKeyOrdinalSortKeyÅêOffsetRectSemanticsActionSemanticsFlagTextDirectionStringAttributeMatrixUtilsTransformPropertySemanticsBindingVoidCallbackDiagnosticLevelDiagnosticPropertiesBuilderDiagnosticsNodeDiagnosticsTreeStyleKeyTextTreeConfigurationTextSelectionMatrix4SemanticsEventvisitChildrenboolvoidsetSelectionsetTextStringgetActionHandlerObjectRenderSemanticsGestureHandleroverrideobjectRuntimeType	immutableinthashruntimeTypelabelhintactionMap	TextRange
isNotEmptyisEmptylength	attributerangestartendListstringof
attributescopyadd
listEqualsDiagnosticsPropertyshowNamelevelvaluedefaultValueisInterestingparentConfigurationlineBreakProperties
replaceAllmergeAllDescendantsIntoThisNodegetSemanticsDataDiagnosticableincreasedecreaseScrollPositionpixelsdoublemaxScrollExtentminScrollExtentAndroidView	UiKitViewisTextFieldSet	elevation	thicknessindexdebugFillPropertiesDoublePropertyvaluesdescribeEnummap	getActionactionIdtoListIterablePropertyifEmptyflagStringPropertyEnumPropertyisValidMessagePropertyIntPropertyflagsactionsattributedLabelattributedValueattributedIncreasedValueattributedDecreasedValueattributedHinttooltiptextDirectionrect	setEqualstagsscrollChildCountscrollIndextextSelectionscrollPositionscrollExtentMaxscrollExtentMinplatformViewIdmaxValueLengthcurrentValueLength	transformcustomSemanticsActionIdshashAlliDiagnosticableNodedebugDescribeChildren
childOrderDiagnosticableTree	onTapHintonLongPressHintexplicitChildNodesscopesRoute
namesRouteisImageSnackBarisLiveRegion
liveRegionDirectionalityincreasedValuedecreasedValueRenderObjectaddTagForChildrentap	longPress
scrollLeftscrollRightscrollUp
scrollDowncutpastemoveCursorForwardByCharactermoveCursorBackwardByCharactermoveCursorForwardByWordmoveCursorBackwardByWorddidGainAccessibilityFocus	FocusNode
FocusScopeFocusManagerdidLoseAccessibilityFocusdismisscustomActionid_lastIdentifierPipelineOwnerflushSemanticsAbstractNodeDiagnosticableTreeMixinshowOnScreenmatrixEquals
isIdentityzeroisFiniteisMergingSemanticsOfDescendantsanychild	identicalErrorDescriptionErrorSpacertoDiagnosticsNodenamestyle
singleLineFlutterError	fromPartsErrorSummary	ErrorHintnodeisMergedIntoParentparent_deadisInvisible	dropChildattached
adoptChild_visitDescendantsownerforEachredepthChildattach_nodescontainsKey_detachedNodesremovecontainsdetach_dirtyNodes_flags_sortKey_textSelection_scrollPosition_scrollExtentMax_scrollExtentMin_actionsAsBitsindexInParent_maxValueLength_currentValueLength_actions_customSemanticsActionsPhysicalModelAconfigchildrenInInversePaintOrderhintOverridessortKeyisMultiline_platformViewIdkeysgetIdentifieroverridingAction_textDirection_scrollChildCount_scrollIndex_attributedValue_attributedIncreasedValue_attributedDecreasedValue_tooltipaddAllthisAttributedStringthisTextDirectionotherAttributedString_attributedLabelotherTextDirection_attributedHintmax
_thickness
_elevationsortFloat64Listidentitystorage	Int32ListSemanticsUpdateBuilder
updateNodelabelAttributesvalueAttributesincreasedValueAttributesdecreasedValueAttributeshintAttributestextSelectionBase
baseOffsettextSelectionExtentextentOffsetscrollChildrennanchildrenInTraversalOrderchildrenInHitTestOrderadditionalActionspositionclearsortNodeSystemChannelsaccessibilitysendtoMapnodeIdFlagPropertyifTrueifFalsehiddeninfogetAsTranslationshift
getAsScaletoStringAsFixedtoStringsplittakeline	substringjoindescriptiontagwhereisHiddendebugtraversalOrdertoStringDeepprefixLineOneprefixOtherLinesminLevelsparseinverseHitTest
Comparable	compareTooffsetstartOffsetdeflateisLeadingEdgetopLeftdxbottomRightedgenodesrtlreversedexpandsortedWithinKnot	directioncenternextNodeltrpiabdyVector3
transform3xysortedWithinVerticalGroupensureSemanticsSemanticsHandleChangeNotifierdisposedepth_dirtyisPartOfNodeMerging
_markDirtyinstancecreateSemanticsUpdateBuilder_addToUpdateupdateCustomAction
overrideIdplatformDispatcherupdateSemanticsbuildnotifyListeners_canPerformActionargs_showOnScreencopyInversetransformPointhasChildren	_childrendescribeIdentityvisitChildrenForSemantics	addActionGestureDetectordynamiccastListTileselected
isSelectedExcludeSemanticshasEnabledState	isEnabledhasCheckedState	isCheckedhasToggledState	isToggledRadioisInMutuallyExclusiveGroupisFocusable	isFocusedisButtonisLinkisHeaderisSliderisKeyboardKey
isReadOnly
isObscuredListViewTabBarhasImplicitScrollingIterableRenderViewportexcludeFromScrollinghasBeenAnnotated_hintOverrides_hasBeenAnnotated_isSemanticBoundary+isBlockingSemanticsOfPreviouslyPaintedNodes _isMergingSemanticsOfDescendants_tagsForChildren_indexInParentdebugDumpSemanticsTreeUnicodeRLEPDFLRE	protectedinfinitynegativeInfinityorder	DiagnosticsPropertyDiagnosticableDiagnosticableNodeDiagnosticableTreeAbstractNodeDiagnosticableTreeMixin
ComparableChangeNotifierSemanticsSortKeyxÑºëÖﬁÜä'Oe  dart:ui  package:flutter/foundation.dart  package:flutter/services.dart  'package:vector_math/vector_math_64.dart  semantics_event.dart 
 	dart:math  dart:ui  dart:ui  package:flutter/foundation.dart  package:flutter/painting.dart  package:flutter/services.dart  'package:vector_math/vector_math_64.dart  binding.dart  semantics_event.dart  	dart:core¿œM ¿’òíÅ <ÄÜÄ§Ä•Ä¡ÄŸÅÅDÅEÅoÅªÅ„ÇÇÇCÇbÇcÇ’Ç÷ÉuÉ∞ÉÔÉÑ#Ñ$ÑjÑnÑóÑõÑ∆ÖÖ	ÖDÖHÖñÖÂÜ&Ü'ÜsÜ≤Ü¯Ü˘áAáiáûáüá”á◊ààPàQàràvàµââNâRâ†âÌâ˚âˇäMäõäÈä¯ãã-ã3ãÉã”å#å4åUåVåìåôåﬂåÙåıççMçOçPçÄçÑç∆ééVéûéÌè<èJèNèùè—è’ê$ê7ê;êÉêÆê≤ê¿êƒëë ë>ëkëqë©ëÂííí0íEíFíñí§í™í·ìSìoìâìßìªìºì˙îîîNîdîeîüî¿î¡îÕïïïï5ïaïuï{ï•ï≈ï„ññ
ñññ-ñäñéñèñÿñÒóóeóªóºóÎò&òFò`òzòóò∏òæò—ò’ò÷ôô9ôRôVôXôYôëôúôµôÿôﬁö)ö9ö?öâöòö¨öøöõ(õ;õyõãõ¡õÛú;úHúRúgúsútú¨ú√úƒúÓúÙù6ù`ùaù§ù™ù˚ûDû|ûñû™û∞û–û„ûÈûÍüüCüôü¿üË†*†X†â†∂†¡°°B°J°P°ì°ó°ò°‰°¢¢?¢d¢Ü¢Ã¢–¢—¢›£££"£8£ô£ù£ü£†£Í§(§w§Ω§√• ••3•F•Z•z•í•£•∫•€•˘•˙¶G¶Ç¶à¶≠¶…¶ ¶÷ßIßJßVßùß∂ßÀß—ßÚ®®M®à®≥®π®ﬁ®ˆ®¸©i©m©o©p©®©¨©¯™I™ô™´™Ø™Ì™¯´"´I´O´ù´£´Ó¨ ¨¨4¨W¨z¨¶¨“¨Ù≠≠0≠H≠e≠Ç≠£≠¬≠ÊÆÆ+ÆNÆpÆíÆ∏Æ«Æ€Æ˛ØØ<ØdØåØΩØÓ∞∞ò±9±⁄≤ñ≥R≥¥¥¥M¥`¥a¥¢¥∑¥∏¥˜¥˝µ6µ<µvµ§µ•µÊ∂∂∂F∂L∂Ö∂Ø∂∞∂Ô∂ı∑.∑4∑n∑ú∑ù∑ﬁ∑ˇ∏∏>∏D∏}∏ß∏®∏‰πππLπRπïπ’π÷∫∫X∫^∫ó∫ù∫ﬂªªªOªxª~ª∑ªΩº º@ºAº}º√º…ΩΩΩJΩ}Ω~ΩÃΩ“æææJævæwæƒæËæÓø'ø-øeøéøèøƒø ¿ @¿ @¿ @¿ @Z¿ @ê¿ @∂¿ @∑¿ A¿ A4¿ AZ¿ A[¿ Aß¿ A≠¿ A˙¿ B¿ B%¿ B&¿ Bl¿ BÜ¿ Bá¿ B◊¿ BÈ¿ BÔ¿ C?¿ Cã¿ C—¿ C◊¿ CÁ¿ CÌ¿ D7¿ DW¿ DX¿ Dß¿ Dπ¿ Dø¿ D˙¿ E ¿ E¿ E¿ Ei¿ Eä¿ Eã¿ E⁄¿ EÏ¿ EÚ¿ F-¿ F3¿ FC¿ FI¿ Fú¿ FΩ¿ Fæ¿ G¿ G%¿ G+¿ Gy¿ G√¿ Gÿ¿ Gﬁ¿ GÓ¿ GÙ¿ H4¿ Hn¿ Hã¿ Hå¿ Hÿ¿ HÍ¿ H¿ I=¿ IQ¿ IW¿ Iß¿ IÈ¿ J¿ J¿ JV¿ Jh¿ Jn¿ Jª¿ Jœ¿ J’¿ K&¿ KQ¿ Kr¿ Ks¿ K≤¿ K≈¿ K∆¿ L¿ L#¿ L$¿ L~¿ LÑ¿ LÀ¿ M¿ M+¿ MG¿ MH¿ Mê¿ Mñ¿ M¶¿ M¨¿ M¸¿ N¿ N8¿ N9¿ N¿ NÖ¿ Nï¿ Nõ¿ NÁ¿ O¿ O¿ OM¿ Ol¿ Or¿ O•¿ O´¿ Oª¿ O¡¿ P	¿ P6¿ P7¿ Pf¿ Pß¿ P®¿ P€¿ Q&¿ Q'¿ Q3¿ Qy¿ Qz¿ QÜ¿ QÀ¿ Qˆ¿ RD¿ R®¿ R˜¿ SF¿ Sw¿ S¡¿ SÏ¿ T¿ T¿ Td¿ Tº¿ TÕ¿ U$¿ Uë¿ Uí¿ U¡¿ V¿ V,¿ VJ¿ VQ¿ V§¿ VÏ¿ W4¿ Wé¿ WË¿ X.¿ Xx¿ X›¿ Y¿ Yt¿ Yz¿ Y—¿ Z(¿ Zá¿ Z‡¿ [1¿ [ç¿ [Á¿ \C¿ \G¿ \H¿ \T¿ \w¿ \ô¿ \π¿ \›¿ ]¿ ]E¿ ]ã¿ ]—¿ ^¿ ^'¿ ^W¿ ^u¿ ^ú¿ ^“¿ ^˛¿ _.¿ _`¿ _î¿ _»¿ _˙¿ `,¿ `f¿ `é¿ `∂¿ `ﬁ¿ a6¿ a:¿ a;¿ aG¿ aj¿ au¿ aÇ¿ aó¿ a¨¿ a ¿ aË¿ a¸¿ b	¿ b¿ b&¿ b0¿ bC¿ bY¿ bj¿ b~¿ bì¿ b®¿ bº¿ b–¿ b·¿ b˚¿ c¿ c¿ c.¿ câ¿ cê¿ cï¿ cñ¿ c€¿ d¿ d¿ d¿ dF¿ do¿ dÖ¿ dç¿ dª¿ dﬁ¿ dˆ¿ d˛¿ e¿ e¿ e!¿ e3¿ e7¿ e9¿ e:¿ eâ¿ e™¿ e∫¿ e‘¿ eÓ¿ f¿ f¿ f¿ f?¿ f@¿ fL¿ f™¿ f¨¿ f≠¿ fÙ¿ g¿ g¿ g4¿ g?¿ gy¿ g£¿ gƒ¿ gÿ¿ gÚ¿ h¿ h8¿ h9¿ h_¿ he¿ hó¿ hù¿ h‰¿ i¿ i¿ i?¿ iZ¿ iu¿ iv¿ i£¿ i©¿ i€¿ i·¿ j+¿ je¿ jk¿ jù¿ jπ¿ j⁄¿ j€¿ k¿ kT¿ kU¿ ka¿ k†¿ k°¿ k≠¿ k–¿ k¸¿ l¿ l¿ lA¿ li¿ lû¿ l¢¿ l£¿ lØ¿ lÙ¿ m¿ mo¿ mÀ¿ mœ¿ m—¿ m“¿ n!¿ n6¿ n:¿ nä¿ nû¿ n©¿ n‡¿ o¿ o#¿ o5¿ oG¿ oZ¿ ol¿ o}¿ oå¿ où¿ o±¿ o¬¿ oÿ¿ oÎ¿ oˇ¿ p¿ p4¿ pE¿ pX¿ pl¿ pÇ¿ pó¿ pß¿ pº¿ p’¿ pÚ¿ q¿ q¿ q,¿ qF¿ q_¿ qÇ¿ qõ¿ qæ¿ qÕ¿ qﬂ¿ q¯¿ r¿ r(¿ r:¿ rS¿ rc¿ ry¿ rê¿ r®¿ rΩ¿ r‘¿ rÈ¿ r˛¿ s¿ s¿ s1¿ sZ¿ sÑ¿ s®¿ sÕ¿ sÊ¿ s˙¿ t ¿ tF¿ tZ¿ t{¿ tÔ¿ uc¿ u˚¿ vì¿ w¿ w¿ wT¿ w{¿ wÅ¿ wœ¿ x¿ xL¿ xc¿ xd¿ x©¿ xÓ¿ x˛¿ y¿ y5¿ yL¿ yM¿ yó¿ yÿ¿ yË¿ yÓ¿ z¿ z6¿ z7¿ zÜ¿ zŒ¿ z‘¿ {$¿ {I¿ {a¿ {b¿ {¶¿ {¨¿ {˘¿ |¿ |!¿ |"¿ |d¿ |j¿ |∫¿ }¿ }¿ }&¿ }'¿ }k¿ }q¿ }¿¿ ~¿ ~3¿ ~I¿ ~J¿ ~í¿ ~ò¿ ~‚¿ ~Ù¿ ¿ ¿ R¿ X¿ ü¿ ∏¿ Œ¿ œ¿ Ä¿ Ä4¿ Ä5¿ Är¿ Äx¿ Ä®¿ ÄÆ¿ ÄÒ¿ Å	¿ Å
¿ ÅK¿ ÅQ¿ Åò¿ Åû¿ Å¿ Ç:¿ Çã¿ Ç ¿ Ç„¿ Ç‰¿ É%¿ É+¿ É|¿ Éº¿ É¬¿ Ñ¿ Ñ^¿ ÑØ¿ ÑÓ¿ Ö¿ Ö¿ ÖS¿ ÖY¿ Ö©¿ ÖÍ¿ Ü¿ Ü¿ ÜM¿ ÜS¿ Ü¢¿ ÜÛ¿ Ü˘¿ áI¿ áñ¿ á®¿ áÆ¿ á˛¿ à¿ à#¿ àt¿ à¬¿ â¿ âG¿ â]¿ â^¿ âï¿ âõ¿ âË¿ ä8¿ ä}¿ äï¿ äñ¿ ä‰¿ äÛ¿ ä˘¿ ãC¿ ã}¿ ãÉ¿ ã∏¿ ã—¿ ã“¿ å¿ åM¿ åS¿ åÑ¿ å“¿ ç¿ ç¿ ç¿ ç$¿ çp¿ çå¿ çß¿ ç®¿ çı¿ ç˚¿ é¿ é¿ é`¿ éz¿ é{¿ é¥¿ é∫¿ é ¿ é–¿ è¿ è+¿ è,¿ èt¿ èz¿ è∆¿ ê¿ êF¿ êL¿ êö¿ êË¿ ë6¿ ë{¿ ë ¿ ëÙ¿ ë˙¿ í
¿ í¿ ía¿ í∏¿ í“¿ í”¿ ì¿ ì1¿ ì7¿ ìÑ¿ ìò¿ ìû¿ ìË¿ î!¿ î>¿ î?¿ îé¿ î†¿ î¶¿ îÛ¿ ï¿ ï¿ ïV¿ ïu¿ ïñ¿ ïó¿ ïÀ¿ ï—¿ ñ ¿ ñY¿ ñ_¿ ñÆ¿ ñ¬¿ ñ»¿ ñÿ¿ ñﬁ¿ ó/¿ óS¿ ó¢¿ óπ¿ ó∫¿ ò¿ ò¿ ò]¿ òß¿ ò≠¿ ò¸¿ ô¿ ô¿ ô&¿ ô,¿ ô|¿ ô´¿ ôÈ¿ ö¿ ö¿ öV¿ ö\¿ ö´¿ ö‰¿ öÍ¿ õ9¿ õM¿ õS¿ õc¿ õi¿ õ∫¿ õﬁ¿ ú-¿ úD¿ úE¿ úñ¿ ú´¿ ú±¿ ú˚¿ ùE¿ ùK¿ ùö¿ ùÆ¿ ù¥¿ ùƒ¿ ù ¿ û¿ ûI¿ ûá¿ û≤¿ û≥¿ û˘¿ üD¿ üJ¿ üï¿ ü‡¿ ü¯¿ ü˛¿ †7¿ †s¿ †y¿ †â¿ †è¿ †ﬁ¿ °¿ °[¿ °n¿ °é¿ °è¿ °‡¿ ¢-¿ ¢3¿ ¢Ñ¿ ¢Œ¿ ¢ˆ¿ ¢¸¿ £5¿ £q¿ £w¿ £á¿ £ç¿ £›¿ §¿ §\¿ §ê¿ §ë¿ §◊¿ •"¿ •(¿ •s¿ •æ¿ •÷¿ •‹¿ ¶¿ ¶Q¿ ¶W¿ ¶g¿ ¶m¿ ¶º¿ ¶Î¿ ß9¿ ßL¿ ßl¿ ßm¿ ßæ¿ ®¿ ®¿ ®b¿ ®¨¿ ®‘¿ ®⁄¿ ©¿ ©[¿ ©a¿ ©q¿ ©w¿ ©«¿ ©ˇ¿ ™F¿ ™z¿ ™{¿ ™À¿ ™‡¿ ™Ê¿ ´4¿ ´m¿ ´s¿ ´¿¿ ´‘¿ ´⁄¿ ´Í¿ ´¿ ¨@¿ ¨d¿ ¨≤¿ ¨»¿ ¨…¿ ≠¿ ≠M¿ ≠S¿ ≠ú¿ ≠Ê¿ ≠Ï¿ Æ9¿ ÆM¿ ÆS¿ Æc¿ Æi¿ Æ∏¿ ÆÁ¿ Ø$¿ ØN¿ ØO¿ Øç¿ Øì¿ Ø‰¿ ∞¿ ∞Q¿ ∞W¿ ∞ô¿ ∞„¿ ∞¸¿ ∞˝¿ ±F¿ ±W¿ ±]¿ ±©¿ ±¯¿ ≤/¿ ≤5¿ ≤Ñ¿ ≤≥¿ ≤¥¿ ≤˚¿ ≥¿ ≥%¿ ≥U¿ ≥{¿ ≥|¿ ≥À¿ ≥›¿ ≥„¿ ¥1¿ ¥¿ ¥¶¿ ¥…¿ ¥ ¿ µ¿ µ¿ µc¿ µ≤¿ µ”¿ µŸ¿ ∂#¿ ∂t¿ ∂Ω¿ ∂√¿ ∂”¿ ∂Ÿ¿ ∑)¿ ∑G¿ ∑m¿ ∑n¿ ∑õ¿ ∑°¿ ∑Ò¿ ∏A¿ ∏O¿ ∏U¿ ∏°¿ ∏Ë¿ π¿ π¿ π9¿ π?¿ πè¿ π ¿ π–¿ ∫¿ ∫k¿ ∫}¿ ∫†¿ ∫°¿ ∫’¿ ∫€¿ ª*¿ ªx¿ ªó¿ ªù¿ ªÌ¿ º9¿ ºÑ¿ º”¿ ºÊ¿ Ω
¿ Ω¿ Ω@¿ ΩF¿ Ωï¿ Ω„¿ æ¿ æ¿ æY¿ æ•¿ æÚ¿ øB¿ øU¿ øz¿ ø{¿ ø≠¿ ø≥¿ ¿¿ ¿P¿ ¿m¿ ¿s¿ ¿¡¿ ¡¿ ¡X¿ ¡ß¿ ¡∫¿ ¡‹¿ ¡›¿ ¬¿ ¬¿ ¬f¿ ¬¥¿ ¬—¿ ¬◊¿ √'¿ √s¿ √¿¿ ƒ¿ ƒ#¿ ƒG¿ ƒH¿ ƒz¿ ƒÄ¿ ƒÕ¿ ≈¿ ≈¿ ≈]¿ ≈™¿ ≈∞¿ ≈¸¿ ∆L¿ ∆d¿ ∆Ü¿ ∆á¿ ∆π¿ ∆ø¿ «¿ «P¿ «V¿ «ú¿ «È¿ «Ô¿ »=¿ »ç¿ »ß¿ »…¿ » ¿ »¯¿ »˛¿ …F¿ …L¿ …õ¿ …ƒ¿ …‚¿ …„¿  ¿  ¿  _¿  p¿  v¿  ≈¿  Ó¿ À¿ À¿ À;¿ ÀA¿ Àà¿ Àé¿ À›¿ Ã¿ Ã%¿ Ã&¿ Ãl¿ Ãr¿ Ãº¿ ÃÁ¿ ÃÌ¿ Õ;¿ Õa¿ Õú¿ Õù¿ Õ‰¿ ÕÍ¿ Œ4¿ Œ`¿ Œf¿ Œ∂¿ Œ‹¿ œ¿ œ¿ œZ¿ œ`¿ œ™¿ œ—¿ œ◊¿ –'¿ –M¿ –É¿ –Ñ¿ –∆¿ –Ã¿ —¿ —=¿ —C¿ —ì¿ —π¿ —¿ —Ò¿ “'¿ “-¿ “~¿ “»¿ “Œ¿ ”¿ ”[¿ ”à¿ ”â¿ ”∫¿ ”¿¿ ‘¿ ‘7¿ ‘=¿ ‘å¿ ‘©¿ ‘Ã¿ ‘Õ¿ ’¿ ’¿ ’d¿ ’¢¿ ’Í¿ ÷4¿ ÷^¿ ÷d¿ ÷µ¿ ◊¿ ◊T¿ ◊Z¿ ◊j¿ ◊p¿ ◊¿¿ ◊È¿ ÿ;¿ ÿn¿ ÿo¿ ÿ≤¿ ÿ∏¿ Ÿ ¿ Ÿ@¿ Ÿå¿ Ÿ÷¿ ⁄ ¿ ⁄¿ ⁄W¿ ⁄®¿ ⁄ˆ¿ ⁄¸¿ €¿ €¿ €_¿ €}¿ €œ¿ ‹¿ ‹¿ ‹4¿ ‹:¿ ‹y¿ ‹¿ ‹Ã¿ ›¿ ›9¿ ›Z¿ ›[¿ ›™¿ ›∞¿ ›˙¿ ﬁI¿ ﬁó¿ ﬁË¿ ﬁÓ¿ ﬁ˛¿ ﬂ¿ ﬂL¿ ﬂñ¿ ﬂó¿ ﬂ£¿ ﬂË¿ ‡¿ ‡j¿ ‡√¿ ·¿ ·q¿ ·π¿ ‚¿ ‚p¿ ‚Ë¿ „9¿ „±¿ „˜¿ ‰[¿ ‰ì¿ ‰¯¿ Â[¿ Â–¿ Â‘¿ Â’¿ Â·¿ Êc¿ Êe¿ Êf¿ Ê´¿ Ê√¿ ÊÈ¿ Á¿ Á¿ Á¿ Á@¿ ÁD¿ Áî¿ Á€¿ Ë(¿ ËE¿ Ëç¿ Ë¨¿ Ë≤¿ È¿ È¿ È&¿ È4¿ ÈT¿ Ès¿ Èò¿ Èô¿ È‰¿ ÈÍ¿ Í!¿ Í8¿ ÍF¿ Íf¿ Íâ¿ Íô¿ Íø¿ Í“¿ Í÷¿ Í◊¿ Íÿ¿ Î¿ Î#¿ ÎÜ¿ ÎË¿ Ï¿ Ï`¿ Ïa¿ ÏÉ¿ Ï£¿ Ï˜¿ Ì¿ Ì¿ Ì¿ ÌZ¿ Ì`¿ Ì∞¿ Ì—¿ Ì„¿ Ì‰¿ Ó¿ Ó¿ Ó^¿ ÓÆ¿ Ó‹¿ Ó‚¿ Ô*¿ Ôv¿ Ô∞¿ Ô≈¿ Ô–¿ Ô—¿ Ôˆ¿ Ô˜¿ ¿ ¿ `¿ f¿ ≠¿ ˛¿ Ò¿ Ò5¿ ÒL¿ Òn¿ Ò¶¿ Ò¯¿ Ú¿ Ú¿ Ú¿ Ú¿ ÚV¿ Úp¿ Úä¿ Ú£¿ Úæ¿ Û¿ Û+¿ Û@¿ ÛT¿ ÛZ¿ Û^¿ Û_¿ Ûß¿ Û≠¿ Û˛¿ Ù¿ Ù¿ Ùh¿ Ù∏¿ ı¿ ıV¿ ıÖ¿ ıã¿ ı“¿ ˆ¿ ˆ¿ ˆP¿ ˆü¿ ˆ∞¿ ˆ—¿ ˆ“¿ ˜¿ ˜¿ ˜n¿ ˜Ç¿ ˜à¿ ˜ÿ¿ ¯'¿ ¯v¿ ¯∂¿ ¯º¿ ˘¿ ˘¿ ˘Q¿ ˘n¿ ˘o¿ ˘¥¿ ˘∫¿ ˙¿ ˙N¿ ˙ñ¿ ˙‡¿ ˚0¿ ˚=¿ ˚C¿ ˚ê¿ ˚ÿ¿ ˚ﬁ¿ ˚Ó¿ ˚Ù¿ ¸8¿ ¸W¿ ¸X¿ ¸§¿ ¸™¿ ¸Ú¿ ˝A¿ ˝ë¿ ˝√¿ ˝Ÿ¿ ˝⁄¿ ˝ˇ¿ ˛¿ ˛T¿ ˛¢¿ ˛Ë¿ ˇ¿ ˇ
¿ ˇW¿ ˇ¶¿ ˇ«¿ ¿ ¿ ¿ ¿ d¿ ö¿ æ¿ Â¿ ¿(¿6¿<¿]¿o¿s¿t¿ø¿≈¿¿F¿L¿\¿b¿Ä¿´¿¿¿a¿±¿
¿¿¿¿¿e¿á¿à¿◊¿&¿9¿l¿m¿®¿Ó¿˛¿-¿w¿∫¿È¿<¿e¿s¿Ñ¿Ω¿¿5¿h¿x¿◊¿	[¿	Â¿	Û¿	ˇ¿
	¿
2¿
l¿
„¿_¿è¿Æ¿º¿∆¿Œ¿6¿7¿{¿|¿°¿“¿˜¿ˇ¿K¿^¿h¿x¿π¿¿¿=¿P¿Z¿[¿ì¿∞¿Ê¿¿
¿¿E¿±¿Ã¿“¿Ó¿¿A¿\¿Ç¿«¿ˇ¿¿)¿E¿O¿W¿]¿í¿¥¿ÿ¿$¿m¿≥¿˚¿3¿]¿g¿à¿£¿Ω¿≈¿À¿ˆ¿¿P¿o¿£¿ÿ¿Ù¿¿¿¿¿:¿O¿c¿i¿m¿n¿©¿„¿˘¿˙¿&¿f¿g¿ô¿ü¿¿<¿Q¿Ü¿£¿Ÿ¿¯¿
¿¿¿"¿&¿'¿U¿[¿™¿Û¿!¿Z¿w¿≠¿Ò¿	¿¿¿!¿2¿6¿7¿S¿T¿`¿ü¿†¿¨¿Î¿Ï¿¯¿¿9¿=¿>¿J¿p¿â¿¥¿¿I¿g¿m¿ä¿±¿√¿Ÿ¿Ì¿Û¿¿F¿c¿k¿q¿u¿v¿Ç¿î¿ø¿Ú¿¿5¿I¿d¿Å¿∑¿¿4¿X¿r¿|¿Ñ¿ä¿Œ¿ ¿ 1¿ C¿ G¿ H¿ ^¿ _¿ v¿ å¿ û¿ ¨¿ ≤¿ ≈¿ Ÿ¿!¿!2¿!8¿!<¿!=¿!è¿!≈¿!˘¿"#¿"M¿"É¿"À¿#¿#9¿#\¿#é¿#µ¿#Ë¿$¿$T¿$ã¿$æ¿$Ô¿%"¿%W¿%î¿%Î¿%Ô¿%¿&¿&¿&^¿& ¿&À¿' ¿'¿'5¿';¿'ã¿'¨¿'«¿'»¿'ˆ¿(@¿(A¿(f¿(g¿(¶¿(Ê¿(Á¿)¿)¿)P¿)V¿)ê¿)ø¿)¿¿*¿*¿*F¿*L¿*Ö¿*¡¿+¿+¿+F¿+L¿+Ö¿+ã¿+≈¿+Ù¿+ı¿,6¿,W¿,]¿,ñ¿,ú¿,’¿-¿-V¿-W¿-®¿-¬¿-»¿.¿.4¿.:¿.s¿.y¿.º¿.˝¿.˛¿/M¿/õ¿/°¿/Ô¿0¿0¿0L¿0R¿0î¿0‚¿19¿1:¿1ã¿1•¿1´¿1˘¿2¿2¿2V¿2\¿2ü¿2‡¿2·¿30¿3~¿3Ñ¿3“¿3¿3ˆ¿4/¿45¿4w¿4≈¿5¿5¿5k¿5q¿5™¿5∞¿5È¿6¿6¿6d¿6à¿6é¿6«¿6Õ¿7¿7?¿7Ç¿7É¿7∏¿7æ¿7˜¿8¿8D¿8E¿8ñ¿8π¿8ø¿9¿9W¿9Ä¿9Ü¿9ñ¿9ú¿9Â¿:%¿:r¿:ò¿:«¿:»¿;¿;¿;f¿;≥¿<¿<K¿<õ¿<‰¿<Í¿= ¿=L¿=t¿=z¿= ¿>¿>5¿>;¿>ã¿?¿?¿?b¿?Ø¿?¸¿@ ¿@.¿@H¿@e¿@¿@£¿@Œ¿@Ô¿A¿A2¿AT¿As¿Aó¿A¶¿A≥¿Aæ¿A∆¿A–¿A‚¿AË¿A¯¿A˛¿BH¿Bò¿Bæ¿BÌ¿BÓ¿C7¿CH¿Cá¿C±¿C≤¿D¿D¿DP¿Dè¿Dê¿Dﬂ¿DÒ¿D˜¿EE¿Eì¿E∫¿EÁ¿F¿F¿FW¿FÉ¿Fπ¿F⁄¿F€¿G*¿GH¿Gq¿Gá¿Gà¿G‘¿G⁄¿H'¿H3¿He¿H¿HÄ¿H∆¿HÓ¿I¿I¿IT¿If¿Il¿Iº¿J¿JN¿JT¿Jd¿Jj¿J¥¿JÂ¿K ¿K¿KP¿Kb¿Kh¿K£¿K©¿Kπ¿Kø¿L¿LE¿La¿Lb¿L±¿L√¿L…¿M¿M
¿M¿M ¿Mr¿M•¿M¡¿M¬¿N¿N)¿N/¿N}¿N«¿N‹¿N‚¿NÚ¿N¯¿O8¿Or¿O†¿O∏¿Oπ¿P¿P¿P¿Pj¿P~¿PÑ¿P‘¿Q¿QD¿Q\¿Q]¿Q¨¿Qæ¿Qƒ¿R¿R%¿R+¿Rz¿R¢¿Rÿ¿RÙ¿Rı¿SG¿SH¿Sò¿Sô¿SË¿T/¿T]¿Tc¿T∞¿Tﬁ¿T‰¿U5¿UÉ¿Uó¿Uƒ¿U˙¿V¿V¿V\¿Vp¿Vv¿Vw¿VÉ¿Vˆ¿W?¿WF¿WG¿Wv¿W•¿WÊ¿X'¿XT¿Xs¿Xû¿X¡¿X‰¿Y ¿Y+¿YJ¿Yõ¿Z¿Z2¿Z^¿ZÖ¿Z≥¿Z„¿[¿[b¿[ì¿[∫¿[‰¿\¿\@¿\v¿\ƒ¿\≈¿\—¿]0¿]Ø¿]∂¿]¬¿^!¿^†¿^ß¿^´¿^¨¿^≠¿^Â¿^Î¿_<¿_à¿_ª¿_‡¿_¯¿`¿`S¿`å¿`◊¿a"¿aY¿ax¿a´¿b¿b5¿bd¿bâ¿b∑¿bÁ¿c¿cB¿cm¿c†¿c…¿cÏ¿d#¿dr¿d√¿d…¿dÍ¿e¿em¿eò¿eø¿e ¿f¿f%¿fY¿fÆ¿fﬂ¿g¿g¿gj¿gr¿gx¿gy¿g§¿g”¿g¸¿h¿hB¿hq¿h†¿h’¿i ¿i1¿id¿ió¿i»¿i˘¿j2¿jy¿j¨¿j∂¿k¿kT¿k^¿k∑¿k¸¿l¿l#¿lF¿lP¿lq¿lú¿l∆¿l–¿m#¿mx¿mÇ¿m¨¿m„¿n<¿np¿nõ¿n™¿o¿o¿oJ¿o£¿o›¿p¿p¿pt¿pÄ¿pä¿pΩ¿pÓ¿q¿qR¿qÖ¿qê¿q¬¿qÚ¿r¿rU¿rà¿rì¿rî¿r‡¿r·¿rˆ¿s ¿s¿s¿s!¿s5¿sM¿su¿sù¿s◊¿t¿t7¿tO¿ts¿tÖ¿t°¿tΩ¿tŸ¿tÒ¿u¿u?¿u_¿uÖ¿u≠¿u’¿u˚¿v!¿vO¿vö¿v°¿v•¿v¶¿v÷¿v˝¿w¿w¿w<¿wá¿w“¿w”¿x5¿xI¿x|¿x™¿x÷¿y¿yD¿yu¿yÇ¿y≤¿z ¿z8¿zh¿z§¿z¨¿z˝¿{¿{C¿{x¿{ø¿{«¿{Õ¿{ˆ¿|4¿|á¿|œ¿}¿}g¿}o¿}u¿}ç¿}õ¿}¥¿}—¿}Ë¿~¿~J¿~t¿~¨¿~Ë¿2¿n¿∏¿‡¿Ä¿Ä3¿Ä\¿Ä∑¿Å¿ÅG¿Åx¿Å±¿Å„¿Ç¿ÇG¿ÇÇ¿ÇΩ¿Ç˛¿É¿É@¿Éz¿É∞¿Ñ¿Ñ¿Ñ#¿Ñ'¿Ñ(¿Ñx¿Ñ¨¿ÑÁ¿Ö¿ÖN¿ÖÖ¿Öß¿Ö≠¿ÖÆ¿Öﬂ¿Ü	¿Üe¿Ür¿Ü¥¿Üﬁ¿Ü‰¿ÜÂ¿á4¿áÉ¿á–¿à¿àe¿à¨¿àœ¿â&¿âj¿â°¿â¬¿â˚¿ä¿äQ¿äç¿äœ¿ã¿ãe¿ãÖ¿ã®¿ãƒ¿ãŒ¿ã˙¿å¿å¿å¿åF¿å[¿åu¿åë¿åõ¿å°¿å¢¿åÓ¿ç
¿ç)¿çA¿çG¿ço¿çp¿çå¿ç÷¿çÁ¿çÎ¿çÏ¿é1¿é7¿éÄ¿é—¿é˙¿è¿è¿è#¿èc¿èg¿èh¿èt¿è√¿èƒ¿è–¿ê¿ê@¿ê[¿êm¿ê¡¿ë-¿ëM¿ëS¿ëﬁ¿íI¿í”¿ì3¿ìM¿ì´¿ì∏¿î¿î.¿îI¿îè¿î‹¿ï_¿ïó¿ïü¿ñ	¿ñ¿ñÑ¿ó¿óQ¿óï¿ó¶¿ó˜¿ò^¿ô ¿ôm¿ô«¿ö/¿öx¿ö¡¿õ¿õw¿õæ¿ú	¿úo¿ú“¿ú˛¿ùm¿ùs¿ù ¿û!¿ûÄ¿ûŸ¿ü*¿üÜ¿ü‡¿†<¿†ã¿†⁄¿†ﬁ¿†ﬂ¿°'¿°-¿°}¿°≠¿°π¿°—¿°¿¢¿¢D¿¢ï¿¢ú¿¢º¿£U¿£Y¿£Z¿£f¿£å¿£û¿£›¿§.¿§5¿§^¿§p¿§É¿§ó¿§µ¿§º¿§¿¿§¡¿§Õ¿•N¿•~¿•‚¿•Û¿•˜¿•¯¿¶G¿¶ú¿¶º¿¶Ÿ¿¶ˇ¿ß¿ß¿ß ¿ßS¿ßn¿ß°¿ßÕ¿ß”¿ß◊¿ßŸ¿ß⁄¿®$¿®b¿®f¿®∂¿©¿©\¿©¨¿©˜¿™(¿™5¿™V¿™p¿™à¿™Æ¿™Õ¿™Ì¿´
¿´¿´T¿´z¿´Ä¿´†¿´¶¿´˙¿¨L¿¨ú¿¨∞¿¨Ã¿¨Õ¿≠¿≠9¿≠P¿≠Q¿≠x¿≠î¿≠ï¿≠°¿≠√¿≠Ó¿≠Ú¿≠Ù¿≠ı¿ÆD¿Æz¿Æ~¿Æ«¿Ø¿Ø#¿ØB¿Øc¿Øá¿Øà¿Ø“¿ØÙ¿Ø˙¿∞F¿∞k¿∞á¿∞à¿∞≠¿∞Æ¿∞‡¿±¿±¿±$¿±Q¿±Ü¿±ä¿±ã¿±€¿±·¿≤/¿≤_¿≤ì¿≤¬¿≤Ò¿≥?¿≥u¿≥è¿≥¨¿≥Ù¿¥	¿¥¿¥-¿¥K¿¥ó¿¥¨¿¥∂¿¥º¿¥Œ¿¥œ¿µ¿µ9¿µL¿µu¿µï¿µ©¿µ–¿µÙ¿∂¿∂'¿∂K¿∂Z¿∂n¿∂v¿∂é¿∂¥¿∂ ¿∂“¿∂ÿ¿∂ı¿∂ˆ¿∑$¿∑a¿∑g¿∑h¿∑Ñ¿∑À¿∑‹¿∑‡¿∑·¿∏-¿∏3¿∏Ç¿∏£¿∏©¿∏˜¿πD¿πî¿πª¿π¡¿∫¿∫\¿∫™¿∫˘¿ª%¿ªP¿ªm¿ªì¿ªß¿ª≠¿ªÒ¿º¿ºM¿ºl¿ºª¿ºÔ¿Ω9¿ΩÖ¿Ω™¿Ωæ¿Ω»¿Ω…¿æ&¿æ^¿æí¿æ ¿ø¿øZ¿ø•¿ø¿¿"¿¿J¿¿T¿¿\¿¿b¿¿c¿¿å¿¿µ¿¡¿¡f¿¡≤¿¡ı¿¬¿¬2¿¬:¿¬l¿¬t¿¬u¿¬è¿¬¥¿¬ƒ¿¬Ã¿¬Ê¿√	¿√%¿√-¿√F¿√L¿√M¿√ó¿√ı¿√˘¿√˚¿√¸¿ƒ=¿ƒÇ¿ƒ¢¿ƒ¥¿ƒ∏¿ƒÛ¿≈¿≈>¿≈@¿≈A¿≈ë¿≈ü¿≈£¿≈Ò¿∆B¿∆|¿∆Ä¿∆≤¿∆Á¿∆Î¿«A¿«™¿«◊¿»¿»(¿»t¿»®¿»¿¿»€¿…!¿…4¿…<¿…T¿…p¿…∫¿…Õ¿…’¿…Ÿ¿…È¿…Í¿ 6¿ T¿ e¿ å¿ ™¿ º¿ ·¿À¿À)¿À2¿ÀT¿Àa¿Às¿Ày¿Àè¿À±¿À≈¿ÀÀ¿Àœ¿ÀË¿ÀÈ¿Ã¿ÃO¿Ã^¿Ã`¿Ãa¿Ã®¿Ã›¿Ã·¿Õ+¿Õ/¿Õ~¿Õ∆¿Œ¿Œ"¿Œ:¿ŒL¿Œh¿Œm¿Œâ¿Œ©¿Œ™¿Œ„¿Œˇ¿œ ¿œ?¿œE¿œÑ¿œñ¿œπ¿œ∫¿–¿–¿–*¿–+¿–7¿–c¿–ó¿–ø¿–≈¿–Ù¿–¯¿–˙¿–˚¿—E¿—`¿—d¿—∞¿—˜¿“¿“4¿“p¿“±¿“¿“Ò¿”$¿”*¿”^¿”ì¿”î¿”†¿”≥¿”Ã¿”‡¿”¸¿‘¿‘¿‘¿‘e¿‘Ñ¿‘£¿‘±¿‘∑¿‘Ó¿’.¿’S¿’Ÿ¿’Ù¿÷¿÷g¿÷ì¿÷Õ¿÷Í¿◊O¿◊w¿◊∆¿ÿ$¿ÿm¿ÿø¿Ÿ¿Ÿ¿Ÿ%¿Ÿ-¿Ÿ3¿ŸÉ¿ŸÎ¿⁄ ¿⁄}¿⁄ø¿€¿€J¿€ã¿€Ø¿€¿‹3¿‹y¿‹Ω¿‹“¿‹¸¿›:¿›B¿›H¿›a¿›ú¿›Û¿ﬁs¿ﬁy¿ﬁÃ¿ﬁ„¿ﬁÁ¿ﬁË¿ﬂD¿ﬂl¿ﬂ…¿ﬂˇ¿‡-¿‡F¿‡x¿‡Ç¿‡®¿‡≤¿‡∏¿‡¯¿·¿·¿·6¿·:¿·;¿·â¿·è¿·ﬁ¿‚ ¿‚¿‚S¿‚o¿‚∏¿‚‘¿„-¿„H¿„]¿„k¿„q¿„r¿„ß¿„˛¿‰"¿‰(¿‰,¿‰-¿‰¨¿‰Œ¿Â ¿Â9¿ÂN¿ÂV¿Âñ¿Âú¿Â≈¿Âÿ¿Âﬁ¿Ê¿Ê+¿Ê`¿Êè¿Ê©¿Ê¡¿ÊÀ¿Ê‡¿ÊÍ¿Á¿Á¿Á3¿Áw¿ÁÁ¿Ë¿Ë ¿Ë*¿Ë2¿Ë8¿ËZ¿Ë^¿Ë_¿Ë±¿Ë∑¿È¿È(¿È.¿È{¿Èó¿ÈÎ¿Í¿Í:¿ÍR¿Í`¿Íf¿Í—¿ÍÏ¿Î¿Î¿Î¿Î¿Î¿ÎG¿ÎI¿ÎJ¿Îå¿Î†¿Î§¿ÎÓ¿Ï¿Ï!¿Ï"¿ÏB¿ÏC¿Ïë¿Ï¨¿Ï≤¿Ì¿ÌP¿Ìú¿Ìµ¿Ìª¿Ó	¿ÓS¿ÓÄ¿ÓÜ¿Ó”¿Ô	¿Ô-¿ÔT¿Ôã¿Ô¨¿Ô∞¿Ô±¿¿Q¿Ñ¿ä¿◊¿Ò%¿ÒY¿Òß¿Òı¿Ú&¿Ú,¿Úy¿Ú»¿ÚÎ¿ÚÏ¿Û;¿Ûâ¿Ûô¿Ûü¿ÛÓ¿Ù:¿Ùâ¿Ù¥¿Ù∫¿ı
¿ıX¿ıü¿ı•¿ıı¿ˆ0¿ˆl¿ˆm¿ˆá¿ˆ¡¿ˆ·¿ˆ‚¿˜¿˜¿˜a¿˜í¿˜ƒ¿˜Ê¿˜Á¿¯3¿¯i¿¯o¿¯¿¯Ö¿¯¨¿˘¿˘¿˘4¿˘5¿˘c¿˘i¿˘±¿˘¡¿˙¿˙*¿˙J¿˙n¿˙å¿˙ê¿˙ë¿˙ﬂ¿˙Ù¿˙˙¿˚B¿˚R¿˚†¿˚Ω¿˚Â¿¸¿¸¿¸¿¸¿¸¿¸L¿¸R¿¸¢¿¸Ú¿˝ ¿˝¿˝R¿˝ô¿˝ü¿˝Í¿˛8¿˛â¿˛◊¿ˇ'¿ˇx¿ˇ√¿ ¿ Y¿ ™¿ Í¿¿'¿J¿É¿ó¿õ¿ú¿œ¿’¿%¿`¿f¿≤¿¿¿D¿b¿ã¿ ¿‰¿Ë¿È¿¿#¿r¿¿¿ﬂ¿Â¿5¿Å¿Ã¿¿.¿a¿Ä¿™¿Í¿¿	¿
¿;¿A¿Ä¿Ü¿”¿"¿@¿m¿â¿∞¿Ì¿	¿		¿	
¿	?¿	E¿	î¿	‚¿
¿
¿
X¿
§¿
Ò¿A¿T¿â¿©¿‘¿¿1¿5¿6¿h¿n¿Ω¿¿(¿.¿|¿»¿¿b¿u¿§¿¡¿È¿'¿@¿D¿E¿y¿¿Œ¿¿9¿?¿è¿€¿(¿x¿ã¿æ¿›¿¿G¿b¿f¿g¿ô¿ü¿Ï¿0¿6¿¿ø¿◊¿›¿)¿y¿ë¿¿¿›¿¿C¿\¿`¿a¿ì¿ô¿Ê¿*¿0¿y¿π¿—¿◊¿%¿u¿è¿æ¿€¿¿A¿Z¿^¿_¿ç¿ì¿€¿·¿0¿Y¿Ä¿ô¿Ω¿˜¿¿¿¿>¿D¿ç¿û¿§¿Û¿¿A¿Y¿|¿µ¿…¿Õ¿Œ¿˝¿¿J¿P¿ü¿»¿Ò¿¿0¿k¿Å¿Ö¿Ü¿º¿¬¿¿`¿Ñ¿ä¿”¿¿=¿t¿ï¿¡¿ ¿  ¿ $¿ %¿ k¿ q¿ ª¿ Ê¿ Ï¿!:¿!`¿!º¿!Ú¿"3¿"N¿"ú¿"Œ¿"Ì¿"ı¿#"¿#&¿#'¿#n¿#t¿#æ¿#Í¿#¿$@¿$f¿$ƒ¿$˚¿%=¿%X¿%ß¿%Ÿ¿%¯¿& ¿&.¿&2¿&3¿&t¿&z¿&ƒ¿&Î¿&Ò¿'A¿'g¿'π¿'Í¿(&¿(A¿(ä¿(º¿(€¿(„¿)¿)¿)¿)W¿)]¿)ß¿)Œ¿)‘¿*$¿*J¿*û¿*–¿+¿+(¿+r¿+§¿+√¿+À¿+˘¿+˝¿+˛¿,4¿,:¿,ã¿,’¿,€¿-&¿-h¿-¶¿-Œ¿.¿.¿.Z¿.Ö¿.‰¿/A¿/]¿/Ö¿/±¿/ª¿/√¿/‡¿/‰¿/Â¿0¿0¿0m¿0ì¿0ô¿0Ë¿1¿14¿1R¿1{¿1ñ¿1œ¿1˝¿2(¿2<¿2D¿2\¿2`¿2a¿2§¿2™¿2¯¿36¿3~¿3»¿3Ú¿3¯¿4I¿4ö¿4Ë¿4Ó¿4˛¿5¿5T¿5}¿5œ¿6 ¿6N¿6á¿6÷¿7 ¿7¿7¿7H¿7N¿7ñ¿7÷¿8"¿8l¿8ñ¿8ú¿8Ì¿9>¿9å¿9í¿9¢¿9®¿9ı¿:¿:e¿:∂¿:‰¿;¿;l¿;ñ¿;ö¿;õ¿;Ë¿;˙¿<R¿<S¿<¢¿<¥¿<∫¿=¿=V¿=}¿=É¿=“¿>¿>c¿>ã¿>∏¿>÷¿>ˇ¿?¿?0¿?N¿?R¿?S¿?ü¿?•¿?Ì¿@<¿@å¿@æ¿@Í¿A¿A#¿A?¿A]¿Aa¿Ab¿AÆ¿A¥¿B¿B¿B?¿BY¿B~¿B£¿B±¿B∑¿B÷¿BÙ¿B¯¿B˘¿CC¿CT¿C|¿Cë¿C±¿C—¿Cﬂ¿CÂ¿Cˇ¿D¿D!¿D"¿Dl¿Dâ¿D∑¿Dœ¿DÚ¿E¿E#¿E)¿EF¿Ed¿Eh¿Ei¿Eµ¿E«¿EÕ¿F¿F.¿F4¿FÄ¿Fπ¿FÁ¿Fˇ¿G"¿GE¿GS¿GY¿Gv¿Gî¿Gò¿Gô¿GË¿G˙¿H ¿HM¿Ha¿Hg¿H≤¿H—¿I¿I#¿IJ¿Iq¿I¿IÖ¿I¶¿Iƒ¿I»¿I…¿J¿J`¿Jf¿J´¿J¿K.¿K4¿KÄ¿K–¿L¿L5¿LU¿LÉ¿L°¿L•¿L¶¿LÂ¿LÎ¿M7¿MÅ¿M ¿N¿Nc¿N—¿O ¿O>¿Ox¿Où¿O‰¿OË¿OÈ¿P¿Pr¿På¿Pö¿P†¿P‰¿Q ¿Q¿Q¿Q¿Q¿QW¿Q]¿Qü¿Q•¿Qﬁ¿Q‰¿QÙ¿Q˙¿RH¿Rw¿Rì¿RÆ¿Rﬁ¿R¸¿S ¿S¿SP¿S^¿Sd¿SÆ¿S˝¿TI¿Tí¿T”¿TŸ¿U¿U¿U(¿U.¿Uh¿U§¿U‡¿V¿VB¿V`¿Vd¿Ve¿Vµ¿Vª¿V˝¿W¿W<¿WB¿WR¿WX¿W¶¿WÙ¿X:¿Xà¿XŒ¿X˝¿Y¿Y4¿Yd¿YÇ¿YÜ¿Yá¿Y÷¿Y˙¿Z ¿ZJ¿Zô¿ZÂ¿[.¿[o¿[u¿[Æ¿[¥¿[ƒ¿[ ¿\¿\T¿\Ñ¿\‘¿]¿]@¿]|¿]∂¿]ﬁ¿]¸¿^ ¿^¿^;¿^d¿^j¿^µ¿^ª¿_
¿_T¿_¿_Ö¿_æ¿_ƒ¿_‘¿_⁄¿`1¿`r¿`†¿`ƒ¿a¿a$¿a(¿a)¿ac¿a©¿aØ¿a˛¿bH¿bs¿by¿b≤¿b∏¿b»¿bŒ¿c¿c_¿c§¿c¿d*¿dH¿dL¿dM¿dá¿d∞¿d∂¿e¿e¿eV¿e†¿eÀ¿e—¿f
¿f¿fg¿f®¿f÷¿f˙¿g<¿gZ¿g^¿g_¿gô¿gﬂ¿gÂ¿h4¿h~¿h©¿hØ¿hË¿hÓ¿h˛¿i¿iG¿iï¿i⁄¿j&¿j`¿j~¿jÇ¿jÉ¿j—¿j◊¿k¿k¿kW¿k]¿km¿ks¿k¿¿kÌ¿l¿l!¿lO¿lm¿lq¿lr¿l¬¿l„¿lÈ¿m2¿mÅ¿mŒ¿n¿nX¿n^¿nó¿nù¿n≠¿n≥¿nÏ¿o&¿oa¿oô¿oø¿o›¿o·¿o‚¿p¿p¿pV¿px¿pê¿p∞¿p»¿pÊ¿pÍ¿pÎ¿q4¿qE¿qÑ¿qÆ¿q„¿q¸¿r
¿r¿r,¿rJ¿rN¿rO¿rò¿ræ¿r‰¿rˇ¿s¿sJ¿si¿sw¿s}¿sï¿s≥¿s∑¿s∏¿t	¿t¿t%¿tu¿tƒ¿tÿ¿t˛¿u¿u9¿ud¿uÉ¿uë¿uó¿uØ¿uÕ¿u—¿u“¿v¿v8¿v>¿vN¿vT¿v£¿v‚¿w¿w2¿w6¿w7¿ww¿w}¿wç¿wì¿w‡¿x¿x<¿xk¿xo¿xp¿x¶¿x›¿x˘¿y%¿y)¿y*¿y]¿yc¿yØ¿y¸¿z/¿z5¿zÉ¿z—¿{¿{d¿{≥¿{›¿{„¿{Û¿{˘¿|O¿|é¿|≠¿|ﬁ¿|‚¿|„¿})¿}W¿}ç¿}Æ¿}‚¿~¿~$¿~(¿~)¿~t¿~z¿~«¿¿l¿§¿·¿Ä ¿Ä/¿Ä3¿Ä4¿Är¿Äx¿Ä…¿Å¿ÅM¿ÅS¿Å£¿Å«¿ÅÕ¿Ç¿ÇI¿ÇO¿Ç¢¿Ç¯¿É¿És¿Éí¿É≈¿ÉÙ¿É¯¿É˘¿ÑJ¿Ñï¿Ñ©¿ÑØ¿Ö ¿ÖG¿ÖM¿Öñ¿Öµ¿Ü"¿ÜA¿Üt¿Ü£¿Üß¿Ü®¿Ü˘¿áG¿áM¿áû¿á⁄¿á‡¿à)¿à=¿à™¿à…¿à¸¿â+¿â/¿â0¿âÄ¿â∂¿âº¿ä	¿äQ¿äÆ¿ä›¿ã¿ã ¿ã!¿ãc¿ã¢¿ã¬¿ãÚ¿ãˆ¿ã˜¿å@¿å{¿åô¿å«¿åÀ¿åÃ¿ç¿çP¿çm¿çö¿çû¿çü¿çË¿é¿é8¿éc¿ég¿éh¿é≥¿éÏ¿è	¿è6¿è:¿è;¿èÜ¿èø¿è‹¿ê	¿ê¿ê¿êV¿êc¿ê¶¿ê»¿ê˙¿ê˛¿êˇ¿ë=¿ëC¿ëí¿ë„¿ëÈ¿í9¿íÜ¿íò¿íû¿íÓ¿ì¿ì¿ìd¿ì≤¿ìˇ¿î7¿îp¿îç¿î∫¿îæ¿îø¿î¯¿ï7¿ïW¿ïá¿ïã¿ïå¿ï¬¿ï»¿ï˙¿ñ7¿ñV¿ñÖ¿ñâ¿ñä¿ñπ¿ñø¿ó¿ó^¿ó§¿ó·¿ò ¿ò/¿ò3¿ò4¿ò_¿òe¿ò¥¿òÌ¿ô,¿ôL¿ô|¿ôÄ¿ôÅ¿ô—¿ô¸¿ö¿öR¿ö†¿öÎ¿õ¿õm¿õñ¿õœ¿õ”¿õ‘¿ú¿úV¿úå¿ú≠¿úŸ¿úÙ¿ù¿ù.¿ù2¿ù3¿ùÉ¿ùï¿ùõ¿ùÎ¿û7¿û}¿ûÉ¿ûì¿ûô¿û„¿ü¿ü/¿üU¿üp¿üç¿ü´¿üØ¿ü∞¿üˇ¿†¿†¿†R¿†X¿†h¿†n¿†¡¿†Ù¿°¿°7¿°R¿°p¿°é¿°í¿°ì¿°‚¿°Ù¿°˙¿¢5¿¢;¿¢K¿¢Q¿¢§¿¢◊¿¢Û¿£¿£5¿£S¿£q¿£u¿£v¿£Ä¿£Å¿£…¿£·¿£Á¿£˜¿£˝¿§L¿§\¿§ü¿§∆¿§«¿•¿•4¿•:¿•~¿•œ¿•Ì¿•Û¿¶?¿¶ê¿¶›¿¶„¿¶Û¿¶˘¿ß:¿ßV¿ßÉ¿ßÆ¿ßŒ¿ß“¿ß”¿ßÒ¿ßÚ¿®¿®6¿®G¿®c¿®p¿®ç¿®ì¿®±¿®µ¿®∂¿®˘¿®˙¿©¿© ¿©i¿©~¿©Ñ¿©”¿™¿™Q¿™ö¿™≠¿™≥¿™È¿™˝¿´¿´+¿´?¿´E¿´â¿´ù¿´£¿´Á¿´˚¿¨¿¨M¿¨a¿¨g¿¨ˇ¿≠¿≠¿≠*¿≠.¿≠/¿≠{¿≠Å¿≠œ¿≠Û¿≠˘¿ÆH¿ÆÇ¿Æà¿Æ“¿Ø$¿Ø^¿Øå¿Ø≠¿ØÆ¿Ø—¿Øﬂ¿ØÂ¿ØÊ¿∞¿∞N¿∞z¿∞ñ¿∞√¿∞Ú¿±#¿±T¿±Å¿±≠¿±÷¿≤	¿≤8¿≤g¿≤û¿≤ü¿≤ ¿≤Î¿≥¿≥I¿≥q¿≥¶¿≥’¿≥‹¿¥!¿¥R¿¥X¿¥Ø¿¥Ú¿¥¯¿µO¿µí¿µò¿µ«¿µÙ¿∂¿∂P¿∂¿∂Ü¿∂†¿∂¡¿∂«¿∂»¿∑¿∑¿∑[¿∑_¿∑`¿∑ì¿∑µ¿∑Ÿ¿∏¿∏;¿∏ù¿∏À¿π¿π?¿π[¿πá¿π≈¿πÒ¿∫/¿∫Y¿∫Å¿∫ù¿∫Ω¿∫›¿∫ı¿ª!¿ªI¿ªs¿ªü¿ªÀ¿ªÛ¿º¿º>¿ºl¿ºñ¿º¿¿ºÚ¿Ω¿ΩU¿ΩY¿Ω[¿Ω\¿Ω´¿Ωº¿Ω€¿æ¿æ¿æ[¿æ©¿æ›¿æÔ¿æ¿ø¿ø%¿øt¿øì¿ø•¿øß¿ø®¿ø”¿¿¿¿8¿¿e¿¿ì¿¿ò¿¿∆¿¿Á¿¿Î¿¡:¿¡\¿¡z¿¡Ò¿¬ ¿¬¿¬ï¿¬§¿¬™¿¬Æ¿¬€¿¬˝¿√¿√¿√R¿√T¿√U¿√¶¿√√¿√«¿ƒ¿ƒd¿ƒû¿ƒ¢¿ƒÓ¿≈¿≈¿≈p¿≈ú¿≈†¿≈Æ¿≈≤¿≈ˆ¿∆T¿∆•¿∆Ì¿«¿«¿«f¿«y¿«¿«ø¿«≈¿»¿»B¿»X¿»Y¿»e¿»è¿»≈¿…D¿…E¿…î¿…µ¿…”¿…Ú¿…¯¿…˘¿ K¿ Z¿ à¿ ô¿ Œ¿ ﬁ¿ ‰¿ Â¿À¿À¿À¿À<¿ÀB¿Àí¿À©¿ÀØ¿Ã ¿ÃP¿Ãû¿Ã´¿Ã∏¿ÃÎ¿ÃÏ¿Ã¯¿Õ=¿Õh¿ÕÆ¿Õ≤¿Õ¥¿Õµ¿Œ¿Œ¿Œ¿ŒW¿ŒÉ¿Œá¿Œ◊¿œ&¿œg¿œ~¿œÇ¿œŒ¿œ˚¿œˇ¿–K¿–î¿–÷¿—¿—<¿—å¿—í¿—”¿—Î¿—˝¿“¿“+¿“O¿“¿“ß¿“®¿“ˆ¿”F¿”V¿”\¿”™¿”˜¿‘¿‘¿‘¿‘B¿‘ä¿‘ö¿‘†¿‘…¿‘Õ¿‘Œ¿‘⁄¿’¿’J¿’í¿’ñ¿’ò    	Ä•Äº Ä¡Ä÷ ÄŸ ÄÍÅBÅE  Åo ÅñÅπÅª  Å„  Ç Ç,ÇAÇC  ÇcÇtÇ”Ç÷ÇˇÉsÉuÉúÉÆÉ∞É·ÉÌÉÑÑ! àQÑ˝ä˛Ç¶/// A tag for a [SemanticsNode].
///
/// Tags can be interpreted by the parent of a [SemanticsNode]
/// and depending on the presence of a tag the parent can for example decide
/// how to add the tagged node as a child. Tags are not sent to the engine.
///
/// As an example, the [RenderSemanticsGestureHandler] uses tags to determine
/// if a child node should be excluded from the scrollable area for semantic
/// purposes.
///
/// The provided [name] is only used for debugging. Two tags created with the
/// same [name] and the `new` operator are not considered identical. However,
/// two tags created with the same [name] and the `const` operator are always
/// identical. ãÅE å<åHÅ/// Creates a [SemanticsTag].
///
/// The provided [name] is only used for debugging. Two tags created with the
/// same [name] and the `new` operator are not considered identical. However,
/// two tags created with the same [name] and the `const` operator are always
/// identical.åI	åO   åXÄöåÓÄÇ/// A human-readable name for this tag used for debugging.
///
/// This string is not used to determine if two tags are identical.  å˜Uç
   å˜å¯ çPåë&Éƒ/// An identifier of a custom semantics action.
///
/// Custom semantics actions can be provided to make complex user
/// interactions more accessible. For instance, if an application has a
/// drag-and-drop list that requires the user to press and hold an item
/// to move it, users interacting with the application using a hardware
/// switch may have difficulty. This can be made accessible by creating custom
/// actions and pairing them with handlers that move a list item up or down in
/// the list.
///
/// In Android, these actions are presented in the local context menu. In iOS,
/// these are presented in the radial context menu.
///
/// Localization and text direction do not automatically apply to the provided
/// label or hint.
///
/// Instances of this class should either be instantiated with const or
/// new instances cached in static fields.
///
/// See also:
///
///  * [SemanticsProperties], where the handler for a custom action is provided. ë@Å ë±ë∆d/// Creates a new [CustomSemanticsAction].
///
/// The [label] must not be null or the empty string.ë»ëﬁ  ëÎëÒëˇë¯ëÚë˚ííííííí(í#í*í=í6í?íHÅrí˛íˇìÄí/// Creates a new [CustomSemanticsAction] that overrides a standard semantics
/// action.
///
/// The [hint] must not be null or the empty string.ìì'  ì,$ìK  ìYì_ìlìeì`ìhìuì{ìÜìÅì|ìÑìèìïì§ìùìñì†ì≥ì≠ìµìæQî
;/// The user readable name of this custom semantics action. îNî^9/// The hint description of this custom semantics action. îgWî∏7/// The standard semantics action this action replaces. ñÛñ˛ óóVó: óaóbóEó`óFóKógRóî ó∑ó∏óõó∂óúó≥î√Aî◊   î√îƒïÅï"  ï%ï-  ïï	ñÄÄñ    ññóæÅó¯,/// Get the identifier for a given `action`. òò   òÿ}ô%,/// Get the `action` for a given identifier. ô/ô4   ëëôYäEô¢7/// A string that carries a list of [StringAttribute]s. ô∑Çª ööö™Ä‘/// Creates a attributed string.
///
/// The [TextRange] in the [attributes] must be inside the length of the
/// [string].
///
/// The [attributes] must not be changed after the attributed string is
/// created.ö∞ö∂  ö√+ö…  ö’öÏöÌö€öÎö‹ö˜ö˝õ%õö˛õõõõõõ/õ5úpõ6úmúnúoúvKúª5/// The plain string stored in the attributed string. ú∆ÄòùTk/// The attributes this string carries.
///
/// The list must not be modified after this string is created. ¢”A¢Á   ¢”¢‘ùcÑ3û`Ä⁄/// Returns a new [AttributedString] by concatenate the operands
///
/// The string attribute list of the returned [AttributedString] will contains
/// the string attributes from both operands with updated text ranges. ûbût   °öÅ5¢ I/// Two [AttributedString]s are equal if their string and attributes are. ¢¢  °Ê°Á£ÄÑ£+   ££ôëôí£†ÖŒ§.Äá/// A [DiagnosticsProperty] for [AttributedString]s, which shows a string
/// when there are no attributes, and more details otherwise. §yÅ ••ÄÇ/// Create a diagnostics property for an [AttributedString] object.
///
/// Such properties are used with [SemanticsData] objects.• •.  •7•>  •J•Q  •^•d  •~•Ö  •ñ•ù  •ß•Æ  •s•¡•«•ÿ•—•»•‘•‚•Ë•ˆ•Ô•È•Ú•¸ÄÀ¶∫Ä™/// Whether to show the property when the [value] is an [AttributedString]
/// whose [AttributedString.string] is the empty string.
///
/// This overrides [defaultValue]. ¶Ã|¶·   ¶Ã¶ÕßLÇ ß_  ßn*ßÜ  ßLßM ©pª»™˛Å|/// Summary information about a [SemanticsNode] object.
///
/// A semantics node might [SemanticsNode.mergeAllDescendantsIntoThisNode],
/// which means the individual fields on the semantics node don't fully describe
/// the semantics at that node. This data structure contains the full semantics
/// for the node.
///
/// Typically obtained from [SemanticsNode.getSemanticsData]. ´$àË ´´˝Ä¡/// Creates a semantics data object.
///
/// The [flags], [actions], [label], and [Rect] arguments must not be null.
///
/// If [label] is not empty, then [textDirection] must also not be null.¨¨  ¨¨,  ¨8¨G  ¨[¨j  ¨~&¨ç  ¨™&¨π  ¨÷¨Â  ¨¯≠  ≠≠"  ≠4≠C  ≠L≠[  ≠i≠x  ≠Ü≠ï  ≠ß≠∂  ≠∆≠’  ≠Í≠˘  ÆÆ  Æ/Æ>  ÆRÆa  ÆtÆÉ  Æñ Æ•  Æº	Æ¬  ÆÀÆ—  ÆﬂÆÂ  Ä£ØØØØØØØ#Ø)Ø9Ø2Ø*Ø5ØCØIØaØZØJØ]ØkØqØâØÇØrØÖØìØôØ∫Ø≥ØöØ∂ØƒØ ØÎØ‰ØÀØÁØıØ˚∞∞Ø¸∞∞∞"∞I∞ï∞1∞+∞#∞.∞B∞4∞E∞K∞q∞r∞y∞ü∞•∞€±6∞√∞Ω∞¶∞µ∞∂∞¿∞‘∞∆∞◊∞›±±±±±±±@±F±|±◊±d±^±G±V±W±a±u±g±x±~±¢±∫±§±≥±¥±ª±·±Á≤&≤ì≤≤±Ë≤ ≤≤≤≤≤"≤(≤U≤v≤W≤o≤p≤w≤ù≤£≤‚≥O≤ ≤ƒ≤§≤º≤Ω≤«≤€≤Õ≤ﬁ≤‰≥≥2≥≥+≥,≥3≥Y≥_≥î≥Ì≥|≥v≥`≥n≥o≥y≥ç≥≥ê≥ñ≥π≥–≥ª≥…≥ ≥—≥˜≥˝¥
¥≥˛¥¥N¥Y</// A bit field of [SemanticsFlag]s that apply to this node. ¥cR¥Æ>/// A bit field of [SemanticsAction]s that apply to this node. µßÅ∂ûÄ”/// A textual description for the current label of the node in
/// [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [label], which exposes just the raw text. ∑üÅ∏ñÄ”/// A textual description for the current value of the node in
/// [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [value], which exposes just the raw text. πÿÅ8∫¯Ä¸/// The value that [value] will become after performing a
/// [SemanticsAction.increase] action in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [increasedValue], which exposes just the raw text. ºCÅ8ΩcÄ¸/// The value that [value] will become after performing a
/// [SemanticsAction.decrease] action in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [decreasedValue], which exposes just the raw text. æyÅø~Ä·/// A brief description of the result of performing an action on this node
/// in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [hint], which exposes just the raw text. øëÄà¿ @m/// A textual description of the widget's tooltip.
///
/// The reading direction is given by [textDirection]. ¿ @Äñ¿ @ßo/// The reading direction for the text in [label], [value],
/// [increasedValue], [decreasedValue], and [hint]. ¿ @πÄü¿ AKx/// The currently selected text (or the position of the cursor) within [value]
/// if this node represents a text field. ¿ A]Ä∆¿ BÄ¢/// The total number of scrollable children that contribute to semantics.
///
/// If the number of children are unknown or unbounded, this value will be
/// null. ¿ B(\¿ ByC/// The index of the first visible semantic child of a scroll node. ¿ BâÅÃ¿ DGÅõ/// Indicates the current scrolling position in logical pixels if the node is
/// scrollable.
///
/// The properties [scrollExtentMin] and [scrollExtentMax] indicate the valid
/// in-range values for this property. The value for [scrollPosition] may
/// (temporarily) be outside that range, e.g. during an overscroll.
///
/// See also:
///
///  * [ScrollPosition.pixels], from where this value is usually taken. ¿ DZÅ.¿ EyÅ /// Indicates the maximum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.maxScrollExtent], from where this value is usually taken. ¿ EçÅ.¿ F¨Å /// Indicates the minimum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.minScrollExtent], from where this value is usually taken. ¿ F¿Å…¿ H{Åô/// The id of the platform view, whose semantics nodes will be added as
/// children to this node.
///
/// If this value is non-null, the SemanticsNode must not have any children
/// as those would be replaced by the semantics nodes of the referenced
/// platform view.
///
/// See also:
///
///  * [AndroidView], which is the platform view for Android.
///  * [UiKitView], which is the platform view for iOS. ¿ HéÅv¿ IˆÅL/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. Defaults
/// to null, which means no limit is imposed on the text field. ¿ J	Åg¿ K^Å9/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. This must
/// be set when [maxValueLength] is set. ¿ KuN¿ Kø</// The bounding box for this node in its coordinate system. ¿ K»Y¿ L9/// The set of [SemanticsTag]s associated with this node. ¿ L&Å¿ M<Ä¸/// The transform from this node's coordinate system to its parent's coordinate system.
///
/// By default, the transform is null, which represents the identity
/// transformation (i.e., that this node has the same coordinate system as its
/// parent). ¿ MJÄÏ¿ N-Ä…/// The elevation of this node relative to the parent semantics node.
///
/// See also:
///
///  * [SemanticsConfiguration.elevation] for a detailed discussion regarding
///    elevation and semantics. ¿ N;Äƒ¿ NˆÄ£/// The extent of this node along the z-axis beyond its [elevation]
///
/// See also:
///
///  * [SemanticsConfiguration.thickness] for a more detailed definition. ¿ OÅ0¿ PÄˆ/// The identifiers for the custom semantics actions and standard action
/// overrides for this node.
///
/// The list must be sorted in increasing order.
///
/// See also:
///
///  * [CustomSemanticsAction], for an explanation of custom actions. ¥∫ÄÈµÉÄ≥/// A textual description for the current label of the node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedLabel].   ∂≤ÄÈ∑{Ä≥/// A textual description for the current value of the node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedValue].   ∏™Å*π¢Ä‡/// The value that [value] will become after performing a
/// [SemanticsAction.increase] action.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedIncreasedValue].   ªÅ*ºÄ‡/// The value that [value] will become after performing a
/// [SemanticsAction.decrease] action.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedDecreasedValue].   ΩÄÄıæWÄ¡/// A brief description of the result of performing an action on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedHint].   ¿ a=ÇW¿ aQ   ¿ a=¿ a>¿ P9m¿ Pm,/// Whether [flags] contains the given flag. ¿ Pu¿ PÑ   ¿ P™{¿ P‚0/// Whether [actions] contains the given action. ¿ PÏ¿ P˝   ¿ Q)O¿ Q<   ¿ Q)¿ Q*¿ Q|ä ¿ Qç  ¿ Q°&¿ Qæ  ¿ Q|¿ Q}¿ \JÑÔ¿ \d  ¿ \g¿ \o  ¿ \J¿ \K¿ còÅû¿ c§  ¿ c∂¿ c¬  ¿ c«¿ c”   ™Ì™Ó¿ e:Åq¿ e@  ¿ eãÄÜ ¿ eã¿ eß ¿ eÆ
¿ eµ  ¿ eæ¿ eŒ  ¿ eÿ¿ eË  ¿ eÚ¿ f   ¿ f(¿ f3   ¿ fBg¿ fd   ¿ fB¿ fC ¿ f≠á#¿ gEÄÜ/// Provides hint values which override the default hints on supported
/// platforms.
///
/// On iOS, these values are always ignored. ¿ g{Äº ¿ g´¿ g¡'/// Creates a semantics hint overrides.¿ g»¿ gŒ  ¿ g‹¿ g‚  ¿ g˘¿ gˇ¿ h¿ h
¿ h ¿ h¿ h¿ h¿ h5¿ h0¿ h ¿ h3¿ h;Å8¿ ijÅ/// The hint text for a tap action.
///
/// If null, the standard hint is used instead.
///
/// The hint should describe what happens when a tap occurs, not the
/// manner in which a tap is accomplished.
///
/// Bad: 'Double tap to show movies'.
/// Good: 'show movies'. ¿ ixÅ`¿ j…Å0/// The hint text for a long press action.
///
/// If null, the standard hint is used instead.
///
/// The hint should describe what happens when a long press occurs, not
/// the manner in which the long press is accomplished.
///
/// Bad: 'Double tap and hold to show tooltip'.
/// Good: 'show tooltip'. ¿ j›v¿ k//// Whether there are any non-null hint values.   ¿ kWH¿ kk   ¿ kW¿ kX¿ k£Ä˛¿ kΩ  ¿ k¿¿ k»  ¿ k£¿ k§¿ l•Å)¿ l∂  ¿ l &¿ lÁ  ¿ l•¿ l¶¿ g4¿ g5¿ m“¿ xí¿ nØÄÀ/// Contains properties used by assistive technologies to make the application
/// more accessible.
///
/// The properties of this class are used to generate a [SemanticsNode]s in the
/// semantics tree. ¿ n‚à  ¿ o¿ o "/// Creates a semantic annotation.;¿ o'¿ o-  ¿ o9¿ o?  ¿ oK¿ oQ  ¿ o^¿ od  ¿ op¿ ov  ¿ oÅ	¿ oá  ¿ oê¿ oñ  ¿ o°¿ oß  ¿ oµ¿ oª  ¿ o∆¿ oÃ  ¿ o‹¿ o‚  ¿ oÔ¿ oı  ¿ p¿ p	  ¿ p¿ p  ¿ p8¿ p>  ¿ pI¿ pO  ¿ p\¿ pb  ¿ pp¿ pv  ¿ pÜ¿ på  ¿ põ
¿ p°  ¿ p´¿ p±  ¿ p¿¿ p∆  ¿ pŸ¿ pﬂ  ¿ pˆ
¿ p¸  ¿ q¿ q  ¿ q 
¿ q&  ¿ q0¿ q6  ¿ qJ¿ qP  ¿ qc¿ qi  ¿ qÜ¿ qå  ¿ qü¿ q•  ¿ q¬	¿ q»  ¿ q—¿ q◊  ¿ q„¿ qÈ  ¿ q¸¿ r  ¿ r¿ r  ¿ r,¿ r2  ¿ r>¿ rD  ¿ rW
¿ r]  ¿ rg¿ rm  ¿ r}¿ rÉ  ¿ rî¿ rö  ¿ r¨¿ r≤  ¿ r¡¿ r«  ¿ rÿ¿ rﬁ  ¿ rÌ¿ rÛ  ¿ s¿ s  ¿ s
¿ s  ¿ s#¿ s)  ¿ s5#¿ s;  ¿ s^$¿ sd  ¿ sà¿ sé  ¿ s¨¿ s≤  ¿ s—¿ s◊  ¿ sÍ¿ s  ¿ s˛ ¿ t  ¿ t$ ¿ t*  ¿ tJ¿ tP  ¿ t^¿ td  <¿ tÇ¿ tà¿ t±¿ tÏ¿ tó¿ tè¿ tâ¿ tí¿ t™¿ tö¿ t≠¿ t≥¿ tˆ¿ t¸¿ u%¿ u`¿ u¿ u¿ t˝¿ u¿ u¿ u¿ u!¿ u'¿ uj¿ up¿ u´¿ u¯¿ uà¿ uÄ¿ uq¿ uÉ¿ u§¿ uã¿ uß¿ u≠¿ v¿ v¿ vC¿ vê¿ v ¿ v¿ v	¿ v¿ v<¿ v#¿ v?¿ vE¿ vö¿ v†¿ v«¿ w ¿ vÆ¿ v¶¿ v°¿ v©¿ v¿¿ v±¿ v√¿ v…;¿ wÅ[¿ xZÅ;/// If non-null, indicates that this subtree represents something that can be
/// in an enabled or disabled state.
///
/// For example, a button that a user can currently interact with would set
/// this field to true. A button that currently does not respond to user
/// interactions would set this field to false. ¿ xfÄ‰¿ yCÄ∆/// If non-null, indicates that this subtree represents a checkbox
/// or similar widget with a "checked" state, and what its current
/// state is.
///
/// This is mutually exclusive with [toggled]. ¿ yOÄÂ¿ z-Ä«/// If non-null, indicates that this subtree represents a toggle switch
/// or similar widget with an "on" state, and what its current
/// state is.
///
/// This is mutually exclusive with [checked]. ¿ z9Å&¿ {WÅ/// If non-null indicates that this subtree represents something that can be
/// in a selected or unselected state, and what its current state is.
///
/// The active tab in a tab bar for example is considered "selected", whereas
/// all other tabs are unselected. ¿ {dÄª¿ |Ä†/// If non-null, indicates that this subtree represents a button.
///
/// TalkBack/VoiceOver provides users with the hint "button" when a button
/// is focused. ¿ |$Å ¿ } ÄÂ/// If non-null, indicates that this subtree represents a link.
///
/// iOS's VoiceOver provides users with a unique hint when a link is focused.
/// Android's Talkback will announce a link hint the same way it does a
/// button. ¿ })Å¿ ~AÅ/// If non-null, indicates that this subtree represents a header.
///
/// A header divides into sections. For example, an address book application
/// might define headers A, B, C, etc. to divide the list of alphabetically
/// sorted contacts into sections. ¿ ~LÄø¿ Ä°/// If non-null, indicates that this subtree represents a text field.
///
/// TalkBack/VoiceOver provide special affordances to enter text into a
/// text field. ¿ Äº¿ ∆Ä°/// If non-null, indicates that this subtree represents a slider.
///
/// Talkback/\VoiceOver provides users with the hint "slider" when a
/// slider is focused. ¿ —a¿ Ä'G/// If non-null, indicates that this subtree represents a keyboard key. ¿ Ä7Ä–¿ ÄˇÄ±/// If non-null, indicates that this subtree is read only.
///
/// Only applicable when [textField] is true.
///
/// TalkBack/VoiceOver will treat it as non-editable text field. ¿ ÅÅ’¿ ÇÿÅØ/// If non-null, whether the node is able to hold input focus.
///
/// If [focusable] is set to false, then [focused] must not be true.
///
/// Input focus indicates that the node will receive keyboard events. It is not
/// to be confused with accessibility focus. Accessibility focus is the
/// green/black rectangular highlight that TalkBack/VoiceOver draws around the
/// element it is reading, and is separate from input focus. ¿ ÇÊÇ¿ Ñ¸Å˜/// If non-null, whether the node currently holds input focus.
///
/// At most one node in the tree should hold input focus at any point in time,
/// and it should not be set to true if [focusable] is false.
///
/// Input focus indicates that the node will receive keyboard events. It is not
/// to be confused with accessibility focus. Accessibility focus is the
/// green/black rectangular highlight that TalkBack/VoiceOver draws around the
/// element it is reading, and is separate from input focus. ¿ ÖÅ¿ Ö¯Ä€/// If non-null, whether a semantic node is in a mutually exclusive group.
///
/// For example, a radio button is in a mutually exclusive group because only
/// one radio button in that group can be marked as [checked]. ¿ ÜÉF¿ âUÉ/// If non-null, whether the node is considered hidden.
///
/// Hidden elements are currently not visible on screen. They may be covered
/// by other elements or positioned outside of the visible area of a viewport.
///
/// Hidden elements cannot gain accessibility focus though regular touch. The
/// only way they can be focused is by moving the focus to them via linear
/// navigation.
///
/// Platforms are free to completely ignore hidden elements and new platforms
/// are encouraged to do so.
///
/// Instead of marking an element as hidden it should usually be excluded from
/// the semantics tree altogether. Hidden elements are only included in the
/// semantics tree to work around platform limitations and they are mainly
/// used to implement accessibility scrolling on iOS. ¿ â`Å3¿ äãÅ/// If non-null, whether [value] should be obscured.
///
/// This option is usually set in combination with [textField] to indicate
/// that the text field contains a password (or other sensitive information).
/// Doing so instructs screen readers to not read out the [value]. ¿ äòÅ7¿ ã∆Å/// Whether the [value] is coming from a field that supports multiline text
/// editing.
///
/// This option is only meaningful when [textField] is true to indicate
/// whether it's a single-line or multiline text field.
///
/// This option is null when [textField] is false. ¿ ã‘Å—¿ çöÅ£/// If non-null, whether the node corresponds to the root of a subtree for
/// which a route name should be announced.
///
/// Generally, this is set in combination with
/// [SemanticsConfiguration.explicitChildNodes], since nodes with this flag
/// are not considered focusable by Android or iOS.
///
/// See also:
///
///  * [SemanticsFlag.scopesRoute] for a description of how the announced
///    value is selected. ¿ ç™ÄŒ¿ énÄ≠/// If non-null, whether the node contains the semantic label for a route.
///
/// See also:
///
///  * [SemanticsFlag.namesRoute] for a description of how the name is used. ¿ é}Ä¨¿ è$Äê/// If non-null, whether the node represents an image.
///
/// See also:
///
///  * [SemanticsFlag.isImage], for the flag this setting controls. ¿ è.É¢¿ í∆Éi/// If non-null, whether the node should be considered a live region.
///
/// A live region indicates that updates to semantics node are important.
/// Platforms may use this information to make polite announcements to the
/// user to inform them of updates to this node.
///
/// An example of a live region is a [SnackBar] widget. On Android and iOS,
/// live region causes a polite announcement to be generated automatically,
/// even if the widget does not have accessibility focus. This announcement
/// may not be spoken if the OS accessibility services are already
/// announcing something else, such as reading the label of a focused widget
/// or providing a system announcement.
///
/// See also:
///
///  * [SemanticsFlag.isLiveRegion], the semantics flag this setting controls.
///  * [SemanticsConfiguration.liveRegion], for a full description of a live region. ¿ í’Åg¿ î.Å=/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [textField] is true. Defaults to null,
/// which means no limit is imposed on the text field. ¿ îAÅS¿ ïÇÅ%/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [textField] is true. Must be set when
/// [maxValueLength] is set. ¿ ïôÇ¿ ó≤Å/// Provides a textual description of the widget.
///
/// If a label is provided, there must either by an ambient [Directionality]
/// or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [label] and [attributedLabel]. One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.label] for a description of how this is exposed
///    in TalkBack and VoiceOver.
///  * [attributedLabel] for an [AttributedString] version of this property. ¿ óºÇV¿ öÇ/// Provides an [AttributedString] version of textual description of the widget.
///
/// If a [attributedLabel] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [label] and [attributedLabel]. One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedLabel] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [label] for a plain string version of this property. ¿ öÇ+¿ ú=Å˝/// Provides a textual description of the value of the widget.
///
/// If a value is provided, there must either by an ambient [Directionality]
/// or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [value] and [attributedValue], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.value] for a description of how this is exposed
///    in TalkBack and VoiceOver.
///  * [attributedLabel] for an [AttributedString] version of this property. ¿ úGÇi¿ û°Ç%/// Provides an [AttributedString] version of textual description of the value
/// of the widget.
///
/// If a [attributedValue] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [value] and [attributedValue], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedValue] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [value] for a plain string version of this property. ¿ ûµÇ◊¿ °~Çö/// The value that [value] or [attributedValue] will become after a
/// [SemanticsAction.increase] action has been performed on this widget.
///
/// If a value is provided, [onIncrease] must also be set and there must
/// either be an ambient [Directionality] or an explicit [textDirection]
/// must be provided.
///
/// Callers must not provide both [increasedValue] and
/// [attributedIncreasedValue], One or both must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.increasedValue] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [attributedIncreasedValue] for an [AttributedString] version of this
///    property. ¿ °ëÇ˝¿ §vÇÆ/// The [AttributedString] that [value] or [attributedValue] will become after
/// a [SemanticsAction.increase] action has been performed on this widget.
///
/// If a [attributedIncreasedValue] is provided, [onIncrease] must also be set
/// and there must either be an ambient [Directionality] or an explicit
/// [textDirection] must be provided.
///
/// Callers must not provide both [increasedValue] and
/// [attributedIncreasedValue], One or both must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedIncreasedValue] for a description of
///    how this is exposed in TalkBack and VoiceOver.
///  * [increasedValue] for a plain string version of this property. ¿ §ìÇ◊¿ ß\Çö/// The value that [value] or [attributedValue] will become after a
/// [SemanticsAction.decrease] action has been performed on this widget.
///
/// If a value is provided, [onDecrease] must also be set and there must
/// either be an ambient [Directionality] or an explicit [textDirection]
/// must be provided.
///
/// Callers must not provide both [decreasedValue] and
/// [attributedDecreasedValue], One or both must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.decreasedValue] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [attributedDecreasedValue] for an [AttributedString] version of this
///    property. ¿ ßoÉ	¿ ™`Ç∫/// The [AttributedString] that [value] or [attributedValue] will become after
/// a [SemanticsAction.decrease] action has been performed on this widget.
///
/// If a [attributedDecreasedValue] is provided, [onDecrease] must also be set
/// and there must either be an ambient [Directionality] or an explicit
/// [textDirection] must be provided.
///
/// Callers must not provide both [decreasedValue] and
/// [attributedDecreasedValue], One or both must be null/// provided.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedDecreasedValue] for a description of
///    how this is exposed in TalkBack and VoiceOver.
///  * [decreasedValue] for a plain string version of this property. ¿ ™}ÇI¿ ¨¬Ç/// Provides a brief textual description of the result of an action performed
/// on the widget.
///
/// If a hint is provided, there must either be an ambient [Directionality]
/// or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [hint] and [attributedHint], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.hint] for a description of how this is exposed
///    in TalkBack and VoiceOver.
///  * [attributedHint] for an [AttributedString] version of this property. ¿ ¨ÀÇÅ¿ Ø>Ç>/// Provides an [AttributedString] version of brief textual description of the
/// result of an action performed on the widget.
///
/// If a [attributedHint] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided.
///
/// Callers must not provide both [hint] and [attributedHint], One or both
/// must be null.
///
/// See also:
///
///  * [SemanticsConfiguration.attributedHint] for a description of how this
///    is exposed in TalkBack and VoiceOver.
///  * [hint] for a plain string version of this property. ¿ ØQÅ©¿ ∞ÛÅÉ/// Provides a textual description of the widget's tooltip.
///
/// In Android, this property sets the `AccessibilityNodeInfo.setTooltipText`.
/// In iOS, this property is appended to the end of the
/// `UIAccessibilityElement.accessibilityLabel`.
///
/// If a [tooltip] is provided, there must either by an ambient
/// [Directionality] or an explicit [textDirection] should be provided. ¿ ∞ˇÅ≤¿ ≤§Åv/// Provides hint values which override the default hints on supported
/// platforms.
///
/// On Android, If no hint overrides are used then default [hint] will be
/// combined with the [label]. Otherwise, the [hint] will be ignored as long
/// as there as at least one non-null hint override.
///
/// On iOS, these are always ignored and the default [hint] is used instead. ¿ ≤∂Ä√¿ ≥lÄò/// The reading direction of the [label], [value], [increasedValue],
/// [decreasedValue], and [hint].
///
/// Defaults to the ambient [Directionality]. ¿ ≥~ÅI¿ ¥¿Å/// Determines the position of this node among its siblings in the traversal
/// sort order.
///
/// This is used to describe the order in which the semantic node should be
/// traversed by the accessibility services on the platform (e.g. VoiceOver
/// on iOS and TalkBack on Android). ¿ ¥ÃÇü¿ ∑]Ç`/// A tag to be applied to the child [SemanticsNode]s of this widget.
///
/// The tag is added to all child [SemanticsNode]s that pass through the
/// [RenderObject] corresponding to this widget while looking to be attached
/// to a parent SemanticsNode.
///
/// Tags are used to communicate to a parent SemanticsNode that a child
/// SemanticsNode was passed through a particular RenderObject. The parent can
/// use this information to determine the shape of the semantics tree.
///
/// See also:
///
///  * [SemanticsConfiguration.addTagForChildren], to which the tags provided
///    here will be passed. ¿ ∑pÅì¿ ∏˛Åi/// The handler for [SemanticsAction.tap].
///
/// This is the semantic equivalent of a user briefly tapping the screen with
/// the finger without moving it. For example, a button should implement this
/// action.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen while an element is focused. ¿ πÅñ¿ ∫ìÅf/// The handler for [SemanticsAction.longPress].
///
/// This is the semantic equivalent of a user pressing and holding the screen
/// with the finger for a few seconds without moving it.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen without lifting the finger after the
/// second tap. ¿ ∫£Çe¿ º¸Ç./// The handler for [SemanticsAction.scrollLeft].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from right to left. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping left with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided. ¿ ΩÇk¿ økÇ3/// The handler for [SemanticsAction.scrollRight].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from left to right. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping right with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided. ¿ ø}Ç]¿ ¡–Ç(/// The handler for [SemanticsAction.scrollUp].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from bottom to top. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping up with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided. ¿ ¡ﬂÇf¿ ƒ9Ç//// The handler for [SemanticsAction.scrollDown].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from top to bottom. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping down with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided. ¿ ƒJÇ:¿ ∆zÇ/// The handler for [SemanticsAction.increase].
///
/// This is a request to increase the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If a [value] is set, [increasedValue] must also be provided and
/// [onIncrease] must ensure that [value] will be set to [increasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping up with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume up button. ¿ ∆âÇ>¿ »ΩÇ	/// The handler for [SemanticsAction.decrease].
///
/// This is a request to decrease the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If a [value] is set, [decreasedValue] must also be provided and
/// [onDecrease] must ensure that [value] will be set to [decreasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping down with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume down button. ¿ »ÃÅ¿ …⁄ÄÌ/// The handler for [SemanticsAction.copy].
///
/// This is a request to copy the current selection to the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example. ¿ …ÂÅ$¿ ÀÄ¸/// The handler for [SemanticsAction.cut].
///
/// This is a request to cut the current selection and place it in the
/// clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example. ¿ ÀÅ¿ ÃÄÌ/// The handler for [SemanticsAction.paste].
///
/// This is a request to paste the current content of the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example. ¿ Ã(År¿ Õ|Å,/// The handler for [SemanticsAction.moveCursorForwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field forward by one character.
///
/// TalkBack users can trigger this by pressing the volume up key while the
/// input focus is in a text field. ¿ ÕüÅw¿ Œ˜Å0/// The handler for [SemanticsAction.moveCursorBackwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one character.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field. ¿ œÅf¿ –hÅ%/// The handler for [SemanticsAction.moveCursorForwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field. ¿ –ÜÅh¿ —‘Å&/// The handler for [SemanticsAction.moveCursorBackwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field. ¿ —ÛÅì¿ ”xÅ[/// The handler for [SemanticsAction.setSelection].
///
/// This handler is invoked when the user either wants to change the currently
/// selected text in a text field or change the position of the cursor.
///
/// TalkBack users can trigger this handler by selecting "Move cursor to
/// beginning/end" or "Select all" from the local context menu. ¿ ”ãÅ?¿ ‘¡Å/// The handler for [SemanticsAction.setText].
///
/// This handler is invoked when the user wants to replace the current text in
/// the text field with a new text.
///
/// Voice access users can trigger this handler by speaking "type <text>" to
/// their Android devices. ¿ ‘œÉù¿ ÿQÉK/// The handler for [SemanticsAction.didGainAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler gains
/// the accessibility focus. The accessibility focus is the
/// green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidLoseAccessibilityFocus], which is invoked when the accessibility
///    focus is removed from the node.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus. ¿ ÿqÉè¿ €ÂÉ=/// The handler for [SemanticsAction.didLoseAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler
/// loses the accessibility focus. The accessibility focus is
/// the green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidGainAccessibilityFocus], which is invoked when the node gains
///    accessibility focus.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus. ¿ ‹ÅS¿ ›OÅ'/// The handler for [SemanticsAction.dismiss].
///
/// This is a request to dismiss the currently focused node.
///
/// TalkBack users on Android can trigger this action in the local context
/// menu, and VoiceOver users on iOS can trigger this action with a standard
/// gesture or menu option. ¿ ›]Ç7¿ ﬂ~Å‹/// A map from each supported [CustomSemanticsAction] to a provided handler.
///
/// The handler associated with each custom action is called whenever a
/// semantics action of type [SemanticsAction.customAction] is received. The
/// provided argument will be an identifier used to retrieve an instance of
/// a custom action which can then retrieve the correct handler from this map.
///
/// See also:
///
///  * [CustomSemanticsAction], for an explanation of custom actions.  ¿ ﬂôÜ:¿ ﬂ™  ¿ ﬂæ&¿ ﬂ€  ¿ ﬂô¿ ﬂö¿ Â◊U¿ ÂÍ   ¿ Â◊¿ Âÿ¿ nû¿ nü¿ Á¿ ¿«¿ ËKÅ3/// A node that represents some semantic data.
///
/// The semantics tree is maintained during the semantics phase of the pipeline
/// (i.e., during [PipelineOwner.flushSemantics]), which happens after
/// compositing. The semantics tree is then uploaded into the engine for use
/// by assistive technology. ¿ ËèÅ ¿ È¿ È#~/// Creates a semantic node.
///
/// Each semantic node has a unique identifier that is assigned when the node
/// is created.¿ È*¿ È0  ¿ È8¿ ÈG  ¿ È_¿ È[¿ Èa¿ Èo¿ Èp¿ Èà¿ Èz¿ Èä¿ ÈõÅ:¿ Í0¿ Í1¿ Í5ÄÅ/// Creates a semantic node to represent the root of the semantics tree.
///
/// The root node is assigned an identifier of zero.¿ Í<¿ ÍB  ¿ ÍJ¿ ÍY  ¿ Íj¿ ÍÉ  ¿ Íî¿ Íê¿ Íñ¿ ÍÆ¿ Í†¿ Í∞/¿ ÏC¿ Ï, ¿ Ï[¿ ÏS¿ ÏY¿ ÏU¿ ÏT¿ ÏW¿ Ï]¿ Ïc¿ Ïn ¿ ÏÄ¿ ÌÄ«¿ ÌﬁÄ∞/// Uniquely identifies this node in the list of sibling nodes.
///
/// Keys are used during the construction of the semantics tree. They are not
/// transferred to the engine. ¿ Ô«¿ ÔÀ  ¿ Ô”!¿ ÔÁ  ¿ Ò7¿ Ò@  ¿ Úr¿ Úw ¿ Ú¿ ÚÉ¿ ÚÑ¿ ÛaÉn¿ ˆ∏É./// The semantic clip from an ancestor that was applied to this node.
///
/// Expressed in the coordinate system of the node. May be null if no clip has
/// been applied.
///
/// Descendant [SemanticsNode]s that are positioned outside of this rect will
/// be excluded from the semantics tree. Descendant [SemanticsNode]s that are
/// overlapping with this rect, but are outside of [parentPaintClipRect] will
/// be included in the tree, but they will be marked as hidden because they
/// are assumed to be not visible on screen.
///
/// If this rect is null, all descendant [SemanticsNode]s outside of
/// [parentPaintClipRect] will be excluded from the tree.
///
/// If this rect is non-null it has to completely enclose
/// [parentPaintClipRect]. If [parentPaintClipRect] is null this property is
/// also null. ¿ ˆ‘Çò¿ ˘YÇd/// The paint clip from an ancestor that was applied to this node.
///
/// Expressed in the coordinate system of the node. May be null if no clip has
/// been applied.
///
/// Descendant [SemanticsNode]s that are positioned outside of this rect will
/// either be excluded from the semantics tree (if they have no overlap with
/// [parentSemanticsClipRect]) or they will be included and marked as hidden
/// (if they are overlapping with [parentSemanticsClipRect]).
///
/// This rect is completely enclosed by [parentSemanticsClipRect].
///
/// If this rect is null [parentSemanticsClipRect] also has to be null. ¿ ˘qÇ‰¿ ¸BÇÆ/// The elevation adjustment that the parent imposes on this node.
///
/// The [elevation] property is relative to the elevation of the parent
/// [SemanticsNode]. However, as [SemanticsConfiguration]s from various
/// ascending [RenderObject]s are merged into each other to form that
/// [SemanticsNode] the parent‚Äôs elevation may change. This requires an
/// adjustment of the child‚Äôs relative elevation which is represented by this
/// value.
///
/// The value is rarely accessed directly. Instead, for most use cases the
/// [elevation] value should be used, which includes this adjustment.
///
/// See also:
///
///  * [elevation], the actual elevation of this [SemanticsNode]. ¿ ¸ZÅ}¿ ˝ Å^/// The index of this node within the parent's list of semantic children.
///
/// This includes all semantic nodes, not just those currently in the
/// child list. For example, if a scrollable has five children but the first
/// two are not visible (and thus not included in the list of children), then
/// the index of the last node will still be 4. ¿ ú ¿ ° ¿ ∑¿≥U¿∏ ¿€¿Ë¿È¿h¿|G/// Contains the children in inverse hit test order (i.e. paint order). ¿äÄ‡¿TÄ™/// A snapshot of `newChildren` passed to [_replaceChildren] that we keep in
/// debug mode. It supports the assertion that user does not mutate the list
/// of children. ¿Â¿Í ¿Ú¿ a¿ f ¿ o¿&N¿&; ¿&F¿&S¿&T¿&`h¿&â ¿&£¿&∞¿&±¿&Õ1¿&— ¿&‚¿&Ô¿&¿'Ä¬¿'¡Ä¢/// The [SemanticsTag]s this node is tagged with.
///
/// Tags are used during the construction of the semantics tree. They are not
/// transferred to the engine. ¿(C!¿(G ¿(P¿(]¿(^¿*√A¿*‘ ¿*Á¿*Ù¿*ı¿-A¿-$ ¿-7¿-D¿-E¿0‰S¿0ı ¿1¿1¿1¿4«S¿4ÿ ¿4Ù¿5¿5¿7A?¿7R ¿7d¿7q¿7r¿8'¿8" ¿8-¿8:¿8;¿:ö+¿:° ¿:Æ¿:ª¿:º¿B¿+¿B« ¿B‘¿B·¿B‚¿Câ&¿C°  ¿DR;¿Da ¿Dr¿D¿DÄ¿EÈ¿E˚  ¿Fª¿F   ¿Gs¿Gy  ¿Hg¿Hl  ¿H¿Hı  ¿JÁ¿JÔ  ¿LG¿LO  ¿Mß¿MØ  ¿O¢¿Oß  ¿QF¿QK  ¿R⁄¿Rﬂ  ¿SJL¿Sn ¿S~¿Sî¿Sï¿w6¿w ¿w.¿w7¿w9¿w8¿w>G¿wU ¿wy¿wÇ¿wÑ¿wÉ¿wâG¿w¢ ¿w∏¿wŒ¿wœ(¿ ÌÊÅﬁ¿ Ô∫Åπ/// The unique identifier for this node.
///
/// The root node has an id of zero. Other nodes are given a unique id
/// when they are attached to a [SemanticsOwner]. If they are detached, their
/// ids are invalid and should not be used.
///
/// In rare circumstances, id may change if this node is detached and
/// re-attached to the [SemanticsOwner]. This should only happen when the
/// application has generated too many semantics nodes.   ¿ Å,¿ ÒÄ¸/// The transform from this node's coordinate system to its parent's coordinate system.
///
/// By default, the transform is null, which represents the identity
/// transformation (i.e., that this node has the same coordinate system as its
/// parent).   ¿ ÒNÄ«¿ ÒR  ¿ Ò\¿ Òf   ¿ ÚV¿ Úa</// The bounding box for this node in its coordinate system.   ¿ ÚåÄ—¿ Úê  ¿ Úï
¿ Úõ   ¿ ˝‹Ç)¿ ˇ“Åÿ/// Whether the node is invisible.
///
/// A node whose [rect] is outside of the bounds of the screen and hence not
/// reachable for users is considered invisible if its semantic information
/// is not merged into a (partially) visible parent as indicated by
/// [isMergedIntoParent].
///
/// An invisible node can be safely dropped from the semantic tree without
/// loosing semantic information that is relevant for describing the content
/// currently shown on screen.   ¿ ÄÇ¿ oL/// Whether this node merges its semantic information into an ancestor node.   ¿ ¿Ä≤¿ ƒ  ¿ ◊
¿ ›   ¿vÅç¿∂Å$/// Whether this node is taking part in a merge of semantic information.
///
/// This returns true if the node is either merged into an ancestor node or if
/// decedent nodes are merged into this node.
///
/// See also:
///
///  * [isMergedIntoParent]
///  * [mergeAllDescendantsIntoThisNode]   ¿Ä©¿lY/// Whether this node and all of its descendants should be treated as one logical entity.   ¿pr¿¥8/// Whether this node has a non-zero number of children.   ¿¸i¿0)/// The number of children this node has.   ¿VH¿v   ¿V¿W¿¢H¿¡   ¿¢¿£¿(ÈÄ’¿)ùÄû/// A textual description of this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedLabel].   ¿)¬Ä˛¿*úÄ∫/// A textual description of this node in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [label], which exposes just the raw text.   ¿+	ÄÍ¿+“Ä≥/// A textual description for the current value of the node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedValue].   ¿+˜Å¿,ÏÄ”/// A textual description for the current value of the node in
/// [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [value], which exposes just the raw text.   ¿-YÅ£¿.…ÅR/// The value that [value] will have after a [SemanticsAction.increase] action
/// has been performed.
///
/// This property is only valid if the [SemanticsAction.increase] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedIncreasedValue].   ¿/ Å·¿0´ÅÉ/// The value in [AttributedString] format that [value] or [attributedValue]
/// will have after a [SemanticsAction.increase] action has been performed.
///
/// This property is only valid if the [SemanticsAction.increase] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// See also [increasedValue], which exposes just the raw text.   ¿1<Å£¿2¨ÅR/// The value that [value] will have after a [SemanticsAction.decrease] action
/// has been performed.
///
/// This property is only valid if the [SemanticsAction.decrease] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedDecreasedValue].   ¿2„Å·¿4éÅÉ/// The value in [AttributedString] format that [value] or [attributedValue]
/// will have after a [SemanticsAction.decrease] action has been performed.
///
/// This property is only valid if the [SemanticsAction.decrease] action is
/// available on this node.
///
/// The reading direction is given by [textDirection].
///
/// See also [decreasedValue], which exposes just the raw text.   ¿5Äˆ¿5ˆÄ¡/// A brief description of the result of performing an action on this node.
///
/// The reading direction is given by [textDirection].
///
/// This exposes the raw text of the [attributedHint].   ¿6Å%¿7Ä·/// A brief description of the result of performing an action on this node
/// in [AttributedString] format.
///
/// The reading direction is given by [textDirection].
///
/// See also [hint], which exposes just the raw text.   ¿7ÖÄì¿8m/// A textual description of the widget's tooltip.
///
/// The reading direction is given by [textDirection].   ¿8GÇP¿:Ç/// The elevation along the z-axis at which the [rect] of this [SemanticsNode]
/// is located above its parent.
///
/// The value is relative to the parent's [elevation]. The sum of the
/// [elevation]s of all ancestor node plus this value determines the absolute
/// elevation of this [SemanticsNode].
///
/// See also:
///
///  * [thickness], which describes how much space in z-direction this
///    [SemanticsNode] occupies starting at this [elevation].
///  * [elevationAdjustment], which has been used to calculate this value.   ¿: áÛ¿B•áq/// Describes how much space the [SemanticsNode] takes up along the z-axis.
///
/// A [SemanticsNode] represents multiple [RenderObject]s, which can be
/// located at various elevations in 3D. The [thickness] is the difference
/// between the absolute elevations of the lowest and highest [RenderObject]
/// represented by this [SemanticsNode]. In other words, the thickness
/// describes how high the box is that this [SemanticsNode] occupies in three
/// dimensional space. The two other dimensions are defined by [rect].
///
/// {@tool snippet}
/// The following code stacks three [PhysicalModel]s on top of each other
/// separated by non-zero elevations.
///
/// [PhysicalModel] C is elevated 10.0 above [PhysicalModel] B, which in turn
/// is elevated 5.0 above [PhysicalModel] A. The side view of this
/// constellation looks as follows:
///
/// ![A diagram illustrating the elevations of three PhysicalModels and their
/// corresponding SemanticsNodes.](https://flutter.github.io/assets-for-api-docs/assets/semantics/SemanticsNode.thickness.png)
///
/// In this example the [RenderObject]s for [PhysicalModel] C and B share one
/// [SemanticsNode] Y. Given the elevations of those [RenderObject]s, this
/// [SemanticsNode] has a [thickness] of 10.0 and an elevation of 5.0 over
/// its parent [SemanticsNode] X.
/// ```dart
/// PhysicalModel( // A
///   color: Colors.amber,
///   child: Semantics(
///     explicitChildNodes: true,
///     child: const PhysicalModel( // B
///       color: Colors.brown,
///       elevation: 5.0,
///       child: PhysicalModel( // C
///         color: Colors.cyan,
///         elevation: 10.0,
///         child: Placeholder(),
///       ),
///     ),
///   ),
/// )
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [elevation], which describes the elevation of the box defined by
///    [thickness] and [rect] relative to the parent of this [SemanticsNode].   ¿BÄñ¿CfU/// Provides hint values which override the default hints on supported
/// platforms.   ¿C¥Äõ¿D/c/// The reading direction for [label], [value], [hint], [increasedValue], and
/// [decreasedValue].   ¿DíÅT¿E“Å/// Determines the position of this node among its siblings in the traversal
/// sort order.
///
/// This is used to describe the order in which the semantic node should be
/// traversed by the accessibility services on the platform (e.g. VoiceOver
/// on iOS and TalkBack on Android).   ¿FÄ∞¿Fòx/// The currently selected text (or the position of the cursor) within [value]
/// if this node represents a text field.   ¿F›Äì¿GTh/// If this node represents a text field, this indicates whether or not it's
/// a multiline text field.   ¿GäÄ⁄¿H>Ä¢/// The total number of scrollable children that contribute to semantics.
///
/// If the number of children are unknown or unbounded, this value will be
/// null.   ¿HÇk¿H—C/// The index of the first visible semantic child of a scroll node.   ¿IÅﬁ¿J¬Åõ/// Indicates the current scrolling position in logical pixels if the node is
/// scrollable.
///
/// The properties [scrollExtentMin] and [scrollExtentMax] indicate the valid
/// in-range values for this property. The value for [scrollPosition] may
/// (temporarily) be outside that range, e.g. during an overscroll.
///
/// See also:
///
///  * [ScrollPosition.pixels], from where this value is usually taken.   ¿KÅA¿L Å /// Indicates the maximum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.maxScrollExtent], from where this value is usually taken.   ¿LdÅ@¿MÄÄˇ/// Indicates the minimum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.minScrollExtent] from where this value is usually taken.   ¿MƒÅ€¿O}Åô/// The id of the platform view, whose semantics nodes will be added as
/// children to this node.
///
/// If this value is non-null, the SemanticsNode must not have any children
/// as those would be replaced by the semantics nodes of the referenced
/// platform view.
///
/// See also:
///
///  * [AndroidView], which is the platform view for Android.
///  * [UiKitView], which is the platform view for iOS.   ¿OªÅà¿Q!ÅL/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. Defaults
/// to null, which means no limit is imposed on the text field.   ¿Q_Åx¿R≠Å4/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [SemanticsFlag.isTextField] is set. Must be
/// set when [maxValueLength] is set.   ¿ ÏÖÄë¿ Ïê    ¿oè˝¿t  ¿Ö¿ö   ¿iÅº¿XÄﬂ/// Visits the immediate children of this node.
///
/// This function calls visitor for each immediate child until visitor returns
/// false. Returns true if all the visitor calls returned true, otherwise
/// returns false. ¿f¿|   ¿)Ç¿(ÄÔ/// Visit all the descendants of this node.
///
/// This function calls visitor for each descendant in a pre-order traversal
/// until visitor returns false. Returns true if all the visitor calls
/// returned true, otherwise returns false. ¿:¿P   ¿ÓN¿ˇ   ¿Ó¿Ô¿@Ç4¿Q  ¿X¿h  ¿@¿A¿xÇŒ¿â   ¿x¿y¿ xÄ√¿ }    ¿!?ÑØ¿!D  ¿!n¿!Ü   ¿' u¿'˝+/// Whether this node is tagged with `tag`. ¿(¿(   ¿(i|¿(≠</// Whether this node currently has a given [SemanticsFlag]. ¿(µ¿(ƒ   ¿R˜O¿R¸  ¿S¿S   ¿Sõã¿UäÅ◊/// Reconfigures the properties of this object to describe the configuration
/// provided in the `config` argument and the children listed in the
/// `childrenInInversePaintOrder` argument.
///
/// The arguments may be null; this represents an empty configuration (all
/// values at their defaults, no children).
///
/// No reference is kept to the [SemanticsConfiguration] object, but the child
/// list is used as-is and should therefore not be changed after this call. ¿Uõ'¿UΩ  ¿U»0¿Uﬁ   ¿^Øóı¿_ÀÅ/// Returns a summary of the semantics for this node.
///
/// If this node has [mergeAllDescendantsIntoThisNode], then the returned data
/// includes the information from this node's descendants. Otherwise, the
/// returned data matches the data on this node.   ¿v®X¿vª    ¿w’åQ¿w⁄  ¿wÁ!¿x  ¿x
'¿x   ¿Ñ*â¿¿ÑéM/// Builds a new list made of [_children] sorted in semantic traversal order.   ¿çÓÅx¿éÿÄ‹/// Sends a [SemanticsEvent] associated with this [SemanticsNode].
///
/// Semantics events should be sent to inform interested parties (like
/// the accessibility system of the operating system) about changes to the UI. ¿é‚¿éÚ   ¿èjX¿è}   ¿èj¿èk¿è∆ë¿è◊  ¿èÎ&¿ê  ¿è∆¿è«¿†·Çw¿°¬Ä≈/// Returns a string representation of this node and its descendants.
///
/// The order in which the children of the [SemanticsNode] will be printed is
/// controlled by the [childOrder] parameter. ¿°’¿°›  ¿°Ù¿°˝  ¿¢0¿¢#  ¿¢HK¿¢a  	¿°Ø¿°∞¿°Ï¿¢-¿¢<¿¢=¿¢m¿¢Ñ¿¢Ö¿£\Åc¿£x  ¿£ê¿£ô  ¿£¢9¿£π  ¿£·K¿£˙  ¿£\¿£]¿£¿¿£‘¿£’¿§¿§¿§¿§√Å3¿§Â  ¿§˝K¿•  ¿§√¿§ƒ¿•"¿•9¿•:¿•˙Å‹¿¶]L/// Returns the list of direct children of this node in the specified order. ¿¶v"¿¶è    ¿ß⁄Ü¿©˝Ç/// An edge of a box, such as top, bottom, left or right, used to compute
/// [SemanticsNode]s that overlap vertically or horizontally.
///
/// For computing horizontal overlap in an LTR setting we create two [_BoxEdge]
/// objects for each [SemanticsNode]: one representing the left edge (marked
/// with [isLeadingEdge] equal to true) and one for the right edge (with [isLeadingEdge]
/// equal to false). Similarly, for vertical overlap we also create two objects
/// for each [SemanticsNode], one for the top and one for the bottom edge. ¿™*Äﬂ ¿™*¿™2 ¿™9¿™H  ¿™Z¿™i  ¿™t¿™É  ¿™è¿™ï¿™´¿™§¿™ñ¿™ß¿™µ¿™ª¿™ ¿™√¿™º¿™∆¿™‘¿™⁄¿™Í¿™€¿™·¿™‚¿™Ù¿™˙¿´¿´ ¿™˚¿´¿´ÅΩ¿¨ΩÅí/// True if the edge comes before the seconds edge along the traversal
/// direction, and false otherwise.
///
/// This field is never null.
///
/// For example, in LTR traversal the left edge's [isLeadingEdge] is set to true,
/// the right edge's [isLeadingEdge] is set to false. When considering vertical
/// ordering of boxes, the top edge is the start edge, and the bottom edge is
/// the end edge. ¿¨œ¿≠Hg/// The offset from the start edge of the parent [SemanticsNode] in the
/// direction of the traversal. ¿≠S?¿≠é$/// The node whom this edge belongs.  ¿≠óZ¿≠ß  ¿≠±¿≠ª  ¿≠ó¿≠ò ¿≠ıñ¿ÆÕÄ—/// A group of [nodes] that are disjoint vertically or horizontally from other
/// nodes that share the same [SemanticsNode] parent.
///
/// The [nodes] are sorted among each other separately from other nodes. ¿Øy ¿Ø¿Ø  ¿Ø'¿Ø6  ¿ØF¿ØU  ¿Øj¿Øp¿ØÑ¿Ø}¿Øq¿ØÄ¿ØäÄ˚¿∞zÄÿ/// The offset from the start edge of the parent [SemanticsNode] in the
/// direction of the traversal.
///
/// This value is equal to the [_BoxEdge.offset] of the first node in the
/// [nodes] list being considered. ¿∞ä!¿∞û  ¿∞∞e¿∞¸//// The nodes that are sorted among each other.¿±¿±¿±¿±¿± ¿±o¿±*  ¿±4¿±I  ¿±¿±¿±çÜR¿≤uÄÀ/// Sorts this group assuming that [nodes] belong to the same vertical group.
///
/// This method breaks up this group into horizontal [_SemanticsSortGroup]s
/// then sorts them using [sortedWithinKnot].   ¿∑„å¿ª;É%/// Sorts [nodes] where nodes intersect both vertically and horizontally.
///
/// In the special case when [nodes] contains one or less nodes, this method
/// returns [nodes] unchanged.
///
/// This method constructs a graph, where vertices are [SemanticsNode]s and
/// edges are "traversed before" relation between pairs of nodes. The sort
/// order is the topological sorting of the graph, with the original order of
/// [nodes] used as the tie breaker.
///
/// Whether a node is traversed before another node is determined by the
/// vector that connects the two nodes' centers. If the vector "points to the
/// right or down", defined as the [Offset.direction] being between `-pi/4`
/// and `3*pi/4`), then the semantics node whose center is at the end of the
/// vector is said to be traversed after.    ¿ÃaÑò¿ÕÃÅd/// The implementation of [Comparable] that implements the ordering of
/// [SemanticsNode]s in the accessibility traversal.
///
/// [SemanticsNode]s are sorted prior to sending them to the engine side.
///
/// This implementation considers a [node]'s [sortKey] and its position within
/// the list of its siblings. [sortKey] takes precedence over position. ¿ŒÄõ ¿Œ¿Œ ¿Œ&¿Œ5  ¿Œ>¿ŒD  ¿ŒP¿Œ_  ¿Œs¿Œy¿ŒÜ¿Œ¿Œz¿ŒÇ¿Œè¿Œï¿Œ¶¿Œü¿Œñ¿Œ¢¿Œ¨Q¿Œ˘6/// The node whose position this sort node determines. ¿œÄµ¿œ∞Äç/// Determines the position of this node among its siblings.
///
/// Sort keys take precedence over other attributes, such as
/// [position]. ¿œºl¿– U/// Position within the list of siblings as determined by the default sort
/// order.  ¿–-Ä ¿–=  ¿–G¿–[  ¿–-¿–. ¿–˚öM¿“Å
/// Owns [SemanticsNode] objects and notifies listeners of changes to the
/// render tree semantics.
///
/// To listen for semantic updates, call [PipelineOwner.ensureSemantics] to
/// obtain a [SemanticsHandle]. This will create a [SemanticsOwner] if
/// necessary.  ¿“68¿“O ¿“l¿“m¿“]¿“k¿“^¿“r=¿“ê ¿“≠¿“Æ¿“ô¿“¨¿“ö¿“ü¿“≥;¿“Ã ¿“Ï¿“Ì¿“›¿“Î¿“ﬁ¿“ÛÄü¿”sf/// The root node of the semantics tree, if any.
///
/// If the semantics tree is empty, returns null.   ¿”ñ~¿”ß   ¿”ñ¿”ó¿‘äŒ¿‘lL/// Update the semantics using [dart:ui.PlatformDispatcher.updateSemantics].   ¿ﬁÍÇO¿ﬂ  ¿ﬂ"¿ﬂ'  ¿ﬂ*¿ﬂ;   ¿·=ÇÓ¿‚vÅ%/// Asks the [SemanticsNode] with the given id to perform the given action.
///
/// If the [SemanticsNode] has not indicated that it can perform the action,
/// this function does nothing.
///
/// If the given `action` requires arguments they need to be passed in via
/// the `args` parameter. ¿‚Ñ¿‚â  ¿‚å¿‚ù  ¿‚¶¿‚Ø   ¿‰/Ñ.¿‰G  ¿‰m¿‰|  ¿‰Å¿‰â  ¿‰í¿‰£   ¿ËaÇ©¿ÈûÅ)/// Asks the [SemanticsNode] at the given position to perform the given action.
///
/// If the [SemanticsNode] has not indicated that it can perform the action,
/// this function does nothing.
///
/// If the given `action` requires arguments they need to be passed in via
/// the `args` parameter. ¿ÈÆ¿È∂  ¿Èø¿È–  ¿ÈŸ¿È‚   ¿Î8¿Î!   ¿Î¿Î ¿ÎJ¿ “¿ÏÄ∑/// Describes the semantic information associated with the owning
/// [RenderObject].
///
/// The information provided in the configuration is used to generate the
/// semantics tree.  4¿Ô ¿Ô ¿Ô&¿Ô≥É6¿ÚœÇ¸/// Whether the configuration forces all children of the owning [RenderObject]
/// that want to contribute semantic information to the semantics tree to do
/// so in the form of explicit [SemanticsNode]s.
///
/// When set to false children of the owning [RenderObject] are allowed to
/// annotate [SemanticsNode]s of their parent with the semantic information
/// they want to contribute to the semantic tree.
/// When set to true the only way for children of the owning [RenderObject]
/// to contribute semantic information to the semantic tree is to introduce
/// new explicit [SemanticsNode]s to the tree.
///
/// This setting is often used in combination with [isSemanticBoundary] to
/// create semantic boundaries that are either writable or not for children.¿Ú‰¿ÚÓÉ|¿ˆ7É%/// Whether the owning [RenderObject] makes other [RenderObject]s previously
/// painted within the same semantic boundary unreachable for accessibility
/// purposes.
///
/// If set to true, the semantic information for all siblings and cousins of
/// this node, that are earlier in a depth-first pre-order traversal, are
/// dropped from the semantics tree up until a semantic boundary (as defined
/// by [isSemanticBoundary]) is reached.
///
/// If [isSemanticBoundary] and [isBlockingSemanticsOfPreviouslyPaintedNodes]
/// is set on the same node, all previously painted siblings and cousins up
/// until the next ancestor that is a semantic boundary are dropped.
///
/// Paint order as established by [RenderObject.visitChildrenForSemantics] is
/// used to determine if a node is previous to this one.¿ˆe¿˜∆¿˜À ¿˜ﬂ¿˜ÈÅ.¿¯·Ä∏/// The actions (with associated action handlers) that this configuration
/// would like to contribute to the semantics tree.
///
/// See also:
///
///  * [addAction] to add an action.¿˘¿˘¿¯Ï¿˘¿¯Ì¿¯˛¿˘¿˘  ¿˘1¿¿  ¿F¿T  ¿c¿q  ¿o¿}  ¿ã¿ô  ¿¶¿¥  ¿¿¿Œ  ¿¬¿–  ¿¿¿Œ  ¿Ç¿ê  ¿C¿Q  ¿Û¿  ¿v¿Ñ  ¿!æ2¿!—  ¿$∆3¿$Ÿ  ¿'ª-¿'Œ  ¿*†.¿*≥  ¿-®$¿-Ω  ¿16¿1F  ¿6"*¿60  ¿:∏*¿:∆  ¿>∫¿>Ã  ¿@Ï¿@Ò  ¿BA¿BF  ¿C~¿CÉ  ¿Dπ¿Dæ  ¿FÈ¿FÓ  ¿I	¿I  ¿K“-¿K◊ ¿K˙¿Nej¿Né ¿NÕ¿NŒ¿N®¿NÃ¿N©¿N¿¿U¶8¿U∑ ¿U ¿U⁄¿U›¿U€¿]B8¿]S ¿]f¿]v¿]y¿]w¿caA¿cr ¿cé¿cû¿c°¿cü¿ióA¿i® ¿iƒ¿i‘¿i◊¿i’¿o(7¿o9 ¿oK¿o[¿o^¿o\¿pz¿pÅ ¿på¿qÜ&¿qû  ¿rÊ¿rÌ ¿r˙¿u ¿u ¿u¿}è¿}û  ¿úé¿úù  ¿ü¿ü  ¿†ˆ¿†˛  ¿¢Ÿ¿¢·  ¿§°#¿§¥  ¿ßÙ¿ß¯ ¿®Äí¿ÏEÇ√¿ÓﬁÇu/// Whether the [RenderObject] owner of this configuration wants to own its
/// own [SemanticsNode].
///
/// When set to true semantic information associated with the [RenderObject]
/// owner of this configuration or any of its descendants will not leak into
/// parents. The [SemanticsNode] generated out of this configuration will
/// act as a boundary.
///
/// Whether descendants of the owning [RenderObject] can add their semantic
/// information to the [SemanticsNode] introduced by this configuration
/// is controlled by [explicitChildNodes].
///
/// This has to be true if [isMergingSemanticsOfDescendants] is also true.   ¿Ô/ÄÄ¿Ô3  ¿ÔF
¿ÔL   ¿ˆ‰Äﬂ¿˜ùÄß/// Whether this configuration is empty.
///
/// An empty configuration doesn't contain any semantic information that it
/// wants to contribute to the semantics tree.   ¿¸!ÑÌ¿ ˛Ñ¢/// The handler for [SemanticsAction.tap].
///
/// This is the semantic equivalent of a user briefly tapping the screen with
/// the finger without moving it. For example, a button should implement this
/// action.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen while an element is focused.
///
/// On Android prior to Android Oreo a double-tap on the screen while an
/// element with an [onTap] handler is focused will not call the registered
/// handler. Instead, Android will simulate a pointer down and up event at the
/// center of the focused element. Those pointer events will get dispatched
/// just like a regular tap with TalkBack disabled would: The events will get
/// processed by any [GestureDetector] listening for gestures in the center of
/// the focused element. Therefore, to ensure that [onTap] handlers work
/// properly on Android versions prior to Oreo, a [GestureDetector] with an
/// onTap handler should always be wrapping an element that defines a
/// semantic [onTap] handler. By default a [GestureDetector] will register its
/// own semantic [onTap] handler that follows this principle.   ¿)q¿-  ¿3¿B   ¿ûÅ•¿'Åf/// The handler for [SemanticsAction.longPress].
///
/// This is the semantic equivalent of a user pressing and holding the screen
/// with the finger for a few seconds without moving it.
///
/// VoiceOver users on iOS and TalkBack users on Android can trigger this
/// action by double-tapping the screen without lifting the finger after the
/// second tap.   ¿dÄÉ¿h  ¿t¿É   ¿ÎÇu¿BÇ./// The handler for [SemanticsAction.scrollLeft].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from right to left. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping left with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided.   ¿ÇÄÜ¿Ü  ¿ì¿¢   ¿Å`¿TÅ'/// The handler for [SemanticsAction.dismiss].
///
/// This is a request to dismiss the currently focused node.
///
/// TalkBack users on Android can trigger this action in the local context
/// menu, and VoiceOver users on iOS can trigger this action with a standard
/// gesture or menu option.   ¿ã}¿è  ¿ô¿®   ¿	Ç|¿hÇ3/// The handler for [SemanticsAction.scrollRight].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from left to right. It should be recognized by controls that are
/// horizontally scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping right with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided.   ¿´Äâ¿Ø  ¿Ω¿Ã   ¿8Çk¿âÇ(/// The handler for [SemanticsAction.scrollUp].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from bottom to top. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping up with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// right and then left in one motion path. On Android, [onScrollUp] and
/// [onScrollLeft] share the same gesture. Therefore, only on of them should
/// be provided.   ¿√ÄÄ¿«  ¿“¿·   ¿GÇv¿üÇ//// The handler for [SemanticsAction.scrollDown].
///
/// This is the semantic equivalent of a user moving their finger across the
/// screen from top to bottom. It should be recognized by controls that are
/// vertically scrollable.
///
/// VoiceOver users on iOS can trigger this action by swiping down with three
/// fingers. TalkBack users on Android can trigger this action by swiping
/// left and then right in one motion path. On Android, [onScrollDown] and
/// [onScrollRight] share the same gesture. Therefore, only on of them should
/// be provided.   ¿ﬂÄÜ¿„  ¿¿ˇ   ¿iÇV¿•Ç/// The handler for [SemanticsAction.increase].
///
/// This is a request to increase the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If [this.value] is set, [increasedValue] must also be provided and
/// [onIncrease] must ensure that [this.value] will be set to
/// [increasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping up with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume up button.   ¿ﬂÄÄ¿„  ¿Ó¿˝   ¿cÇZ¿£Ç/// The handler for [SemanticsAction.decrease].
///
/// This is a request to decrease the value represented by the widget. For
/// example, this action might be recognized by a slider control.
///
/// If [this.value] is set, [decreasedValue] must also be provided and
/// [onDecrease] must ensure that [this.value] will be set to
/// [decreasedValue].
///
/// VoiceOver users on iOS can trigger this action by swiping down with one
/// finger. TalkBack users on Android can trigger this action by pressing the
/// volume down button.   ¿›ÄÄ¿·  ¿Ï¿˚   ¿aÅ¿mÄÌ/// The handler for [SemanticsAction.copy].
///
/// This is a request to copy the current selection to the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿õt¿ü  ¿¶¿µ   ¿Å-¿0Ä¸/// The handler for [SemanticsAction.cut].
///
/// This is a request to cut the current selection and place it in the
/// clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿[q¿_  ¿e¿t   ¿–Å ¿‹ÄÌ/// The handler for [SemanticsAction.paste].
///
/// This is a request to paste the current content of the clipboard.
///
/// TalkBack users on Android can trigger this action from the local context
/// menu of a text field, for example.   ¿w¿  ¿¿(   ¿àÅÎ¿QÅ§/// The handler for [SemanticsAction.showOnScreen].
///
/// A request to fully show the semantics node on screen. For example, this
/// action might be send to a node in a scrollable list that is partially off
/// screen to bring it on screen.
///
/// For elements in a scrollable list the framework provides a default
/// implementation for this action and it is not advised to provide a
/// custom one via this setter.   ¿óÄå¿õ  ¿™¿π   ¿ 'Åî¿!yÅ,/// The handler for [SemanticsAction.moveCursorForwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field forward by one character.
///
/// TalkBack users can trigger this by pressing the volume up key while the
/// input focus is in a text field.   ¿!ÙÅ1¿!¯  ¿"¿"+   ¿#)Åö¿$Å0/// The handler for [SemanticsAction.moveCursorBackwardByCharacter].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one character.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿$˝Å4¿%  ¿%!¿%5   ¿&5ÅÉ¿'ÄÅ%/// The handler for [SemanticsAction.moveCursorForwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿'ÏÅ'¿'  ¿(
¿(   ¿)ÅÜ¿*cÅ&/// The handler for [SemanticsAction.moveCursorBackwardByWord].
///
/// This handler is invoked when the user wants to move the cursor in a
/// text field backward by one word.
///
/// TalkBack users can trigger this by pressing the volume down key while the
/// input focus is in a text field.   ¿*“Å*¿*÷  ¿*Ò¿+   ¿, Å•¿-ÉÅ[/// The handler for [SemanticsAction.setSelection].
///
/// This handler is invoked when the user either wants to change the currently
/// selected text in a text field or change the position of the cursor.
///
/// TalkBack users can trigger this handler by selecting "Move cursor to
/// beginning/end" or "Select all" from the local context menu.   ¿-–Ç¿-‘  ¿-„¿-˘   ¿/ÁÅL¿1Å/// The handler for [SemanticsAction.setText].
///
/// This handler is invoked when the user wants to replace the current text in
/// the text field with a new text.
///
/// Voice access users can trigger this handler by speaking "type <text>" to
/// their Android devices.   ¿1TÅ¿1X  ¿1b¿1s   ¿2cÉº¿5„ÉK/// The handler for [SemanticsAction.didGainAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler gains
/// the accessibility focus. The accessibility focus is the
/// green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidLoseAccessibilityFocus], which is invoked when the accessibility
///    focus is removed from the node.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus.   ¿6PÄ≥¿6T  ¿6p¿6   ¿7ÉÆ¿:yÉ=/// The handler for [SemanticsAction.didLoseAccessibilityFocus].
///
/// This handler is invoked when the node annotated with this handler
/// loses the accessibility focus. The accessibility focus is
/// the green (on Android with TalkBack) or black (on iOS with VoiceOver)
/// rectangle shown on screen to indicate what element an accessibility
/// user is currently interacting with.
///
/// The accessibility focus is different from the input focus. The input focus
/// is usually held by the element that currently responds to keyboard inputs.
/// Accessibility focus and input focus can be held by two different nodes!
///
/// See also:
///
///  * [onDidGainAccessibilityFocus], which is invoked when the node gains
///    accessibility focus.
///  * [FocusNode], [FocusScope], [FocusManager], which manage the input focus.   ¿:ÊÄ≥¿:Í  ¿;¿;   ¿<UÇb¿>£Ç!/// Determines the position of this node among its siblings in the traversal
/// sort order.
///
/// This is used to describe the order in which the semantic node should be
/// traversed by the accessibility services on the platform (e.g. VoiceOver
/// on iOS and TalkBack on Android).
///
/// Whether this sort key has an effect on the [SemanticsNode] sort order is
/// subject to how this configuration is used. For example, the [absorb]
/// method may decide to not use this key when it combines multiple
/// [SemanticsConfiguration] objects.   ¿>ÿy¿>‹  ¿>‰¿>˜   ¿?UÅî¿@…Å^/// The index of this node within the parent's list of semantic children.
///
/// This includes all semantic nodes, not just those currently in the
/// child list. For example, if a scrollable has five children but the first
/// two are not visible (and thus not included in the list of children), then
/// the index of the last node will still be 4.   ¿A]¿A  ¿A
¿A   ¿AdÄ⁄¿BÄ¢/// The total number of scrollable children that contribute to semantics.
///
/// If the number of children are unknown or unbounded, this value will be
/// null.   ¿B[Äú¿B_  ¿Bp
¿Bv   ¿B˚ÄÄ¿C_V/// The index of the first visible scrollable child that contributes to
/// semantics.   ¿CìÄç¿Có  ¿C£
¿C©   ¿D$Äí¿Dîb/// The id of the platform view, whose semantics nodes will be added as
/// children to this node.   ¿D—Äñ¿D’  ¿D‰
¿DÍ   ¿EkÅ{¿FƒÅ?/// The maximum number of characters that can be entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [isTextField] is true. Defaults to null,
/// which means no limit is imposed on the text field.   ¿GÄñ¿G  ¿G
¿G   ¿GõÅk¿H‹Å'/// The current number of characters that have been entered into an editable
/// text field.
///
/// For the purpose of this function a character is defined as one Unicode
/// scalar value.
///
/// This should only be set when [isTextField] is true. Must be set when
/// [maxValueLength] is set.   ¿I%Ä¢¿I)  ¿I<
¿IB   ¿IÀÇ¿KãÅ¶/// Whether the semantic information provided by the owning [RenderObject] and
/// all of its descendants should be treated as one logical entity.
///
/// If set to true, the descendants of the owning [RenderObject]'s
/// [SemanticsNode] will merge their semantic information into the
/// [SemanticsNode] representing the owning [RenderObject].
///
/// Setting this to true requires that [isSemanticBoundary] is also true.   ¿LÄ°¿L  ¿L'
¿L-   ¿L®Å∫¿N0ÅN/// The handlers for each supported [CustomSemanticsAction].
///
/// Whenever a custom accessibility action is added to a node, the action
/// [SemanticsAction.customAction] is automatically added. A handler is
/// created which uses the passed argument to lookup the custom action
/// handler from this map and invoke it, if present.   ¿N”Å¿N◊  ¿NÓ.¿O   ¿QÅW¿RUÅ/// A textual description of the owning [RenderObject].
///
/// Setting this attribute will override the [attributedLabel].
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedLabel], which is the [AttributedString] of this property.   ¿RyÄÜ¿R}  ¿RÉ¿Rã   ¿SÇ†¿UÇJ/// A textual description of the owning [RenderObject] in [AttributedString]
/// format.
///
/// On iOS this is used for the `accessibilityAttributedLabel` property
/// defined in the `UIAccessibility` Protocol. On Android it is concatenated
/// together with [attributedValue] and [attributedHint] in the following
/// order: [attributedValue], [attributedLabel], [attributedHint]. The
/// concatenated value is then used as the `Text` description.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [label], which is the raw text of this property.   ¿U‚ÄÅ¿UÊ  ¿Uˆ ¿V   ¿VgÇï¿X€ÇN/// A textual description for the current value of the owning [RenderObject].
///
/// Setting this attribute will override the [attributedValue].
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedValue], which is the [AttributedString] of this property.
///  * [increasedValue] and [attributedIncreasedValue], which describe what
///    [value] will be after performing [SemanticsAction.increase].
///  * [decreasedValue] and [attributedDecreasedValue], which describe what
///    [value] will be after performing [SemanticsAction.decrease].   ¿XˇÄÜ¿Y  ¿Y	¿Y   ¿YâÉ∂¿]ÉX/// A textual description for the current value of the owning [RenderObject]
/// in [AttributedString] format.
///
/// On iOS this is used for the `accessibilityAttributedValue` property
/// defined in the `UIAccessibility` Protocol. On Android it is concatenated
/// together with [attributedLabel] and [attributedHint] in the following
/// order: [attributedValue], [attributedLabel], [attributedHint]. The
/// concatenated value is then used as the `Text` description.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [value], which is the raw text of this property.
///  * [attributedIncreasedValue], which describes what [value] will be after
///    performing [SemanticsAction.increase].
///  * [attributedDecreasedValue], which describes what [value] will be after
///    performing [SemanticsAction.decrease].   ¿]~ÄÅ¿]Ç  ¿]í ¿]§   ¿^Çn¿`>Ç/// The value that [value] will have after performing a
/// [SemanticsAction.increase] action.
///
/// Setting this attribute will override the [attributedIncreasedValue].
///
/// One of the [attributedIncreasedValue] or [increasedValue] must be set if
/// a handler for [SemanticsAction.increase] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedIncreasedValue], which is the [AttributedString] of this property.   ¿`tÄ≥¿`x  ¿`á¿`è   ¿a+Ç3¿c(Åœ/// The value that [value] will have after performing a
/// [SemanticsAction.increase] action in [AttributedString] format.
///
/// One of the [attributedIncreasedValue] or [increasedValue] must be set if
/// a handler for [SemanticsAction.increase] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [increasedValue], which is the raw text of this property.   ¿c¶Ä•¿c™  ¿c√)¿c’   ¿dOÇX¿ftÇ/// The value that [value] will have after performing a
/// [SemanticsAction.decrease] action.
///
/// Setting this attribute will override the [attributedDecreasedValue].
///
/// One of the [attributedDecreasedValue] or [decreasedValue] must be set if
/// a handler for [SemanticsAction.decrease] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
///  * [attributedDecreasedValue], which is the [AttributedString] of this property.   ¿f™Ä≥¿fÆ  ¿fΩ¿f≈   ¿gaÇ3¿i^Åœ/// The value that [value] will have after performing a
/// [SemanticsAction.decrease] action in [AttributedString] format.
///
/// One of the [attributedDecreasedValue] or [decreasedValue] must be set if
/// a handler for [SemanticsAction.decrease] is provided and one of the
/// [value] or [attributedValue] is set.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [decreasedValue], which is the raw text of this property.   ¿i‹Ä•¿i‡  ¿i˘)¿j   ¿jÖÅg¿kÕÅ*/// A brief description of the result of performing an action on this node.
///
/// Setting this attribute will override the [attributedHint].
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [attributedHint], which is the [AttributedString] of this property.   ¿kÔÄÅ¿kÛ  ¿k¯¿l    ¿ltÇ±¿oÇ]/// A brief description of the result of performing an action on this node in
/// [AttributedString] format.
///
/// On iOS this is used for the `accessibilityAttributedHint` property
/// defined in the `UIAccessibility` Protocol. On Android it is concatenated
/// together with [attributedLabel] and [attributedValue] in the following
/// order: [attributedValue], [attributedLabel], [attributedHint]. The
/// concatenated value is then used as the `Text` description.
///
/// The reading direction is given by [textDirection].
///
/// See also:
///
///  * [hint], which is the raw text of this property.   ¿oc}¿og  ¿ov¿oà   ¿o‰Äì¿pcm/// A textual description of the widget's tooltip.
///
/// The reading direction is given by [textDirection].   ¿píW¿pñ  ¿pû¿p¶   ¿pÌÄñ¿qcU/// Provides hint values which override the default hints on supported
/// platforms.   ¿q∞Äù¿q¥  ¿q¬¿q€   ¿rQÄí¿rÀj/// The elevation in z-direction at which the owning [RenderObject] is
/// located relative to its parent.   ¿sÄµ¿s  ¿s¿s   ¿s∫ÅC¿tÂÅ/// The extend that the owning [RenderObject] occupies in z-direction starting
/// at [elevation].
///
/// It's extremely rare to set this value directly. Instead, it is calculated
/// implicitly when other [SemanticsConfiguration]s are merged into this one
/// via [absorb].   ¿uÄµ¿u  ¿u)¿u1   ¿u‘Å¿vÆÄƒ/// Whether the semantics node is the root of a subtree for which values
/// should be announced.
///
/// See also:
///
///  * [SemanticsFlag.scopesRoute], for a full description of route scoping.   ¿v‰Q¿vË  ¿vÙ
¿v˙   ¿w9Ä„¿wÎÄû/// Whether the semantics node contains the label of a route.
///
/// See also:
///
///  * [SemanticsFlag.namesRoute], for a full description of route naming.   ¿xO¿x#  ¿x.
¿x4   ¿xrj¿x±3/// Whether the semantics node represents an image.   ¿xﬂI¿x„  ¿xÎ
¿xÒ   ¿y,Éa¿|ZÉ/// Whether the semantics node is a live region.
///
/// A live region indicates that updates to semantics node are important.
/// Platforms may use this information to make polite announcements to the
/// user to inform them of updates to this node.
///
/// An example of a live region is a [SnackBar] widget. On Android and iOS,
/// live region causes a polite announcement to be generated automatically,
/// even if the widget does not have accessibility focus. This announcement
/// may not be spoken if the OS accessibility services are already
/// announcing something else, such as reading the label of a focused widget
/// or providing a system announcement.
///
/// See also:
///
///  * [SemanticsFlag.isLiveRegion], the semantics flag that this setting controls.   ¿|êQ¿|î  ¿|ü
¿|•   ¿|ÂÄß¿}lo/// The reading direction for the text in [label], [value], [hint],
/// [increasedValue], and [decreasedValue].   ¿}∞w¿}¥  ¿}¬¿}“   ¿~+Åµ¿ØÅn/// Whether the owning [RenderObject] is selected (true) or not (false).
///
/// This is different from having accessibility focus. The element that is
/// accessibility focused may or may not be selected; e.g. a [ListTile] can have
/// accessibility focus but have its [ListTile.selected] property set to false,
/// in which case it will not be flagged as selected.   ¿„O¿Á  ¿Ú
¿¯   ¿Ä6É<¿ÉÇ≥/// Whether the owning [RenderObject] is currently enabled.
///
/// A disabled object does not respond to user interactions. Only objects that
/// usually respond to user interactions, but which currently do not (like a
/// disabled button) should be marked as disabled.
///
/// The setter should not be called for objects (like static text) that never
/// respond to user interactions.
///
/// The getter will return null if the owning [RenderObject] doesn't support
/// the concept of being enabled/disabled.
///
/// This property does not control whether semantics are enabled. If you wish to
/// disable semantics for a particular widget, you should use an [ExcludeSemantics]
/// widget.   ¿ÉuÄÇ¿Éy  ¿ÉÉ¿Éä   ¿É˚Ç&¿Ö¡Å©/// If this node has Boolean state that can be controlled by the user, whether
/// that state is checked or unchecked, corresponding to true and false,
/// respectively.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have checked/unchecked state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// checked/unchecked state.   ¿Ü$ÄÇ¿Ü(  ¿Ü2¿Ü9   ¿Ü™Åˇ¿àIÅÑ/// If this node has Boolean state that can be controlled by the user, whether
/// that state is on or off, corresponding to true and false, respectively.
///
/// Do not call the setter for this field if the owning [RenderObject] doesn't
/// have on/off state that can be controlled by the user.
///
/// The getter returns null if the owning [RenderObject] does not have
/// on/off state.   ¿à¨ÄÇ¿à∞  ¿à∫¿à¡   ¿â2Å{¿ä\Å/// Whether the owning RenderObject corresponds to UI that allows the user to
/// pick one of several mutually exclusive options.
///
/// For example, a [Radio] button is in a mutually exclusive group because
/// only one radio button in that group can be marked as [isChecked].   ¿ä∞o¿ä¥  ¿äœ
¿ä’   ¿ã#~¿ãn?/// Whether the owning [RenderObject] can hold the input focus.   ¿ã§Q¿ã®  ¿ã¥
¿ã∫   ¿ã˘ÄÅ¿åKF/// Whether the owning [RenderObject] currently holds the input focus.   ¿å}M¿åÅ  ¿åã
¿åë   ¿åŒÄÅ¿ç"H/// Whether the owning [RenderObject] is a button (true) or not (false).   ¿çRK¿çV  ¿ç_
¿çe   ¿ç°{¿çÛF/// Whether the owning [RenderObject] is a link (true) or not (false).   ¿éG¿é#  ¿é*
¿é0   ¿éjÄÅ¿éæH/// Whether the owning [RenderObject] is a header (true) or not (false).   ¿éÓK¿éÚ  ¿é˚
¿è   ¿è=ÄÅ¿èëH/// Whether the owning [RenderObject] is a slider (true) or not (false).   ¿è¡K¿è≈  ¿èŒ
¿è‘   ¿êÄï¿ênE/// Whether the owning [RenderObject] is a keyboard key (true) or not   ¿ê®U¿ê¨  ¿ê∫
¿ê¿   ¿ëÉn¿îBÉ/// Whether the owning [RenderObject] is considered hidden.
///
/// Hidden elements are currently not visible on screen. They may be covered
/// by other elements or positioned outside of the visible area of a viewport.
///
/// Hidden elements cannot gain accessibility focus though regular touch. The
/// only way they can be focused is by moving the focus to them via linear
/// navigation.
///
/// Platforms are free to completely ignore hidden elements and new platforms
/// are encouraged to do so.
///
/// Instead of marking an element as hidden it should usually be excluded from
/// the semantics tree altogether. Hidden elements are only included in the
/// semantics tree to work around platform limitations and they are mainly
/// used to implement accessibility scrolling on iOS.   ¿îrK¿îv  ¿î
¿îÖ   ¿î¡u¿ï6/// Whether the owning [RenderObject] is a text field.   ¿ï9Q¿ï=  ¿ïI
¿ïO   ¿ïéÄ®¿ñg/// Whether the owning [RenderObject] is read only.
///
/// Only applicable when [isTextField] is true.   ¿ñ9O¿ñ=  ¿ñH
¿ñN   ¿ñåÅT¿óØÅ/// Whether [this.value] should be obscured.
///
/// This option is usually set in combination with [isTextField] to indicate
/// that the text field contains a password (or other sensitive information).
/// Doing so instructs screen readers to not read out [this.value].   ¿ó„O¿óÁ  ¿óÚ
¿ó¯   ¿ò6Äı¿ò¯Ä∞/// Whether the text field is multiline.
///
/// This option is usually set in combination with [isTextField] to indicate
/// that the text field is configured to be multiline.   ¿ô.Q¿ô2  ¿ô>
¿ôD   ¿ôÉÅÈ¿õ'Åå/// Whether the platform can scroll the semantics node when the user attempts
/// to move focus to an offscreen child.
///
/// For example, a [ListView] widget has implicit scrolling so that users can
/// easily move to the next visible set of children. A [TabBar] widget does
/// not have implicit scrolling, so that users can navigate into the tab
/// body when reaching the end of the tab bar.   ¿õoc¿õs  ¿õà
¿õé   ¿õ÷Äµ¿úk}/// The currently selected text (or the position of the cursor) within
/// [this.value] if this node represents a text field.   ¿úØÄÇ¿ú≥  ¿ú¡¿ú—   ¿ù5Åﬁ¿ûÒÅõ/// Indicates the current scrolling position in logical pixels if the node is
/// scrollable.
///
/// The properties [scrollExtentMin] and [scrollExtentMax] indicate the valid
/// in-range values for this property. The value for [scrollPosition] may
/// (temporarily) be outside that range, e.g. during an overscroll.
///
/// See also:
///
///  * [ScrollPosition.pixels], from where this value is usually taken.   ¿ü1}¿ü5  ¿üD¿üM   ¿ü≤ÅA¿†œÅ /// Indicates the maximum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.maxScrollExtent], from where this value is usually taken.   ¿°¿°  ¿°&¿°/   ¿°ïÅA¿¢≤Å /// Indicates the minimum in-range value for [scrollPosition] if the node is
/// scrollable.
///
/// This value may be infinity if the scroll is unbound.
///
/// See also:
///
///  * [ScrollPosition.minScrollExtent], from where this value is usually taken.   ¿¢ı¿¢˘  ¿£	¿£   ¿£ÉÅ¿§zÄÃ/// The set of tags that this configuration wants to add to all child
/// [SemanticsNode]s.
///
/// See also:
///
///  * [addTagForChildren] to add a tag and for more information about their
///    usage.   
¿˘7ÅX¿˘»ÄÉ/// Adds an `action` to the semantics tree.
///
/// The provided `handler` is called to respond to the user triggered
/// `action`. ¿˘”¿˘‰  ¿˘Î¿˙   ¿˙ìÅä¿˚YÄ∂/// Adds an `action` to the semantics tree, whose `handler` does not expect
/// any arguments.
///
/// The provided `handler` is called to respond to the user triggered
/// `action`. ¿˚p¿˚Å  ¿˚à¿˚ñ   ¿;ùÄ¥¿<Z/// Returns the action handler registered for [action] or null if none was
/// registered. ¿<%¿<6   ¿OÎÅ0¿O  ¿P	¿P   ¿§…É¿ß]Çp/// Specifies a [SemanticsTag] that this configuration wants to apply to all
/// child [SemanticsNode]s.
///
/// The tag is added to all [SemanticsNode] that pass through the
/// [RenderObject] owning this configuration while looking to be attached to a
/// parent [SemanticsNode].
///
/// Tags are used to communicate to a parent [SemanticsNode] that a child
/// [SemanticsNode] was passed through a particular [RenderObject]. The parent
/// can use this information to determine the shape of the semantics tree.
///
/// See also:
///
///  * [RenderViewport.excludeFromScrolling] for an example of
///    how tags are used. ¿ßo¿ß}   ¿®ÄÆ¿®  ¿®¿®#  ¿®(
¿®.   ¿®∏@¿®Ω  ¿®∆¿®’   ¿©"Ñ¿™ÄÌ/// Whether this configuration is compatible with the provided `other`
/// configuration.
///
/// Two configurations are said to be compatible if they can be added to the
/// same [SemanticsNode] without losing any semantics information. ¿™0¿™I   ¿≠1ä-¿ØeÇ/// Absorb the semantic information from `child` into this configuration.
///
/// This adds the semantic information of both configurations and saves the
/// result in this configuration.
///
/// The [RenderObject] owning the `child` configuration must be a descendant
/// of the [RenderObject] that owns this configuration.
///
/// Only configurations that have [explicitChildNodes] set to false can
/// absorb other configurations and it is recommended to only absorb compatible
/// configurations as determined by [isCompatibleWith]. ¿Øl¿ØÑ   ¿∑bÖˆ¿∑¨0/// Returns an exact copy of this configuration.    ¿√Uä^¿∆Ç†/// Base class for all sort keys for [SemanticsProperties.sortKey] accessibility
/// traversal order sorting.
///
/// Sort keys are sorted by [name], then by the comparison that the subclass
/// implements. If [SemanticsProperties.sortKey] is specified, sort keys within
/// the same semantic group must all be of the same type.
///
/// Keys with no [name] are compared to other keys with no [name], and will
/// be traversed before those with a [name].
///
/// If no sort key is applied to a semantics node, then it will be ordered using
/// a platform dependent default algorithm.
///
/// See also:
///
///  * [OrdinalSortKey] for a sort key that sorts using an ordinal. ¿∆VÄΩ ¿∆ı¿«Äî/// Abstract const constructor. This constructor enables subclasses to provide
/// const constructors so that they can be used in const expressions.¿«	¿«   ¿«Å?¿»RÅ/// An optional name that will group this sort key with other sort keys of the
/// same [name].
///
/// Sort keys must have the same `runtimeType` when compared.
///
/// Keys with no [name] are compared to other keys with no [name], and will
/// be traversed before those with a [name].  ¿»[Ç∂¿»k  ¿»u¿»á  ¿»[¿»\¿ÀÅ’¿ÃæÅÖ/// The implementation of [compareTo].
///
/// The argument is guaranteed to be of the same type as this object and have
/// the same [name].
///
/// The method should return a negative number if this object comes earlier in
/// the sort order than the argument; and a positive number if it comes later
/// in the sort order. Returning zero causes the system to use default sort
/// order. ¿Ã» ¿Ã‰  ¿Ã≠¿ÃÆ¿ÃÓÄ√¿Ãˇ  ¿Õ&¿Õ0  ¿ÃÓ¿ÃÔ ¿Õµá‚¿—ÉV/// A [SemanticsSortKey] that sorts simply based on the `double` value it is
/// given.
///
/// The [OrdinalSortKey] compares itself with other [OrdinalSortKey]s
/// to sort based on the order it is given.
///
/// [OrdinalSortKey]s are sorted by the optional [name], then by their [order].
/// If [SemanticsProperties.sortKey] is a [OrdinalSortKey], then all the other
/// specified sort keys in the same semantics group must also be
/// [OrdinalSortKey]s.
///
/// Keys with no [name] are compared to other keys with no [name], and will
/// be traversed before those with a [name].
///
/// The ordinal value [order] is typically a whole number, though it can be
/// fractional, e.g. in order to fit between two other consecutive whole
/// numbers. The value must be finite (it cannot be [double.nan],
/// [double.infinity], or [double.negativeInfinity]). ¿—>Åh ¿—€¿—ÈÄê/// Creates a const semantics sort key that uses a [double] as its key value.
///
/// The [order] must be a finite number, and must not be null.¿—Ô
¿—ı  ¿“
¿“  ¿“¿“¿“(¿“!¿“¿“$¿“2¿“8¿“L¿“?¿“9¿“B¿“H¿“I¿“V¿“\¿“|¿“c¿“]¿“e¿“k¿“l¿“Ü¿“å¿“§¿“ì¿“ç¿“ï¿“õ¿“ú¿“™Åa¿‘ÅB/// Determines the placement of this key in a sequence of keys that defines
/// the order in which this node is traversed by the platform's accessibility
/// services.
///
/// Lower values will be traversed first. Keys with the same [name] will be
/// grouped together and sorted by name first, and then sorted by [order].  ¿‘Äº¿‘   ¿‘*¿‘:  ¿‘¿‘¿‘–Ä≈¿‘·  ¿‘ı&¿’  ¿‘–¿‘—  ¿Ω\ÇJ¿Ω¡_/// Used by [debugDumpSemanticsTree] to specify the order in which child nodes
/// are printed.  ¿Ω›Å¿æﬂÄ˜/// Print nodes in inverse hit test order.
///
/// In inverse hit test order, the last child of a [SemanticsNode] will be
/// asked first if it wants to respond to a user's interaction, followed by
/// the second last, etc. until a taker is found. ¿æÚÄ±¿øïÄö/// Print nodes in semantic traversal order.
///
/// This is the order in which a user would navigate the UI using the "next"
/// and "previous" gestures.      ¿ ÊfÄ©¿ Ê»\/// In tests use this function to reset the counter used to generate
/// [SemanticsNode.id].   ¿√¸ÅC¿ƒD@/// Converts `point` to the `node`'s parent's coordinate system. ¿ƒ^¿ƒm  ¿ƒr¿ƒz   ¿≈Aá¿«UÅˇ/// Sorts `children` using the default sorting algorithm, and returns them as a
/// new list.
///
/// The algorithm first breaks up children into groups such that no two nodes
/// from different groups overlap vertically. These groups are sorted vertically
/// according to their [_SemanticsSortGroup.startOffset].
///
/// Within each group, the nodes are sorted using
/// [_SemanticsSortGroup.sortedWithinVerticalGroup].
///
/// For an illustration of the algorithm see http://bit.ly/flutter-default-traversal. ¿«m¿«Ç  ¿«ã¿«ö   ¿ø®É´¿øπ  ¿ø’.¿ø  ¿¿/¿¿"  ¿¿:)¿¿S  ¿¿g*¿¿Ä    Ñ$Ä„ÑŒÄ°/// Signature for a function that is called for each [SemanticsNode].
///
/// Return false to stop visiting nodes.
///
/// Used by [SemanticsNode.visitChildren].  ÑÛÖ   Ö	ÅÖÌÄ€/// Signature for [SemanticsAction]s that move the cursor.
///
/// If `extendSelection` is set to true the cursor movement should extend the
/// current selection or (if nothing is currently selected) start a selection.  ÜÜ   Ü'Ä–Ü∫Ää/// Signature for the [SemanticsAction.setSelection] handlers to change the
/// text selection (or re-position the cursor) to `selection`.  ÜﬁÜÌ   Ü˘Ä§áqo/// Signature for the [SemanticsAction.setText] handlers to replace the
/// current text with the input `text`.  áêáò   áüÄ∞àr/// Signature for a handler of a [SemanticsAction].
///
/// Returned by [SemanticsConfiguration.getActionHandler].  àAàJ       íÅ <ÄÜÄ§Ä•Ä¡ÄŸÅÅDÅEÅoÅªÅ„ÇÇÇCÇbÇcÇ’Ç÷ÉuÉ∞ÉÔÉÑ#Ñ$ÑjÑnÑóÑõÑ∆ÖÖ	ÖDÖHÖñÖÂÜ&Ü'ÜsÜ≤Ü¯Ü˘áAáiáûáüá”á◊ààPàQàràvàµââNâRâ†âÌâ˚âˇäMäõäÈä¯ãã-ã3ãÉã”å#å4åUåVåìåôåﬂåÙåıççMçOçPçÄçÑç∆ééVéûéÌè<èJèNèùè—è’ê$ê7ê;êÉêÆê≤ê¿êƒëë ë>ëkëqë©ëÂííí0íEíFíñí§í™í·ìSìoìâìßìªìºì˙îîîNîdîeîüî¿î¡îÕïïïï5ïaïuï{ï•ï≈ï„ññ
ñññ-ñäñéñèñÿñÒóóeóªóºóÎò&òFò`òzòóò∏òæò—ò’ò÷ôô9ôRôVôXôYôëôúôµôÿôﬁö)ö9ö?öâöòö¨öøöõ(õ;õyõãõ¡õÛú;úHúRúgúsútú¨ú√úƒúÓúÙù6ù`ùaù§ù™ù˚ûDû|ûñû™û∞û–û„ûÈûÍüüCüôü¿üË†*†X†â†∂†¡°°B°J°P°ì°ó°ò°‰°¢¢?¢d¢Ü¢Ã¢–¢—¢›£££"£8£ô£ù£ü£†£Í§(§w§Ω§√• ••3•F•Z•z•í•£•∫•€•˘•˙¶G¶Ç¶à¶≠¶…¶ ¶÷ßIßJßVßùß∂ßÀß—ßÚ®®M®à®≥®π®ﬁ®ˆ®¸©i©m©o©p©®©¨©¯™I™ô™´™Ø™Ì™¯´"´I´O´ù´£´Ó¨ ¨¨4¨W¨z¨¶¨“¨Ù≠≠0≠H≠e≠Ç≠£≠¬≠ÊÆÆ+ÆNÆpÆíÆ∏Æ«Æ€Æ˛ØØ<ØdØåØΩØÓ∞∞ò±9±⁄≤ñ≥R≥¥¥¥M¥`¥a¥¢¥∑¥∏¥˜¥˝µ6µ<µvµ§µ•µÊ∂∂∂F∂L∂Ö∂Ø∂∞∂Ô∂ı∑.∑4∑n∑ú∑ù∑ﬁ∑ˇ∏∏>∏D∏}∏ß∏®∏‰πππLπRπïπ’π÷∫∫X∫^∫ó∫ù∫ﬂªªªOªxª~ª∑ªΩº º@ºAº}º√º…ΩΩΩJΩ}Ω~ΩÃΩ“æææJævæwæƒæËæÓø'ø-øeøéøèøƒø ¿ @¿ @¿ @¿ @Z¿ @ê¿ @∂¿ @∑¿ A¿ A4¿ AZ¿ A[¿ Aß¿ A≠¿ A˙¿ B¿ B%¿ B&¿ Bl¿ BÜ¿ Bá¿ B◊¿ BÈ¿ BÔ¿ C?¿ Cã¿ C—¿ C◊¿ CÁ¿ CÌ¿ D7¿ DW¿ DX¿ Dß¿ Dπ¿ Dø¿ D˙¿ E ¿ E¿ E¿ Ei¿ Eä¿ Eã¿ E⁄¿ EÏ¿ EÚ¿ F-¿ F3¿ FC¿ FI¿ Fú¿ FΩ¿ Fæ¿ G¿ G%¿ G+¿ Gy¿ G√¿ Gÿ¿ Gﬁ¿ GÓ¿ GÙ¿ H4¿ Hn¿ Hã¿ Hå¿ Hÿ¿ HÍ¿ H¿ I=¿ IQ¿ IW¿ Iß¿ IÈ¿ J¿ J¿ JV¿ Jh¿ Jn¿ Jª¿ Jœ¿ J’¿ K&¿ KQ¿ Kr¿ Ks¿ K≤¿ K≈¿ K∆¿ L¿ L#¿ L$¿ L~¿ LÑ¿ LÀ¿ M¿ M+¿ MG¿ MH¿ Mê¿ Mñ¿ M¶¿ M¨¿ M¸¿ N¿ N8¿ N9¿ N¿ NÖ¿ Nï¿ Nõ¿ NÁ¿ O¿ O¿ OM¿ Ol¿ Or¿ O•¿ O´¿ Oª¿ O¡¿ P	¿ P6¿ P7¿ Pf¿ Pß¿ P®¿ P€¿ Q&¿ Q'¿ Q3¿ Qy¿ Qz¿ QÜ¿ QÀ¿ Qˆ¿ RD¿ R®¿ R˜¿ SF¿ Sw¿ S¡¿ SÏ¿ T¿ T¿ Td¿ Tº¿ TÕ¿ U$¿ Uë¿ Uí¿ U¡¿ V¿ V,¿ VJ¿ VQ¿ V§¿ VÏ¿ W4¿ Wé¿ WË¿ X.¿ Xx¿ X›¿ Y¿ Yt¿ Yz¿ Y—¿ Z(¿ Zá¿ Z‡¿ [1¿ [ç¿ [Á¿ \C¿ \G¿ \H¿ \T¿ \w¿ \ô¿ \π¿ \›¿ ]¿ ]E¿ ]ã¿ ]—¿ ^¿ ^'¿ ^W¿ ^u¿ ^ú¿ ^“¿ ^˛¿ _.¿ _`¿ _î¿ _»¿ _˙¿ `,¿ `f¿ `é¿ `∂¿ `ﬁ¿ a6¿ a:¿ a;¿ aG¿ aj¿ au¿ aÇ¿ aó¿ a¨¿ a ¿ aË¿ a¸¿ b	¿ b¿ b&¿ b0¿ bC¿ bY¿ bj¿ b~¿ bì¿ b®¿ bº¿ b–¿ b·¿ b˚¿ c¿ c¿ c.¿ câ¿ cê¿ cï¿ cñ¿ c€¿ d¿ d¿ d¿ dF¿ do¿ dÖ¿ dç¿ dª¿ dﬁ¿ dˆ¿ d˛¿ e¿ e¿ e!¿ e3¿ e7¿ e9¿ e:¿ eâ¿ e™¿ e∫¿ e‘¿ eÓ¿ f¿ f¿ f¿ f?¿ f@¿ fL¿ f™¿ f¨¿ f≠¿ fÙ¿ g¿ g¿ g4¿ g?¿ gy¿ g£¿ gƒ¿ gÿ¿ gÚ¿ h¿ h8¿ h9¿ h_¿ he¿ hó¿ hù¿ h‰¿ i¿ i¿ i?¿ iZ¿ iu¿ iv¿ i£¿ i©¿ i€¿ i·¿ j+¿ je¿ jk¿ jù¿ jπ¿ j⁄¿ j€¿ k¿ kT¿ kU¿ ka¿ k†¿ k°¿ k≠¿ k–¿ k¸¿ l¿ l¿ lA¿ li¿ lû¿ l¢¿ l£¿ lØ¿ lÙ¿ m¿ mo¿ mÀ¿ mœ¿ m—¿ m“¿ n!¿ n6¿ n:¿ nä¿ nû¿ n©¿ n‡¿ o¿ o#¿ o5¿ oG¿ oZ¿ ol¿ o}¿ oå¿ où¿ o±¿ o¬¿ oÿ¿ oÎ¿ oˇ¿ p¿ p4¿ pE¿ pX¿ pl¿ pÇ¿ pó¿ pß¿ pº¿ p’¿ pÚ¿ q¿ q¿ q,¿ qF¿ q_¿ qÇ¿ qõ¿ qæ¿ qÕ¿ qﬂ¿ q¯¿ r¿ r(¿ r:¿ rS¿ rc¿ ry¿ rê¿ r®¿ rΩ¿ r‘¿ rÈ¿ r˛¿ s¿ s¿ s1¿ sZ¿ sÑ¿ s®¿ sÕ¿ sÊ¿ s˙¿ t ¿ tF¿ tZ¿ t{¿ tÔ¿ uc¿ u˚¿ vì¿ w¿ w¿ wT¿ w{¿ wÅ¿ wœ¿ x¿ xL¿ xc¿ xd¿ x©¿ xÓ¿ x˛¿ y¿ y5¿ yL¿ yM¿ yó¿ yÿ¿ yË¿ yÓ¿ z¿ z6¿ z7¿ zÜ¿ zŒ¿ z‘¿ {$¿ {I¿ {a¿ {b¿ {¶¿ {¨¿ {˘¿ |¿ |!¿ |"¿ |d¿ |j¿ |∫¿ }¿ }¿ }&¿ }'¿ }k¿ }q¿ }¿¿ ~¿ ~3¿ ~I¿ ~J¿ ~í¿ ~ò¿ ~‚¿ ~Ù¿ ¿ ¿ R¿ X¿ ü¿ ∏¿ Œ¿ œ¿ Ä¿ Ä4¿ Ä5¿ Är¿ Äx¿ Ä®¿ ÄÆ¿ ÄÒ¿ Å	¿ Å
¿ ÅK¿ ÅQ¿ Åò¿ Åû¿ Å¿ Ç:¿ Çã¿ Ç ¿ Ç„¿ Ç‰¿ É%¿ É+¿ É|¿ Éº¿ É¬¿ Ñ¿ Ñ^¿ ÑØ¿ ÑÓ¿ Ö¿ Ö¿ ÖS¿ ÖY¿ Ö©¿ ÖÍ¿ Ü¿ Ü¿ ÜM¿ ÜS¿ Ü¢¿ ÜÛ¿ Ü˘¿ áI¿ áñ¿ á®¿ áÆ¿ á˛¿ à¿ à#¿ àt¿ à¬¿ â¿ âG¿ â]¿ â^¿ âï¿ âõ¿ âË¿ ä8¿ ä}¿ äï¿ äñ¿ ä‰¿ äÛ¿ ä˘¿ ãC¿ ã}¿ ãÉ¿ ã∏¿ ã—¿ ã“¿ å¿ åM¿ åS¿ åÑ¿ å“¿ ç¿ ç¿ ç¿ ç$¿ çp¿ çå¿ çß¿ ç®¿ çı¿ ç˚¿ é¿ é¿ é`¿ éz¿ é{¿ é¥¿ é∫¿ é ¿ é–¿ è¿ è+¿ è,¿ èt¿ èz¿ è∆¿ ê¿ êF¿ êL¿ êö¿ êË¿ ë6¿ ë{¿ ë ¿ ëÙ¿ ë˙¿ í
¿ í¿ ía¿ í∏¿ í“¿ í”¿ ì¿ ì1¿ ì7¿ ìÑ¿ ìò¿ ìû¿ ìË¿ î!¿ î>¿ î?¿ îé¿ î†¿ î¶¿ îÛ¿ ï¿ ï¿ ïV¿ ïu¿ ïñ¿ ïó¿ ïÀ¿ ï—¿ ñ ¿ ñY¿ ñ_¿ ñÆ¿ ñ¬¿ ñ»¿ ñÿ¿ ñﬁ¿ ó/¿ óS¿ ó¢¿ óπ¿ ó∫¿ ò¿ ò¿ ò]¿ òß¿ ò≠¿ ò¸¿ ô¿ ô¿ ô&¿ ô,¿ ô|¿ ô´¿ ôÈ¿ ö¿ ö¿ öV¿ ö\¿ ö´¿ ö‰¿ öÍ¿ õ9¿ õM¿ õS¿ õc¿ õi¿ õ∫¿ õﬁ¿ ú-¿ úD¿ úE¿ úñ¿ ú´¿ ú±¿ ú˚¿ ùE¿ ùK¿ ùö¿ ùÆ¿ ù¥¿ ùƒ¿ ù ¿ û¿ ûI¿ ûá¿ û≤¿ û≥¿ û˘¿ üD¿ üJ¿ üï¿ ü‡¿ ü¯¿ ü˛¿ †7¿ †s¿ †y¿ †â¿ †è¿ †ﬁ¿ °¿ °[¿ °n¿ °é¿ °è¿ °‡¿ ¢-¿ ¢3¿ ¢Ñ¿ ¢Œ¿ ¢ˆ¿ ¢¸¿ £5¿ £q¿ £w¿ £á¿ £ç¿ £›¿ §¿ §\¿ §ê¿ §ë¿ §◊¿ •"¿ •(¿ •s¿ •æ¿ •÷¿ •‹¿ ¶¿ ¶Q¿ ¶W¿ ¶g¿ ¶m¿ ¶º¿ ¶Î¿ ß9¿ ßL¿ ßl¿ ßm¿ ßæ¿ ®¿ ®¿ ®b¿ ®¨¿ ®‘¿ ®⁄¿ ©¿ ©[¿ ©a¿ ©q¿ ©w¿ ©«¿ ©ˇ¿ ™F¿ ™z¿ ™{¿ ™À¿ ™‡¿ ™Ê¿ ´4¿ ´m¿ ´s¿ ´¿¿ ´‘¿ ´⁄¿ ´Í¿ ´¿ ¨@¿ ¨d¿ ¨≤¿ ¨»¿ ¨…¿ ≠¿ ≠M¿ ≠S¿ ≠ú¿ ≠Ê¿ ≠Ï¿ Æ9¿ ÆM¿ ÆS¿ Æc¿ Æi¿ Æ∏¿ ÆÁ¿ Ø$¿ ØN¿ ØO¿ Øç¿ Øì¿ Ø‰¿ ∞¿ ∞Q¿ ∞W¿ ∞ô¿ ∞„¿ ∞¸¿ ∞˝¿ ±F¿ ±W¿ ±]¿ ±©¿ ±¯¿ ≤/¿ ≤5¿ ≤Ñ¿ ≤≥¿ ≤¥¿ ≤˚¿ ≥¿ ≥%¿ ≥U¿ ≥{¿ ≥|¿ ≥À¿ ≥›¿ ≥„¿ ¥1¿ ¥¿ ¥¶¿ ¥…¿ ¥ ¿ µ¿ µ¿ µc¿ µ≤¿ µ”¿ µŸ¿ ∂#¿ ∂t¿ ∂Ω¿ ∂√¿ ∂”¿ ∂Ÿ¿ ∑)¿ ∑G¿ ∑m¿ ∑n¿ ∑õ¿ ∑°¿ ∑Ò¿ ∏A¿ ∏O¿ ∏U¿ ∏°¿ ∏Ë¿ π¿ π¿ π9¿ π?¿ πè¿ π ¿ π–¿ ∫¿ ∫k¿ ∫}¿ ∫†¿ ∫°¿ ∫’¿ ∫€¿ ª*¿ ªx¿ ªó¿ ªù¿ ªÌ¿ º9¿ ºÑ¿ º”¿ ºÊ¿ Ω
¿ Ω¿ Ω@¿ ΩF¿ Ωï¿ Ω„¿ æ¿ æ¿ æY¿ æ•¿ æÚ¿ øB¿ øU¿ øz¿ ø{¿ ø≠¿ ø≥¿ ¿¿ ¿P¿ ¿m¿ ¿s¿ ¿¡¿ ¡¿ ¡X¿ ¡ß¿ ¡∫¿ ¡‹¿ ¡›¿ ¬¿ ¬¿ ¬f¿ ¬¥¿ ¬—¿ ¬◊¿ √'¿ √s¿ √¿¿ ƒ¿ ƒ#¿ ƒG¿ ƒH¿ ƒz¿ ƒÄ¿ ƒÕ¿ ≈¿ ≈¿ ≈]¿ ≈™¿ ≈∞¿ ≈¸¿ ∆L¿ ∆d¿ ∆Ü¿ ∆á¿ ∆π¿ ∆ø¿ «¿ «P¿ «V¿ «ú¿ «È¿ «Ô¿ »=¿ »ç¿ »ß¿ »…¿ » ¿ »¯¿ »˛¿ …F¿ …L¿ …õ¿ …ƒ¿ …‚¿ …„¿  ¿  ¿  _¿  p¿  v¿  ≈¿  Ó¿ À¿ À¿ À;¿ ÀA¿ Àà¿ Àé¿ À›¿ Ã¿ Ã%¿ Ã&¿ Ãl¿ Ãr¿ Ãº¿ ÃÁ¿ ÃÌ¿ Õ;¿ Õa¿ Õú¿ Õù¿ Õ‰¿ ÕÍ¿ Œ4¿ Œ`¿ Œf¿ Œ∂¿ Œ‹¿ œ¿ œ¿ œZ¿ œ`¿ œ™¿ œ—¿ œ◊¿ –'¿ –M¿ –É¿ –Ñ¿ –∆¿ –Ã¿ —¿ —=¿ —C¿ —ì¿ —π¿ —¿ —Ò¿ “'¿ “-¿ “~¿ “»¿ “Œ¿ ”¿ ”[¿ ”à¿ ”â¿ ”∫¿ ”¿¿ ‘¿ ‘7¿ ‘=¿ ‘å¿ ‘©¿ ‘Ã¿ ‘Õ¿ ’¿ ’¿ ’d¿ ’¢¿ ’Í¿ ÷4¿ ÷^¿ ÷d¿ ÷µ¿ ◊¿ ◊T¿ ◊Z¿ ◊j¿ ◊p¿ ◊¿¿ ◊È¿ ÿ;¿ ÿn¿ ÿo¿ ÿ≤¿ ÿ∏¿ Ÿ ¿ Ÿ@¿ Ÿå¿ Ÿ÷¿ ⁄ ¿ ⁄¿ ⁄W¿ ⁄®¿ ⁄ˆ¿ ⁄¸¿ €¿ €¿ €_¿ €}¿ €œ¿ ‹¿ ‹¿ ‹4¿ ‹:¿ ‹y¿ ‹¿ ‹Ã¿ ›¿ ›9¿ ›Z¿ ›[¿ ›™¿ ›∞¿ ›˙¿ ﬁI¿ ﬁó¿ ﬁË¿ ﬁÓ¿ ﬁ˛¿ ﬂ¿ ﬂL¿ ﬂñ¿ ﬂó¿ ﬂ£¿ ﬂË¿ ‡¿ ‡j¿ ‡√¿ ·¿ ·q¿ ·π¿ ‚¿ ‚p¿ ‚Ë¿ „9¿ „±¿ „˜¿ ‰[¿ ‰ì¿ ‰¯¿ Â[¿ Â–¿ Â‘¿ Â’¿ Â·¿ Êc¿ Êe¿ Êf¿ Ê´¿ Ê√¿ ÊÈ¿ Á¿ Á¿ Á¿ Á@¿ ÁD¿ Áî¿ Á€¿ Ë(¿ ËE¿ Ëç¿ Ë¨¿ Ë≤¿ È¿ È¿ È&¿ È4¿ ÈT¿ Ès¿ Èò¿ Èô¿ È‰¿ ÈÍ¿ Í!¿ Í8¿ ÍF¿ Íf¿ Íâ¿ Íô¿ Íø¿ Í“¿ Í÷¿ Í◊¿ Íÿ¿ Î¿ Î#¿ ÎÜ¿ ÎË¿ Ï¿ Ï`¿ Ïa¿ ÏÉ¿ Ï£¿ Ï˜¿ Ì¿ Ì¿ Ì¿ ÌZ¿ Ì`¿ Ì∞¿ Ì—¿ Ì„¿ Ì‰¿ Ó¿ Ó¿ Ó^¿ ÓÆ¿ Ó‹¿ Ó‚¿ Ô*¿ Ôv¿ Ô∞¿ Ô≈¿ Ô–¿ Ô—¿ Ôˆ¿ Ô˜¿ ¿ ¿ `¿ f¿ ≠¿ ˛¿ Ò¿ Ò5¿ ÒL¿ Òn¿ Ò¶¿ Ò¯¿ Ú¿ Ú¿ Ú¿ Ú¿ ÚV¿ Úp¿ Úä¿ Ú£¿ Úæ¿ Û¿ Û+¿ Û@¿ ÛT¿ ÛZ¿ Û^¿ Û_¿ Ûß¿ Û≠¿ Û˛¿ Ù¿ Ù¿ Ùh¿ Ù∏¿ ı¿ ıV¿ ıÖ¿ ıã¿ ı“¿ ˆ¿ ˆ¿ ˆP¿ ˆü¿ ˆ∞¿ ˆ—¿ ˆ“¿ ˜¿ ˜¿ ˜n¿ ˜Ç¿ ˜à¿ ˜ÿ¿ ¯'¿ ¯v¿ ¯∂¿ ¯º¿ ˘¿ ˘¿ ˘Q¿ ˘n¿ ˘o¿ ˘¥¿ ˘∫¿ ˙¿ ˙N¿ ˙ñ¿ ˙‡¿ ˚0¿ ˚=¿ ˚C¿ ˚ê¿ ˚ÿ¿ ˚ﬁ¿ ˚Ó¿ ˚Ù¿ ¸8¿ ¸W¿ ¸X¿ ¸§¿ ¸™¿ ¸Ú¿ ˝A¿ ˝ë¿ ˝√¿ ˝Ÿ¿ ˝⁄¿ ˝ˇ¿ ˛¿ ˛T¿ ˛¢¿ ˛Ë¿ ˇ¿ ˇ
¿ ˇW¿ ˇ¶¿ ˇ«¿ ¿ ¿ ¿ ¿ d¿ ö¿ æ¿ Â¿ ¿(¿6¿<¿]¿o¿s¿t¿ø¿≈¿¿F¿L¿\¿b¿Ä¿´¿¿¿a¿±¿
¿¿¿¿¿e¿á¿à¿◊¿&¿9¿l¿m¿®¿Ó¿˛¿-¿w¿∫¿È¿<¿e¿s¿Ñ¿Ω¿¿5¿h¿x¿◊¿	[¿	Â¿	Û¿	ˇ¿
	¿
2¿
l¿
„¿_¿è¿Æ¿º¿∆¿Œ¿6¿7¿{¿|¿°¿“¿˜¿ˇ¿K¿^¿h¿x¿π¿¿¿=¿P¿Z¿[¿ì¿∞¿Ê¿¿
¿¿E¿±¿Ã¿“¿Ó¿¿A¿\¿Ç¿«¿ˇ¿¿)¿E¿O¿W¿]¿í¿¥¿ÿ¿$¿m¿≥¿˚¿3¿]¿g¿à¿£¿Ω¿≈¿À¿ˆ¿¿P¿o¿£¿ÿ¿Ù¿¿¿¿¿:¿O¿c¿i¿m¿n¿©¿„¿˘¿˙¿&¿f¿g¿ô¿ü¿¿<¿Q¿Ü¿£¿Ÿ¿¯¿
¿¿¿"¿&¿'¿U¿[¿™¿Û¿!¿Z¿w¿≠¿Ò¿	¿¿¿!¿2¿6¿7¿S¿T¿`¿ü¿†¿¨¿Î¿Ï¿¯¿¿9¿=¿>¿J¿p¿â¿¥¿¿I¿g¿m¿ä¿±¿√¿Ÿ¿Ì¿Û¿¿F¿c¿k¿q¿u¿v¿Ç¿î¿ø¿Ú¿¿5¿I¿d¿Å¿∑¿¿4¿X¿r¿|¿Ñ¿ä¿Œ¿ ¿ 1¿ C¿ G¿ H¿ ^¿ _¿ v¿ å¿ û¿ ¨¿ ≤¿ ≈¿ Ÿ¿!¿!2¿!8¿!<¿!=¿!è¿!≈¿!˘¿"#¿"M¿"É¿"À¿#¿#9¿#\¿#é¿#µ¿#Ë¿$¿$T¿$ã¿$æ¿$Ô¿%"¿%W¿%î¿%Î¿%Ô¿%¿&¿&¿&^¿& ¿&À¿' ¿'¿'5¿';¿'ã¿'¨¿'«¿'»¿'ˆ¿(@¿(A¿(f¿(g¿(¶¿(Ê¿(Á¿)¿)¿)P¿)V¿)ê¿)ø¿)¿¿*¿*¿*F¿*L¿*Ö¿*¡¿+¿+¿+F¿+L¿+Ö¿+ã¿+≈¿+Ù¿+ı¿,6¿,W¿,]¿,ñ¿,ú¿,’¿-¿-V¿-W¿-®¿-¬¿-»¿.¿.4¿.:¿.s¿.y¿.º¿.˝¿.˛¿/M¿/õ¿/°¿/Ô¿0¿0¿0L¿0R¿0î¿0‚¿19¿1:¿1ã¿1•¿1´¿1˘¿2¿2¿2V¿2\¿2ü¿2‡¿2·¿30¿3~¿3Ñ¿3“¿3¿3ˆ¿4/¿45¿4w¿4≈¿5¿5¿5k¿5q¿5™¿5∞¿5È¿6¿6¿6d¿6à¿6é¿6«¿6Õ¿7¿7?¿7Ç¿7É¿7∏¿7æ¿7˜¿8¿8D¿8E¿8ñ¿8π¿8ø¿9¿9W¿9Ä¿9Ü¿9ñ¿9ú¿9Â¿:%¿:r¿:ò¿:«¿:»¿;¿;¿;f¿;≥¿<¿<K¿<õ¿<‰¿<Í¿= ¿=L¿=t¿=z¿= ¿>¿>5¿>;¿>ã¿?¿?¿?b¿?Ø¿?¸¿@ ¿@.¿@H¿@e¿@¿@£¿@Œ¿@Ô¿A¿A2¿AT¿As¿Aó¿A¶¿A≥¿Aæ¿A∆¿A–¿A‚¿AË¿A¯¿A˛¿BH¿Bò¿Bæ¿BÌ¿BÓ¿C7¿CH¿Cá¿C±¿C≤¿D¿D¿DP¿Dè¿Dê¿Dﬂ¿DÒ¿D˜¿EE¿Eì¿E∫¿EÁ¿F¿F¿FW¿FÉ¿Fπ¿F⁄¿F€¿G*¿GH¿Gq¿Gá¿Gà¿G‘¿G⁄¿H'¿H3¿He¿H¿HÄ¿H∆¿HÓ¿I¿I¿IT¿If¿Il¿Iº¿J¿JN¿JT¿Jd¿Jj¿J¥¿JÂ¿K ¿K¿KP¿Kb¿Kh¿K£¿K©¿Kπ¿Kø¿L¿LE¿La¿Lb¿L±¿L√¿L…¿M¿M
¿M¿M ¿Mr¿M•¿M¡¿M¬¿N¿N)¿N/¿N}¿N«¿N‹¿N‚¿NÚ¿N¯¿O8¿Or¿O†¿O∏¿Oπ¿P¿P¿P¿Pj¿P~¿PÑ¿P‘¿Q¿QD¿Q\¿Q]¿Q¨¿Qæ¿Qƒ¿R¿R%¿R+¿Rz¿R¢¿Rÿ¿RÙ¿Rı¿SG¿SH¿Sò¿Sô¿SË¿T/¿T]¿Tc¿T∞¿Tﬁ¿T‰¿U5¿UÉ¿Uó¿Uƒ¿U˙¿V¿V¿V\¿Vp¿Vv¿Vw¿VÉ¿Vˆ¿W?¿WF¿WG¿Wv¿W•¿WÊ¿X'¿XT¿Xs¿Xû¿X¡¿X‰¿Y ¿Y+¿YJ¿Yõ¿Z¿Z2¿Z^¿ZÖ¿Z≥¿Z„¿[¿[b¿[ì¿[∫¿[‰¿\¿\@¿\v¿\ƒ¿\≈¿\—¿]0¿]Ø¿]∂¿]¬¿^!¿^†¿^ß¿^´¿^¨¿^≠¿^Â¿^Î¿_<¿_à¿_ª¿_‡¿_¯¿`¿`S¿`å¿`◊¿a"¿aY¿ax¿a´¿b¿b5¿bd¿bâ¿b∑¿bÁ¿c¿cB¿cm¿c†¿c…¿cÏ¿d#¿dr¿d√¿d…¿dÍ¿e¿em¿eò¿eø¿e ¿f¿f%¿fY¿fÆ¿fﬂ¿g¿g¿gj¿gr¿gx¿gy¿g§¿g”¿g¸¿h¿hB¿hq¿h†¿h’¿i ¿i1¿id¿ió¿i»¿i˘¿j2¿jy¿j¨¿j∂¿k¿kT¿k^¿k∑¿k¸¿l¿l#¿lF¿lP¿lq¿lú¿l∆¿l–¿m#¿mx¿mÇ¿m¨¿m„¿n<¿np¿nõ¿n™¿o¿o¿oJ¿o£¿o›¿p¿p¿pt¿pÄ¿pä¿pΩ¿pÓ¿q¿qR¿qÖ¿qê¿q¬¿qÚ¿r¿rU¿rà¿rì¿rî¿r‡¿r·¿rˆ¿s ¿s¿s¿s!¿s5¿sM¿su¿sù¿s◊¿t¿t7¿tO¿ts¿tÖ¿t°¿tΩ¿tŸ¿tÒ¿u¿u?¿u_¿uÖ¿u≠¿u’¿u˚¿v!¿vO¿vö¿v°¿v•¿v¶¿v÷¿v˝¿w¿w¿w<¿wá¿w“¿w”¿x5¿xI¿x|¿x™¿x÷¿y¿yD¿yu¿yÇ¿y≤¿z ¿z8¿zh¿z§¿z¨¿z˝¿{¿{C¿{x¿{ø¿{«¿{Õ¿{ˆ¿|4¿|á¿|œ¿}¿}g¿}o¿}u¿}ç¿}õ¿}¥¿}—¿}Ë¿~¿~J¿~t¿~¨¿~Ë¿2¿n¿∏¿‡¿Ä¿Ä3¿Ä\¿Ä∑¿Å¿ÅG¿Åx¿Å±¿Å„¿Ç¿ÇG¿ÇÇ¿ÇΩ¿Ç˛¿É¿É@¿Éz¿É∞¿Ñ¿Ñ¿Ñ#¿Ñ'¿Ñ(¿Ñx¿Ñ¨¿ÑÁ¿Ö¿ÖN¿ÖÖ¿Öß¿Ö≠¿ÖÆ¿Öﬂ¿Ü	¿Üe¿Ür¿Ü¥¿Üﬁ¿Ü‰¿ÜÂ¿á4¿áÉ¿á–¿à¿àe¿à¨¿àœ¿â&¿âj¿â°¿â¬¿â˚¿ä¿äQ¿äç¿äœ¿ã¿ãe¿ãÖ¿ã®¿ãƒ¿ãŒ¿ã˙¿å¿å¿å¿åF¿å[¿åu¿åë¿åõ¿å°¿å¢¿åÓ¿ç
¿ç)¿çA¿çG¿ço¿çp¿çå¿ç÷¿çÁ¿çÎ¿çÏ¿é1¿é7¿éÄ¿é—¿é˙¿è¿è¿è#¿èc¿èg¿èh¿èt¿è√¿èƒ¿è–¿ê¿ê@¿ê[¿êm¿ê¡¿ë-¿ëM¿ëS¿ëﬁ¿íI¿í”¿ì3¿ìM¿ì´¿ì∏¿î¿î.¿îI¿îè¿î‹¿ï_¿ïó¿ïü¿ñ	¿ñ¿ñÑ¿ó¿óQ¿óï¿ó¶¿ó˜¿ò^¿ô ¿ôm¿ô«¿ö/¿öx¿ö¡¿õ¿õw¿õæ¿ú	¿úo¿ú“¿ú˛¿ùm¿ùs¿ù ¿û!¿ûÄ¿ûŸ¿ü*¿üÜ¿ü‡¿†<¿†ã¿†⁄¿†ﬁ¿†ﬂ¿°'¿°-¿°}¿°≠¿°π¿°—¿°¿¢¿¢D¿¢ï¿¢ú¿¢º¿£U¿£Y¿£Z¿£f¿£å¿£û¿£›¿§.¿§5¿§^¿§p¿§É¿§ó¿§µ¿§º¿§¿¿§¡¿§Õ¿•N¿•~¿•‚¿•Û¿•˜¿•¯¿¶G¿¶ú¿¶º¿¶Ÿ¿¶ˇ¿ß¿ß¿ß ¿ßS¿ßn¿ß°¿ßÕ¿ß”¿ß◊¿ßŸ¿ß⁄¿®$¿®b¿®f¿®∂¿©¿©\¿©¨¿©˜¿™(¿™5¿™V¿™p¿™à¿™Æ¿™Õ¿™Ì¿´
¿´¿´T¿´z¿´Ä¿´†¿´¶¿´˙¿¨L¿¨ú¿¨∞¿¨Ã¿¨Õ¿≠¿≠9¿≠P¿≠Q¿≠x¿≠î¿≠ï¿≠°¿≠√¿≠Ó¿≠Ú¿≠Ù¿≠ı¿ÆD¿Æz¿Æ~¿Æ«¿Ø¿Ø#¿ØB¿Øc¿Øá¿Øà¿Ø“¿ØÙ¿Ø˙¿∞F¿∞k¿∞á¿∞à¿∞≠¿∞Æ¿∞‡¿±¿±¿±$¿±Q¿±Ü¿±ä¿±ã¿±€¿±·¿≤/¿≤_¿≤ì¿≤¬¿≤Ò¿≥?¿≥u¿≥è¿≥¨¿≥Ù¿¥	¿¥¿¥-¿¥K¿¥ó¿¥¨¿¥∂¿¥º¿¥Œ¿¥œ¿µ¿µ9¿µL¿µu¿µï¿µ©¿µ–¿µÙ¿∂¿∂'¿∂K¿∂Z¿∂n¿∂v¿∂é¿∂¥¿∂ ¿∂“¿∂ÿ¿∂ı¿∂ˆ¿∑$¿∑a¿∑g¿∑h¿∑Ñ¿∑À¿∑‹¿∑‡¿∑·¿∏-¿∏3¿∏Ç¿∏£¿∏©¿∏˜¿πD¿πî¿πª¿π¡¿∫¿∫\¿∫™¿∫˘¿ª%¿ªP¿ªm¿ªì¿ªß¿ª≠¿ªÒ¿º¿ºM¿ºl¿ºª¿ºÔ¿Ω9¿ΩÖ¿Ω™¿Ωæ¿Ω»¿Ω…¿æ&¿æ^¿æí¿æ ¿ø¿øZ¿ø•¿ø¿¿"¿¿J¿¿T¿¿\¿¿b¿¿c¿¿å¿¿µ¿¡¿¡f¿¡≤¿¡ı¿¬¿¬2¿¬:¿¬l¿¬t¿¬u¿¬è¿¬¥¿¬ƒ¿¬Ã¿¬Ê¿√	¿√%¿√-¿√F¿√L¿√M¿√ó¿√ı¿√˘¿√˚¿√¸¿ƒ=¿ƒÇ¿ƒ¢¿ƒ¥¿ƒ∏¿ƒÛ¿≈¿≈>¿≈@¿≈A¿≈ë¿≈ü¿≈£¿≈Ò¿∆B¿∆|¿∆Ä¿∆≤¿∆Á¿∆Î¿«A¿«™¿«◊¿»¿»(¿»t¿»®¿»¿¿»€¿…!¿…4¿…<¿…T¿…p¿…∫¿…Õ¿…’¿…Ÿ¿…È¿…Í¿ 6¿ T¿ e¿ å¿ ™¿ º¿ ·¿À¿À)¿À2¿ÀT¿Àa¿Às¿Ày¿Àè¿À±¿À≈¿ÀÀ¿Àœ¿ÀË¿ÀÈ¿Ã¿ÃO¿Ã^¿Ã`¿Ãa¿Ã®¿Ã›¿Ã·¿Õ+¿Õ/¿Õ~¿Õ∆¿Œ¿Œ"¿Œ:¿ŒL¿Œh¿Œm¿Œâ¿Œ©¿Œ™¿Œ„¿Œˇ¿œ ¿œ?¿œE¿œÑ¿œñ¿œπ¿œ∫¿–¿–¿–*¿–+¿–7¿–c¿–ó¿–ø¿–≈¿–Ù¿–¯¿–˙¿–˚¿—E¿—`¿—d¿—∞¿—˜¿“¿“4¿“p¿“±¿“¿“Ò¿”$¿”*¿”^¿”ì¿”î¿”†¿”≥¿”Ã¿”‡¿”¸¿‘¿‘¿‘¿‘e¿‘Ñ¿‘£¿‘±¿‘∑¿‘Ó¿’.¿’S¿’Ÿ¿’Ù¿÷¿÷g¿÷ì¿÷Õ¿÷Í¿◊O¿◊w¿◊∆¿ÿ$¿ÿm¿ÿø¿Ÿ¿Ÿ¿Ÿ%¿Ÿ-¿Ÿ3¿ŸÉ¿ŸÎ¿⁄ ¿⁄}¿⁄ø¿€¿€J¿€ã¿€Ø¿€¿‹3¿‹y¿‹Ω¿‹“¿‹¸¿›:¿›B¿›H¿›a¿›ú¿›Û¿ﬁs¿ﬁy¿ﬁÃ¿ﬁ„¿ﬁÁ¿ﬁË¿ﬂD¿ﬂl¿ﬂ…¿ﬂˇ¿‡-¿‡F¿‡x¿‡Ç¿‡®¿‡≤¿‡∏¿‡¯¿·¿·¿·6¿·:¿·;¿·â¿·è¿·ﬁ¿‚ ¿‚¿‚S¿‚o¿‚∏¿‚‘¿„-¿„H¿„]¿„k¿„q¿„r¿„ß¿„˛¿‰"¿‰(¿‰,¿‰-¿‰¨¿‰Œ¿Â ¿Â9¿ÂN¿ÂV¿Âñ¿Âú¿Â≈¿Âÿ¿Âﬁ¿Ê¿Ê+¿Ê`¿Êè¿Ê©¿Ê¡¿ÊÀ¿Ê‡¿ÊÍ¿Á¿Á¿Á3¿Áw¿ÁÁ¿Ë¿Ë ¿Ë*¿Ë2¿Ë8¿ËZ¿Ë^¿Ë_¿Ë±¿Ë∑¿È¿È(¿È.¿È{¿Èó¿ÈÎ¿Í¿Í:¿ÍR¿Í`¿Íf¿Í—¿ÍÏ¿Î¿Î¿Î¿Î¿Î¿ÎG¿ÎI¿ÎJ¿Îå¿Î†¿Î§¿ÎÓ¿Ï¿Ï!¿Ï"¿ÏB¿ÏC¿Ïë¿Ï¨¿Ï≤¿Ì¿ÌP¿Ìú¿Ìµ¿Ìª¿Ó	¿ÓS¿ÓÄ¿ÓÜ¿Ó”¿Ô	¿Ô-¿ÔT¿Ôã¿Ô¨¿Ô∞¿Ô±¿¿Q¿Ñ¿ä¿◊¿Ò%¿ÒY¿Òß¿Òı¿Ú&¿Ú,¿Úy¿Ú»¿ÚÎ¿ÚÏ¿Û;¿Ûâ¿Ûô¿Ûü¿ÛÓ¿Ù:¿Ùâ¿Ù¥¿Ù∫¿ı
¿ıX¿ıü¿ı•¿ıı¿ˆ0¿ˆl¿ˆm¿ˆá¿ˆ¡¿ˆ·¿ˆ‚¿˜¿˜¿˜a¿˜í¿˜ƒ¿˜Ê¿˜Á¿¯3¿¯i¿¯o¿¯¿¯Ö¿¯¨¿˘¿˘¿˘4¿˘5¿˘c¿˘i¿˘±¿˘¡¿˙¿˙*¿˙J¿˙n¿˙å¿˙ê¿˙ë¿˙ﬂ¿˙Ù¿˙˙¿˚B¿˚R¿˚†¿˚Ω¿˚Â¿¸¿¸¿¸¿¸¿¸¿¸L¿¸R¿¸¢¿¸Ú¿˝ ¿˝¿˝R¿˝ô¿˝ü¿˝Í¿˛8¿˛â¿˛◊¿ˇ'¿ˇx¿ˇ√¿ ¿ Y¿ ™¿ Í¿¿'¿J¿É¿ó¿õ¿ú¿œ¿’¿%¿`¿f¿≤¿¿¿D¿b¿ã¿ ¿‰¿Ë¿È¿¿#¿r¿¿¿ﬂ¿Â¿5¿Å¿Ã¿¿.¿a¿Ä¿™¿Í¿¿	¿
¿;¿A¿Ä¿Ü¿”¿"¿@¿m¿â¿∞¿Ì¿	¿		¿	
¿	?¿	E¿	î¿	‚¿
¿
¿
X¿
§¿
Ò¿A¿T¿â¿©¿‘¿¿1¿5¿6¿h¿n¿Ω¿¿(¿.¿|¿»¿¿b¿u¿§¿¡¿È¿'¿@¿D¿E¿y¿¿Œ¿¿9¿?¿è¿€¿(¿x¿ã¿æ¿›¿¿G¿b¿f¿g¿ô¿ü¿Ï¿0¿6¿¿ø¿◊¿›¿)¿y¿ë¿¿¿›¿¿C¿\¿`¿a¿ì¿ô¿Ê¿*¿0¿y¿π¿—¿◊¿%¿u¿è¿æ¿€¿¿A¿Z¿^¿_¿ç¿ì¿€¿·¿0¿Y¿Ä¿ô¿Ω¿˜¿¿¿¿>¿D¿ç¿û¿§¿Û¿¿A¿Y¿|¿µ¿…¿Õ¿Œ¿˝¿¿J¿P¿ü¿»¿Ò¿¿0¿k¿Å¿Ö¿Ü¿º¿¬¿¿`¿Ñ¿ä¿”¿¿=¿t¿ï¿¡¿ ¿  ¿ $¿ %¿ k¿ q¿ ª¿ Ê¿ Ï¿!:¿!`¿!º¿!Ú¿"3¿"N¿"ú¿"Œ¿"Ì¿"ı¿#"¿#&¿#'¿#n¿#t¿#æ¿#Í¿#¿$@¿$f¿$ƒ¿$˚¿%=¿%X¿%ß¿%Ÿ¿%¯¿& ¿&.¿&2¿&3¿&t¿&z¿&ƒ¿&Î¿&Ò¿'A¿'g¿'π¿'Í¿(&¿(A¿(ä¿(º¿(€¿(„¿)¿)¿)¿)W¿)]¿)ß¿)Œ¿)‘¿*$¿*J¿*û¿*–¿+¿+(¿+r¿+§¿+√¿+À¿+˘¿+˝¿+˛¿,4¿,:¿,ã¿,’¿,€¿-&¿-h¿-¶¿-Œ¿.¿.¿.Z¿.Ö¿.‰¿/A¿/]¿/Ö¿/±¿/ª¿/√¿/‡¿/‰¿/Â¿0¿0¿0m¿0ì¿0ô¿0Ë¿1¿14¿1R¿1{¿1ñ¿1œ¿1˝¿2(¿2<¿2D¿2\¿2`¿2a¿2§¿2™¿2¯¿36¿3~¿3»¿3Ú¿3¯¿4I¿4ö¿4Ë¿4Ó¿4˛¿5¿5T¿5}¿5œ¿6 ¿6N¿6á¿6÷¿7 ¿7¿7¿7H¿7N¿7ñ¿7÷¿8"¿8l¿8ñ¿8ú¿8Ì¿9>¿9å¿9í¿9¢¿9®¿9ı¿:¿:e¿:∂¿:‰¿;¿;l¿;ñ¿;ö¿;õ¿;Ë¿;˙¿<R¿<S¿<¢¿<¥¿<∫¿=¿=V¿=}¿=É¿=“¿>¿>c¿>ã¿>∏¿>÷¿>ˇ¿?¿?0¿?N¿?R¿?S¿?ü¿?•¿?Ì¿@<¿@å¿@æ¿@Í¿A¿A#¿A?¿A]¿Aa¿Ab¿AÆ¿A¥¿B¿B¿B?¿BY¿B~¿B£¿B±¿B∑¿B÷¿BÙ¿B¯¿B˘¿CC¿CT¿C|¿Cë¿C±¿C—¿Cﬂ¿CÂ¿Cˇ¿D¿D!¿D"¿Dl¿Dâ¿D∑¿Dœ¿DÚ¿E¿E#¿E)¿EF¿Ed¿Eh¿Ei¿Eµ¿E«¿EÕ¿F¿F.¿F4¿FÄ¿Fπ¿FÁ¿Fˇ¿G"¿GE¿GS¿GY¿Gv¿Gî¿Gò¿Gô¿GË¿G˙¿H ¿HM¿Ha¿Hg¿H≤¿H—¿I¿I#¿IJ¿Iq¿I¿IÖ¿I¶¿Iƒ¿I»¿I…¿J¿J`¿Jf¿J´¿J¿K.¿K4¿KÄ¿K–¿L¿L5¿LU¿LÉ¿L°¿L•¿L¶¿LÂ¿LÎ¿M7¿MÅ¿M ¿N¿Nc¿N—¿O ¿O>¿Ox¿Où¿O‰¿OË¿OÈ¿P¿Pr¿På¿Pö¿P†¿P‰¿Q ¿Q¿Q¿Q¿Q¿QW¿Q]¿Qü¿Q•¿Qﬁ¿Q‰¿QÙ¿Q˙¿RH¿Rw¿Rì¿RÆ¿Rﬁ¿R¸¿S ¿S¿SP¿S^¿Sd¿SÆ¿S˝¿TI¿Tí¿T”¿TŸ¿U¿U¿U(¿U.¿Uh¿U§¿U‡¿V¿VB¿V`¿Vd¿Ve¿Vµ¿Vª¿V˝¿W¿W<¿WB¿WR¿WX¿W¶¿WÙ¿X:¿Xà¿XŒ¿X˝¿Y¿Y4¿Yd¿YÇ¿YÜ¿Yá¿Y÷¿Y˙¿Z ¿ZJ¿Zô¿ZÂ¿[.¿[o¿[u¿[Æ¿[¥¿[ƒ¿[ ¿\¿\T¿\Ñ¿\‘¿]¿]@¿]|¿]∂¿]ﬁ¿]¸¿^ ¿^¿^;¿^d¿^j¿^µ¿^ª¿_
¿_T¿_¿_Ö¿_æ¿_ƒ¿_‘¿_⁄¿`1¿`r¿`†¿`ƒ¿a¿a$¿a(¿a)¿ac¿a©¿aØ¿a˛¿bH¿bs¿by¿b≤¿b∏¿b»¿bŒ¿c¿c_¿c§¿c¿d*¿dH¿dL¿dM¿dá¿d∞¿d∂¿e¿e¿eV¿e†¿eÀ¿e—¿f
¿f¿fg¿f®¿f÷¿f˙¿g<¿gZ¿g^¿g_¿gô¿gﬂ¿gÂ¿h4¿h~¿h©¿hØ¿hË¿hÓ¿h˛¿i¿iG¿iï¿i⁄¿j&¿j`¿j~¿jÇ¿jÉ¿j—¿j◊¿k¿k¿kW¿k]¿km¿ks¿k¿¿kÌ¿l¿l!¿lO¿lm¿lq¿lr¿l¬¿l„¿lÈ¿m2¿mÅ¿mŒ¿n¿nX¿n^¿nó¿nù¿n≠¿n≥¿nÏ¿o&¿oa¿oô¿oø¿o›¿o·¿o‚¿p¿p¿pV¿px¿pê¿p∞¿p»¿pÊ¿pÍ¿pÎ¿q4¿qE¿qÑ¿qÆ¿q„¿q¸¿r
¿r¿r,¿rJ¿rN¿rO¿rò¿ræ¿r‰¿rˇ¿s¿sJ¿si¿sw¿s}¿sï¿s≥¿s∑¿s∏¿t	¿t¿t%¿tu¿tƒ¿tÿ¿t˛¿u¿u9¿ud¿uÉ¿uë¿uó¿uØ¿uÕ¿u—¿u“¿v¿v8¿v>¿vN¿vT¿v£¿v‚¿w¿w2¿w6¿w7¿ww¿w}¿wç¿wì¿w‡¿x¿x<¿xk¿xo¿xp¿x¶¿x›¿x˘¿y%¿y)¿y*¿y]¿yc¿yØ¿y¸¿z/¿z5¿zÉ¿z—¿{¿{d¿{≥¿{›¿{„¿{Û¿{˘¿|O¿|é¿|≠¿|ﬁ¿|‚¿|„¿})¿}W¿}ç¿}Æ¿}‚¿~¿~$¿~(¿~)¿~t¿~z¿~«¿¿l¿§¿·¿Ä ¿Ä/¿Ä3¿Ä4¿Är¿Äx¿Ä…¿Å¿ÅM¿ÅS¿Å£¿Å«¿ÅÕ¿Ç¿ÇI¿ÇO¿Ç¢¿Ç¯¿É¿És¿Éí¿É≈¿ÉÙ¿É¯¿É˘¿ÑJ¿Ñï¿Ñ©¿ÑØ¿Ö ¿ÖG¿ÖM¿Öñ¿Öµ¿Ü"¿ÜA¿Üt¿Ü£¿Üß¿Ü®¿Ü˘¿áG¿áM¿áû¿á⁄¿á‡¿à)¿à=¿à™¿à…¿à¸¿â+¿â/¿â0¿âÄ¿â∂¿âº¿ä	¿äQ¿äÆ¿ä›¿ã¿ã ¿ã!¿ãc¿ã¢¿ã¬¿ãÚ¿ãˆ¿ã˜¿å@¿å{¿åô¿å«¿åÀ¿åÃ¿ç¿çP¿çm¿çö¿çû¿çü¿çË¿é¿é8¿éc¿ég¿éh¿é≥¿éÏ¿è	¿è6¿è:¿è;¿èÜ¿èø¿è‹¿ê	¿ê¿ê¿êV¿êc¿ê¶¿ê»¿ê˙¿ê˛¿êˇ¿ë=¿ëC¿ëí¿ë„¿ëÈ¿í9¿íÜ¿íò¿íû¿íÓ¿ì¿ì¿ìd¿ì≤¿ìˇ¿î7¿îp¿îç¿î∫¿îæ¿îø¿î¯¿ï7¿ïW¿ïá¿ïã¿ïå¿ï¬¿ï»¿ï˙¿ñ7¿ñV¿ñÖ¿ñâ¿ñä¿ñπ¿ñø¿ó¿ó^¿ó§¿ó·¿ò ¿ò/¿ò3¿ò4¿ò_¿òe¿ò¥¿òÌ¿ô,¿ôL¿ô|¿ôÄ¿ôÅ¿ô—¿ô¸¿ö¿öR¿ö†¿öÎ¿õ¿õm¿õñ¿õœ¿õ”¿õ‘¿ú¿úV¿úå¿ú≠¿úŸ¿úÙ¿ù¿ù.¿ù2¿ù3¿ùÉ¿ùï¿ùõ¿ùÎ¿û7¿û}¿ûÉ¿ûì¿ûô¿û„¿ü¿ü/¿üU¿üp¿üç¿ü´¿üØ¿ü∞¿üˇ¿†¿†¿†R¿†X¿†h¿†n¿†¡¿†Ù¿°¿°7¿°R¿°p¿°é¿°í¿°ì¿°‚¿°Ù¿°˙¿¢5¿¢;¿¢K¿¢Q¿¢§¿¢◊¿¢Û¿£¿£5¿£S¿£q¿£u¿£v¿£Ä¿£Å¿£…¿£·¿£Á¿£˜¿£˝¿§L¿§\¿§ü¿§∆¿§«¿•¿•4¿•:¿•~¿•œ¿•Ì¿•Û¿¶?¿¶ê¿¶›¿¶„¿¶Û¿¶˘¿ß:¿ßV¿ßÉ¿ßÆ¿ßŒ¿ß“¿ß”¿ßÒ¿ßÚ¿®¿®6¿®G¿®c¿®p¿®ç¿®ì¿®±¿®µ¿®∂¿®˘¿®˙¿©¿© ¿©i¿©~¿©Ñ¿©”¿™¿™Q¿™ö¿™≠¿™≥¿™È¿™˝¿´¿´+¿´?¿´E¿´â¿´ù¿´£¿´Á¿´˚¿¨¿¨M¿¨a¿¨g¿¨ˇ¿≠¿≠¿≠*¿≠.¿≠/¿≠{¿≠Å¿≠œ¿≠Û¿≠˘¿ÆH¿ÆÇ¿Æà¿Æ“¿Ø$¿Ø^¿Øå¿Ø≠¿ØÆ¿Ø—¿Øﬂ¿ØÂ¿ØÊ¿∞¿∞N¿∞z¿∞ñ¿∞√¿∞Ú¿±#¿±T¿±Å¿±≠¿±÷¿≤	¿≤8¿≤g¿≤û¿≤ü¿≤ ¿≤Î¿≥¿≥I¿≥q¿≥¶¿≥’¿≥‹¿¥!¿¥R¿¥X¿¥Ø¿¥Ú¿¥¯¿µO¿µí¿µò¿µ«¿µÙ¿∂¿∂P¿∂¿∂Ü¿∂†¿∂¡¿∂«¿∂»¿∑¿∑¿∑[¿∑_¿∑`¿∑ì¿∑µ¿∑Ÿ¿∏¿∏;¿∏ù¿∏À¿π¿π?¿π[¿πá¿π≈¿πÒ¿∫/¿∫Y¿∫Å¿∫ù¿∫Ω¿∫›¿∫ı¿ª!¿ªI¿ªs¿ªü¿ªÀ¿ªÛ¿º¿º>¿ºl¿ºñ¿º¿¿ºÚ¿Ω¿ΩU¿ΩY¿Ω[¿Ω\¿Ω´¿Ωº¿Ω€¿æ¿æ¿æ[¿æ©¿æ›¿æÔ¿æ¿ø¿ø%¿øt¿øì¿ø•¿øß¿ø®¿ø”¿¿¿¿8¿¿e¿¿ì¿¿ò¿¿∆¿¿Á¿¿Î¿¡:¿¡\¿¡z¿¡Ò¿¬ ¿¬¿¬ï¿¬§¿¬™¿¬Æ¿¬€¿¬˝¿√¿√¿√R¿√T¿√U¿√¶¿√√¿√«¿ƒ¿ƒd¿ƒû¿ƒ¢¿ƒÓ¿≈¿≈¿≈p¿≈ú¿≈†¿≈Æ¿≈≤¿≈ˆ¿∆T¿∆•¿∆Ì¿«¿«¿«f¿«y¿«¿«ø¿«≈¿»¿»B¿»X¿»Y¿»e¿»è¿»≈¿…D¿…E¿…î¿…µ¿…”¿…Ú¿…¯¿…˘¿ K¿ Z¿ à¿ ô¿ Œ¿ ﬁ¿ ‰¿ Â¿À¿À¿À¿À<¿ÀB¿Àí¿À©¿ÀØ¿Ã ¿ÃP¿Ãû¿Ã´¿Ã∏¿ÃÎ¿ÃÏ¿Ã¯¿Õ=¿Õh¿ÕÆ¿Õ≤¿Õ¥¿Õµ¿Œ¿Œ¿Œ¿ŒW¿ŒÉ¿Œá¿Œ◊¿œ&¿œg¿œ~¿œÇ¿œŒ¿œ˚¿œˇ¿–K¿–î¿–÷¿—¿—<¿—å¿—í¿—”¿—Î¿—˝¿“¿“+¿“O¿“¿“ß¿“®¿“ˆ¿”F¿”V¿”\¿”™¿”˜¿‘¿‘¿‘¿‘B¿‘ä¿‘ö¿‘†¿‘…¿‘Õ¿‘Œ¿‘⁄¿’¿’J¿’í¿’ñ¿’ò    SemanticsTagCustomSemanticsActionAttributedStringAttributedStringPropertySemanticsData_SemanticsDiagnosticableNodeSemanticsHintOverridesSemanticsPropertiesdebugResetSemanticsIdCounterSemanticsNode_BoxEdge_SemanticsSortGroup_pointInParentCoordinates_childrenInDefaultOrder_TraversalSortNodeSemanticsOwnerSemanticsConfigurationDebugSemanticsDumpOrder_concatAttributedStringSemanticsSortKeyOrdinalSortKey Å