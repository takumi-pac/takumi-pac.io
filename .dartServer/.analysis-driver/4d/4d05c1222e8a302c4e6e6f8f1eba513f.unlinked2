Ä‹popdoNotPopbubble	navigator
_navigatorsettings	_settingsrestorationScopeId_restorationScopeId_updateSettings_updateRestorationIdoverlayEntriesinstalldidPushdidAdd
didReplacewillPopwillHandlePopInternallycurrentResultpopped_popCompleterdidPopdidComplete
didPopNextdidChangeNextdidChangePreviouschangedInternalStatechangedExternalStatedispose	isCurrentisFirsthasActiveRouteBelowisActivecopyWithname	argumentstoStringkeyrestorationId	canUpdatecreateRoute	didRemovedidStartUserGesturedidStopUserGesture
controllerofupdateShouldNotifyrouteisWaitingForEnteringDecisionisWaitingForExitingDecisionmarkForPush
markForAdd
markForPopmarkForCompletemarkForRemove_transitionresolvepages	onPopPagetransitionDelegateinitialRouteonGenerateRouteonUnknownRoute	observersdefaultRouteNameonGenerateInitialRoutesreportsRouteUpdateToEnginerequestFocus	pushNamedrestorablePushNamedpushReplacementNamedrestorablePushReplacementNamedpopAndPushNamedrestorablePopAndPushNamedpushNamedAndRemoveUntil!restorablePushNamedAndRemoveUntilpushrestorablePushpushReplacementrestorablePushReplacementpushAndRemoveUntilrestorablePushAndRemoveUntilreplacerestorableReplacereplaceRouteBelowrestorableReplaceRouteBelowcanPopmaybePoppopUntilremoveRouteremoveRouteBelowmaybeOfdefaultGenerateInitialRoutescreateStatestagingaddaddingpushReplacepushingidlecompleteremovepoppingremovingdisposedrestorationInformationnotAnnouncedcurrentStatelastAnnouncedPreviousRoutelastAnnouncedPoppedNextRoutelastAnnouncedNextRoutehasPagecanUpdateFrom	handleAdd
handlePushhandleDidPopNext	handlePophandleCompletehandleRemovalpendingResult_reportRemovalToObserverfinalizewillBePresent	isPresentisPresentForRestorationsuitableForAnnouncementsuitableForTransitionAnimationshouldAnnounceChangeToNextisPresentPredicate'suitableForTransitionAnimationPredicatewillBePresentPredicateisRoutePredicate_isWaitingForExitingDecisionmarkNeedsExitingDecisionrestorationEnabledprimaryRoutesecondaryRoutenotify_overlayKey_history_serializableHistory_observedRouteAdditions_observedRouteDeletionsfocusScopeNode_debugLocked_heroControllerFromScope_effectiveObservers	initState"_rawNextPagelessRestorationScopeId_nextPagelessRestorationScopeIdrestoreStatedidToggleBucketdidChangeDependencies_updateHeroController_updateEffectiveObserversdidUpdateWidget_debugCheckDuplicatedPageKeys
deactivateactivateoverlay_allRouteOverlayEntries_lastAnnouncedRouteName_debugUpdatingPage_updatePages_flushingHistory_flushHistoryUpdates_flushObserverNotifications_flushRouteAnnouncement_getRouteBefore_getIndexBefore_getRouteAfter_routeNamed_debugCheckIsPagelessRoute_debugIsStaticCallback
_pushEntry_afterNavigation_pushReplacementEntry_pushEntryAndRemoveUntil_replaceEntry_replaceEntryBelowfinalizeRoute_getRouteById_userGesturesInProgress_userGesturesInProgressCountuserGestureInProgressuserGestureInProgressNotifier_activePointers_handlePointerDown_handlePointerUpOrCancel_cancelActivePointersbuildnamed	anonymoustype_serializableDataisRestorablegetSerializableDatacomputeSerializableDatatoRouteEntryrouteBuilder_pageToPagelessRoutesupdate_finalizePage_debugMapsEqualclearhasDatarestoreEntriesForPagecreateDefaultValuefromPrimitivesinitWithValuetoPrimitivesenablednavigatorFinder	onPresent
onCompletepresent_route	_disposed_hookOntoRouteFuture_defaultNavigatorFinder#RouteFactoryRouteListFactoryRestorableRouteBuilderRoutePredicateWillPopCallbackPopPageCallbackRoutePopDispositionRouteRouteSettingsPageNavigatorObserverHeroControllerScopeRouteTransitionRecordTransitionDelegateDefaultTransitionDelegate	Navigator_RouteLifecycle_RouteEntryPredicate_NotAnnounced_RouteEntry_NavigatorObservation_NavigatorPushObservation_NavigatorPopObservation_NavigatorRemoveObservation_NavigatorReplaceObservationNavigatorState_RouteRestorationType_RestorationInformation_NamedRestorationInformation _AnonymousRestorationInformation_HistoryPropertyNavigatorFinderCallbackRoutePresentationCallbackRouteCompletionCallbackRestorableRouteFutureÅäonGenerateRoutedynamiconGenerateInitialRoutesListStringrestorablePushTBuildContextObjectpopUntilboolpopForm	onWillPop
ModalRouteaddScopedWillPopCallbackremoveScopedWillPopCallbackWillPopScopeFuture	onPopPagedidPoppageswillPopdoNotPopbubbleSystemNavigatorOverlayOverlayEntryMaterialPageRoutecreateRouteRestorationScopeValueListenableValueNotifiervoidvalueremove	protectedmustCallSuperTickerFuturecompletethenwidgetrequestFocusfocusScopeNodemaybePopfuture	CompleterfinalizeRoutepushReplacementdidStartUserGesturepushoffstageStatedidUpdateWidgetMaterialAppdidChangeDependenciescontextbarrierColor_historycast	lastWhereeisPresentPredicateorElseroute
firstWhereentrymaintainStateisRoutePredicate	isPresent	immutablename	argumentsoverrideobjectRuntimeTypecurrentResultpoppedLocalKeyRestorationManagerruntimeTypekeysettingsfactorychildInheritedWidgetHeroController"dependOnInheritedWidgetOfExactType
controllerresolveisWaitingForEnteringDecisiontransitionDelegateIterableMapnewPageRouteHistorylocationToExitingPageRoutepageRouteToPagelessRoutestoListgrowableSetvaluestoSetexitingPageRouteisWaitingForExitingDecisioncontainsKeypagelessRouteint
routeEntrylengthcontainsisEmptymarkForPush
markForAdd
markForPopmarkForCompletemarkForRemovelastadd	pageRouteAppBarScaffoldappBar
WidgetsAppof
PopupRoute
showDialogshowMenushowModalBottomSheetPopupMenuButtonDropdownButton	PageRoutePageRouteBuilderCupertinoTabViewBuilderrestorationIdrestorationScopeIdStatefulWidgetdefaultGenerateInitialRoutesWidgetElementRenderObjectcreateElementcreateStateRenderObjectWidgetcreateRenderObjectdefaultRouteNameRestorationBucketRestorationMixinselectSingleEntryHistory PlatformRouteInformationProviderRouterrouterdidPushdidChangeNext	observersonUnknownRouteoptionalTypeArgs	pushNamedStandardMessageCodecrestorablePushNamed
didReplacedidCompletepushReplacementNamedresultrestorablePushReplacementNamed
didPopNextTransitionRouteopaquepopAndPushNamedrestorablePopAndPushNamedwillHandlePopInternallywithName	didRemovepushNamedAndRemoveUntil!restorablePushNamedAndRemoveUntilrestorablePushReplacementpushAndRemoveUntilrestorablePushAndRemoveUntildidChangePreviousreplaceoldRoutenewRouterestorableReplacenewRouteBuilderreplaceRouteBelowanchorRouterestorableReplaceRouteBelowisFirstmaybeOfcanPopLocalHistoryRoutedisposeremoveRouteremoveRouteBelowFlutterErrorStatefulElementstaterootNavigatorfindRootAncestorStateOfTypefindAncestorStateOfType
startsWith	substring_routeNamed	allowNullsplit
isNotEmptypartreportErrorFlutterErrorDetails	exceptionclearremoveWhereinitialStatestagingpushReplace	canUpdate	navigator_debugLocked
_navigatorinstalloverlayEntriesadding_observedRouteAdditionspreviousPresentpushingwhenCompleteOrCancelidle_flushHistoryUpdatesprevious
isNewFirstpopping_popCompleterisCompletedremoving_observedRouteDeletionsdidAddindex
isReplaceddisposedwheremountedVoidCallbackremoveListenereveryaddListenersuitableForTransitionAnimationwillBePresent_updateRestorationIdprimaryRoutesecondaryRouteTickerProviderStateMixin	GlobalKeyOverlayStateQueueFocusScopeNode
FocusScope
debugLabel	initStatelibrarystack
StackTracecurrentobserver'getElementForInheritedWidgetOfExactTypereportsRouteUpdateToEngineRestorableNumregisterForRestoration
removeLastaddAllrestoreEntriesForPagepagehasDatainitialRoutemaprestorationInformationnameddidToggleBucketbucketupdatechangedExternalStateServicesBindinginstanceaddPostFrameCallbackDuration_heroControllerFromScoperestorePendingKey
deactivateactivatecurrentStatehasPageputIfAbsentcanUpdateFrom_updateSettingsmarkNeedsExitingDecision_transitionrearrangeOverlay	handleAdd
handlePushhandleDidPopNext	handlePopwillBePresentPredicatehandleCompletehandleRemovalremoveAtrouteInformationUpdatedlocationoverlayEntry	rearrangeforEachnotifyremoveFirstsuitableForAnnouncement'suitableForTransitionAnimationPredicatelastAnnouncedNextRouteshouldAnnounceChangeToNextlastAnnouncedPreviousRoute	fromPartsDiagnosticsNodeErrorSummaryErrorDescriptionDiagnosticsPropertystyleDiagnosticsTreeStyleerrorProperty!debugIsSerializableForRestorationtoRouteEntryFunctionkIsWebPluginUtilitiesgetCallbackHandle	anonymousrouteBuilderkReleaseMode
jsonEncodetoEncodableobject	postEventany
indexWhere	isCurrentinsertIteratoriteratormoveNextfinalizedidStopUserGesturePointerDownEventpointerPointerEventSchedulerBindingschedulerPhaseSchedulerPhaseRenderAbsorbPointercurrentContextfindAncestorRenderObjectOfTypesetState	absorbingWidgetsBindingcancelPointernoneListeneronPointerDownonPointerUponPointerCancelAbsorbPointernode	autofocusUnmanagedRestorationScopeinitialEntriesfromSerializableDatasublistcomputeSerializableDatagetCallbackFromHandleCallbackHandlefromRawHandletoRawHandleRestorablePropertyisRegisteredkeysisPresentForRestorationrestorationEnabledisRestorablegetSerializableDatanotifyListeners	setEquals
listEqualsdataMapEntryfromnavigatorFinder	onPresent
onComplete_getRouteByIdcallRouteSettingsInheritedWidgetTransitionDelegateStatefulWidgetRouteRouteTransitionRecord_NavigatorObservationStateTickerProviderStateMixinRestorationMixin_RestorationInformationRestorablePropertyî:±p∆z∑]~˝œ(ÄË   
dart:async  dart:collection  dart:convert  dart:developer  dart:ui  package:flutter/foundation.dart  package:flutter/rendering.dart  package:flutter/scheduler.dart  package:flutter/services.dart  
basic.dart  binding.dart  focus_manager.dart  focus_scope.dart  framework.dart  heroes.dart  overlay.dart  restoration.dart  restoration_properties.dart  routes.dart  ticker_provider.dart  	dart:core¿ˇJ ¿W=ñS <ÄÜÄ§Ä•Ä∫Ä‘ÄÎÅÅ)Å*ÅTÅ}Å¶ÅŒÅœÅ‰Å˚ÇÇ3ÇLÇbÇyÇîÇ∫Ç–ÇÔÇÉÉKÉñÉ∏É÷É◊Ñ	ÑÑ6Ñ:ÑHÑLÑàÑ—Ñ“Ñ˛ÖÖ3ÖúÖùÖŸÖ›Ü)ÜvÜÅÜÖÜ’ááeá®àà	àHàÜàáàÿà‹â!âcâñâóâÕâ—ää_ä≠ä˘ã&ãuãvã∞ã¥ãÊãÍã¯ã¸åHåZåuåäåêåﬁå˜å˛åˇçç!çsççÄçµçªé
éTé^é`éaéõéüéÍè9èàè¨è∞èˆêê#êrêîêòêÁë-ëzë¬ííJíNíèíﬂììì:ì@ìçì°ì˜ì¯î*îYîwîxîõî°î»îŒïïVïuï{ïÀññ`ñ™ñŒñ˘óóófóxó~ó ó‡óÊò5òÖò”ô#ôrô•ôÔöBöCöwöòöºö€ö˘öˇõõõNõÉõ≤õ∂õ∑õ‡õÊú5úsúyú∆ú’ú€ù'ùLùèùêùÃù“û$ûxûΩû⁄ûÁû¯üüüXü^ü¶ü¨ü˘†:†@†è†æ†À†‹†˜°1°f°ò°†°®°¨°≠°Ù°˙¢F¢{¢Å¢–¢ˇ£££/£b£Æ§§U§®§≈§Œ•"•u•ƒ•ˆ¶*¶|¶œß!ßqß√®®D®O®ü®Ì© ©R©\©b©f©g©∂©º™™:™G™X™à™â™Ÿ´´´W´u´{´∆´ˇ¨J¨ñ¨Â≠"≠(≠h≠ã≠ë≠‡ÆÆÆ$Æ*ÆuÆâÆ÷ÆÏØØgØkØlØüØÃØÕ∞∞Y∞_∞Æ∞’∞ı∞ˆ±A±G±ñ±Â±˙≤+≤b≤c≤™≤ˆ≥C≥è≥´≥±≥˛¥L¥ú¥Áµ7µPµVµ¶µˆ∂2∂8∂á∂†∂±∂Ã∂Â∂ˆ∂˙∂˚∑I∑O∑É∑–∏$∏>∏D∏ë∏‚πππhπ∂∫∫O∫\∫m∫ç∫¬∫∆∫«ªª!ª'ªvªéªõª¨ª‹ª›ºº%ºuº≈ΩΩ/Ω5ΩÑΩ£Ω∞Ω¡ΩıΩˆæ<æBæéæﬁø/øIøOøúøøøÃø›¿ @¿ @¿ @]¿ @c¿ @≠¿ @˛¿ AO¿ Aà¿ Aé¿ Aû¿ A§¿ AÓ¿ B,¿ B9¿ BJ¿ Bl¿ Bm¿ Bπ¿ C¿ C¿ CA¿ Cí¿ C’¿ D¿ D\¿ D£¿ D‡¿ DÊ¿ E-¿ Ex¿ Eø¿ E¯¿ E˛¿ FB¿ F\¿ Fb¿ Fr¿ Fx¿ F»¿ FÂ¿ FÚ¿ G¿ G%¿ G&¿ GW¿ G]¿ GÆ¿ Gﬂ¿ GÂ¿ H3¿ HD¿ HJ¿ Hó¿ HÂ¿ I4¿ IE¿ IR¿ Ie¿ I|¿ IÄ¿ IÅ¿ I¬¿ I»¿ I˝¿ J¿ J2¿ JF¿ JL¿ J¨¿ Jˆ¿ K¿ K¿ K<¿ KP¿ KV¿ KÇ¿ KÜ¿ Ká¿ K“¿ Kÿ¿ L(¿ L`¿ Lu¿ Lì¿ Lß¿ L≠¿ M¿ MX¿ Mr¿ My¿ Mû¿ M≤¿ M∏¿ M‰¿ MË¿ MÈ¿ N1¿ N>¿ N_¿ N}¿ Në¿ Nó¿ N”¿ NÙ¿ O
¿ O¿ OE¿ OZ¿ Ob¿ Oh¿ Oz¿ O~¿ O¿ O≠¿ O≥¿ P¿ PS¿ Pè¿ Pï¿ PÁ¿ Q;¿ Qí¿ Q®¿ Q∆¿ Q⁄¿ Q‡¿ R!¿ Ro¿ Râ¿ R§¿ R®¿ R™¿ R´¿ R‰¿ RÔ¿ S¿ S2¿ SJ¿ SY¿ Sm¿ Ss¿ St¿ SΩ¿ S·¿ S¸¿ T¿ T%¿ T,¿ TF¿ Te¿ Tì¿ Tö¿ Tû¿ Tü¿ T–¿ T÷¿ T˝¿ U¿ U¿ U>¿ UD¿ Uî¿ UØ¿ U∞¿ Uº¿ V¿ V¿ V¿ VH¿ VL¿ Vï¿ V‹¿ V‡¿ VÓ¿ VÚ¿ WC¿ WS¿ WÇ¿ WΩ¿ W√¿ WÙ¿ X¿ X¿ X!¿ X6¿ XN¿ XT¿ XU¿ X~¿ XÑ¿ Xƒ¿ X€¿ X‹¿ Y,¿ Y=¿ YC¿ Yì¿ Yô¿ Y©¿ YØ¿ Y¸¿ Z¿ Z-¿ Z.¿ Zl¿ Zr¿ Z¡¿ ZŒ¿ Zˆ¿ [%¿ [B¿ [F¿ [G¿ [Ä¿ [Ü¿ [‹¿ [Á¿ \¿ \¿ \"¿ \z¿ \|¿ \}¿ \ª¿ \’¿ ]¿ ]@¿ ]^¿ ]_¿ ]Ö¿ ]ã¿ ]÷¿ ]˜¿ ^?¿ ^@¿ ^f¿ ^l¿ ^≤¿ ^”¿ _¿ _¿ _B¿ _H¿ _ì¿ _ø¿ _≈¿ `
¿ `U¿ `•¿ `ƒ¿ a¿ a¿ aJ¿ aò¿ aô¿ a€¿ a·¿ b0¿ bl¿ b¿¿ b¡¿ b˛¿ c¿ c@¿ c`¿ cb¿ cc¿ cñ¿ cö¿ c„¿ d1¿ d~¿ dÇ¿ d—¿ e!¿ el¿ e∂¿ eÍ¿ f!¿ f?¿ fN¿ f{¿ fï¿ f∏¿ fπ¿ g
¿ g¿ g:¿ gI¿ gc¿ g}¿ g~¿ gª¿ gﬂ¿ g‡¿ h,¿ h<¿ hp¿ hŸ¿ hˆ¿ h˙¿ h˚¿ i¿ iB¿ iq¿ iu¿ iw¿ ix¿ i«¿ j¿ j8¿ j]¿ jy¿ jz¿ jÀ¿ j—¿ k!¿ kl¿ kê¿ kπ¿ k∫¿ l
¿ l¿ l`¿ l™¿ lŒ¿ lˆ¿ l˜¿ m-¿ m3¿ mÄ¿ mÊ¿ n5¿ nK¿ nL¿ nÑ¿ nä¿ n◊¿ o=¿ oé¿ o£¿ o§¿ o⁄¿ o‡¿ p,¿ p}¿ põ¿ p¿¿ p¡¿ p˝¿ q¿ qO¿ qú¿ qÍ¿ r¿ r¿ rO¿ rU¿ r°¿ rÔ¿ s,¿ sD¿ sF¿ sG¿ sò¿ s¿¿ sƒ¿ t¿ tf¿ tj¿ tµ¿ tπ¿ tÕ¿ u¿ ui¿ uå¿ uê¿ uú¿ uÁ¿ u˜¿ v'¿ vi¿ v…¿ w.¿ w9¿ wà¿ wå¿ wŸ¿ x¿ x5¿ xA¿ xc¿ xg¿ xq¿ x”¿ y¿ y>¿ y™¿ y”¿ z$¿ zS¿ zc¿ zp¿ z|¿ z•¿ z©¿ z≥¿ zÀ¿ z”¿ zŸ¿ z›¿ zÂ¿ zı¿ z˘¿ {¿ {¿ {V¿ {s¿ {¬¿ {¯¿ |¿ |i¿ |á¿ |à¿ |∏¿ |ˆ¿ }R¿ }≥¿ }∫¿ }˜¿ ~'¿ ~e¿ ~°¿ ~®¿ ~Í¿ ~Ò¿ ¿ ]¿ m¿ ∫¿ ·¿ Ä/¿ ÄV¿ Ä•¿ Äˆ¿ Å¿ Å"¿ Å)¿ ÅT¿ Å[¿ Åî¿ Åõ¿ Å…¿ Ç¿ Ç:¿ ÇA¿ Çå¿ ÇŸ¿ ÇÈ¿ ÉD¿ É™¿ ÉÍ¿ Ñ:¿ Ñy¿ Ñ¿¿ Ö,¿ Öl¿ Öx¿ ÖÇ¿ Öä¿ Ö€¿ Ü	¿ Ü5¿ Ü6¿ Üà¿ Ü¨¿ á¿ á¿ áf¿ á∞¿ áº¿ áˆ¿ à&¿ à7¿ àd¿ àn¿ àv¿ àw¿ àÖ¿ àÀ¿ àÓ¿ â>¿ âá¿ âê¿ â£¿ â≠¿ âÆ¿ â¬¿ â∆¿ â«¿ ä¿ ä^¿ äd¿ äµ¿ ä˝¿ ã:¿ ãá¿ ã”¿ å$¿ åN¿ åT¿ å†¿ åÓ¿ ç:¿ çÖ¿ ç‘¿ é¿ él¿ é¢¿ éÓ¿ è9¿ èw¿ è°¿ è“¿ ê!¿ êm¿ êΩ¿ ë¿ ëZ¿ ë®¿ ë∆¿ ëÃ¿ í¿ íi¿ í∏¿ í„¿ íÈ¿ ì9¿ ìv¿ ì¡¿ î¿ îU¿ î§¿ îÊ¿ îÏ¿ ï¿ ï"¿ ïJ¿ ïP¿ ïÜ¿ ïå¿ ï≥¿ ïπ¿ ï‰¿ ñ0¿ ñM¿ ñS¿ ñ|¿ ñÇ¿ ñ…¿ ó¿ ó¿ ó(¿ ó.¿ ó¿ ó•¿ óı¿ ò¿ òm¿ òì¿ òﬂ¿ ô+¿ ô{¿ ôΩ¿ ö¿ öN¿ öz¿ ö∏¿ õ¿ õu¿ õ{¿ õ}¿ õ~¿ õœ¿ ú¿ ú¿ úd¿ ú≤¿ ù¿ ùD¿ ùá¿ ù ¿ ù˜¿ û&¿ û'¿ û3¿ û_¿ ûù¿ û˘¿ üZ¿ üa¿ ü¨¿ ü¸¿ †J¿ †å¿ †ÿ¿ °4¿ °Z¿ °j¿ °r¿ °¨¿ ¢¿ ¢|¿ ¢∑¿ £¿ £¿ £g¿ £q¿ £ë¿ £¸¿ §J¿ §ô¿ §Â¿ •4¿ •q¿ •≈¿ ¶¿ ¶)¿ ¶{¿ ¶ã¿ ¶ô¿ ¶•¿ ¶Ø¿ ¶∑¿ ¶‹¿ ¶›¿ ß1¿ ße¿ ßk¿ ßl¿ ß£¿ ßﬁ¿ ßﬂ¿ ®(¿ ®r¿ ®¶¿ ®˚¿ ©¿ ©/¿ ©Q¿ ©[¿ ©c¿ ©Å¿ ©∑¿ ©Ω¿ ©—¿ ©’¿ ©◊¿ ©ÿ¿ ™"¿ ™&¿ ™u¿ ™ƒ¿ ´¿ ´g¿ ´∏¿ ´ı¿ ´˘¿ ¨¿ ¨¿ ¨e¿ ¨´¿ ¨Ò¿ ≠;¿ ≠Ç¿ ≠¨¿ ≠∞¿ ≠˚¿ ÆE¿ Æì¿ Æﬁ¿ Ø(¿ Øs¿ Ø¬¿ ∞¿ ∞+¿ ∞/¿ ∞J¿ ∞N¿ ∞û¿ ∞Ì¿ ±<¿ ±å¿ ±Ÿ¿ ≤&¿ ≤H¿ ≤L¿ ≤õ¿ ≤Ë¿ ≥ ¿ ≥D¿ ≥H¿ ≥o¿ ≥s¿ ≥¡¿ ¥¿ ¥_¿ ¥x¿ ¥|¿ ¥ ¿ µ¿ µ@¿ µD¿ µP¿ µb¿ µê¿ µñ¿ µû¿ µ¢¿ µÂ¿ ∂/¿ ∂^¿ ∂b¿ ∂n¿ ∂£¿ ∂À¿ ∂‰¿ ∑¿ ∑.¿ ∑M¿ ∑o¿ ∑ç¿ ∑µ¿ ∑∆¿ ∑’¿ ∑‚¿ ∑Ì¿ ∑ˆ¿ ∑˛¿ ∏¿ ∏
¿ ∏P¿ ∏ì¿ ∏ ¿ ∏Œ¿ π¿ πC¿ πG¿ πS¿ πo¿ πw¿ π{¿ π∆¿ ∫¿ ∫R¿ ∫ô¿ ∫π¿ ∫Ω¿ ∫‚¿ ∫Ê¿ ª+¿ ªm¿ ª§¿ ª€¿ ªﬂ¿ º¿ ºN¿ ºñ¿ º‡¿ º‰¿ º¿ Ω¿ Ω¿ ΩV¿ ΩÄ¿ Ω√¿ æ¿ æI¿ æT¿ æ^¿ æd¿ æl¿ æp¿ æç¿ æë¿ æù¿ æ≈¿ æÕ¿ æ—¿ æÛ¿ æ˜¿ ø@¿ øv¿ øz¿ ø»¿ ¿¿ ¿#¿ ¿'¿ ¿p¿ ¿Ø¿ ¿≥¿ ¿ø¿ ¡¿ ¡/¿ ¡F¿ ¡h¿ ¡á¿ ¡ø¿ ¡Ã¿ ¡◊¿ ¡ﬂ¿ ¡Á¿ ¡Ô¿ ¡Û¿ ¬;¿ ¬Ö¿ ¬°¿ ¬•¿ ¬Ò¿ √-¿ √x¿ √…¿ √ÿ¿ √‹¿ √Ò¿ √ı¿ ƒA¿ ƒí¿ ƒ·¿ ≈¿ ≈¿ ≈P¿ ≈ô¿ ≈ﬁ¿ ∆"¿ ∆Y¿ ∆]¿ ∆Æ¿ ∆˚¿ «F¿ «J¿ «`¿ «d¿ «¥¿ »¿ »R¿ »Ö¿ »â¿ »’¿ …#¿ …t¿ …¡¿ …≈¿ …—¿ …ˇ¿  ¿  G¿  {¿  Ñ¿  ◊¿  ˆ¿ À¿ À9¿ ÀÑ¿ Àû¿ À´¿ À∂¿ Àæ¿ À∆¿ ÀŒ¿ À“¿ Ã¿ ÃW¿ Ã•¿ Ã¿ Õ6¿ ÕL¿ ÕP¿ Õk¿ Õo¿ Õª¿ Œ¿ Œ\¿ Œô¿ Œù¿ ŒÆ¿ Œ≤¿ Œˇ¿ œM¿ œà¿ œå¿ œ‹¿ –)¿ –x¿ –≈¿ —¿ —*¿ —.¿ —x¿ —…¿ —·¿ —Â¿ —¯¿ “G¿ “{¿ “¿ “»¿ ”¿ ”¿ ”e¿ ”ñ¿ ”ö¿ ”‰¿ ”Ù¿ ”¯¿ ‘G¿ ‘í¿ ‘·¿ ’1¿ ’_¿ ’c¿ ’|¿ ’Ä¿ ’À¿ ÷¿ ÷a¿ ÷Ø¿ ÷—¿ ÷’¿ ◊¿ ◊0¿ ◊Ä¿ ◊Ø¿ ◊¸¿ ÿM¿ ÿó¿ ÿÂ¿ Ÿ1¿ ŸX¿ Ÿ\¿ Ÿ†¿ ŸÓ¿ ⁄:¿ ⁄Ç¿ ⁄´¿ ⁄˘¿ ⁄ˇ¿ €@¿ €Ö¿ €ã¿ €–¿ €‰¿ €Û¿ ‹¿ ‹1¿ ‹H¿ ‹ì¿ ‹≠¿ ‹∆¿ ›¿ ›=¿ ›o¿ ›ç¿ ›™¿ ›»¿ ›¯¿ ﬁ#¿ ﬁE¿ ﬁx¿ ﬁy¿ ﬁµ¿ ﬁª¿ ﬂ¿ ﬂP¿ ﬂâ¿ ﬂŸ¿ ﬂﬂ¿ ‡)¿ ‡b¿ ‡h¿ ‡∏¿ ·¿ ·T¿ ·•¿ ·Ã¿ ·“¿ ‚¿ ‚m¿ ‚ª¿ ‚˝¿ „¿ „¿ „p¿ „§¿ „™¿ „ı¿ ‰E¿ ‰|¿ ‰ü¿ ‰†¿ ‰Ï¿ Â¿ Â¿ Âg¿ Âñ¿ Âú¿ ÂË¿ Ê¿ Ê¿ Êe¿ Ê¥¿ Á¿ Á<¿ Á`¿ Áa¿ Á±¿ Á”¿ ÁŸ¿ Ë)¿ Ëa¿ Ëb¿ Ëç¿ Ëì¿ Ë√¿ Ë…¿ È¿ ÈH¿ Èf¿ Èg¿ È•¿ ÈÃ¿ ÈÕ¿ Í¿ Í¿ Í^¿ ÍØ¿ Í»¿ ÍŒ¿ Î¿ ÎY¿ Î¿ ÎÄ¿ ÎÆ¿ ÎŸ¿ Î⁄¿ Ï)¿ Ï<¿ ÏB¿ ÏÅ¿ Ï–¿ Ì ¿ ÌW¿ Ì]¿ Ì©¿ Ì˜¿ Ó¿ Ó	¿ ÓL¿ Óò¿ ÓË¿ Ô¿ Ô¿ Ô%¿ Ô+¿ Ôx¿ Ôä¿ Ôÿ¿ Ôˇ¿ J¿ ì¿ ·¿ Ò¿ Ò.¿ ÒR¿ ÒS¿ Òå¿ Òí¿ Ò¢¿ Ò®¿ Ú¿ Ú)¿ ÚW¿ ÚX¿ Ú®¿ Ú’¿ Ú€¿ Û¿ Û¿ Ûa¿ Û±¿ Û«¿ ÛÕ¿ Ù¿ ÙO¿ Ùù¿ ÙÌ¿ ı:¿ ı¿ ıÃ¿ ˆ¿ ˆ$¿ ˆV¿ ˆW¿ ˆ£¿ ˆ—¿ ˆ◊¿ ˜$¿ ˜u¿ ˜¬¿ ˜»¿ ¯¿ ¯G¿ ¯í¿ ¯‚¿ ˘0¿ ˘D¿ ˘J¿ ˘ô¿ ˘Á¿ ˙5¿ ˙Ä¿ ˙ã¿ ˙ë¿ ˙™¿ ˙”¿ ˙‘¿ ˚'¿ ˚^¿ ˚d¿ ˚|¿ ˚ó¿ ˚ò¿ ˚È¿ ˚¯¿ ˚˛¿ ¸4¿ ¸{¿ ¸¡¿ ¸«¿ ˝¿ ˝Z¿ ˝ö¿ ˝æ¿ ˝ƒ¿ ˛¿ ˛#¿ ˛)¿ ˛s¿ ˛y¿ ˛√¿ ˛”¿ ˛Ë¿ ˛Ó¿ ˇ0¿ ˇ~¿ ˇ∑¿ ˇÃ¿ ˇ“¿ ¿ J¿ õ¿ Ë¿¿$¿h¿°¿∂¿º¿“¿ÿ¿˚¿¿¿-¿`¿h¿r¿Ñ¿ä¿†¿¶¿Ú¿ˇ¿¿¿5¿R¿e¿{¿¢¿¿¿‚¿Ô¿˙¿¿¿¿$¿:¿@¿å¿í¿†¿ƒ¿¿-¿K¿Q¿t¿Ø¿π¿¡¿«¿„¿ ¿¿)¿y¿Ñ¿å¿ñ¿®¿Æ¿æ¿ƒ¿¿1¿E¿w¿ë¿©¿¿¿«¿¿¿¿m¿|¿Ç¿¬¿	¿	]¿	ñ¿	´¿	±¿	‰¿	Í¿
4¿
v¿
ø¿¿.¿4¿v¿Ø¿ƒ¿ ¿¿e¿≥¿ ¿M¿i¿~¿Ñ¿ö¿†¿√¿…¿◊¿¯¿¿2¿H¿o¿å¿≠¿∫¿≈¿Õ¿◊¿È¿˝¿5¿O¿g¿~¿Ö¿ﬂ¿„¿‰¿4¿Ç¿…¿œ¿¿\¿©¿Ú¿A¿è¿ÿ¿ﬁ¿%¿k¿q¿Ω¿
¿J¿ò¿Ê¿3¿`¿f¿∑¿≈¿À¿¿Z¿`¿±¿ƒ¿Ÿ¿ﬂ¿¿$¿W¿]¿s¿y¿ú¿¢¿∞¿”¿¿$¿.¿@¿F¿V¿\¿≠¿‡¿Ù¿E¿_¿w¿á¿û¿•¿¿¿¿i¿∑¿˛¿¿O¿ù¿Ï¿.¿C¿I¿á¿ç¿‘¿⁄¿#¿)¿?¿E¿h¿n¿|¿†¿Ô¿˜¿¿¿'¿~¿ò¿∞¿¿¿◊¿ﬁ¿W¿[¿\¿©¿‚¿Ë¿ $¿ e¿ k¿ ∏¿ ˛¿!¿!S¿!î¿!‚¿"1¿"}¿"Ã¿#¿#S¿#Y¿#™¿#∏¿#æ¿$¿$F¿$L¿$•¿$∫¿$¿¿$ˇ¿%¿%8¿%>¿%T¿%Z¿%}¿%É¿%ë¿%µ¿%¸¿&¿&¿& ¿&&¿&6¿&<¿&á¿&≥¿&«¿'¿'-¿'E¿'U¿'l¿'s¿'›¿'·¿'‚¿(/¿(h¿(n¿(¥¿(˝¿)L¿)é¿)£¿)©¿)‚¿)Ë¿*/¿*5¿*~¿*Ñ¿*ö¿*†¿*√¿*…¿*◊¿*ı¿+@¿+H¿+R¿+d¿+x¿+ ¿+‰¿+¸¿,¿,#¿,*¿,û¿,¢¿,£¿,Ò¿-A¿-e¿-k¿-Ø¿-ˆ¿.%¿.+¿.m¿.©¿.Ø¿.˝¿/G¿/M¿/ö¿/«¿/Õ¿0¿0Z¿0t¿0z¿0∆¿1¿1R¿1í¿1‹¿2*¿2x¿2û¿2§¿2ı¿3¿3	¿3W¿3]¿3≠¿3≈¿3⁄¿3‡¿4¿4%¿4X¿4^¿4t¿4z¿4ù¿4£¿4±¿4—¿5,¿54¿5>¿5P¿5V¿5f¿5l¿5º¿5Î¿5ˇ¿6?¿6Y¿6r¿6í¿6©¿6∞¿7¿7 ¿7!¿7o¿7ø¿7„¿7È¿87¿8à¿8◊¿9¿9.¿94¿9u¿9{¿9¬¿9»¿:¿:¿:-¿:3¿:V¿:\¿:j¿:ä¿:Ô¿:˜¿;¿;¿;'¿;m¿;á¿;†¿;¿¿;◊¿;ﬁ¿<T¿<X¿<Y¿<¶¿<ª¿<¡¿<Ú¿=8¿=Ö¿=≈¿=È¿=Ô¿>@¿>N¿>T¿>û¿>≥¿>π¿>¯¿>˛¿?¿?¿?=¿?C¿?Q¿?l¿?ä¿?ù¿?¿¿?ˇ¿@¿@¿@¿@)¿@;¿@A¿@Q¿@W¿@£¿@ø¿@”¿A'¿AU¿AY¿AZ¿A£¿A∏¿Aæ¿A˘¿BG¿Bñ¿B»¿B›¿B„¿C¿C¿CR¿C†¿CÌ¿D3¿DÄ¿Dƒ¿D ¿E¿Ea¿Ev¿E|¿E≈¿EÀ¿E·¿F¿F
¿Ff¿Fx¿Få¿G¿Gh¿Gl¿Gm¿GΩ¿H¿HF¿HL¿Hà¿H‘¿I&¿It¿Iƒ¿J¿JP¿JV¿J¢¿JÔ¿K/¿K}¿Kø¿K≈¿L¿L$¿L*¿Lx¿Lπ¿LŒ¿L‘¿M¿M¿M/¿M5¿MX¿M^¿Ml¿Mä¿Mπ¿MÃ¿MÔ¿N2¿N?¿NJ¿NR¿N\¿Nn¿Nt¿NÑ¿Nä¿N⁄¿O	¿O¿O£¿Oˆ¿O˙¿O˚¿PK¿Pñ¿P–¿P÷¿Q¿Qj¿Q¥¿Qˆ¿R¿R¿RJ¿RP¿Rà¿Ré¿R◊¿R›¿RÛ¿S¿S¿SÑ¿Sñ¿S™¿T^¿T’¿TŸ¿T⁄¿U'¿Un¿Ué¿Uî¿U”¿V¿VI¿VO¿Vë¿VÕ¿V”¿W!¿Wk¿Wq¿Wæ¿WÎ¿WÒ¿X7¿Xà¿X“¿Y"¿Yk¿Y∏¿Z¿ZI¿ZO¿Z†¿ZÆ¿Z¥¿[¿[¿[¿[\¿[b¿[x¿[~¿[°¿[ß¿[µ¿[€¿\¿\¿\t¿\ò¿\£¿\´¿\µ¿\«¿\Õ¿\›¿\„¿]-¿]Y¿]m¿]Ï¿^9¿^=¿^>¿^á¿^Œ¿^Ó¿^Ù¿_=¿_é¿_ÿ¿`¿`/¿`5¿`q¿`w¿`Ø¿`µ¿`˛¿a¿a¿a=¿aC¿a∞¿a¬¿a÷¿bà¿b¸¿c ¿c¿cN¿cn¿ct¿c®¿cÙ¿dC¿dí¿d‚¿e
¿e¿e`¿eà¿eé¿eﬂ¿f¿fn¿f∂¿g¿gT¿gm¿gs¿g√¿gÂ¿gÎ¿h9¿hN¿hT¿hd¿hj¿hπ¿i¿iM¿iy¿iç¿j¿je¿ji¿jj¿j∑¿j◊¿j›¿k¿kj¿kπ¿kÎ¿l ¿l¿l7¿l=¿lu¿l{¿lƒ¿lÿ¿mí¿n¿n¿n¿ng¿nµ¿n–¿n÷¿o¿o^¿o≠¿o¸¿pL¿pt¿pz¿p ¿pÚ¿p¯¿qI¿qà¿qÿ¿r ¿rm¿ræ¿r◊¿r›¿s+¿s@¿sF¿sV¿s\¿s©¿sº¿t¿t;¿tO¿tﬂ¿uD¿uH¿uI¿uñ¿u‰¿uˇ¿v¿vM¿võ¿vÈ¿w1¿wF¿wL¿wá¿wç¿w≈¿wÀ¿x¿x(¿xÔ¿yÇ¿yÜ¿yá¿y◊¿yÂ¿yÎ¿z¿zm¿zΩ¿z÷¿z‹¿{¿{+¿{1¿{A¿{G¿{í¿{™¿{◊¿|¿|M¿|Q¿|R¿|£¿|Ù¿}¿}¿}S¿}û¿}Ô¿~¿~¿~W¿~ò¿~û¿~Ó¿<¿z¿Ä¿—¿Ä¿Ä¿Äi¿Ä¥¿Ä√¿Äÿ¿Äﬁ¿ÄÓ¿ÄÙ¿ÅB¿Å¿Å–¿Ç¿Ç¿Çn¿Ç§¿Ç®¿Ç©¿Ç˜¿É¿É¿ÉB¿Éí¿É‡¿Ñ%¿Ñr¿Ñx¿Ñƒ¿Ö¿Ö[¿Ö™¿Ö¯¿ÜC¿ÜI¿Üô¿ÜË¿á(¿áK¿áQ¿á¢¿á®¿áı¿à¿à1¿à7¿àM¿àS¿àä¿àê¿àû¿à¥¿à‘¿à‹¿àÊ¿à¯¿à˛¿â0¿â6¿âD¿â[¿âò¿â†¿â™¿âæ¿ä
¿ä4¿ä8¿ä9¿äÜ¿äº¿ä¬¿ä˜¿ã>¿ãm¿ãs¿ãº¿ãÁ¿ãÌ¿å,¿å2¿åx¿åç¿åì¿å©¿åØ¿å“¿åÿ¿åÊ¿å˝¿çA¿çI¿çS¿çe¿çÆ¿ç›¿ç·¿ç‚¿é1¿éb¿éh¿é†¿é¿è=¿èU¿è[¿è†¿èÔ¿ê7¿êÉ¿ê‘¿êÌ¿êÛ¿ë=¿ë[¿ëa¿ëü¿ë¥¿ë∫¿í¿í?¿íá¿íº¿í¿¿í¡¿ì¿ì`¿ìâ¿ìè¿ìÃ¿î¿îi¿îÅ¿îá¿îÃ¿ï¿ïc¿ïØ¿ñ ¿ñ¿ñ¿ñp¿ñ∏¿ñæ¿ñ¸¿ó¿ód¿ó§¿ó®¿ó©¿ó˘¿ò¿ò¿ò1¿ò7¿òE¿òa¿òq¿òÅ¿ò£¿ò≠¿ò≥¿ô¿ôM¿ôx¿ô~¿ôœ¿ö¿ö¿ö]¿öy¿öï¿öµ¿öº¿õ¿õ#¿õl¿õü¿õ•¿õæ¿ú¿ú!¿ús¿úy¿úz¿úä¿ú©¿ú≈¿ù#¿ù|¿ùº¿ù«¿ùœ¿ù‚¿ùÏ¿û¿û¿û¿ûX¿ûo¿ûu¿ûò¿ûû¿û¨¿ûÔ¿ü¿ü*¿ü<¿üN¿ür¿üz¿üÑ¿üä¿ü€¿†$¿†O¿†U¿†¢¿†®¿†Ë¿°
¿°&¿°F¿°M¿°ï¿°¥¿°˝¿¢0¿¢6¿¢O¿¢•¿¢≤¿£¿£
¿£ ¿£$¿£%¿£\¿£b¿£±¿£”¿£Ÿ¿§*¿§x¿§∆¿§‹¿§‚¿•2¿•~¿•Õ¿¶¿¶x¿¶∂¿ß¿ßN¿ß¿ß§¿ß∂¿ß¯¿®¿®¿®â¿®Ã¿®ı¿©¿©D¿©e¿©{¿©®¿©¡¿©—¿™4¿™>¿™F¿™g¿™{¿™ü¿™¿¿™Ÿ¿´¿´Y¿´À¿¨ ¿¨/¿¨<¿¨S¿¨a¿¨y¿¨Å¿¨¬¿≠-¿≠o¿≠’¿≠€¿Æ¿Æ!¿Æm¿Æº¿Ø¿Ø%¿Øg¿ØÅ¿Ø‡¿ØÊ¿∞¿∞¿∞¿∞!¿∞U¿∞W¿∞X¿∞è¿∞í¿∞ƒ¿∞È¿±¿±4¿±[¿±à¿±Ø¿±’¿≤¿≤5¿≤e¿≤ï¿≤≈¿≤ı¿≥)¿≥Y¿≥à¿≥∂¿≥„¿¥¿¥:¿¥\¿¥Ü¿¥∞¿¥ﬁ¿µ¿µ-¿µR¿µ}¿µ•¿µÕ¿µı¿∂¿∂F¿∂k¿∂ê¿∂π¿∂ﬁ¿∑¿∑7¿∑d¿∑g¿∑≥¿∑⁄¿∏*¿∏A¿∏ö¿∏ü¿∏Ω¿∏¬¿π>¿πì¿πæ¿∫¿∫~¿∫¬¿ª$¿ªG¿ªL¿ªn¿ªs¿ª‹¿º ¿º/¿ºg¿ºœ¿Ω$¿Ωä¿Ω“¿æ¿æ0¿æ2¿æ3¿æt¿æu¿æü¿æ⁄¿ø'¿øG¿øI¿øJ¿ø|¿øã¿øù¿ø ¿øÌ¿¿¿¿4¿¿E¿¿{¿¿≠¿¿‡¿¡¿¡N¿¡Z¿¡Ä¿¡Å¿¡ç¿¡´¿¡‰¿¡Â¿¬¿¬¿¬>¿¬ß¿√
¿√k¿√l¿√º¿ƒ¿ƒ ¿ƒp¿ƒ∏¿ƒÀ¿≈¿≈Y¿≈_¿≈â¿≈…¿≈œ¿≈‡¿≈‰¿≈Â¿∆¿∆¿∆?¿∆Y¿∆m¿∆s¿∆á¿∆õ¿∆°¿∆Ê¿«¿«¿«¿«u¿«¶¿«≈¿«È¿»¿»1¿»F¿»s¿»û¿»…¿…¿…	¿…¿…¿…∞¿ <¿ [¿ ¿ ã¿ ´¿ ¯¿À ¿À'¿À_¿ÀÅ¿Àñ¿À√¿Ã"¿ÃZ¿Ãà¿Ã¥¿ÃÎ¿Õ¿ÕE¿Õç¿Õπ¿Œ¿Œ¿Œ¿Œ#¿ŒZ¿Œ|¿Œß¿Œ≠¿Œ√¿Œ‰¿ŒÍ¿ŒÎ¿œO¿œ|¿œ∫¿œ√¿œ–¿–¿–2¿–m¿–v¿–|¿–Ä¿–Å¿–∑¿–⁄¿—
¿—¿—¿—5¿—;¿—à¿—À¿——¿“"¿“>¿“¢¿“¡¿“Â¿”¿”<¿”g¿”±¿”˜¿‘¿‘3¿‘F¿‘L¿‘t¿‘ü¿‘≥¿‘π¿‘”¿‘‰¿‘Ë¿‘È¿’¿’)¿’C¿’í¿’Ω¿’¡¿’¬¿÷*¿÷I¿÷m¿÷ò¿÷≈¿÷È¿◊¿◊S¿◊\¿◊b¿◊f¿◊g¿◊∑¿◊À¿◊Ù¿ÿ
¿ÿ+¿ÿ1¿ÿ5¿ÿ6¿ÿO¿ÿP¿ÿk¿ÿÇ¿ÿû¿ÿ∆¿ÿ ¿ÿÀ¿ÿÛ¿ÿÙ¿Ÿ#¿ŸP¿Ÿ\¿Ÿã¿Ÿ€¿⁄)¿⁄0¿⁄n¿⁄|¿⁄Ç¿⁄ô¿⁄≈¿⁄¿⁄Ù¿⁄ı¿€(¿€d¿€p¿€ü¿€Ô¿‹=¿‹D¿‹Ç¿‹ê¿‹ñ¿‹≠¿‹Ÿ¿‹ı¿›"¿›&¿›'¿›;¿›{¿›ß¿›´¿›¨¿›ø¿ﬁ ¿ﬁ-¿ﬁ.¿ﬁ~¿ﬁÀ¿ﬂ¿ﬂ\¿ﬂ≠¿ﬂÆ¿‡¿‡¿‡>¿‡U¿‡b¿‡ç¿‡®¿‡·¿·¿·¿·<¿·^¿·s¿·ù¿·ª¿‚¿‚(¿‚4¿‚?¿‚d¿‚l¿‚r¿‚v¿‚w¿‚í¿‚—¿„¿„¿„¿„)¿„j¿„¶¿„™¿„´¿‰¿‰¿‰)¿‰l¿‰©¿‰≠¿‰Æ¿‰⁄¿Â¿ÂX¿Â\¿Â]¿Âú¿ÂÕ¿Ê¿ÊW¿Êe¿ÊÄ¿Ê∞¿ÊÔ¿Êˆ¿Ê˙¿Ê˚¿ÁC¿Áµ¿Ë¿Ë¿ËM¿ËÖ¿Ëâ¿Ëä¿Ëñ¿ËÍ¿ËÎ¿Ë˜¿È?¿Èl¿Èm¿È∑¿È∏¿Èƒ¿È€¿ÈÁ¿Í+¿Í}¿Í–¿Í◊¿Î ¿Î¿Î¿Î¿Î'¿Î3¿Îw¿Î»¿Ï¿Ï"¿ÏJ¿ÏN¿ÏO¿Ï[¿ÏÅ¿Ïç¿Ïﬁ¿Ì/¿ÌÉ¿Ìä¿Ì§¿ÌŒ¿Ì“¿Ì”¿Ìﬂ¿Ó
¿Ó¿Óg¿Ó∏¿Ô¿Ô¿Ô!¿Ô@¿Ôj¿Ôn¿Ôo¿Ô{¿Ôî¿Ô†¿ÔÒ¿@¿î¿¢¿©¿∑¿·¿Â¿Ê¿Ò/¿ÒV¿ÒÉ¿Ò¡¿Ò≈¿Ò«¿Ò»¿ÒÔ¿Ú¿Ú¿Ú8¿Ú=¿Úb¿Úä¿Úã¿Ú∂¿Ú∏¿Úπ¿Ú˘¿Û¿Û.¿ÛH¿ÛM¿ÛN¿ÛZ¿ÛÜ¿Û∫¿Ûæ¿Û¿¿Û¡¿Ù ¿Ù¿Ù4¿ÙN¿ÙS¿ÙT¿Ù`¿Ùå¿Ùø¿Ù√¿Ù≈¿Ù∆¿ı¿ı'¿ı?¿ıY¿ı^¿ı_¿ık¿ıó¿ıÕ¿ı—¿ı”¿ı‘¿ˆ¿ˆ7¿ˆO¿ˆi¿ˆn¿ˆo¿ˆ{¿ˆß¿ˆÚ¿ˆˆ¿ˆ¯¿ˆ˘¿˜!¿˜%¿˜n¿˜Œ¿˜˙¿¯*¿¯n¿¯Õ¿˘,¿˘-¿˘w¿˘Œ¿˘œ¿˙*¿˙+¿˙W¿˙X¿˙å¿˙ç¿˙ô¿˙Æ¿˙≈¿˙’¿˚
¿˚3¿˚W¿˚{¿˚ú¿˚√¿¸¿¸.¿¸?¿¸h¿¸ë¿¸†¿¸≠¿¸‹¿˝ ¿˝!¿˝H¿˝è¿˝∂¿˝«¿˝¿˛¿˛(¿˛5¿˛?¿˛G¿˛Z¿˛d¿˛•¿˛œ¿˛Ò¿˛˜¿ˇ#¿ˇ$¿ˇq¿ˇ¶¿ˇ„¿ )¿ Q¿ ç¿ é¿ ª¿ Ì¿ Û¿ ˜¿ ¯¿7¿é¿è¿Ë¿È¿ı¿>¿Ñ¿¡¿¬¿¿'¿N¿T¿r¿ü¿†¿◊¿$¿Y¿Ü¿©¿‘¿›¿Î¿¿a¿∞¿π¿‘¿$¿*¿+¿y¿¢¿‘¿ˆ¿9¿A¿c¿|¿¶¿∏¿˜¿.¿C¿t¿∂¿Á¿	¿	8¿	¿	ë¿	©¿	∏¿	≈¿	–¿	ÿ¿	ﬁ¿	ﬂ¿	Î¿
¿
R¿
†¿
Ì¿
¿¿,¿d¿Ä¿π¿Ω¿æ¿ ¿¿'¿A¿n¿{¿ü¿•¿©¿µ¿Ô¿¿¸¿¿@¿|¿¨¿÷¿‹¿‡¿·¿#¿\¿É¿ÿ¿Ï¿;¿ã¿º¿Ò¿@¿ë¿‚¿%¿ã¿æ¿¿`¿Ñ¿¡¿Ì¿¿E¿õ¿Ó¿¿<¿ë¿„¿¿3¿d¿ï¿¨¿¡¿”¿„¿Û¿ˇ¿¿$¿Q¿Y¿©¿¬¿¸¿1¿9¿m¿ê¿ñ¿ö¿õ¿¿¿Ï¿K¿X¿Ü¿å¿ê¿ë¿ù¿À¿Ò¿¿6¿_¿É¿ß¿»¿Ô¿3¿Z¿k¿î¿Ω¿Ã¿Ÿ¿¿,¿M¿t¿ª¿‚¿Û¿¿E¿T¿a¿k¿s¿Ü¿ê¿√¿	¿-¿5¿x¿§¿»¿–¿Û¿˘¿7¿I¿m¿ë¿≤¿Ÿ¿¿D¿U¿~¿ß¿∂¿√¿Õ¿‚¿Ó¿ ¿ 
¿ ¿ ;¿ e¿ k¿ o¿ p¿ ô¿ ©¿ ÿ¿!¿!7¿!R¿!É¿!¶¿!∞¿!∏¿!À¿!’¿!Ÿ¿!⁄¿!Ê¿!¸¿"@¿"b¿"h¿"Ä¿"Ñ¿"Ö¿"ë¿"•¿"ª¿"ˇ¿#)¿#K¿#Q¿#U¿#V¿#b¿#u¿#ê¿#†¿#ª¿#Œ¿#ÿ¿#Ë¿$.¿$[¿$c¿$v¿$Ä¿$°¿$ø¿$Ô¿%¿%¿%!¿%Z¿%t¿%x¿%y¿%º¿%ı¿%ˆ¿&-¿&H¿&x¿&ü¿&¶¿&™¿&´¿&Œ¿&œ¿&Ú¿'
¿'¿'=¿'d¿'Ö¿'ò¿'¢¿'£¿'Á¿(1¿({¿(¬¿(…¿(¯¿)¿)k¿)ö¿)Ë¿*¿*Z¿*´¿*¨¿*˛¿+S¿+Ü¿+—¿,¿,j¿,ã¿,œ¿,˜¿-;¿-K¿-Ü¿-‘¿-ı¿.1¿.w¿.∆¿.‰¿/.¿/I¿/ó¿/√¿/˝¿/˛¿0&¿0B¿0`¿0è¿0º¿0Ω¿0˜¿1g¿1h¿1è¿1ª¿1Î¿2*¿2¿2»¿2Á¿3¿3^¿3É¿3§¿3Ø¿3’¿3Ù¿4¿4¿48¿4G¿4O¿4ë¿4ø¿4Œ¿4÷¿5¿51¿5Q¿5l¿5â¿5è¿5ê¿5≤¿6¿6¿6i¿6•¿6˙¿7¿7i¿7å¿7®¿7∫¿7¬¿8¿8/¿8>¿8F¿8ñ¿8 ¿8Í¿9¿9¿9"¿9]¿9à¿9â¿9€¿:¿:b¿:Ø¿:«¿;¿;:¿;¿;¢¿;∞¿;Ã¿<¿<¿<_¿<n¿<ç¿<ü¿<ß¿<®¿<»¿<…¿=¿=¿=3¿=E¿=M¿=N¿=s¿=ô¿=´¿=≥¿=Î¿>¿> ¿>!¿>H¿>t¿>∑¿>“¿>›¿>˝¿?5¿?w¿?Å¿?—¿@¿@<¿@n¿@ó¿@»¿@”¿@˘¿A	¿A8¿Aä¿A€¿AÊ¿B¿B¿Bb¿Bµ¿BÏ¿C#¿CJ¿CR¿CX¿CY¿C´¿D8¿Dh¿Dµ¿D“¿D”¿E ¿E3¿E~¿Eñ¿EΩ¿E‡¿EÌ¿F!¿Fè¿FÃ¿F÷¿FË¿F¿FÒ¿G[¿G´¿G˜¿H¿HJ¿Hê¿HÕ¿I%¿Ik¿Iü¿I‹¿IÊ¿IÓ¿J(¿J.¿J/¿JT¿Já¿J∂¿J·¿K
¿K_¿Ky¿Kâ¿K∏¿KË¿L¿Lj¿Ly¿L¶¿LÆ¿L∏¿Lπ¿L›¿M2¿Mq¿M∆¿MÂ¿N¿Nc¿N{¿N†¿N√¿NŒ¿NÙ¿O¿O¿O:¿O|¿O´¿O⁄¿O˙¿P¿P2¿P8¿P9¿Pá¿P„¿Q¿Q4¿Qk¿Qî¿Q‘¿R¿R/¿R5¿RU¿Ré¿R≈¿R˛¿S¿S4¿SP¿Sã¿S»¿S–¿S÷¿T¿TK¿Tg¿T†¿T§¿T•¿T∆¿T«¿U¿U6¿US¿U¢¿UÒ¿VB¿Vâ¿VÆ¿V≈¿VÔ¿W3¿W∞¿X¿Xv¿X≤¿XÀ¿X¿Y¿Y6¿YQ¿Yn¿YŒ¿Y€¿Z¿Z/¿ZT¿ZÑ¿Zû¿ZΩ¿ZÂ¿ZÙ¿[4¿[J¿[V¿[g¿[ä¿[¥¿[⁄¿[˛¿\¿\7¿\^¿\æ¿\‰¿\Ò¿]/¿]t¿]µ¿]Ò¿^¿^¿^$¿^|¿^∏¿^È¿^ı¿_¿_+¿_N¿_ä¿_ª¿_«¿_Ï¿`>¿`{¿`ú¿`≠¿`œ¿`Ô¿a¿av¿a∂¿aÃ¿aÿ¿a˝¿b$¿bW¿be¿bå¿bò¿bø¿c5¿cB¿cÅ¿cŒ¿cÔ¿d¿d¿dR¿ds¿dÑ¿d™¿dÊ¿d˜¿e¿e@¿eÄ¿eî¿eπ¿eﬁ¿f¿f8¿fF¿ff¿fr¿fë¿fÆ¿g¿g¿g]¿gq¿gò¿g…¿h¿h¿h#¿h[¿ho¿hï¿hÁ¿i¿i5¿iF¿im¿iì¿i¨¿iΩ¿i≈¿i◊¿iÎ¿j¿j<¿jB¿jz¿jù¿jû¿jÍ¿k ¿k¿k ¿kD¿kq¿kø¿l¿l(¿lh¿lØ¿lı¿m"¿m*¿m0¿m1¿m¿må¿m¿¿n¿n+¿n3¿nJ¿nP¿nl¿nü¿n•¿nø¿nÏ¿nÚ¿o¿o¿o¿o<¿oc¿oä¿o±¿oø¿o≈¿oˆ¿pL¿pÉ¿pâ¿pä¿pª¿q¿qI¿qO¿qS¿qT¿qw¿qú¿qµ¿qÊ¿r¿r&¿r8¿r@¿r∞¿r±¿rÍ¿s'¿sY¿sc¿só¿sü¿t¿tU¿tç¿t…¿t—¿t„¿tÈ¿tÌ¿tÓ¿u:¿ui¿uô¿uù¿uû¿u·¿v¿v*¿v0¿vB¿vF¿vG¿ví¿v◊¿vÈ¿vÔ¿w,¿w0¿w1¿wì¿wÆ¿w»¿wˇ¿x¿x¿x(¿xT¿xp¿xŒ¿y+¿yy¿y†¿y¡¿y÷¿y·¿yÈ¿y¸¿z¿z8¿zJ¿zf¿zm¿z≥¿z⁄¿zÏ¿{¿{S¿{ø¿{›¿|<¿|k¿|z¿|Ò¿|ˇ¿}	¿}¿}*¿}g¿}y¿}ñ¿}–¿~;¿~ê¿¿¿¿4¿@¿F¿n¿Ä¿Ñ¿Ö¿≤¿∏¿Î¿Ò¿Ä0¿Ä6¿Äi¿Äo¿ÄÖ¿Äã¿ÄÆ¿Ä¥¿Ä¬¿Äﬂ¿Å	¿Å¿Å¿Å-¿Å3¿ÅC¿ÅI¿Åì¿Å∂¿Å ¿Åı¿Ç¿Ç$¿Ç+¿Çq¿Çu¿Çv¿Ç£¿Ç©¿ÇÊ¿ÇÏ¿É¿É%¿Él¿Ér¿Éª¿É¡¿É◊¿É›¿Ñ ¿Ñ¿Ñ¿Ñ0¿Ñd¿Ñl¿Ñv¿Ñà¿Ñú¿ÑÕ¿ÑÂ¿Ñ¸¿Ö¿Ö"¿Öß¿Ö‰¿Ö˚¿Ü¿ÜR¿Üê¿Üß¿Ü»¿ÜÃ¿ÜÕ¿á¿áh¿áÖ¿áã¿á…¿áœ¿à¿à¿àG¿àM¿àc¿ài¿àå¿àí¿à†¿à∫¿àÚ¿à˙¿â¿â¿â¿â,¿â2¿âÉ¿â¥¿â»¿ä¿ä*¿ä:¿äQ¿äX¿äΩ¿ä¡¿ä¬¿ã¿ã]¿ãz¿ãÄ¿ã»¿ãŒ¿å¿å¿åY¿å_¿å®¿åÆ¿åƒ¿å ¿åÌ¿åÛ¿ç¿ç¿ç\¿çd¿çn¿çÄ¿çî¿ç‰¿ç¸¿é¿é#¿é*¿éI¿éŒ¿è¿è"¿è>¿èy¿èæ¿èË¿ê	¿ê¿ê¿êZ¿êg¿êm¿ê¶¿ê¨¿êÎ¿êÒ¿ë$¿ë*¿ë@¿ëF¿ëi¿ëo¿ë}¿ëì¿ë√¿ëÀ¿ë’¿ëÁ¿ëÌ¿ë˝¿í¿íN¿íz¿íé¿í”¿íÎ¿í˚¿ì¿ì¿ì.¿ìh¿ìl¿ìm¿ìπ¿ì∆¿ìÃ¿î¿î¿îN¿îT¿îõ¿î°¿îÍ¿î¿ï¿ï¿ï/¿ï5¿ïC¿ïW¿ïë¿ïô¿ï£¿ïµ¿ï…¿ñ¿ñ,¿ñ<¿ñS¿ñZ¿ño¿ñ∞¿ñ¥¿ñµ¿ó¿óD¿óJ¿óã¿óë¿ó–¿ó÷¿ò	¿ò¿ò%¿ò+¿òN¿òT¿òb¿òÖ¿ò◊¿òﬂ¿òÈ¿ò˚¿ô¿ô¿ô¿ôg¿ôñ¿ô™¿ô„¿ô¸¿ö¿ö3¿ö:¿öú¿ö†¿ö°¿öÚ¿õ0¿õ6¿õÅ¿õá¿õ»¿õŒ¿ú¿ú¿úd¿új¿úÄ¿úÜ¿ú©¿úØ¿úΩ¿ú⁄¿ù6¿ù>¿ùH¿ùZ¿ùn¿ù≠¿ù∆¿ùÊ¿ù˝¿û¿û&¿û´¿ûË¿ü¿ü¿üY¿üó¿ü«¿üË¿üÏ¿üÌ¿†¿†"¿†P¿†V¿†ï¿†õ¿†±¿†∑¿†⁄¿†‡¿†Ó¿°¿°%¿°H¿°á¿°î¿°ü¿°ß¿°±¿°√¿°…¿°Ÿ¿°ﬂ¿¢+¿¢G¿¢[¿¢í¿¢¡¿£	¿£"¿£&¿£'¿£a¿£q¿£ï¿£∑¿£÷¿£˚¿§M¿§©¿§∏¿§ﬂ¿•¿•¿•¿•&¿•9¿•C¿•T¿•X¿•Y¿•å¿••¿•µ¿¶*¿¶{¿¶é¿¶ò¿¶´¿¶Ø¿¶∞¿¶€¿¶·¿ß¿ß¿ßM¿ßS¿ßã¿ßë¿ß⁄¿ß‡¿ßˆ¿®¿®¿®Å¿®ì¿®ß¿©¿©3¿©ù¿™"¿™c¿™Ö¿™°¿™‹¿´¿´1¿´R¿´V¿´W¿´~¿´ô¿´©¿´ƒ¿´◊¿´·¿¨¿¨.¿¨f¿¨¿¨õ¿¨´¿¨«¿¨⁄¿¨‰¿≠¿≠¿≠¿≠=¿≠V¿≠¶¿≠Ô¿Æ5¿Æ6¿Æa¿Æ|¿Æ©¿Æ™¿ÆÃ¿Æ˝¿Ø?¿Øs¿ØÑ¿Ø¶¿Ø∞¿Ø‰¿ØÂ¿∞¿∞f¿∞á¿∞í¿∞º¿∞Ú¿±¿±J¿±W¿±a¿±ó¿±ü¿±†¿±„¿≤¿≤¿≤¿≤0¿≤4¿≤5¿≤Ö¿≤Õ¿≤·¿≤Á¿≥ ¿≥&¿≥e¿≥k¿≥Å¿≥á¿≥™¿≥∞¿≥æ¿≥Ÿ¿¥¿¥+¿¥n¿¥{¿¥Ü¿¥é¿¥ò¿¥™¿¥∞¿¥¿¿¥∆¿µ¿µE¿µY¿µ¬¿µ‡¿∂	¿∂;¿∂†¿∂º¿∂¿¿∂¡¿∑¿∑U¿∑i¿∑o¿∑≤¿∑∏¿∑Ò¿∑˜¿∏/¿∏5¿∏~¿∏Ñ¿∏ö¿∏Ω¿∏√¿π1¿πC¿πW¿πÓ¿∫¿∫z¿∫ˇ¿ª@¿ªb¿ª~¿ªπ¿ª˛¿º(¿ºI¿ºM¿ºN¿º†¿ºª¿ºÀ¿ºÊ¿º˘¿Ω¿Ω$¿ΩP¿Ωq¿ΩŸ¿æ¿æs¿æå¿æ®¿æ∏¿æ‘¿æÁ¿æÒ¿ø¿ø¿ø¿øi¿øö¿ø†¿ø‹¿ø‚¿¿!¿¿'¿¿=¿¿C¿¿f¿¿l¿¿z¿¿õ¿¿«¿¡!¿¡E¿¡P¿¡X¿¡b¿¡t¿¡z¿¡Ä¿¡ê¿¡ñ¿¡‡¿¬¿¬ ¿¬Ç¿¬†¿¬…¿¬ˆ¿√(¿√å¿√®¿√¨¿√≠¿√˘¿ƒ*¿ƒ0¿ƒv¿ƒ|¿ƒ∏¿ƒæ¿ƒˆ¿ƒ¸¿≈E¿≈K¿≈a¿≈Ñ¿≈ä¿≈˝¿∆¿∆#¿∆∏¿∆›¿«J¿«œ¿»¿»5¿»Q¿»å¿» ¿»˙¿…¿…¿… ¿…o¿…ä¿…ö¿…µ¿…»¿…“¿…Û¿ ¿ O¿ n¿ ¶¿ À¿ ‰¿À"¿ÀI¿Àk¿Às¿ÀÖ¿Àã¿Àß¿À®¿À∏¿À‘¿ÀÁ¿ÀÒ¿Ã¿Ã¿Ã¿ÃS¿ÃY¿Ãä¿Ãê¿Ã†¿Ã¶¿Ãı¿Õ@¿Õâ¿Õµ¿Õ…¿Œ/¿ŒJ¿Œh¿Œë¿ŒØ¿œ
¿œ¿œ¿œI¿œO¿œä¿œê¿œ¡¿œ«¿œˇ¿–¿–N¿–b¿–ˇ¿—¿—F¿—k¿—ÿ¿“]¿“{¿“º¿“·¿“˝¿”8¿”y¿”ù¿”æ¿”¬¿”√¿‘¿‘!¿‘D¿‘R¿‘X¿‘h¿‘É¿‘ñ¿‘†¿‘€¿’¿’Z¿’≠¿÷¿÷K¿÷r¿÷†¿÷º¿÷Ã¿÷Ë¿÷˚¿◊¿◊¿◊@¿◊F¿◊J¿◊K¿◊ï¿◊Œ¿◊‘¿ÿ¿ÿ¿ÿ%¿ÿ+¿ÿx¿ÿã¿ÿ€¿Ÿ
¿Ÿ¿Ÿë¿ŸØ¿Ÿÿ¿Ÿ˘¿⁄%¿⁄à¿⁄å¿⁄ç¿⁄◊¿€¿€¿€[¿€a¿€ú¿€¢¿€⁄¿€‡¿‹)¿‹=¿‹Á¿›¿›4¿›Y¿›∆¿ﬁK¿ﬁl¿ﬁ≠¿ﬁ“¿ﬁÓ¿ﬂ)¿ﬂj¿ﬂñ¿ﬂ∑¿ﬂª¿ﬂº¿‡¿‡"¿‡Z¿‡∂¿·¿·â¿·™¿·√¿·Í¿·˘¿‚¿‚¿‚¿‚i¿‚ê¿‚æ¿‚⁄¿„¿„¿„¿„C¿„I¿„y¿„¿„è¿„ï¿„‡¿„¯¿‰
¿‰n¿‰é¿‰¬¿‰÷¿‰‹¿Â¿ÂV¿Âi¿Âo¿Âè¿Â¡¿Â’¿Â€¿Ê¿Ê¿Ê¿Êp¿Ê¡¿ÊÂ¿ÊÎ¿Á¿Á#¿Á3¿Á9¿Áá¿Áƒ¿Ë¿ËF¿ËZ¿Ëú¿ËË¿È2¿ÈL¿ÈS¿Èp¿ÈÑ¿Èä¿È∫¿Í¿Í@¿ÍT¿Íñ¿Í©¿ÍØ¿Í˛¿ÎH¿Îb¿Îi¿Îé¿Î·¿ÎÙ¿Î˙¿Ï¿Ï<¿ÏR¿Ïv¿Ïã¿Ï†¿Ï…¿Ïﬁ¿Ï‰¿ÏË¿ÏÈ¿Ì¿Ì¿ÌL¿ÌR¿Ìh¿Ìn¿Ì•¿Ì´¿Ìπ¿Ì’¿ÌÓ¿Ìˆ¿Ó ¿Ó¿Ó(¿Ó.¿Ó`¿Óf¿Ót¿Óë¿Ó≈¿ÓÕ¿Ó◊¿ÓÈ¿Ó˝¿Ô,¿ÔG¿ÔW¿Ôr¿ÔÖ¿Ôè¿Ô·¿Ô˙¿\¿´¿‚¿Ò¿Ò¿Ò)¿ÒE¿Ò¿ÒÖ¿Ò∫¿ÒÔ¿Òı¿ÚV¿Úf¿ÚÇ¿Úï¿Úü¿Ú¬¿Ú∆¿Ú«¿Û¿Û¿Û>¿ÛD¿ÛZ¿Û`¿ÛÉ¿Ûâ¿Ûó¿Û∞¿ÛÎ¿ÛÛ¿Û˝¿Ù¿Ù;¿ÙÅ¿ÙÀ¿ÙÂ¿ÙÏ¿ı¿ı3¿ıC¿ıK¿ıX¿ıì¿ıﬂ¿ı˚¿ˆ¿ˆ
¿ˆ¿ˆ¿ˆ\¿ˆb¿ˆó¿ˆ¬¿ˆ›¿ˆ¯¿˜¿˜#¿˜6¿˜@¿˜f¿˜ì¿˜Î¿¯¿¯¿¯M¿¯]¿¯y¿¯å¿¯ñ¿¯¨¿¯ƒ¿¯ı¿˘C¿˘a¿˘s¿˘|¿˘Ç¿˘Ü¿˘á¿˘ÿ¿˙¿˙"¿˙\¿˙í¿˙≠¿˙Ω¿˙ÿ¿˙Î¿˙ı¿˚¿˚B¿˚û¿˚˙¿¸q¿¸í¿¸´¿¸“¿¸·¿¸È¿¸˚¿˝¿˝Q¿˝o¿˝¢¿˝≤¿˝Œ¿˝·¿˝Î¿˝Ô¿˝¿˛A¿˛G¿˛ó¿˛Á¿ˇ4¿ˇ~¿ˇ®¿ˇÆ¿ˇ˚¿ L¿ d¿ ë¿ ›¿+¿C¿]¿¥¿¿Q¿Å¿Ã¿˜¿H¿”¿‡¿¿#¿9¿Å¿†¿Ω¿Ú¿¯¿˘¿<¿@¿A¿U¿¿ó¿Ã¿¿ ¿;¿?¿@¿É¿´¿÷¿ ¿G¿K¿L¿ì¿∏¿æ¿Œ¿‘¿¿U¿û¿ü¿Ì¿	E¿	F¿	Å¿	á¿	À¿	—¿
¿
,¿
N¿
v¿
§¿
¡¿
Ì¿
ˆ¿¿W¿|¿∫¿„¿˝¿+¿=¿E¿ã¿«¿œ¿’¿Ÿ¿⁄¿˙¿ ¿N¿í¿∞¿Ÿ¿˚¿#¿i¿ê¿ò¿û¿¢¿£¿œ¿–¿¿,¿0¿1¿g¿í¿ñ¿ó¿∏¿$¿o¿∂¿ˇ¿.¿≠¿¡¿Â¿4¿[¿e¿k¿∏¿º¿Ω¿…¿¿¿,¿z¿»¿€¿ ¿¿B¿q¿§¿¬¿¿3¿U¿r¿†¿æ¿‹¿˛¿{¿å¿õ¿®¿≥¿º¿√¿«¿…¿ ¿Á¿¿˝¿ˇ¿ ¿)¿f¿ê¿™¿ ¿Ô¿¿B¿}¿ù¿¬¿Î¿Ï¿2¿L¿Ñ¿£¿˚¿¿)¿Q¿¶¿“¿+¿1¿5¿6¿Z¿x¿ï¿ñ¿∑¿∏¿Ÿ¿¿-¿1¿2¿C¿n¿è¿ì¿î¿°¿Ÿ¿⁄¿G¿f¿à¿¡¿‹¿Ù¿¿#¿G¿N¿R¿T¿U¿ö¿ª¿”¿¿¿W¿X¿™¿»¿Ò¿ ¿ <¿ o¿ v¿ z¿ {¿ á¿ ≤¿ Ô¿!	¿!¿!2¿!F¿!N¿!R¿!S¿!_¿!¿!î¿!Ø¿!∞¿!º¿!ı¿"S¿"n¿"Ä¿"Ñ¿"Ü¿"á¿"–¿"ı¿#¿#2¿#X¿#•¿#¶¿#¸¿$¿$…¿$ˆ¿%!¿%C¿%v¿%}¿%Å¿%Ç¿%é¿%ˇ¿&#¿&$¿&0¿&[¿&u¿&œ¿&Î¿'(¿'B¿'_¿'|¿'ê¿'ò¿'ú¿'ù¿'©¿'…¿'ˇ¿(¿(¿('¿(`¿(Æ¿( ¿(›¿(·¿(„¿(‰¿)5¿)y¿)Æ¿)Ø¿)æ¿)ø¿)Í¿*¿*E¿*u¿*≠¿*À¿+¿+_¿+É¿+Ñ¿+Õ¿,¿,¿,H¿,t¿,û¿,∞¿,∏¿,π¿,Ê¿-¿-v¿-…¿-Ê¿. ¿.W¿.y¿.®¿.ÿ¿/=¿/N¿/Ñ¿/∫¿/ƒ¿/÷¿/ﬁ¿/ﬂ¿/˝¿0e¿0ö¿0∫¿0Á¿11¿1g¿1¬¿1Ú¿2B¿2ú¿2—¿2Ÿ¿2ﬂ¿3P¿3ü¿3†¿3Ë¿3È¿4P¿4Q¿4o¿4ï¿4Æ¿4¥¿4∏¿4π¿4œ¿4Ë¿4ˇ¿5,¿5L¿5R¿5|¿5û¿5⁄¿6	¿6C¿6|¿6®¿6”¿6Ÿ¿6›¿6ﬁ¿73¿7i¿7}¿7É¿7´¿7‘¿7Í¿7Ú¿7¯¿8	¿8¿8¿8¿89¿8b¿8p¿8v¿8ò¿8Ø¿8≥¿8¥¿8∆¿8«¿8¸¿8˝¿9V¿9p¿9ö¿9–¿:)¿:>¿:D¿:ö¿:º¿:—¿:◊¿;¿;e¿;k¿;~¿;Ç¿;É¿;¶¿;ß¿;≥¿;Ë¿;˘¿;˝¿;˛¿<
¿<G¿<ê¿<˛¿=¿=E¿=M¿=Q¿=R¿=^¿=ò¿=ª¿=ø¿=¿¿=Ã¿=Á¿>	¿>¿>¿>¿>9¿>;¿><¿>Å¿>Ö¿>‘¿>˛¿?O¿?P¿?ò¿?„¿?Ú¿?ˆ¿@F¿@ç¿@ë¿@¿¿A"¿A#¿A_¿Ac¿A±¿AÕ¿A—¿B¿B?¿B@¿Bé¿B≈¿B…¿C¿Cg¿C´¿CØ¿Cˇ¿DJ¿Dñ¿DÂ¿E4¿EK¿EO¿Eú¿E¡¿E≈¿F¿Fd¿F´¿Fœ¿F”¿G¿Gm¿G°¿G•¿Gπ¿H	¿HE¿HI¿H°¿H±¿Hˆ¿I¿I%¿Im¿Iá¿Iª¿Iÿ¿IÌ¿J0¿J1¿J¿Jœ¿K¿K?¿K@¿KÉ¿Kâ¿KŸ¿L&¿Lq¿Lí¿Lò¿LÂ¿M3¿MQ¿M~¿M¿M«¿Mÿ¿Mﬁ¿N¿NM¿NN¿Nõ¿N¨¿N≤¿N˚¿O6¿OÑ¿O™¿O¬¿O‹¿P¿P6¿PY¿Pp¿Pt¿Pu¿P∏¿Pæ¿Q¿Q5¿Q6¿Qm¿Qs¿Qß¿Q»¿Q‹¿Q›¿QÈ¿R¿R¿R¿RD¿R]¿RÄ¿RÜ¿Rä¿Rã¿Ró¿R≤¿RÕ¿R‚¿S¿S¿S¿S¿SG¿Sa¿S}¿SÅ¿SÇ¿Sú¿Sù¿S©¿Sº¿S—¿T¿T'¿T+¿T,¿T8¿Tw¿Tx¿Tö¿Tﬂ¿T˛¿U¿U¿U¿UB¿UZ¿Uà¿U§¿U‡¿V
¿V!¿V1¿V9¿V{¿Vê¿V©¿VŒ¿V÷¿V⁄¿V€¿W;¿W=    Ä•  Ä∫  Ä‘  ÄÎÅ ÅÅ& Å*  ÅT  Å}  Å¶  Åœ  Å‰  Å˚  Ç  Ç3  ÇL  Çb  Çy  Çî  Ç∫  Ç–    éa¿ DHìÑ†/// An abstraction for an entry managed by a [Navigator].
///
/// This class defines an abstract interface between the navigator and the
/// "routes" that are pushed on and popped off the navigator. Most routes have
/// visual affordances, which they place in the navigators [Overlay] using one
/// or more [OverlayEntry] objects.
///
/// See [Navigator] for more explanation of how to use a [Route] with
/// navigation, including code examples.
///
/// See [MaterialPageRoute] for a route that replaces the entire screen with a
/// platform-adaptive transition.
///
/// A route can belong to a page if the [settings] are a subclass of [Page]. A
/// page-based route, as opposed to a pageless route, is created from
/// [Page.createRoute] during [Navigator.pages] updates. The page associated
/// with this route may change during the lifetime of the route. If the
/// [Navigator] updates the page of this route, it calls [changedInternalState]
/// to notify the route that the page has been updated.
///
/// The type argument `T` is the route's return type, as used by
/// [currentResult], [popped], and [didPop]. The type `void` may be used if the
/// route does not return a value.ìììÄÿ ì£ì®|/// Initialize the [Route].
///
/// If the [settings] are not provided, an empty [RouteSettings] object is
/// used instead.ì´ìª  ì“ì»ì›ì‘ì‡ìÊìÛìÙî[îk  ñ˚ó	  ôÒOö ö$ö1ö9ö8ö2ö:ö?ö;≤-3≤A ≤Q≤Z≤]≤\≤[≤^≤_ì˙^î@//// The navigator that the route is in, if any.   îzÇ~ñ‚Ç;/// The settings for this route.
///
/// See [RouteSettings] for details.
///
/// The settings can change during the route's lifetime. If the settings
/// change, the route's overlays will be marked dirty (see
/// [changedInternalState]).
///
/// If the route is created from a [Page] in the [Navigator.pages] list, then
/// this will be a [Page] subclass, and it will be updated each time its
/// corresponding [Page] in the [Navigator.pages] has changed. Once the
/// [Route] is removed from the history, this value stops updating (and
/// remains with its last value).   óÇ◊ôƒÇw/// The restoration scope ID to be used for the [RestorationScope] surrounding
/// this route.
///
/// The restoration scope ID is null if restoration is currently disabled
/// for this route.
///
/// If the restoration scope ID changes (e.g. because restoration is enabled
/// or disabled) during the life of the route, the [ValueListenable] notifies
/// its listeners. As an example, the ID changes to null while the route is
/// transitioning off screen, which triggers a notification on this field. At
/// that point, the route is considered as no longer present for restoration
/// purposes and its state will not be restored.   õπÅ’ùeÅÄ/// The overlay entries of this route.
///
/// These are typically populated by [install]. The [Navigator] is in charge
/// of adding them to and removing them from the [Overlay].
///
/// There must be at least one entry in this list after [install] has been
/// invoked.
///
/// The [Navigator] will take care of keeping the entries together if the
/// route is moved in the history.   Øn]Ø™0/// Whether calling [didPop] would return false.   ØœÅ%∞ﬁÄ˝/// When this route is popped (see [Navigator.pop]) if the result isn't
/// specified or if it's null, this value will be used instead.
///
/// This fallback is implemented by [didComplete]. This value is used if the
/// argument to that method is null.   ∞¯Å2≤Ä˘/// A future that completes when this route is popped off the navigator.
///
/// The future completes with the value given to [Navigator.pop], if any, or
/// else the value of [currentResult]. See [didComplete] for more discussion
/// on this topic.   ¿ IÉÇ¿ Ju/// Whether this route is the top-most route on the navigator.
///
/// If this is true, then [isActive] is also true.   ¿ KâÇ^¿ LkÄ–/// Whether this route is the bottom-most active route on the navigator.
///
/// If [isFirst] and [isCurrent] are both true then this is the only route on
/// the navigator (and [isActive] will also be true).   ¿ MÎÅí¿ NIE/// Whether there is at least one active route underneath this route.  ¿ N3¿ N4¿ OÅÉ&¿ QùÇ /// Whether this route is on the navigator.
///
/// If the route is not only active, but also the current route (the top-most
/// route), then [isCurrent] will also be true. If it is the first route (the
/// bottom-most route), then [isFirst] will also be true.
///
/// If a higher route is entirely opaque, then the route will be active but not
/// rendered. It is even possible for the route to be active but for the stateful
/// widgets within the route to not be instantiated. See [ModalRoute.maintainState].   öEÄΩöJ  öZöi   õPeõU  õjõs   ùíÅzûˇÅ=/// Called when the route is inserted into the navigator.
///
/// Uses this to populate [overlayEntries]. There must be at least one entry in
/// this list after [install] has been invoked. The [Navigator] will be in charge
/// to add them to the [Overlay] or remove them from it by calling
/// [OverlayEntry.remove].  û‹û›ûÈûÍüÇõ†ÎÅù/// Called after [install] when the route is pushed onto the navigator.
///
/// The returned value resolves when the push transition is complete.
///
/// The [didAdd] method will be called instead of [didPush] when the route
/// immediately appears on screen without any push transition.
///
/// The [didChangeNext] and [didChangePrevious] methods are typically called
/// immediately after this method is called.  †¿†¡†Õ†Œ°Øá∂£$ÅC/// Called after [install] when the route is added to the navigator.
///
/// This method is called instead of [didPush] when the route immediately
/// appears on screen without any push transition.
///
/// The [didChangeNext] and [didChangePrevious] methods are typically called
/// immediately after this method is called.  ££££©iÅ™_Ä /// Called after [install] when the route replaced another in the navigator.
///
/// The [didChangeNext] and [didChangePrevious] methods are typically called
/// immediately after this method is called. ™j™{  ™<™=™I™J™ãÑﬂØ
Ñ0/// Returns whether calling [Navigator.maybePop] when this [Route] is current
/// ([isCurrent]) should do anything.
///
/// [Navigator.maybePop] is usually used instead of [Navigator.pop] to handle
/// the system back button.
///
/// By default, if a [Route] is the first route in the history (i.e., if
/// [isFirst]), it reports that pops should be bubbled
/// ([RoutePopDisposition.bubble]). This behavior prevents the user from
/// popping the first route off the history and being stranded at a blank
/// screen; instead, the larger scope is popped (e.g. the application quits,
/// so that the user returns to the previous application).
///
/// In other cases, the default behavior is to accept the pop
/// ([RoutePopDisposition.pop]).
///
/// The third possible value is [RoutePopDisposition.doNotPop], which causes
/// the pop request to be ignored entirely.
///
/// See also:
///
///  * [Form], which provides a [Form.onWillPop] callback that uses this
///    mechanism.
///  * [WillPopScope], another widget that provides a way to intercept the
///    back button.   ≤eÑî∂∏Ñ/// A request was made to pop this route. If the route can handle it
/// internally (e.g. because it has its own stack of internal state) then
/// return false, otherwise return true (by returning the value of calling
/// `super.didPop`). Returning false will prevent the default behavior of
/// [NavigatorState.pop].
///
/// When this function returns true, the navigator removes this route from
/// the history but does not yet call [dispose]. Instead, it is the route's
/// responsibility to call [NavigatorState.finalizeRoute], which will in turn
/// call [dispose] on the route. This sequence lets the route perform an
/// exit animation (or some other visual effect) after being popped but prior
/// to being disposed.
///
/// This method should call [didComplete] to resolve the [popped] future (and
/// this is all that the default implementation does); routes should not wait
/// for their exit animation to complete before doing so.
///
/// See [popped], [didComplete], and [currentResult] for a discussion of the
/// `result` argument. ∂ø	∂√  ∂¢∂£∂˝É»∫tÉ5/// The route was popped or is otherwise being removed somewhat gracefully.
///
/// This is called by [didPop] and in response to
/// [NavigatorState.pushReplacement]. If [didPop] was not called, then the
/// [NavigatorState.finalizeRoute] method must be called immediately, and no exit
/// animation will run.
///
/// The [popped] future is completed by this method. The `result` argument
/// specifies the value that this future is completed with, unless it is null,
/// in which case [currentResult] is used instead.
///
/// This should be called before the pop animation, if any, takes place,
/// though in some cases the animation may be driven by the user before the
/// route is committed to being popped; this can in particular happen with the
/// iOS-style back gesture. See [NavigatorState.didStartUserGesture]. ∫Ä	∫Ñ  ∫Q∫R∫^∫_∫…Åª≥Äº/// The given route, which was above this one, has been popped off the
/// navigator.
///
/// This route is now the current route ([isCurrent] is now true), and there
/// is no next route. ªæªŒ  ªêªëªùªûªﬂÇΩ»Å≥/// This route's next route has changed to the given new route.
///
/// This is called on a route whenever the next route changes for any reason,
/// so long as it is in the history, including when a route is first added to
/// a [Navigator] (e.g. by [Navigator.push]), except for cases when
/// [didPopNext] would be called.
///
/// The `nextRoute` argument will be null if there's no new next route (i.e.
/// if [isCurrent] is true). Ω÷ΩÁ  Ω•Ω¶Ω≤Ω≥Ω¯Ç ø‰Å∂/// This route's previous route has changed to the given new route.
///
/// This is called on a route whenever the previous route changes for any
/// reason, so long as it is in the history, except for immediately after the
/// route itself has been pushed (in which case [didPush] or [didReplace] will
/// be called instead).
///
/// The `previousRoute` argument will be null if there's no previous route
/// (i.e. if [isFirst] is true). øˆ¿ @  ø¡ø¬øŒøœ¿ @ÇO¿ BQÅ˚/// Called whenever the internal state of the route has changed.
///
/// This should be called whenever [willHandlePopInternally], [didPop],
/// [ModalRoute.offstage], or other internal state of the route changes value.
/// It is used by [ModalRoute], for example, to report the new information via
/// its inherited widget to any children of the route.
///
/// See also:
///
///  * [changedExternalState], which is called when the [Navigator] has
///    updated in some manner that might affect the routes.  ¿ B.¿ B/¿ B;¿ B<¿ BoÑµ¿ G
ÑI/// Called whenever the [Navigator] has updated in some manner that might
/// affect routes, to indicate that the route may wish to rebuild as well.
///
/// This is called by the [Navigator] whenever the
/// [NavigatorState]'s [State.widget] changes (as in [State.didUpdateWidget]),
/// for example because the [MaterialApp] has been rebuilt. This
/// ensures that routes that directly refer to the state of the
/// widget that built the [MaterialApp] will be notified when that
/// widget rebuilds, since it would otherwise be difficult to notify
/// the routes that state they depend on may have changed.
///
/// It is also called whenever the [Navigator]'s dependencies change
/// (as in [State.didChangeDependencies]). This allows routes to use the
/// [Navigator]'s context ([NavigatorState.context]), for example in
/// [ModalRoute.barrierColor], and update accordingly.
///
/// The [ModalRoute] subclass overrides this to force the barrier
/// overlay to rebuild.
///
/// See also:
///
///  * [changedInternalState], the equivalent but for changes to the internal
///    state of the route.  ¿ FÁ¿ FË¿ FÙ¿ Fı¿ G(ÇW¿ IYÅ˜/// Discards any resources used by the object.
///
/// This method should not remove its [overlayEntries] from the [Overlay]. The
/// object's owner is in charge of doing that.
///
/// After this is called, the object is not in a usable state and should be
/// discarded.
///
/// This method should only be called by the object's owner; typically the
/// [Navigator] owns a route and so will call this method when the route is
/// removed, after which the route is no longer referenced by the navigator.  ¿ I6¿ I7¿ IG¿ IH ¿ R´Ém¿ Rı8/// Data that might be useful in constructing a [Route]. ¿ Sk ¿ S:¿ SG*/// Creates data used to construct routes.¿ SN	¿ ST  ¿ S]¿ Sc   ¿ T°p¿ UW/// The name of the route (e.g., "/settings").
///
/// If null, the route is anonymous. ¿ UÄó¿ U§y/// The arguments passed to this route.
///
/// May be used when building the route, e.g. in [Navigator.onGenerateRoute].  ¿ SvÅ'¿ SÒh/// Creates a copy of this route settings object with the given fields
/// replaced with the new values. ¿ T ¿ T	  ¿ T¿ T   ¿ U≤d¿ U≈   ¿ U≤¿ U≥¿ R‰¿ RÂ¿ VÜa¿ WbÅ8/// Describes the configuration of a [Route].
///
/// The type argument `T` is the corresponding [Route]'s return type, as
/// used by [Route.currentResult], [Route.popped], and [Route.didPop].
///
/// See also:
///
///  * [Navigator.pages], which accepts a list of [Page]s and updates its routes
///    history.¿ Wg¿ Wg¿ WÑÄœ ¿ W¸¿ X k/// Creates a page and initializes [key] for subclasses.
///
/// The [arguments] argument must not be null.¿ X¿ X  ¿ X
¿ X  ¿ X%¿ X,  ¿ X:¿ X@   ¿ XWÄÇ¿ X÷h/// The key associated with this page.
///
/// This key will be used for comparing pages in [canUpdate]. ¿ XﬁÅM¿ ZÅ/// Restoration ID to save and restore the state of the [Route] configured by
/// this page.
///
/// If no restoration ID is provided, the [Route] will not restore its state.
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter.  ¿ Z0Å¿ Z’Äó/// Whether this page can be updated with the [other] page.
///
/// Two pages are consider updatable if they have same the [runtimeType] and
/// [key]. ¿ Zﬂ¿ ZÓ   ¿ [IÄÀ¿ [ÚÄé/// Creates the [Route] that corresponds to this page.
///
/// The created [Route] must have its [Route.settings] property set to this [Page]. ¿ [˛¿ \  ¿ [ﬁ¿ [ﬂ¿ \a¿ \+   ¿ \¿ \ ¿ \}Ü‰¿ \¡=/// An interface for observing the behavior of a [Navigator].  ¿ ]B¿ ]R  ¿ \◊h¿ ]'9/// The navigator that the observer is observing, if any.   ¿ ]aÄ›¿ ]˛Äè/// The [Navigator] pushed `route`.
///
/// The route immediately below that one, and thus the previously active
/// route, is `previousRoute`. ¿ ^¿ ^  ¿ ^¿ ^-   ¿ ^BÄ◊¿ ^⁄Ää/// The [Navigator] popped `route`.
///
/// The route immediately below that one, and thus the newly active
/// route, is `previousRoute`. ¿ ^·¿ ^Ò  ¿ ^˜¿ _   ¿ _Å¿ `ÀÅñ/// The [Navigator] removed `route`.
///
/// If only one route is being removed, then the route immediately below
/// that one, if any, is `previousRoute`.
///
/// If multiple routes are being removed, then the route below the
/// bottommost route being removed, if any, is `previousRoute`, and this
/// method will be called once for each removed route, from the topmost route
/// to the bottommost route. ¿ `’¿ `Â  ¿ `Î¿ `¸   ¿ aÄÜ¿ aQ8/// The [Navigator] replaced `oldRoute` with `newRoute`. ¿ a^¿ ao  ¿ ax¿ aâ   ¿ aõÅ$¿ bsÄ /// The [Navigator]'s routes are being moved by a user gesture.
///
/// For example, this is called when an iOS back gesture starts, and is used
/// to disabled hero animations during such interactions. ¿ bá¿ bó  ¿ bù¿ bÆ   ¿ b√Äú¿ cGx/// User gesture is no longer controlling the [Navigator].
///
/// Paired with an earlier call to [didStartUserGesture].    ¿ ccÜ¿ eºÇR/// An inherited widget to host a hero controller.
///
/// The hosted hero controller will be picked up by the navigator in the
/// [child] subtree. Once a navigator picks up this controller, the navigator
/// will bar any navigator below its subtree from receiving this controller.
///
/// The hero controller inside the [HeroControllerScope] can only subscribe to
/// one navigator at a time. An assertion will be thrown if the hero controller
/// subscribes to more than one navigators. This can happen when there are
/// multiple navigators under the same [HeroControllerScope] in parallel. ¿ eÏÄÀ ¿ f)¿ f<4/// Creates a widget to host the input [controller].¿ fC	¿ fJ  ¿ fR'¿ fp  ¿ f¿ fè  ¿ fú¿ f¢¿ fµ¿ fÆ¿ f£¿ f±¿ fªÄ¡¿ g2¿ g3¿ g7Y/// Creates a widget to prevent the subtree from receiving the hero controller
/// above.¿ g>	¿ gE  ¿ gM¿ g]  ¿ gu¿ gj¿ gw¿ gÄ]¿ g”:/// The hero controller that is hosted inside this widget.  ¿ g‚Å¿ hUW/// Retrieves the [HeroController] from the closest [HeroControllerScope]
/// ancestor. ¿ hX¿ hf   ¿ h˝w¿ i  ¿ i!¿ i6  ¿ h˝¿ h˛ ¿ ixâÕ¿ j Äò/// A [Route] wrapper interface that can be staged for [TransitionDelegate] to
/// decide how its underlying [Route] should transition on or off screen.   ¿ j:>¿ jr"/// Retrieves the wrapped [Route].   ¿ j|Å<¿ kõÅ/// Whether this route is waiting for the decision on how to enter the screen.
///
/// If this property is true, this route requires an explicit decision on how
/// to transition into the screen. Such a decision should be made in the
/// [TransitionDelegate.resolve].   ¿ kºÅ9¿ lŸÅ	/// Whether this route is waiting for the decision on how to exit the screen.
///
/// If this property is true, this route requires an explicit decision on how
/// to transition off the screen. Such a decision should be made in the
/// [TransitionDelegate.resolve].   ¿ l˘ÅQ¿ n<Å3/// Marks the [route] to be pushed with transition.
///
/// During [TransitionDelegate.resolve], this can be called on an entering
/// route (where [RouteTransitionRecord.isWaitingForEnteringDecision] is true) in indicate that the
/// route should be pushed onto the [Navigator] with an animated transition.   ¿ nNÅT¿ oïÅ7/// Marks the [route] to be added without transition.
///
/// During [TransitionDelegate.resolve], this can be called on an entering
/// route (where [RouteTransitionRecord.isWaitingForEnteringDecision] is true) in indicate that the
/// route should be added onto the [Navigator] without an animated transition.   ¿ o¶Å¿ p¢ÄÏ/// Marks the [route] to be popped with transition.
///
/// During [TransitionDelegate.resolve], this can be called on an exiting
/// route to indicate that the route should be popped off the [Navigator] with
/// an animated transition. ¿ pÆ¿ p∑   ¿ p√ÅP¿ qÒÅ/// Marks the [route] to be completed without transition.
///
/// During [TransitionDelegate.resolve], this can be called on an exiting
/// route to indicate that the route should be completed with the provided
/// result and removed from the [Navigator] without an animated transition. ¿ r¿ r   ¿ rÅ,¿ s3Å/// Marks the [route] to be removed without transition.
///
/// During [TransitionDelegate.resolve], this can be called on an exiting
/// route to indicate that the route should be removed from the [Navigator]
/// without completing and without an animated transition.    ¿ sG®5¿ |à∞/// The delegate that decides how pages added and removed from [Navigator.pages]
/// transition in or out of the screen.
///
/// This abstract class implements the API to be called by [Navigator] when it
/// requires explicit decisions on how the routes transition on or off the screen.
///
/// To make route transition decisions, subclass must implement [resolve].
///
/// {@tool snippet}
/// The following example demonstrates how to implement a subclass that always
/// removes or adds routes without animated transitions and puts the removed
/// routes at the top of the list.
///
/// ```dart
/// class NoAnimationTransitionDelegate extends TransitionDelegate<void> {
///   @override
///   Iterable<RouteTransitionRecord> resolve({
///     required List<RouteTransitionRecord> newPageRouteHistory,
///     required Map<RouteTransitionRecord?, RouteTransitionRecord> locationToExitingPageRoute,
///     required Map<RouteTransitionRecord?, List<RouteTransitionRecord>> pageRouteToPagelessRoutes,
///   }) {
///     final List<RouteTransitionRecord> results = <RouteTransitionRecord>[];
///
///     for (final RouteTransitionRecord pageRoute in newPageRouteHistory) {
///       if (pageRoute.isWaitingForEnteringDecision) {
///         pageRoute.markForAdd();
///       }
///       results.add(pageRoute);
///
///     }
///     for (final RouteTransitionRecord exitingPageRoute in locationToExitingPageRoute.values) {
///       if (exitingPageRoute.isWaitingForExitingDecision) {
///        exitingPageRoute.markForRemove();
///        final List<RouteTransitionRecord>? pagelessRoutes = pageRouteToPagelessRoutes[exitingPageRoute];
///        if (pagelessRoutes != null) {
///          for (final RouteTransitionRecord pagelessRoute in pagelessRoutes) {
///             pagelessRoute.markForRemove();
///           }
///        }
///       }
///       results.add(exitingPageRoute);
///
///     }
///     return results;
///   }
/// }
///
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [Navigator.transitionDelegate], which uses this class to make route
///    transition decisions.
///  * [DefaultTransitionDelegate], which implements the default way to decide
///    how routes transition in or out of the screen.¿ |¿ |¿ |!e ¿ |q¿ |ÉG/// Creates a delegate and enables subclass to create a constant class.    ¿ |äç;¿ |™  ¿ |º8¿ |‚  ¿ |˙V¿ }7  ¿ }V[¿ }ô   ¿ â…ë±¿ öpèÓ/// A method that will be called by the [Navigator] to decide how routes
/// transition in or out of the screen when [Navigator.pages] is updated.
///
/// The `newPageRouteHistory` list contains all page-based routes in the order
/// that will be on the [Navigator]'s history stack after this update
/// completes. If a route in `newPageRouteHistory` has its
/// [RouteTransitionRecord.isWaitingForEnteringDecision] set to true, this
/// route requires explicit decision on how it should transition onto the
/// Navigator. To make a decision, call [RouteTransitionRecord.markForPush] or
/// [RouteTransitionRecord.markForAdd].
///
/// The `locationToExitingPageRoute` contains the pages-based routes that
/// are removed from the routes history after page update. This map records
/// page-based routes to be removed with the location of the route in the
/// original route history before the update. The keys are the locations
/// represented by the page-based routes that are directly below the removed
/// routes, and the value are the page-based routes to be removed. The
/// location is null if the route to be removed is the bottom most route. If
/// a route in `locationToExitingPageRoute` has its
/// [RouteTransitionRecord.isWaitingForExitingDecision] set to true, this
/// route requires explicit decision on how it should transition off the
/// Navigator. To make a decision for a removed route, call
/// [RouteTransitionRecord.markForPop],
/// [RouteTransitionRecord.markForComplete] or
/// [RouteTransitionRecord.markForRemove]. It is possible that decisions are
/// not required for routes in the `locationToExitingPageRoute`. This can
/// happen if the routes have already been popped in earlier page updates and
/// are still waiting for popping animations to finish. In such case, those
/// routes are still included in the `locationToExitingPageRoute` with their
/// [RouteTransitionRecord.isWaitingForExitingDecision] set to false and no
/// decisions are required.
///
/// The `pageRouteToPagelessRoutes` records the page-based routes and their
/// associated pageless routes. If a page-based route is waiting for exiting
/// decision, its associated pageless routes also require explicit decisions
/// on how to transition off the screen.
///
/// Once all the decisions have been made, this method must merge the removed
/// routes (whether or not they require decisions) and the
/// `newPageRouteHistory` and return the merged result. The order in the
/// result will be the order the [Navigator] uses for updating the route
/// history. The return list must preserve the same order of routes in
/// `newPageRouteHistory`. The removed routes, however, can be inserted into
/// the return list freely as long as all of them are included.
///
/// For example, consider the following case.
///
/// `newPageRouteHistory = [A, B, C]`
///
/// `locationToExitingPageRoute = {A -> D, C -> E}`
///
/// The following outputs are valid.
///
/// `result = [A, B ,C ,D ,E]` is valid.
/// `result = [D, A, B ,C ,E]` is also valid because exiting route can be
/// inserted in any place.
///
/// The following outputs are invalid.
///
/// `result = [B, A, C ,D ,E]` is invalid because B must be after A.
/// `result = [A, B, C ,E]` is invalid because results must include D.
///
/// See also:
///
///  * [RouteTransitionRecord.markForPush], which makes route enter the screen
///    with an animated transition.
///  * [RouteTransitionRecord.markForAdd], which makes route enter the screen
///    without an animated transition.
///  * [RouteTransitionRecord.markForPop], which makes route exit the screen
///    with an animated transition.
///  * [RouteTransitionRecord.markForRemove], which does not complete the
///    route and makes it exit the screen without an animated transition.
///  * [RouteTransitionRecord.markForComplete], which completes the route and
///    makes it exit the screen without an animated transition.
///  * [DefaultTransitionDelegate.resolve], which implements the default way
///    to decide how routes transition in or out of the screen. ¿ ö~8¿ ö§  ¿ öºV¿ ö˘  ¿ õ[¿ õ[    ¿ õ~éX¿ ùçÇ/// The default implementation of [TransitionDelegate] that the [Navigator] will
/// use if its [Navigator.transitionDelegate] is not specified.
///
/// This transition delegate follows two rules. Firstly, all the entering routes
/// are placed on top of the exiting routes if they are at the same location.
/// Secondly, the top most route will always transition with an animated transition.
/// All the other routes below will either be completed with
/// [Route.currentResult] or added without an animated transition.¿ ùß¿ ùß¿ ùÃY ¿ ùˇ¿ û*/// Creates a default transition delegate. ¿ û¿ û"¿ û#  ¿ û)ã´¿ ûU  ¿ ûc8¿ ûâ  ¿ û°V¿ ûﬁ  ¿ û˝[¿ ü@  ¿ û)¿ û* ¿ ©ÿ¿~¿ ⁄à∞©/// A widget that manages a set of child widgets with a stack discipline.
///
/// Many apps have a navigator near the top of their widget hierarchy in order
/// to display their logical history using an [Overlay] with the most recently
/// visited pages visually on top of the older pages. Using this pattern lets
/// the navigator visually transition from one page to another by moving the widgets
/// around in the overlay. Similarly, the navigator can be used to show a dialog
/// by positioning the dialog widget above the current page.
///
/// ## Using the Navigator API
///
/// Mobile apps typically reveal their contents via full-screen elements
/// called "screens" or "pages". In Flutter these elements are called
/// routes and they're managed by a [Navigator] widget. The navigator
/// manages a stack of [Route] objects and provides two ways for managing
/// the stack, the declarative API [Navigator.pages] or imperative API
/// [Navigator.push] and [Navigator.pop].
///
/// When your user interface fits this paradigm of a stack, where the user
/// should be able to _navigate_ back to an earlier element in the stack,
/// the use of routes and the Navigator is appropriate. On certain platforms,
/// such as Android, the system UI will provide a back button (outside the
/// bounds of your application) that will allow the user to navigate back
/// to earlier routes in your application's stack. On platforms that don't
/// have this build-in navigation mechanism, the use of an [AppBar] (typically
/// used in the [Scaffold.appBar] property) can automatically add a back
/// button for user navigation.
///
/// ## Using the Pages API
///
/// The [Navigator] will convert its [Navigator.pages] into a stack of [Route]s
/// if it is provided. A change in [Navigator.pages] will trigger an update to
/// the stack of [Route]s. The [Navigator] will update its routes to match the
/// new configuration of its [Navigator.pages]. To use this API, one can create
/// a [Page] subclass and defines a list of [Page]s for [Navigator.pages]. A
/// [Navigator.onPopPage] callback is also required to properly clean up the
/// input pages in case of a pop.
///
/// By Default, the [Navigator] will use [DefaultTransitionDelegate] to decide
/// how routes transition in or out of the screen. To customize it, define a
/// [TransitionDelegate] subclass and provide it to the
/// [Navigator.transitionDelegate].
///
/// ### Displaying a full-screen route
///
/// Although you can create a navigator directly, it's most common to use the
/// navigator created by the `Router` which itself is created and configured by
/// a [WidgetsApp] or a [MaterialApp] widget. You can refer to that navigator
/// with [Navigator.of].
///
/// A [MaterialApp] is the simplest way to set things up. The [MaterialApp]'s
/// home becomes the route at the bottom of the [Navigator]'s stack. It is what
/// you see when the app is launched.
///
/// ```dart
/// void main() {
///   runApp(MaterialApp(home: MyAppHome()));
/// }
/// ```
///
/// To push a new route on the stack you can create an instance of
/// [MaterialPageRoute] with a builder function that creates whatever you
/// want to appear on the screen. For example:
///
/// ```dart
/// Navigator.push(context, MaterialPageRoute<void>(
///   builder: (BuildContext context) {
///     return Scaffold(
///       appBar: AppBar(title: Text('My Page')),
///       body: Center(
///         child: TextButton(
///           child: Text('POP'),
///           onPressed: () {
///             Navigator.pop(context);
///           },
///         ),
///       ),
///     );
///   },
/// ));
/// ```
///
/// The route defines its widget with a builder function instead of a
/// child widget because it will be built and rebuilt in different
/// contexts depending on when it's pushed and popped.
///
/// As you can see, the new route can be popped, revealing the app's home
/// page, with the Navigator's pop method:
///
/// ```dart
/// Navigator.pop(context);
/// ```
///
/// It usually isn't necessary to provide a widget that pops the Navigator
/// in a route with a [Scaffold] because the Scaffold automatically adds a
/// 'back' button to its AppBar. Pressing the back button causes
/// [Navigator.pop] to be called. On Android, pressing the system back
/// button does the same thing.
///
/// ### Using named navigator routes
///
/// Mobile apps often manage a large number of routes and it's often
/// easiest to refer to them by name. Route names, by convention,
/// use a path-like structure (for example, '/a/b/c').
/// The app's home page route is named '/' by default.
///
/// The [MaterialApp] can be created
/// with a [Map<String, WidgetBuilder>] which maps from a route's name to
/// a builder function that will create it. The [MaterialApp] uses this
/// map to create a value for its navigator's [onGenerateRoute] callback.
///
/// ```dart
/// void main() {
///   runApp(MaterialApp(
///     home: MyAppHome(), // becomes the route named '/'
///     routes: <String, WidgetBuilder> {
///       '/a': (BuildContext context) => MyPage(title: 'page A'),
///       '/b': (BuildContext context) => MyPage(title: 'page B'),
///       '/c': (BuildContext context) => MyPage(title: 'page C'),
///     },
///   ));
/// }
/// ```
///
/// To show a route by name:
///
/// ```dart
/// Navigator.pushNamed(context, '/b');
/// ```
///
/// ### Routes can return a value
///
/// When a route is pushed to ask the user for a value, the value can be
/// returned via the [pop] method's result parameter.
///
/// Methods that push a route return a [Future]. The Future resolves when the
/// route is popped and the [Future]'s value is the [pop] method's `result`
/// parameter.
///
/// For example if we wanted to ask the user to press 'OK' to confirm an
/// operation we could `await` the result of [Navigator.push]:
///
/// ```dart
/// bool value = await Navigator.push(context, MaterialPageRoute<bool>(
///   builder: (BuildContext context) {
///     return Center(
///       child: GestureDetector(
///         child: Text('OK'),
///         onTap: () { Navigator.pop(context, true); }
///       ),
///     );
///   }
/// ));
/// ```
///
/// If the user presses 'OK' then value will be true. If the user backs
/// out of the route, for example by pressing the Scaffold's back button,
/// the value will be null.
///
/// When a route is used to return a value, the route's type parameter must
/// match the type of [pop]'s result. That's why we've used
/// `MaterialPageRoute<bool>` instead of `MaterialPageRoute<void>` or just
/// `MaterialPageRoute`. (If you prefer to not specify the types, though, that's
/// fine too.)
///
/// ### Popup routes
///
/// Routes don't have to obscure the entire screen. [PopupRoute]s cover the
/// screen with a [ModalRoute.barrierColor] that can be only partially opaque to
/// allow the current screen to show through. Popup routes are "modal" because
/// they block input to the widgets below.
///
/// There are functions which create and show popup routes. For
/// example: [showDialog], [showMenu], and [showModalBottomSheet]. These
/// functions return their pushed route's Future as described above.
/// Callers can await the returned value to take an action when the
/// route is popped, or to discover the route's value.
///
/// There are also widgets which create popup routes, like [PopupMenuButton] and
/// [DropdownButton]. These widgets create internal subclasses of PopupRoute
/// and use the Navigator's push and pop methods to show and dismiss them.
///
/// ### Custom routes
///
/// You can create your own subclass of one of the widget library route classes
/// like [PopupRoute], [ModalRoute], or [PageRoute], to control the animated
/// transition employed to show the route, the color and behavior of the route's
/// modal barrier, and other aspects of the route.
///
/// The [PageRouteBuilder] class makes it possible to define a custom route
/// in terms of callbacks. Here's an example that rotates and fades its child
/// when the route appears or disappears. This route does not obscure the entire
/// screen because it specifies `opaque: false`, just as a popup route does.
///
/// ```dart
/// Navigator.push(context, PageRouteBuilder(
///   opaque: false,
///   pageBuilder: (BuildContext context, _, __) {
///     return Center(child: Text('My PageRoute'));
///   },
///   transitionsBuilder: (___, Animation<double> animation, ____, Widget child) {
///     return FadeTransition(
///       opacity: animation,
///       child: RotationTransition(
///         turns: Tween<double>(begin: 0.5, end: 1.0).animate(animation),
///         child: child,
///       ),
///     );
///   }
/// ));
/// ```
///
/// The page route is built in two parts, the "page" and the
/// "transitions". The page becomes a descendant of the child passed to
/// the `transitionsBuilder` function. Typically the page is only built once,
/// because it doesn't depend on its animation parameters (elided with `_`
/// and `__` in this example). The transition is built on every frame
/// for its duration.
///
/// ### Nesting Navigators
///
/// An app can use more than one [Navigator]. Nesting one [Navigator] below
/// another [Navigator] can be used to create an "inner journey" such as tabbed
/// navigation, user registration, store checkout, or other independent journeys
/// that represent a subsection of your overall application.
///
/// #### Example
///
/// It is standard practice for iOS apps to use tabbed navigation where each
/// tab maintains its own navigation history. Therefore, each tab has its own
/// [Navigator], creating a kind of "parallel navigation."
///
/// In addition to the parallel navigation of the tabs, it is still possible to
/// launch full-screen pages that completely cover the tabs. For example: an
/// on-boarding flow, or an alert dialog. Therefore, there must exist a "root"
/// [Navigator] that sits above the tab navigation. As a result, each of the
/// tab's [Navigator]s are actually nested [Navigator]s sitting below a single
/// root [Navigator].
///
/// In practice, the nested [Navigator]s for tabbed navigation sit in the
/// [WidgetsApp] and [CupertinoTabView] widgets and do not need to be explicitly
/// created or managed.
///
/// {@tool sample}
/// The following example demonstrates how a nested [Navigator] can be used to
/// present a standalone user registration journey.
///
/// Even though this example uses two [Navigator]s to demonstrate nested
/// [Navigator]s, a similar result is possible using only a single [Navigator].
///
/// Run this example with `flutter run --route=/signup` to start it with
/// the signup flow instead of on the home page.
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.0.dart **
/// {@end-tool}
///
/// [Navigator.of] operates on the nearest ancestor [Navigator] from the given
/// [BuildContext]. Be sure to provide a [BuildContext] below the intended
/// [Navigator], especially in large `build` methods where nested [Navigator]s
/// are created. The [Builder] widget can be used to access a [BuildContext] at
/// a desired location in the widget subtree.
///
/// ## State Restoration
///
/// If provided with a [restorationScopeId] and when surrounded by a valid
/// [RestorationScope] the [Navigator] will restore its state by recreating
/// the current history stack of [Route]s during state restoration and by
/// restoring the internal state of those [Route]s. However, not all [Route]s
/// on the stack can be restored:
///
///  * [Page]-based routes restore their state if [Page.restorationId] is
///    provided.
///  * [Route]s added with the classic imperative API ([push], [pushNamed], and
///    friends) can never restore their state.
///  * A [Route] added with the restorable imperative API ([restorablePush],
///    [restorablePushNamed], and all other imperative methods with "restorable"
///    in their name) restores its state if all routes below it up to and
///    including the first [Page]-based route below it are restored. If there
///    is no [Page]-based route below it, it only restores its state if all
///    routes below it restore theirs.
///
/// If a [Route] is deemed restorable, the [Navigator] will set its
/// [Route.restorationScopeId] to a non-null value. Routes can use that ID to
/// store and restore their own state. As an example, the [ModalRoute] will
/// use this ID to create a [RestorationScope] for its content widgets. ¿ ⁄≠É  ¿ €ÿ¿ €·Å/// Creates a widget that maintains a stack-based history of child widgets.
///
/// The [onGenerateRoute], [pages], [onGenerateInitialRoutes],
/// [transitionDelegate], [observers]  arguments must not be null.
///
/// If the [pages] is not empty, the [onPopPage] must not be null.¿ €Ë	¿ €Ô  ¿ €˜$¿ €˝  ¿ ‹!¿ ‹'  ¿ ‹5¿ ‹;  ¿ ‹LE¿ ‹R  ¿ ‹ó¿ ‹ù  ¿ ‹±¿ ‹∑  ¿ ‹ D¿ ‹–  ¿ ›'¿ ›  ¿ ›A,¿ ›G  ¿ ›s¿ ›y  ¿ ›ë¿ ›ó  9¿ ‹¿ ‹¿ ‹¿ ‹
¿ ‹¿ ‹¿ ‹¿ ‹¿ ‹¿ ‹k¿ ‹t¿ ‹u¿ ‹‰¿ ‹Í¿ ›¿ ›¿ ›¿ ›¿ ›¿ ›6¿ ›R¿ ›k¿ ›l¿ ›X¿ ›j¿ ›Y¿ ›á¿ ›±¿ ›∑¿ ›≈¿ ›æ¿ ›∏¿ ›¡¿ ›œ¿ ›’¿ ›ı¿ ›Ó¿ ›÷¿ ›Ò¿ ›ˇ¿ ﬁ¿ ﬁ ¿ ﬁ¿ ﬁ¿ ﬁ¿ ﬁ*¿ ﬁ0¿ ﬁB¿ ﬁ;¿ ﬁ1¿ ﬁ>¿ ﬁL¿ ﬁR¿ ﬁu¿ ﬁn¿ ﬁS¿ ﬁq¿ ﬁ{Ü"¿ ‰òÖ /// The list of pages with which to populate the history.
///
/// Pages are turned into routes using [Page.createRoute] in a manner
/// analogous to how [Widget]s are turned into [Element]s (and [State]s or
/// [RenderObject]s) using [Widget.createElement] (and
/// [StatefulWidget.createState] or [RenderObjectWidget.createRenderObject]).
///
/// When this list is updated, the new list is compared to the previous
/// list and the set of routes is updated accordingly.
///
/// Some [Route]s do not correspond to [Page] objects, namely, those that are
/// added to the history using the [Navigator] API ([push] and friends). A
/// [Route] that does not correspond to a [Page] object is called a pageless
/// route and is tied to the [Route] that _does_ correspond to a [Page] object
/// that is below it in the history.
///
/// Pages that are added or removed may be animated as controlled by the
/// [transitionDelegate]. If a page is removed that had other pageless routes
/// pushed on top of it using [push] and friends, those pageless routes are
/// also removed with or without animation as determined by the
/// [transitionDelegate].
///
/// To use this API, an [onPopPage] callback must also be provided to properly
/// clean up this list if a page has been popped.
///
/// If [initialRoute] is non-null when the widget is first created, then
/// [onGenerateInitialRoutes] is used to generate routes that are above those
/// corresponding to [pages] in the initial history. ¿ ‰¢Çº¿ ÁUÇÅ/// Called when [pop] is invoked but the current [Route] corresponds to a
/// [Page] found in the [pages] list.
///
/// The `result` argument is the value with which the route is to complete
/// (e.g. the value returned from a dialog).
///
/// This callback is responsible for calling [Route.didPop] and returning
/// whether this pop is successful.
///
/// The [Navigator] widget should be rebuilt with a [pages] list that does not
/// contain the [Page] for the given [Route]. The next time the [pages] list
/// is updated, if the [Page] corresponding to this [Route] is still present,
/// it will be interpreted as a new route to display. ¿ ÁcÄ¸¿ ËMÄø/// The delegate used for deciding how routes transition in or off the screen
/// during the [pages] updates.
///
/// Defaults to [DefaultTransitionDelegate] if not specified, cannot be null. ¿ ËdÅ ¿ ÈXÄŸ/// The name of the first route to show.
///
/// Defaults to [Navigator.defaultRouteName].
///
/// The value is interpreted according to [onGenerateInitialRoutes], which
/// defaults to [defaultGenerateInitialRoutes]. ¿ Èia¿ Èª;/// Called to generate a route for a given [RouteSettings]. ¿ ÈœÅÆ¿ ÎoÅ{/// Called when [onGenerateRoute] fails to generate a route.
///
/// This callback is typically used for error handling. For example, this
/// callback might always generate a "not found" page that describes the route
/// that wasn't found.
///
/// Unknown routes can arise either from errors in the app or from external
/// requests to push routes, such as from Android intents. ¿ ÎÇU¿ ÎŒ+/// A list of observers for this navigator. ¿ Î‹Öt¿ Ò>Ö/// Restoration ID to save and restore the state of the navigator, including
/// its history.
///
/// {@template flutter.widgets.navigator.restorationScopeId}
/// If a restoration ID is provided, the navigator will persist its internal
/// state (including the route history as well as the restorable state of the
/// routes) and restore it during state restoration.
///
/// If no restoration ID is provided, the route history stack will not be
/// restored and state restoration is disabled for the individual routes as
/// well.
///
/// The state is persisted in a [RestorationBucket] claimed from
/// the surrounding [RestorationScope] using the provided restoration ID.
/// Within that bucket, the [Navigator] also creates a new [RestorationScope]
/// for its children (the [Route]s).
///
/// See also:
///
///  * [RestorationManager], which explains how state restoration works in
///    Flutter.
///  * [RestorationMixin], which contains a runnable code sample showcasing
///    state restoration in Flutter.
///  * [Navigator], which explains under the heading "state restoration"
///    how and under what conditions the navigator restores its state.
///  * [Navigator.restorablePush], which includes an example showcasing how
///    to push a restorable route unto the navigator.
/// {@endtemplate} ¿ ÒUÅ ¿ Ú?Ä…/// The name for the default route of the application.
///
/// See also:
///
///  * [dart:ui.PlatformDispatcher.defaultRouteName], which reflects the route that the
///    application was started with.¿ ÚR¿ ÚZÉ˙¿ ˆ=É±/// Called when the widget is created to generate the initial list of [Route]
/// objects if [initialRoute] is not null.
///
/// Defaults to [defaultGenerateInitialRoutes].
///
/// The [NavigatorState] and [initialRoute] will be passed to the callback.
/// The callback must return a list of [Route] objects with which the history
/// will be primed.
///
/// When parsing the initialRoute, if there's any chance that the it may
/// contain complex characters, it's best to use the
/// [characters](https://pub.dev/packages/characters) API. This will ensure
/// that extended grapheme clusters and surrogate pairs are treated as single
/// characters by the code, the same way that they appear to the user. For
/// example, the string "üë®‚Äçüë©‚Äçüë¶" appears to the user as a single
/// character and `string.characters.length` intuitively returns 1. On the
/// other hand, `string.length` returns 8, and `string.runes.length` returns
/// 5! ¿ ˆYÑx¿ ˙∑Ñ(/// Whether this navigator should report route update message back to the
/// engine when the top-most route changes.
///
/// If the property is set to true, this navigator automatically sends the
/// route update message to the engine when it detects top-most route changes.
/// The messages are used by the web engine to update the browser URL bar.
///
/// If the property is set to true when the [Navigator] is first created,
/// single-entry history mode is requested using
/// [SystemNavigator.selectSingleEntryHistory]. This means this property
/// should not be used at the same time as [PlatformRouteInformationProvider]
/// is used with a [Router] (including when used with [MaterialApp.router],
/// for example).
///
/// If there are multiple navigators in the widget tree, at most one of them
/// can set this property to true (typically, the top-most one created from
/// the [WidgetsApp]). Otherwise, the web engine may receive multiple route
/// update messages from different navigators and fail to update the URL
/// bar.
///
/// Defaults to false. ¿ ˙÷Äø¿ ˚âÄü/// Whether or not the navigator and it's new topmost route should request focus
/// when the new route is pushed onto the navigator.
///
/// Defaults to true.  ¿ ˚öåÄ¿Yä⁄/// Push a named route onto the navigator that most tightly encloses the given
/// context.
///
/// {@template flutter.widgets.navigator.pushNamed}
/// The route name will be passed to the [Navigator.onGenerateRoute]
/// callback. The returned route will be pushed into the navigator.
///
/// The new route and the previous route (if any) are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPush]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the route.
///
/// To use [pushNamed], an [Navigator.onGenerateRoute] callback must be
/// provided,
/// {@endtemplate}
///
/// {@template flutter.widgets.navigator.pushNamed.returnValue}
/// Returns a [Future] that completes to the `result` value passed to [pop]
/// when the pushed route is popped off the navigator.
/// {@endtemplate}
///
/// {@template flutter.widgets.Navigator.pushNamed}
/// The provided `arguments` are passed to the pushed route via
/// [RouteSettings.arguments]. Any object can be passed as `arguments` (e.g. a
/// [String], [int], or an instance of a custom `MyRouteArguments` class).
/// Often, a [Map] is used to pass key-value pairs.
///
/// The `arguments` may be used in [Navigator.onGenerateRoute] or
/// [Navigator.onUnknownRoute] to construct the route.
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _didPushButton() {
///   Navigator.pushNamed(context, '/settings');
/// }
/// ```
/// {@end-tool}
///
/// {@tool snippet}
///
/// The following example shows how to pass additional `arguments` to the
/// route:
///
/// ```dart
/// void _showBerlinWeather() {
///   Navigator.pushNamed(
///     context,
///     '/weather',
///     arguments: <String, String>{
///       'city': 'Berlin',
///       'country': 'Germany',
///     },
///   );
/// }
/// ```
/// {@end-tool}
///
/// {@tool snippet}
///
/// The following example shows how to pass a custom Object to the route:
///
/// ```dart
/// class WeatherRouteArguments {
///   WeatherRouteArguments({ required this.city, required this.country });
///   final String city;
///   final String country;
///
///   bool get isGermanCapital {
///     return country == 'Germany' && city == 'Berlin';
///   }
/// }
///
/// void _showWeather() {
///   Navigator.pushNamed(
///     context,
///     '/weather',
///     arguments: WeatherRouteArguments(city: 'Berlin', country: 'Germany'),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamed], which pushes a route that can be restored
///    during state restoration.¿c¿c¿{¿â  ¿ï¿ù  ¿≠¿∂  ¿3¿4¿áƒ¿Üp/// Push a named route onto the navigator that most tightly encloses the given
/// context.
///
/// {@template flutter.widgets.navigator.restorablePushNamed}
/// Unlike [Route]s pushed via [pushNamed], [Route]s pushed with this method
/// are restored during state restoration according to the rules outlined
/// in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed}
///
/// {@template flutter.widgets.Navigator.restorablePushNamed.arguments}
/// The provided `arguments` are passed to the pushed route via
/// [RouteSettings.arguments]. Any object that is serializable via the
/// [StandardMessageCodec] can be passed as `arguments`. Often, a Map is used
/// to pass key-value pairs.
///
/// The arguments may be used in [Navigator.onGenerateRoute] or
/// [Navigator.onUnknownRoute] to construct the route.
/// {@endtemplate}
///
/// {@template flutter.widgets.Navigator.restorablePushNamed.returnValue}
/// The method returns an opaque ID for the pushed route that can be used by
/// the [RestorableRouteFuture] to gain access to the actual [Route] object
/// added to the navigator and its return value. You can ignore the return
/// value of this method, if you do not care about the route object or the
/// route's return value.
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _showParisWeather() {
///   Navigator.restorablePushNamed(
///     context,
///     '/weather',
///     arguments: <String, String>{
///       'city': 'Paris',
///       'country': 'France',
///     },
///   );
/// }
/// ```
/// {@end-tool}¿!¿!¿9¿G  ¿S¿[  ¿k¿t  ¿Î¿Ï¿Êä1¿àì/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing the route named [routeName] and then disposing
/// the previous route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.pushReplacementNamed}
/// If non-null, `result` will be used as the result of the route that is
/// removed; the future that had been returned from pushing that old route
/// will complete with `result`. Routes such as dialogs or popup menus
/// typically use this mechanism to return the value selected by the user to
/// the widget that created their route. The type of `result`, if provided,
/// must match the type argument of the class of the old route (`TO`).
///
/// The route name will be passed to the [Navigator.onGenerateRoute]
/// callback. The returned route will be pushed into the navigator.
///
/// The new route and the route below the removed route are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is notified once the
/// new route has finished animating (see [Route.didComplete]). The removed
/// route's exit animation is not run (see [popAndPushNamed] for a variant
/// that does animated the removed route).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route,
/// and `TO` is the type of the return value of the old route.
///
/// To use [pushReplacementNamed], a [Navigator.onGenerateRoute] callback must
/// be provided.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _switchToBrightness() {
///   Navigator.pushReplacementNamed(context, '/settings/brightness');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacementNamed], which pushes a replacement route that
///    can be restored during state restoration.¿¿¿0¿0¿I¿W  ¿c¿k  ¿{
¿Ä  ¿ã¿î  ¿‚¿„¿Ö?¿7É≈/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing the route named [routeName] and then disposing
/// the previous route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.restorablePushReplacementNamed}
/// Unlike [Route]s pushed via [pushReplacementNamed], [Route]s pushed with
/// this method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushReplacementNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _switchToAudioVolume() {
///   Navigator.restorablePushReplacementNamed(context, '/settings/volume');
/// }
/// ```
/// {@end-tool}¿V¿V¿i¿i¿Ç¿ê  ¿ú¿§  ¿¥
¿π  ¿ƒ¿Õ  ¿¿¿^àÇ¿&€Ü˙/// Pop the current route off the navigator that most tightly encloses the
/// given context and push a named route in its place.
///
/// {@template flutter.widgets.navigator.popAndPushNamed}
/// The popping of the previous route is handled as per [pop].
///
/// The new route's name will be passed to the [Navigator.onGenerateRoute]
/// callback. The returned route will be pushed into the navigator.
///
/// The new route, the old route, and the route below the old route (if any)
/// are all notified (see [Route.didPop], [Route.didComplete],
/// [Route.didPopNext], [Route.didPush], and [Route.didChangeNext]). If the
/// [Navigator] has any [Navigator.observers], they will be notified as well
/// (see [NavigatorObserver.didPop] and [NavigatorObserver.didPush]). The
/// animations for the pop and the push are performed simultaneously, so the
/// route below may be briefly visible even if both the old route and the new
/// route are opaque (see [TransitionRoute.opaque]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route,
/// and `TO` is the return value type of the old route.
///
/// To use [popAndPushNamed], a [Navigator.onGenerateRoute] callback must be provided.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _selectAccessibility() {
///   Navigator.popAndPushNamed(context, '/settings/accessibility');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePopAndPushNamed], which pushes a new route that can be
///    restored during state restoration.¿&Î¿&Î¿&˛¿&˛¿'¿'%  ¿'1¿'9  ¿'I
¿'N  ¿'Y¿'b  ¿&µ¿&∂¿'‰ÑΩ¿+àÉO/// Pop the current route off the navigator that most tightly encloses the
/// given context and push a named route in its place.
///
/// {@template flutter.widgets.navigator.restorablePopAndPushNamed}
/// Unlike [Route]s pushed via [popAndPushNamed], [Route]s pushed with
/// this method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.popAndPushNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _selectNetwork() {
///   Navigator.restorablePopAndPushNamed(context, '/settings/network');
/// }
/// ```
/// {@end-tool}¿+¢¿+¢¿+µ¿+µ¿+Œ¿+‹  ¿+Ë¿+  ¿, 
¿,  ¿,¿,  ¿+f¿+g¿,•äz¿6à”/// Push the route with the given name onto the navigator that most tightly
/// encloses the given context, and then remove all the previous routes until
/// the `predicate` returns true.
///
/// {@template flutter.widgets.navigator.pushNamedAndRemoveUntil}
/// The predicate may be applied to the same route more than once if
/// [Route.willHandlePopInternally] is true.
///
/// To remove routes until a route with a certain name, use the
/// [RoutePredicate] returned from [ModalRoute.withName].
///
/// To remove all the routes below the pushed route, use a [RoutePredicate]
/// that always returns false (e.g. `(Route<dynamic> route) => false`).
///
/// The removed routes are removed without being completed, so this method
/// does not take a return value argument.
///
/// The new route's name (`routeName`) will be passed to the
/// [Navigator.onGenerateRoute] callback. The returned route will be pushed
/// into the navigator.
///
/// The new route and the route below the bottommost removed route (which
/// becomes the route below the new route) are notified (see [Route.didPush]
/// and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPush] and [NavigatorObserver.didRemove]). The
/// removed routes are disposed, without being notified, once the new route
/// has finished animating. The futures that had been returned from pushing
/// those routes will not complete.
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route.
///
/// To use [pushNamedAndRemoveUntil], an [Navigator.onGenerateRoute] callback
/// must be provided.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _resetToCalendar() {
///   Navigator.pushNamedAndRemoveUntil(context, '/calendar', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamedAndRemoveUntil], which pushes a new route that can
///    be restored during state restoration.¿6+¿6+¿6C¿6Q  ¿6]¿6e  ¿6v¿6Ü  ¿6ñ¿6ü  ¿5Ì¿5Ó¿7#Ö4¿;7ÉΩ/// Push the route with the given name onto the navigator that most tightly
/// encloses the given context, and then remove all the previous routes until
/// the `predicate` returns true.
///
/// {@template flutter.widgets.navigator.restorablePushNamedAndRemoveUntil}
/// Unlike [Route]s pushed via [pushNamedAndRemoveUntil], [Route]s pushed with
/// this method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _resetToOverview() {
///   Navigator.restorablePushNamedAndRemoveUntil(context, '/overview', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}¿;Y¿;Y¿;q¿;  ¿;ã¿;ì  ¿;§¿;¥  ¿;ƒ¿;Õ  ¿;¿;¿<[Ñ˝¿@ÁÑ/// Push the given route onto the navigator that most tightly encloses the
/// given context.
///
/// {@template flutter.widgets.navigator.push}
/// The new route and the previous route (if any) are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPush]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the route.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openMyPage() {
///   Navigator.push<void>(
///     context,
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyPage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePush], which pushes a route that can be restored during
///    state restoration.¿@Ï¿@Ï¿@ˇ¿A  ¿A¿A  ¿@¡¿@¬¿A\Ü¿FúÑ„/// Push a new route onto the navigator that most tightly encloses the
/// given context.
///
/// {@template flutter.widgets.navigator.restorablePush}
/// Unlike [Route]s pushed via [push], [Route]s pushed with this method are
/// restored during state restoration according to the rules outlined in the
/// "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.push}
///
/// {@template flutter.widgets.Navigator.restorablePush}
/// The method takes a _static_ [RestorableRouteBuilder] as argument, which
/// must instantiate and return a new [Route] object that will be added to
/// the navigator. The provided `arguments` object is passed to the
/// `routeBuilder`. The navigator calls the static `routeBuilder` function
/// again during state restoration to re-create the route object.
///
/// Any object that is serializable via the [StandardMessageCodec] can be
/// passed as `arguments`. Often, a Map is used to pass key-value pairs.
/// {@endtemplate}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.restorable_push.0.dart **
/// {@end-tool}¿F´¿F´¿Fæ¿FÃ  ¿F‘&¿FÔ  ¿F˝¿G  ¿Fz¿F{¿Goàä¿O1á=/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing the given route and then disposing the previous
/// route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.pushReplacement}
/// If non-null, `result` will be used as the result of the route that is
/// removed; the future that had been returned from pushing that old route will
/// complete with `result`. Routes such as dialogs or popup menus typically
/// use this mechanism to return the value selected by the user to the widget
/// that created their route. The type of `result`, if provided, must match
/// the type argument of the class of the old route (`TO`).
///
/// The new route and the route below the removed route are notified (see
/// [Route.didPush] and [Route.didChangeNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is notified once the
/// new route has finished animating (see [Route.didComplete]).
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route,
/// and `TO` is the type of the return value of the old route.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _completeLogin() {
///   Navigator.pushReplacement<void, void>(
///     context,
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyHomePage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacement], which pushes a replacement route that can
///    be restored during state restoration.¿OA¿OA¿OT¿OT¿Oh¿Ov  ¿O~¿Oà  ¿Oì
¿Oò  ¿O¿O¿O˝Ñ€¿S∫Ép/// Replace the current route of the navigator that most tightly encloses the
/// given context by pushing a new route and then disposing the previous
/// route once the new route has finished animating in.
///
/// {@template flutter.widgets.navigator.restorablePushReplacement}
/// Unlike [Route]s pushed via [pushReplacement], [Route]s pushed with this
/// method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushReplacement}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.restorable_push_replacement.0.dart **
/// {@end-tool}¿S‘¿S‘¿SÁ¿SÁ¿S˚¿T	  ¿T&¿T,  ¿T;
¿T@  ¿TG¿TP  ¿Sò¿Sô¿T‹â`¿]Åà/// Push the given route onto the navigator that most tightly encloses the
/// given context, and then remove all the previous routes until the
/// `predicate` returns true.
///
/// {@template flutter.widgets.navigator.pushAndRemoveUntil}
/// The predicate may be applied to the same route more than once if
/// [Route.willHandlePopInternally] is true.
///
/// To remove routes until a route with a certain name, use the
/// [RoutePredicate] returned from [ModalRoute.withName].
///
/// To remove all the routes below the pushed route, use a [RoutePredicate]
/// that always returns false (e.g. `(Route<dynamic> route) => false`).
///
/// The removed routes are removed without being completed, so this method
/// does not take a return value argument.
///
/// The newly pushed route and its preceding route are notified for
/// [Route.didPush]. After removal, the new route and its new preceding route,
/// (the route below the bottommost removed route) are notified through
/// [Route.didChangeNext]). If the [Navigator] has any [Navigator.observers],
/// they will be notified as well (see [NavigatorObserver.didPush] and
/// [NavigatorObserver.didRemove]). The removed routes are disposed of and
/// notified, once the new route has finished animating. The futures that had
/// been returned from pushing those routes will not complete.
///
/// Ongoing gestures within the current route are canceled when a new route is
/// pushed.
///
/// The `T` type argument is the type of the return value of the new route.
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _finishAccountCreation() {
///   Navigator.pushAndRemoveUntil<void>(
///     context,
///     MaterialPageRoute<void>(builder: (BuildContext context) => const MyHomePage()),
///     ModalRoute.withName('/'),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushAndRemoveUntil], which pushes a route that can be
///    restored during state restoration.¿]î¿]î¿]ß¿]µ  ¿]Ω¿]«  ¿]–¿]‡  ¿][¿]\¿^@Ñø¿aÊÉY/// Push a new route onto the navigator that most tightly encloses the
/// given context, and then remove all the previous routes until the
/// `predicate` returns true.
///
/// {@template flutter.widgets.navigator.restorablePushAndRemoveUntil}
/// Unlike [Route]s pushed via [pushAndRemoveUntil], [Route]s pushed with this
/// method are restored during state restoration according to the rules
/// outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.pushAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator.restorable_push_and_remove_until.0.dart **
/// {@end-tool}¿b¿b¿b¿b$  ¿b,)¿bG  ¿bW¿bg  ¿br¿b{  ¿aƒ¿a≈¿cáe¿iõÜ5/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route.
///
/// {@template flutter.widgets.navigator.replace}
/// The old route must not be currently visible, as this method skips the
/// animations and therefore the removal would be jarring if it was visible.
/// To replace the top-most route, consider [pushReplacement] instead, which
/// _does_ animate the new route, and delays removing the old route until the
/// new route has finished animating.
///
/// The removed route is removed without being completed, so this method does
/// not take a return value argument.
///
/// The new route, the route below the new route (if any), and the route above
/// the new route, are all notified (see [Route.didReplace],
/// [Route.didChangeNext], and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is disposed without
/// being notified. The future that had been returned from pushing that routes
/// will not complete.
///
/// This can be useful in combination with [removeRouteBelow] when building a
/// non-linear user experience.
///
/// The `T` type argument is the type of the return value of the new route.
/// {@endtemplate}
///
/// See also:
///
///  * [replaceRouteBelow], which is the same but identifies the route to be
///    removed by reference to the route above it, rather than directly.
///  * [restorableReplace], which adds a replacement route that can be
///    restored during state restoration.¿i£¿i£¿i∂¿iƒ  ¿iŒ ¿iÁ  ¿i¿j  ¿i{¿i|¿jlÉ¨¿lËÇ=/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route.
///
/// {@template flutter.widgets.navigator.restorableReplace}
/// Unlike [Route]s added via [replace], [Route]s added with this method are
/// restored during state restoration according to the rules outlined in the
/// "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.replace}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿l˙¿l˙¿m¿m  ¿m% ¿m>  ¿mG2¿mk  ¿m{¿mÑ  ¿l∆¿l«¿ná+¿t]Ö‚/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route. The route to be replaced is the one below the
/// given `anchorRoute`.
///
/// {@template flutter.widgets.navigator.replaceRouteBelow}
/// The old route must not be current visible, as this method skips the
/// animations and therefore the removal would be jarring if it was visible.
/// To replace the top-most route, consider [pushReplacement] instead, which
/// _does_ animate the new route, and delays removing the old route until the
/// new route has finished animating.
///
/// The removed route is removed without being completed, so this method does
/// not take a return value argument.
///
/// The new route, the route below the new route (if any), and the route above
/// the new route, are all notified (see [Route.didReplace],
/// [Route.didChangeNext], and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didReplace]). The removed route is disposed without
/// being notified. The future that had been returned from pushing that routes
/// will not complete.
///
/// The `T` type argument is the type of the return value of the new route.
/// {@endtemplate}
///
/// See also:
///
///  * [replace], which is the same but identifies the route to be removed
///    directly.
///  * [restorableReplaceRouteBelow], which adds a replacement route that can
///    be restored during state restoration.¿to¿to¿tÇ¿tê  ¿tö#¿t≥  ¿tø¿t“  ¿t=¿t>¿uKÑ:¿x8Ç¨/// Replaces a route on the navigator that most tightly encloses the given
/// context with a new route. The route to be replaced is the one below the
/// given `anchorRoute`.
///
/// {@template flutter.widgets.navigator.restorableReplaceRouteBelow}
/// Unlike [Route]s added via [restorableReplaceRouteBelow], [Route]s added
/// with this method are restored during state restoration according to the
/// rules outlined in the "State Restoration" section of [Navigator].
/// {@endtemplate}
///
/// {@macro flutter.widgets.navigator.replaceRouteBelow}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿xT¿xT¿xg¿xu  ¿x#¿xò  ¿x§2¿x»  ¿xÿ¿x·  ¿x¿x¿yâÇ«¿{∏Ç/// Whether the navigator that most tightly encloses the given context can be
/// popped.
///
/// {@template flutter.widgets.navigator.canPop}
/// The initial route cannot be popped off the navigator, which implies that
/// this function returns true only if popping the navigator would not remove
/// the initial route.
///
/// If there is no [Navigator] in scope, returns false.
/// {@endtemplate}
///
/// See also:
///
///  * [Route.isFirst], which returns true for routes for which [canPop]
///    returns false. ¿{ø¿{Õ   ¿|TÜS¿Ç+Ör/// Consults the current route's [Route.willPop] method, and acts accordingly,
/// potentially popping the route as a result; returns whether the pop request
/// should be considered handled.
///
/// {@template flutter.widgets.navigator.maybePop}
/// If [Route.willPop] returns [RoutePopDisposition.pop], then the [pop]
/// method is called, and this method returns true, indicating that it handled
/// the pop request.
///
/// If [Route.willPop] returns [RoutePopDisposition.doNotPop], then this
/// method returns true, but does not do anything beyond that.
///
/// If [Route.willPop] returns [RoutePopDisposition.bubble], then this method
/// returns false, and the caller is responsible for sending the request to
/// the containing scope (e.g. by closing the application).
///
/// This method is typically called for a user-initiated [pop]. For example on
/// Android it's called by the binding for the system's back button.
///
/// The `T` type argument is the type of the return value of the current
/// route. (Typically this isn't known; consider specifying `dynamic` or
/// `Null`.)
/// {@endtemplate}
///
/// See also:
///
///  * [Form], which provides an `onWillPop` callback that enables the form
///    to veto a [pop] initiated by the app's back button.
///  * [ModalRoute], which provides a `scopedWillPopCallback` that can be used
///    to define the route's `willPop` method.¿Ç4¿Ç4¿ÇG¿ÇU  ¿Ç_	¿Çc  ¿Ç¿Ç¿Ç´áå¿âÃÜ¶/// Pop the top-most route off the navigator that most tightly encloses the
/// given context.
///
/// {@template flutter.widgets.navigator.pop}
/// The current route's [Route.didPop] method is called first. If that method
/// returns false, then the route remains in the [Navigator]'s history (the
/// route is expected to have popped some internal state; see e.g.
/// [LocalHistoryRoute]). Otherwise, the rest of this description applies.
///
/// If non-null, `result` will be used as the result of the route that is
/// popped; the future that had been returned from pushing the popped route
/// will complete with `result`. Routes such as dialogs or popup menus
/// typically use this mechanism to return the value selected by the user to
/// the widget that created their route. The type of `result`, if provided,
/// must match the type argument of the class of the popped route (`T`).
///
/// The popped route and the route below it are notified (see [Route.didPop],
/// [Route.didComplete], and [Route.didPopNext]). If the [Navigator] has any
/// [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didPop]).
///
/// The `T` type argument is the type of the return value of the popped route.
///
/// The type of `result`, if provided, must match the type argument of the
/// class of the popped route (`T`).
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage for closing a route is as follows:
///
/// ```dart
/// void _close() {
///   Navigator.pop(context);
/// }
/// ```
/// {@end-tool}
///
/// A dialog box might be closed with a result:
///
/// ```dart
/// void _accept() {
///   Navigator.pop(context, true); // dialog returns true
/// }
/// ```¿â–¿â–¿â„¿âÒ  ¿â˚	¿âˇ  ¿â¨¿â≠¿ä;É•¿çsÇ˘/// Calls [pop] repeatedly on the navigator that most tightly encloses the
/// given context until the predicate returns true.
///
/// {@template flutter.widgets.navigator.popUntil}
/// The predicate may be applied to the same route more than once if
/// [Route.willHandlePopInternally] is true.
///
/// To pop until a route with a certain name, use the [RoutePredicate]
/// returned from [ModalRoute.withName].
///
/// The routes are closed with null as their `return` value.
///
/// See [pop] for more details of the semantics of popping a route.
/// {@endtemplate}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _logout() {
///   Navigator.popUntil(context, ModalRoute.withName('/login'));
/// }
/// ```
/// {@end-tool} ¿ç|¿çä  ¿çí¿ç¢   ¿ç‰Ñ€¿íMÑ./// Immediately remove `route` from the navigator that most tightly encloses
/// the given context, and [Route.dispose] it.
///
/// {@template flutter.widgets.navigator.removeRoute}
/// The removed route is removed without being completed, so this method does
/// not take a return value argument. No animations are run as a result of
/// this method call.
///
/// The routes below and above the removed route are notified (see
/// [Route.didChangeNext] and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didRemove]). The removed route is disposed without
/// being notified. The future that had been returned from pushing that routes
/// will not complete.
///
/// The given `route` must be in the history; this method will throw an
/// exception if it is not.
///
/// Ongoing gestures within the current route are canceled.
/// {@endtemplate}
///
/// This method is used, for example, to instantly dismiss dropdown menus that
/// are up when the screen's orientation changes. ¿íY¿íg  ¿ío¿í   ¿í√Ñ‰¿óÑ%/// Immediately remove a route from the navigator that most tightly encloses
/// the given context, and [Route.dispose] it. The route to be removed is the
/// one below the given `anchorRoute`.
///
/// {@template flutter.widgets.navigator.removeRouteBelow}
/// The removed route is removed without being completed, so this method does
/// not take a return value argument. No animations are run as a result of
/// this method call.
///
/// The routes below and above the removed route are notified (see
/// [Route.didChangeNext] and [Route.didChangePrevious]). If the [Navigator]
/// has any [Navigator.observers], they will be notified as well (see
/// [NavigatorObserver.didRemove]). The removed route is disposed without
/// being notified. The future that had been returned from pushing that routes
/// will not complete.
///
/// The given `anchorRoute` must be in the history and must have a route below
/// it; this method will throw an exception if it is not or does not.
///
/// Ongoing gestures within the current route are canceled.
/// {@endtemplate} ¿ó0¿ó>  ¿óF¿óV   ¿ó´Ü[¿öuÇã/// The state from the closest instance of this class that encloses the given
/// context.
///
/// Typical usage is as follows:
///
/// ```dart
/// Navigator.of(context)
///   ..pop()
///   ..pop()
///   ..pushNamed('/settings');
/// ```
///
/// If `rootNavigator` is set to true, the state from the furthest instance of
/// this class is given instead. Useful for pushing contents above all
/// subsequent instances of [Navigator].
///
/// If there is no [Navigator] in the give `context`, this function will throw
/// a [FlutterError] in debug mode, and an exception in release mode.
///
/// This method can be expensive (it walks the element tree). ¿ö}¿öã  ¿öô¿öü  ¿öÆ¿û
Ö¿°Ç≥/// The state from the closest instance of this class that encloses the given
/// context, if any.
///
/// Typical usage is as follows:
///
/// ```dart
/// NavigatorState? navigatorState = Navigator.maybeOf(context);
/// if (navigatorState != null) {
///   navigatorState
///     ..pop()
///     ..pop()
///     ..pushNamed('/settings');
/// }
/// ```
///
/// If `rootNavigator` is set to true, the state from the furthest instance of
/// this class is given instead. Useful for pushing contents above all
/// subsequent instances of [Navigator].
///
/// Will return null if there is no ancestor [Navigator] in the `context`.
///
/// This method can be expensive (it walks the element tree). ¿°¿°  ¿°*¿°0  ¿°?¿£'åÏ¿¶&Ç∆/// Turn a route name into a set of [Route] objects.
///
/// This is the default value of [onGenerateInitialRoutes], which is used if
/// [initialRoute] is not null.
///
/// If this string starts with a `/` character and has multiple `/` characters
/// in it, then the string is split on those characters and substrings from
/// the start of the string up to each such character are, in turn, used as
/// routes to push.
///
/// For example, if the route `/stocks/HOOLI` was used as the [initialRoute],
/// then the [Navigator] would push the following routes on startup: `/`,
/// `/stocks`, `/stocks/HOOLI`. This enables deep linking while allowing the
/// application to maintain a predictable route history. ¿¶C¿¶S  ¿¶]¿¶e   ¿∞=¿∞2   ¿∞¿∞ ¿æuÄ”¿æ{       ¿øJ≤|¿øP  ¿ø~Ç ¿ø~¿øâ ¿øè
¿øï  ¿ø£%¿øΩ  ¿ø–¿ø÷  /¿øˆ¿ø¸¿¿
¿¿¿ø˝¿¿¿¿¿¿¿¿1¿¿*¿¿¿¿-¿¿=¿¿C¿¡W¿¡¿¿›¿¿™¿¿x¿¿]¿¿P¿¿`¿¿o¿¿p¿¿ì¿¿Ü¿¿ñ¿¿•¿¿¶¿¿≈¿¿∏¿¿»¿¿◊¿¿ÿ¿¿¯¿¿Î¿¿˚¿¡
¿¡¿¡2¿¡%¿¡5¿¡D¿¡E¿¡p¿¡c¿¡r
¿¡É&¿¡§ ¿¡É¿¡Ñ¿¡≠5¿¡Ã  ¿¡Á4¿¡˝ ¿¬¿¬¿¬¿¬ ¿¬0  ¿¬@9¿¬P ¿¬m¿¬©:¿¬∏ ¿¬◊¿√5¿√ ¿√5¿ÿ8¿ÿ@  ¿ÿÕ$¿ÿ“ ¿ÿÌ¿ÈA)¿ÈF ¿Èe¿√nÇu¿ƒÄë/// Restoration ID to be used for the encapsulating route when restoration is
/// enabled for it or null if restoration cannot be enabled for it.   ¿≈Á+¿≈    ¿‚yÄó¿‚Ç    ¿„Äï¿„    ¿„≠U¿„∂    ¿‰Ä¶¿‰    ¿‰∞Ä´¿‰π    ¿Ëå]¿Ë°   ¿Ëå¿Ëç¿ËÌQ¿È   ¿ËÌ¿ËÓ¿ËF¿Ò    ¿Ò1Äì¿Ò5  ¿ÒH
¿ÒN   ¿∆Ä˘¿∆  ¿∆)¿∆8   ¿«Å˘¿«  ¿«$!¿«=  ¿«G(¿«a   ¿…áo¿…  ¿…"!¿…;  ¿…E¿…T  ¿…_!¿…y  ¿…Ç(¿…ú   ¿–ÉÄä¿–à  ¿–ô¿–©   ¿—É÷¿“EÅ /// Process the to-be-popped route.
///
/// A route can be marked for pop by transition delegate or Navigator.pop,
/// this method actually pops the route by calling Route.didPop.
///
/// Returns true if the route is popped; otherwise, returns false if the route
/// refuses to be popped. ¿“Q!¿“j  ¿“t(¿“é   ¿‘ÎÄ’¿‘    ¿’ƒÅ°¿’…  ¿’Ÿ!¿’Ú  ¿’¸(¿÷   ¿◊iÄÀ¿◊n  ¿◊w!¿◊ê  ¿◊ö¿◊©   ¿ÿRw¿ÿW ¿ÿ[¿ÿ[¿ÿ^	¿ÿb   ¿Ÿ%ÅŒ¿Ÿ*  ¿Ÿ3¿Ÿ9  ¿ŸE¿€*Å˚¿€/ ¿€8¿€8¿€;¿€>  ¿€G¿€M  ¿€Y¿›)ÄÅ¿›.    ¿›ÆÑ«¿›≥    ¿Â_Åö¿Âd  ¿Â¿Âê   ¿Ê˝E¿Á	  ¿Á¿Á)   ¿ÁEo¿ÁQ  ¿Áy¿ÁÜ   ¿Á∑M¿Á√  ¿Á⁄¿ÁÁ   ¿ËÄÄ¿Ë$  ¿Ë5¿ËE   ¿ÈoG¿Èt    ¿È∫ÅI¿ÈÀ   ¿È∫¿Èª¿ÎÅF¿Î   ¿Î¿Î¿ÏQÅÄ¿Ïb  ¿Ïn¿Ïw  ¿ÏQ¿ÏR¿Ì’Åò¿ÌÊ  ¿Ì˜¿Ó   ¿Ì’¿Ì÷¿ÔqÅs¿ÔÇ   ¿Ôq¿Ôr ¿Ò»ÄÔ¿Ò◊  ¿ÒÒK ¿ÒÒ¿Ú ¿Ú¿Ú  ¿Ú#¿Ú)   ¿Ú?!¿ÚT  ¿Úd$¿Úz   ¿Úç(¿Úí  ¿Úô¿Ú¨    ¿ÚπÅ¿Úø  ¿Ú˚Q ¿Ú˚¿Û ¿Û¿Û!  ¿Û2¿Û9     ¿ÛPm¿Ûa  ¿Ûh¿Û{  ¿ÛP¿ÛQ ¿Û¡Å¿Û«  ¿ÙP ¿Ù¿Ù ¿Ù ¿Ù'  ¿Ù8¿Ù?     ¿ÙVl¿Ùg  ¿Ùn¿ÙÅ  ¿ÙV¿ÙW ¿Ù∆Å¿ÙÃ  ¿ı
S ¿ı
¿ı% ¿ı+¿ı2  ¿ıC¿ıJ     ¿ıao¿ır  ¿ıy¿ıå  ¿ıa¿ıb ¿ı‘Å#¿ı⁄  ¿ˆT ¿ˆ¿ˆ5 ¿ˆ;¿ˆB  ¿ˆS¿ˆZ     ¿ˆqÄÑ¿ˆÇ  ¿ˆâ¿ˆú  ¿ˆq¿ˆr ¿ˆ˘¿œ¿˜tt/// The state for a [Navigator] widget.
///
/// A reference to this class can be obtained by calling [Navigator.of].  ¿˜–(¿˜Ì  ¿˜¸,¿¯ ¿¯&¿¯'¿¯¿¯%¿¯¿¯,@¿¯C ¿¯Z¿¯j¿¯k¿¯p[¿¯ì ¿¯≠¿¯≤¿¯»¿¯≥¿¯…¿¯ ¿¯œ[¿¯Ú ¿˘¿˘¿˘'¿˘¿˘(¿˘)¿˘/Äù¿˘éG/// The [FocusScopeNode] for the [FocusScope] that encloses the routes.¿˘ü¿˘≠¿˘À¿˘∏¿˘Æ¿˘∫¿˘—¿˘÷ ¿˘Â¿˙-(¿˙=  ¿˙Z0¿˙w  ¿9S¿R ¿w¿Ñ¿à¿Ö¿â¿ã¿ä¿&≠¿&µ  ¿&—¿&÷ ¿&Î¿Tß¿T¨ ¿Tø¿Ö$¿â ¿®¿°Ä¢¿		K/// Notifies its listeners if the value of [userGestureInProgress] changes.¿	)¿	6¿	;¿	7¿	<¿	B¿	=¿•(¿¥ ¿À¿Ã¿∆¿ ¿«¿ëV¿ô    ¿´C¿√   ¿´¿¨¿%{y¿%–@/// The overlay this navigator uses for its visual presentation.   ¿%¯Ä±¿&    ¿B@¿J    ¿≠Äù¿±  ¿…	¿Œ   ¿NÅO¿`Ä˙/// Whether a route is currently being manipulated by the user, e.g.
/// as during an iOS back gesture.
///
/// See also:
///
///  * [userGestureInProgressNotifier], which notifies its listeners if
///    the value of [userGestureInProgress] changes.   ;¿˙èÜg¿˙†   ¿˙è¿˙ê¿Îâ—¿¸  ¿	¿  ¿'¿-  ¿Î¿Ï¿¿ÄË¿—  ¿·¿ı  ¿¿¿¡¿ÚÄÌ¿   ¿Ú¿Û¿„â∂¿Ë  ¿˛!¿   ¿ùÄÚ¿¢    ¿ìá€¿§  ¿¥¿ø  ¿ì¿î¿ rÅf¿ w    ¿!‹Äß¿!Ì   ¿!‹¿!›¿"áÄÕ¿"ò   ¿"á¿"à¿#XÇ¿#i   ¿#X¿#Y¿&Ù≠Ø¿&˘    ¿T…öJ¿TŒ  ¿T‰¿TÍ  ¿T¸¿oÇ;¿o    ¿qVÉñ¿q[    ¿tÄ¨¿t˝  ¿u	¿u  ¿u¿u.   ¿u†Ä•¿u§  ¿u¥	¿uπ  ¿uø¿u’   ¿vIÄÊ¿vV  ¿ve	¿vj  ¿vp¿vÜ   ¿w3àP¿w= ¿wI¿wI¿wL¿wT  ¿w[¿wm  ¿ww¿w}  ¿wà¿áÇÌ¿Å◊Ç/// Push a named route onto the navigator.
///
/// {@macro flutter.widgets.navigator.pushNamed}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _aaronBurrSir() {
///   navigator.pushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamed], which pushes a route that can be restored
///    during state restoration.¿Å·¿Å·¿Å˘¿Ç  ¿Ç¿Ç  ¿Å∏¿Åπ¿ÇxÑS¿Ñ•ÅÈ/// Push a named route onto the navigator.
///
/// {@macro flutter.widgets.navigator.restorablePushNamed}
///
/// {@macro flutter.widgets.navigator.pushNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openDetails() {
///   navigator.restorablePushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}¿Ñπ¿Ñπ¿Ñ—¿ÑŸ  ¿ÑÈ¿ÑÚ  ¿Ñä¿Ñã¿ÜœÉÒ¿â’Ç¥/// Replace the current route of the navigator by pushing the route named
/// [routeName] and then disposing the previous route once the new route has
/// finished animating in.
///
/// {@macro flutter.widgets.navigator.pushReplacementNamed}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _startBike() {
///   navigator.pushReplacementNamed('/jouett/1781');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacementNamed], which pushes a replacement route that
///  can be restored during state restoration.¿âÍ¿âÍ¿â˝¿â˝¿ä¿ä  ¿ä.
¿ä3  ¿ä>¿äG  ¿â∂¿â∑¿äƒÖH¿çùÇë/// Replace the current route of the navigator by pushing the route named
/// [routeName] and then disposing the previous route once the new route has
/// finished animating in.
///
/// {@macro flutter.widgets.navigator.restorablePushReplacementNamed}
///
/// {@macro flutter.widgets.navigator.pushReplacementNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _startCar() {
///   navigator.restorablePushReplacementNamed('/jouett/1781');
/// }
/// ```
/// {@end-tool}¿çº¿çº¿çœ¿çœ¿çË¿ç  ¿é 
¿é  ¿é¿é  ¿çÇ¿çÉ¿êÉ[¿íõÇ;/// Pop the current route off the navigator and push a named route in its
/// place.
///
/// {@macro flutter.widgets.navigator.popAndPushNamed}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _begin() {
///   navigator.popAndPushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePopAndPushNamed], which pushes a new route that can be
///    restored during state restoration.¿í´¿í´¿íæ¿íæ¿í◊¿íﬂ  ¿íÔ
¿íÙ  ¿íˇ¿ì  ¿í|¿í}¿ìoÉD¿ï“Ç/// Pop the current route off the navigator and push a named route in its
/// place.
///
/// {@macro flutter.widgets.navigator.restorablePopAndPushNamed}
///
/// {@macro flutter.widgets.navigator.popAndPushNamed}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _end() {
///   navigator.restorablePopAndPushNamed('/nyc/1776');
/// }
/// ```
/// {@end-tool}¿ïÏ¿ïÏ¿ïˇ¿ïˇ¿ñ¿ñ   ¿ñ0
¿ñ5  ¿ñ@¿ñI  ¿ï∑¿ï∏¿ñ∑ÉË¿ô∑Ç∞/// Push the route with the given name onto the navigator, and then remove all
/// the previous routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.pushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@macro flutter.widgets.Navigator.pushNamed}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _handleOpenCalendar() {
///   navigator.pushNamedAndRemoveUntil('/calendar', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushNamedAndRemoveUntil], which pushes a new route that can
///    be restored during state restoration.¿ôœ¿ôœ¿ôÁ¿ôÔ  ¿ö ¿ö  ¿ö ¿ö)  ¿ôò¿ôô¿ö£ÖH¿ùwÇé/// Push the route with the given name onto the navigator, and then remove all
/// the previous routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.restorablePushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushNamedAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.arguments}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openCalendar() {
///   navigator.restorablePushNamedAndRemoveUntil('/calendar', ModalRoute.withName('/'));
/// }
/// ```
/// {@end-tool}¿ùô¿ùô¿ù±¿ùπ  ¿ù ¿ù⁄  ¿ùÍ¿ùÛ  ¿ù\¿ù]¿üÔÉ6¿¢hÇ'/// Push the given route onto the navigator.
///
/// {@macro flutter.widgets.navigator.push}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _openPage() {
///   navigator.push<void>(
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyPage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePush], which pushes a route that can be restored during
///    state restoration.¿¢m¿¢m¿¢Ä¿¢ä  ¿¢I¿¢J¿£)Ç.¿£.  ¿£I¿£Y   ¿•[ÅS¿•`  ¿•w¿•Å   ¿¶≤Ñ£¿®∞Åƒ/// Push a new route onto the navigator.
///
/// {@macro flutter.widgets.navigator.restorablePush}
///
/// {@macro flutter.widgets.navigator.push}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator_state.restorable_push.0.dart **
/// {@end-tool}¿®ø¿®ø¿®“&¿®Ì  ¿®˚¿©  ¿®ï¿®ñ¿´YÅ±¿´^  ¿´i¿´v   ¿≠Ö%¿≠  ¿≠$¿≠5   ¿≤7Ñà¿µfÇŸ/// Replace the current route of the navigator by pushing the given route and
/// then disposing the previous route once the new route has finished
/// animating in.
///
/// {@macro flutter.widgets.navigator.pushReplacement}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _doOpenPage() {
///   navigator.pushReplacement<void, void>(
///     MaterialPageRoute<void>(
///       builder: (BuildContext context) => const MyHomePage(),
///     ),
///   );
/// }
/// ```
/// {@end-tool}
///
/// See also:
///
///  * [restorablePushReplacement], which pushes a replacement route that can
///    be restored during state restoration.¿µv¿µv¿µâ¿µâ¿µù¿µß  ¿µ≤
¿µ∑  ¿µG¿µH¿∂√Öâ¿π`Ç_/// Replace the current route of the navigator by pushing a new route and
/// then disposing the previous route once the new route has finished
/// animating in.
///
/// {@macro flutter.widgets.navigator.restorablePushReplacement}
///
/// {@macro flutter.widgets.navigator.pushReplacement}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator_state.restorable_push_replacement.0.dart **
/// {@end-tool}¿πz¿πz¿πç¿πç¿π°&¿πº  ¿πÀ
¿π–  ¿π◊¿π‡  ¿πE¿πF¿ºPÇ«¿ºU ¿ºk¿ºk¿º¿ºå  ¿ºí
¿ºó   ¿øÑê¿¬-Çæ/// Push the given route onto the navigator, and then remove all the previous
/// routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.pushAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushNamed.returnValue}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _resetAndOpenPage() {
///   navigator.pushAndRemoveUntil<void>(
///     MaterialPageRoute<void>(builder: (BuildContext context) => const MyHomePage()),
///     ModalRoute.withName('/'),
///   );
/// }
/// ```
/// {@end-tool}
///
///
/// See also:
///
///  * [restorablePushAndRemoveUntil], which pushes a route that can be
///    restored during state restoration.¿¬@¿¬@¿¬S¿¬]  ¿¬f¿¬v  ¿¬¿¬¿√ØÖo¿∆,ÇA/// Push a new route onto the navigator, and then remove all the previous
/// routes until the `predicate` returns true.
///
/// {@macro flutter.widgets.navigator.restorablePushAndRemoveUntil}
///
/// {@macro flutter.widgets.navigator.pushAndRemoveUntil}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}
///
/// {@tool dartpad}
/// Typical usage is as follows:
///
/// ** See code in examples/api/lib/widgets/navigator/navigator_state.restorable_push_and_remove_until.0.dart **
/// {@end-tool}¿∆I¿∆I¿∆\)¿∆w  ¿∆á¿∆ó  ¿∆¢¿∆´  ¿∆¿∆¿…"Çı¿…'  ¿…@¿…M  ¿…S¿…c   ¿ÃÇÚ¿Õ–Åá/// Replaces a route on the navigator with a new route.
///
/// {@macro flutter.widgets.navigator.replace}
///
/// See also:
///
///  * [replaceRouteBelow], which is the same but identifies the route to be
///    removed by reference to the route above it, rather than directly.
///  * [restorableReplace], which adds a replacement route that can be
///    restored during state restoration.¿Õÿ¿Õÿ¿ÕÌ ¿Œ  ¿Œ¿Œ"  ¿Õ∑¿Õ∏¿œÑ∞¿–kÅ,/// Replaces a route on the navigator with a new route.
///
/// {@macro flutter.widgets.navigator.restorableReplace}
///
/// {@macro flutter.widgets.navigator.replace}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿–}¿–}¿–í ¿–´  ¿–¥2¿–ÿ  ¿–Ë¿–Ò  ¿–P¿–Q¿”≈ÉÑ¿”   ¿”ÿ¿”Â  ¿”Î¿”˚   ¿◊MÉ>¿Ÿ%Å®/// Replaces a route on the navigator with a new route. The route to be
/// replaced is the one below the given `anchorRoute`.
///
/// {@macro flutter.widgets.navigator.replaceRouteBelow}
///
/// See also:
///
///  * [replace], which is the same but identifies the route to be removed
///    directly.
///  * [restorableReplaceRouteBelow], which adds a replacement route that can
///    be restored during state restoration.¿Ÿ7¿Ÿ7¿ŸL#¿Ÿe  ¿Ÿq¿ŸÑ  ¿Ÿ¿Ÿ¿⁄èÖ+¿‹FÅá/// Replaces a route on the navigator with a new route. The route to be
/// replaced is the one below the given `anchorRoute`.
///
/// {@macro flutter.widgets.navigator.restorableReplaceRouteBelow}
///
/// {@macro flutter.widgets.navigator.replaceRouteBelow}
///
/// {@macro flutter.widgets.Navigator.restorablePush}
///
/// {@macro flutter.widgets.Navigator.restorablePushNamed.returnValue}¿‹b¿‹b¿‹w#¿‹ê  ¿‹ú2¿‹¿  ¿‹–¿‹Ÿ  ¿‹+¿‹,¿ﬂæÉX¿ﬂ√  ¿ﬂ÷¿ﬂ„  ¿ﬂÈ¿ﬂ˘   ¿„É¿„ˇÄœ/// Whether the navigator can be popped.
///
/// {@macro flutter.widgets.navigator.canPop}
///
/// See also:
///
///  * [Route.isFirst], which returns true for routes for which [canPop]
///    returns false.   ¿Ê!Ü∆¿ËiÇ/// Consults the current route's [Route.willPop] method, and acts accordingly,
/// potentially popping the route as a result; returns whether the pop request
/// should be considered handled.
///
/// {@macro flutter.widgets.navigator.maybePop}
///
/// See also:
///
///  * [Form], which provides an `onWillPop` callback that enables the form
///    to veto a [pop] initiated by the app's back button.
///  * [ModalRoute], which provides a `scopedWillPopCallback` that can be used
///    to define the route's `willPop` method.¿Ër¿Ër¿Ëá	¿Ëã  ¿ËH¿ËI¿ÏÎÖ⁄¿ÔÅœ/// Pop the top-most route off the navigator.
///
/// {@macro flutter.widgets.navigator.pop}
///
/// {@tool snippet}
///
/// Typical usage for closing a route is as follows:
///
/// ```dart
/// void _handleClose() {
///   navigator.pop();
/// }
/// ```
/// {@end-tool}
/// {@tool snippet}
///
/// A dialog box might be closed with a result:
///
/// ```dart
/// void _handleAccept() {
///   navigator.pop(true); // dialog returns true
/// }
/// ```
/// {@end-tool}¿Ô¿Ô¿Ô	¿Ô!  ¿ÓÎ¿ÓÏ¿Ú…ÉD¿ÙÅ+/// Calls [pop] repeatedly until the predicate returns true.
///
/// {@macro flutter.widgets.navigator.popUntil}
///
/// {@tool snippet}
///
/// Typical usage is as follows:
///
/// ```dart
/// void _doLogout() {
///   navigator.popUntil(ModalRoute.withName('/login'));
/// }
/// ```
/// {@end-tool} ¿Ù¿Ù/   ¿ˆÉt¿ˆûÄÅ/// Immediately remove `route` from the navigator, and [Route.dispose] it.
///
/// {@macro flutter.widgets.navigator.removeRoute} ¿ˆ™¿ˆ∫   ¿˘âÑe¿˙cÄÃ/// Immediately remove a route from the navigator, and [Route.dispose] it. The
/// route to be removed is the one below the given `anchorRoute`.
///
/// {@macro flutter.widgets.navigator.removeRouteBelow} ¿˙t¿˙Ñ   ¿˝ÚáM¿ kÇ]/// Complete the lifecycle for a route that has been popped off the navigator.
///
/// When the navigator pops a route, the navigator retains a reference to the
/// route in order to call [Route.dispose] if the navigator itself is removed
/// from the tree. When the route is finished with any exit animation, the
/// route should call this function to complete its lifecycle (e.g., to
/// receive a call to [Route.dispose]).
///
/// The given `route` must have already received a call to [Route.didPop].
/// This function may be called directly from [Route.didPop] if [Route.didPop]
/// will return true. ¿ y¿ â   ¿CÄ˚¿a ¿o¿o¿r	¿z  ¿C¿D¿	HÉê¿
Äº/// The navigator is being controlled by a user gesture.
///
/// For example, called when the user beings an iOS back gesture.
///
/// When the gesture finishes, call [didStopUserGesture].   ¿‹Å≈¿ôÄØ/// A user gesture completed.
///
/// Notifies the navigator that a gesture regarding which the navigator was
/// previously notified with [didStartUserGesture] has completed.   ¿“]¿◊  ¿Í¿¸   ¿3b¿8  ¿Q¿_   ¿ôÉ"¿û    ¿øÑ¿“  ¿ÿ¿Ê  ¿ø¿¿ ¿ áS¿  ¿+: ¿+¿B ¿C	¿I  ¿P¿V¿c¿\¿W¿_¿hÄ´¿á¿à¿ç ¿î¿•  ¿Æ¿¿  ¿Œ¿‹   ¿Ä‘¿5¿6¿? ¿F5¿p  ¿Å¿ì  ¿°¿Ø   ¿ÓÇF¿¿¿" ¿#¿+   ¿8 ¿T  ¿z¿Ç  ¿\¿d    ¿ò¿°    ¿∫v¿¡    ¿4^¿R   ¿4¿5¿ñB¿≤  ¿æ¿Œ  ¿ñ¿ó¿‹Åu¿Ë  ¿ı¿  ¿2¿!  ¿/¿>¿? ¿UÑ0¿[  ¿úÄ∫ ¿ú¿∏ ¿ø¿Œ  ¿◊¿Ê  ¿Ù ¿  ¿¿#¿0¿)¿$¿,¿3¿8¿T¿9¿N¿O¿ZÅ¿~¿¿ì ¿î¿£   ¿!U(¿!k ¿!U¿!V¿!Å¿!é  ¿!ñ¿!§   ¿ }Ä‘¿ ñ   ¿ }¿ ~¿!≤Ä—¿!Õ  ¿!Ÿ¿!È  ¿!≤¿!≥ ¿"áÜ[¿"ç  ¿"“Ä“ ¿"“¿"Ú ¿"˘¿#  ¿#¿#(  ¿#6 ¿#E  ¿#_¿#e¿#z¿#s¿#f¿#v¿#}¿#Ç¿#¢¿#É¿#ò¿#ô¿#®Åÿ¿#–¿#—¿#Â ¿#Ê¿#ı   ¿'ü(¿'µ ¿'ü¿'†¿'À2¿'Ò  ¿(¿(  ¿%ÑÄû¿&
   ¿%Ñ¿%Ö¿&&Åu¿&?   ¿&&¿&'¿(Ä√¿(8  ¿(D¿(T  ¿(¿( ¿(‰ïV¿(Í   ¿){1¿)ó  ¿8…2¿8“    ¿>(¿>%   ¿>¿>	¿)¡äˆ¿)∆  ¿)Õ¿)‡   ¿4ªÇ!¿4¿  ¿4”¿4·  ¿4Ï¿4˙  ¿5'¿5  ¿50¿5>   ¿6‡Å,¿6Â  ¿6ı¿7  ¿7¿7/   ¿8Ä¢¿8    ¿8ˇÇÇ¿9  ¿9'¿95  ¿9:¿9J   ¿;©S¿;—   ¿;©¿;™¿< ÅP¿<(  ¿<7¿<@  ¿< ¿<¿=Tj¿=e  ¿=s!¿=ê  ¿=T¿=U¿=¬J¿=÷   ¿=¬¿=√ ¿B@î¸¿H∑Üp/// Gives access to a [Route] object and its return value that was added to a
/// navigator via one of its "restorable" API methods.
///
/// When a [State] object wants access to the return value of a [Route] object
/// it has pushed onto the [Navigator], a [RestorableRouteFuture] ensures that
/// it will also have access to that value after state restoration.
///
/// To show a new route on the navigator defined by the [navigatorFinder], call
/// [present], which will invoke the [onPresent] callback. The [onPresent]
/// callback must add a new route to the navigator provided to it using one
/// of the "restorable" API methods. When the newly added route completes, the
/// [onComplete] callback executes. It is given the return value of the route,
/// which may be null.
///
/// While the route added via [present] is shown on the navigator, it can be
/// accessed via the [route] getter.
///
/// If the property is restored to a state in which [present] had been called on
/// it, but the route has not completed yet, the [RestorableRouteFuture] will
/// obtain the restored route object from the navigator again and call
/// [onComplete] once it completes.
///
/// The [RestorableRouteFuture] can only keep track of one active [route].
/// When [present] has been called to add a route, it may only be called again
/// after the previously added route has completed.
///
/// {@tool dartpad}
/// This example uses a [RestorableRouteFuture] in the `_MyHomeState` to push a
/// new `MyCounter` route and to retrieve its return value.
///
/// ** See code in examples/api/lib/widgets/navigator/restorable_route_future.0.dart **
/// {@end-tool}¿HÕ¿HÕ¿H¯Å7 ¿Io¿IÑp/// Creates a [RestorableRouteFuture].
///
/// The [onPresent] and [navigatorFinder] arguments must not be null.¿Iã.¿Ië  ¿Iø¿IŒ  ¿I‹¿I‚  ¿I¢¿IÙ¿I˙¿J¿J¿I˚¿J¿J¿J¿J-¿J&¿J¿J)¿J3Å
¿K.Ä÷/// A callback that given the [BuildContext] of the [State] object to which
/// this property is registered returns the [NavigatorState] of the navigator
/// to which the route instantiated in [onPresent] is added. ¿KBÇ:¿MsÅ¸/// A callback that add a new [Route] to the provided navigator.
///
/// The callback must use one of the API methods on the [NavigatorState] that
/// have "restorable" in their name (e.g. [NavigatorState.restorablePush],
/// [NavigatorState.restorablePushNamed], etc.) and return the opaque ID
/// returned by those methods.
///
/// This callback is invoked when [present] is called with the `arguments`
/// Object that was passed to that method and the [NavigatorState] obtained
/// from [navigatorFinder]. ¿MÅÄ ¿NAÄï/// A callback that is invoked when the [Route] added via [onPresent]
/// completes.
///
/// The return value of that route is passed to this method. ¿Q ¿Q‘  ¿SÑ¿Sâ ¿Sï¿PwÄΩ¿QÄí/// Whether the [Route] created by [present] is currently shown.
///
/// Returns true after [present] has been called until the [Route] completes.   ¿Q8Äè¿Q∑j/// The route that [present] added to the Navigator.
///
/// Returns null when currently no route is shown   ¿T.H¿TC   ¿T.¿T/¿TzÄù¿Tç    ¿NPÇ#¿OãÅ)/// Shows the route created by [onPresent] and invoke [onComplete] when it
/// completes.
///
/// The `arguments` object is passed to [onPresent] and can be used to
/// customize the route. It must be serializable via the
/// [StandardMessageCodec]. Often, a [Map] is used to pass key-value pairs. ¿Oî¿Où   ¿Qﬂ1¿QÛ   ¿Qﬂ¿Q‡¿Ru¿R%  ¿R3¿R<  ¿R¿R¿RçÄÑ¿R°   ¿Rç¿Ré¿Sk¿S(  ¿S7¿S@  ¿S¿S¿SüÄã¿S∞   ¿Sü¿S†¿UÅæ¿U   ¿U5	¿U=   ¿V›]¿VÛ  ¿W¿W     ãvÇÈå_Ä„/// Indicates whether the current route should be popped.
///
/// Used as the return value for [Route.willPop].
///
/// See also:
///
///  * [WillPopScope], a widget that hooks into the route's [Route.willPop]
///    mechanism.  åwÄÖå˘y/// Pop the route.
///
/// If [Route.willPop] returns [pop] then the back button will actually pop
/// the current route. ç|çum/// Do not pop the route.
///
/// If [Route.willPop] returns [doNotPop] then the back button will be ignored. çÇÄ⁄éVÄÀ/// Delegate this to the next level of navigation.
///
/// If [Route.willPop] returns [bubble] then the back button will be handled
/// by the [SystemNavigator], which will usually close the application.    ¿∏*Ü¿∏/   ¿∏C¿∏C  ¿∏ƒ¿∏ƒ  ¿π@¿π@  ¿π¿¿π¿  ¿∫¿∫  ¿∫Ä¿∫Ä  ¿∫ƒ¿∫ƒ  ¿ª&¿ª&  ¿ªﬁ¿ªﬁ  ¿º¿º  ¿º1¿º1  ¿º—¿º—  ¿Ω&¿Ω&  ¿Ω‘¿Ω‘  ¿æ¿æ     ¿ 4¿œ   ¿È¿È  ¿Ú	¿Ú         
É◊Ä˘ÑêÄ∞/// Creates a route for the given route settings.
///
/// Used by [Navigator.onGenerateRoute].
///
/// See also:
///
///  * [Navigator], which is where all the [Route]s end up.  Ñ∏Ñ«   Ñ“Ä…Ö;`/// Creates a series of one or more routes.
///
/// Used by [Navigator.onGenerateInitialRoutes].  ÖlÖ|  ÖÜÖé   ÖùÇjá∞Ç
/// Creates a [Route] that is to be added to a [Navigator].
///
/// The route can be configured with the provided `arguments`. The provided
/// `context` is the `BuildContext` of the [Navigator] to which the route is
/// added.
///
/// Used by the restorable methods of the [Navigator] that add anonymous routes
/// (e.g. [NavigatorState.restorablePush]). For this use case, the
/// [RestorableRouteBuilder] must be static function as the [Navigator] will
/// call it again during state restoration to re-create the route.á«á« áﬁáÏ  áÙá˝   à	|àP>/// Signature for the [Navigator.popUntil] predicate argument.  àoà   àáÅâkÄ€/// Signature for a callback that verifies that it's OK to call [Navigator.pop].
///
/// Used by [Form.onWillPop], [ModalRoute.addScopedWillPopCallback],
/// [ModalRoute.removeScopedWillPopCallback], and [WillPopScope].    âóÅ›ã.Åé/// Signature for the [Navigator.onPopPage] callback.
///
/// This callback must call [Route.didPop] on the specified route and must
/// properly update the pages list the next time it is passed into
/// [Navigator.pages] so that it no longer includes the corresponding [Page].
/// (Otherwise, the page will be interpreted as a new page to show when the
/// [Navigator.pages] list is next updated.)  ãNã^  ãdãm   ¿æ3@¿æ;   ¿æ`¿æm   ¿><Å¿?Ä¡/// A callback that given a [BuildContext] finds a [NavigatorState].
///
/// Used by [RestorableRouteFuture.navigatorFinder] to determine the navigator
/// to which a new route should be added.  ¿?8¿?F   ¿?PÅ—¿@»Åo/// A callback that given some `arguments` and a `navigator` adds a new
/// restorable route to that `navigator` and returns the opaque ID of that
/// new route.
///
/// Usually, this callback calls one of the imperative methods on the Navigator
/// that have "restorable" in the name and returns their return value.
///
/// Used by [RestorableRouteFuture.onPresent].  ¿@Ù¿A  ¿A¿A   ¿A#Å¿B	Ä›/// A callback to handle the result of a completed [Route].
///
/// The return value of the route (which can be null for e.g. void routes) is
/// passed to the callback.
///
/// Used by [RestorableRouteFuture.onComplete].¿B!¿B! ¿B4¿B7       ñS <ÄÜÄ§Ä•Ä∫Ä‘ÄÎÅÅ)Å*ÅTÅ}Å¶ÅŒÅœÅ‰Å˚ÇÇ3ÇLÇbÇyÇîÇ∫Ç–ÇÔÇÉÉKÉñÉ∏É÷É◊Ñ	ÑÑ6Ñ:ÑHÑLÑàÑ—Ñ“Ñ˛ÖÖ3ÖúÖùÖŸÖ›Ü)ÜvÜÅÜÖÜ’ááeá®àà	àHàÜàáàÿà‹â!âcâñâóâÕâ—ää_ä≠ä˘ã&ãuãvã∞ã¥ãÊãÍã¯ã¸åHåZåuåäåêåﬁå˜å˛åˇçç!çsççÄçµçªé
éTé^é`éaéõéüéÍè9èàè¨è∞èˆêê#êrêîêòêÁë-ëzë¬ííJíNíèíﬂììì:ì@ìçì°ì˜ì¯î*îYîwîxîõî°î»îŒïïVïuï{ïÀññ`ñ™ñŒñ˘óóófóxó~ó ó‡óÊò5òÖò”ô#ôrô•ôÔöBöCöwöòöºö€ö˘öˇõõõNõÉõ≤õ∂õ∑õ‡õÊú5úsúyú∆ú’ú€ù'ùLùèùêùÃù“û$ûxûΩû⁄ûÁû¯üüüXü^ü¶ü¨ü˘†:†@†è†æ†À†‹†˜°1°f°ò°†°®°¨°≠°Ù°˙¢F¢{¢Å¢–¢ˇ£££/£b£Æ§§U§®§≈§Œ•"•u•ƒ•ˆ¶*¶|¶œß!ßqß√®®D®O®ü®Ì© ©R©\©b©f©g©∂©º™™:™G™X™à™â™Ÿ´´´W´u´{´∆´ˇ¨J¨ñ¨Â≠"≠(≠h≠ã≠ë≠‡ÆÆÆ$Æ*ÆuÆâÆ÷ÆÏØØgØkØlØüØÃØÕ∞∞Y∞_∞Æ∞’∞ı∞ˆ±A±G±ñ±Â±˙≤+≤b≤c≤™≤ˆ≥C≥è≥´≥±≥˛¥L¥ú¥Áµ7µPµVµ¶µˆ∂2∂8∂á∂†∂±∂Ã∂Â∂ˆ∂˙∂˚∑I∑O∑É∑–∏$∏>∏D∏ë∏‚πππhπ∂∫∫O∫\∫m∫ç∫¬∫∆∫«ªª!ª'ªvªéªõª¨ª‹ª›ºº%ºuº≈ΩΩ/Ω5ΩÑΩ£Ω∞Ω¡ΩıΩˆæ<æBæéæﬁø/øIøOøúøøøÃø›¿ @¿ @¿ @]¿ @c¿ @≠¿ @˛¿ AO¿ Aà¿ Aé¿ Aû¿ A§¿ AÓ¿ B,¿ B9¿ BJ¿ Bl¿ Bm¿ Bπ¿ C¿ C¿ CA¿ Cí¿ C’¿ D¿ D\¿ D£¿ D‡¿ DÊ¿ E-¿ Ex¿ Eø¿ E¯¿ E˛¿ FB¿ F\¿ Fb¿ Fr¿ Fx¿ F»¿ FÂ¿ FÚ¿ G¿ G%¿ G&¿ GW¿ G]¿ GÆ¿ Gﬂ¿ GÂ¿ H3¿ HD¿ HJ¿ Hó¿ HÂ¿ I4¿ IE¿ IR¿ Ie¿ I|¿ IÄ¿ IÅ¿ I¬¿ I»¿ I˝¿ J¿ J2¿ JF¿ JL¿ J¨¿ Jˆ¿ K¿ K¿ K<¿ KP¿ KV¿ KÇ¿ KÜ¿ Ká¿ K“¿ Kÿ¿ L(¿ L`¿ Lu¿ Lì¿ Lß¿ L≠¿ M¿ MX¿ Mr¿ My¿ Mû¿ M≤¿ M∏¿ M‰¿ MË¿ MÈ¿ N1¿ N>¿ N_¿ N}¿ Në¿ Nó¿ N”¿ NÙ¿ O
¿ O¿ OE¿ OZ¿ Ob¿ Oh¿ Oz¿ O~¿ O¿ O≠¿ O≥¿ P¿ PS¿ Pè¿ Pï¿ PÁ¿ Q;¿ Qí¿ Q®¿ Q∆¿ Q⁄¿ Q‡¿ R!¿ Ro¿ Râ¿ R§¿ R®¿ R™¿ R´¿ R‰¿ RÔ¿ S¿ S2¿ SJ¿ SY¿ Sm¿ Ss¿ St¿ SΩ¿ S·¿ S¸¿ T¿ T%¿ T,¿ TF¿ Te¿ Tì¿ Tö¿ Tû¿ Tü¿ T–¿ T÷¿ T˝¿ U¿ U¿ U>¿ UD¿ Uî¿ UØ¿ U∞¿ Uº¿ V¿ V¿ V¿ VH¿ VL¿ Vï¿ V‹¿ V‡¿ VÓ¿ VÚ¿ WC¿ WS¿ WÇ¿ WΩ¿ W√¿ WÙ¿ X¿ X¿ X!¿ X6¿ XN¿ XT¿ XU¿ X~¿ XÑ¿ Xƒ¿ X€¿ X‹¿ Y,¿ Y=¿ YC¿ Yì¿ Yô¿ Y©¿ YØ¿ Y¸¿ Z¿ Z-¿ Z.¿ Zl¿ Zr¿ Z¡¿ ZŒ¿ Zˆ¿ [%¿ [B¿ [F¿ [G¿ [Ä¿ [Ü¿ [‹¿ [Á¿ \¿ \¿ \"¿ \z¿ \|¿ \}¿ \ª¿ \’¿ ]¿ ]@¿ ]^¿ ]_¿ ]Ö¿ ]ã¿ ]÷¿ ]˜¿ ^?¿ ^@¿ ^f¿ ^l¿ ^≤¿ ^”¿ _¿ _¿ _B¿ _H¿ _ì¿ _ø¿ _≈¿ `
¿ `U¿ `•¿ `ƒ¿ a¿ a¿ aJ¿ aò¿ aô¿ a€¿ a·¿ b0¿ bl¿ b¿¿ b¡¿ b˛¿ c¿ c@¿ c`¿ cb¿ cc¿ cñ¿ cö¿ c„¿ d1¿ d~¿ dÇ¿ d—¿ e!¿ el¿ e∂¿ eÍ¿ f!¿ f?¿ fN¿ f{¿ fï¿ f∏¿ fπ¿ g
¿ g¿ g:¿ gI¿ gc¿ g}¿ g~¿ gª¿ gﬂ¿ g‡¿ h,¿ h<¿ hp¿ hŸ¿ hˆ¿ h˙¿ h˚¿ i¿ iB¿ iq¿ iu¿ iw¿ ix¿ i«¿ j¿ j8¿ j]¿ jy¿ jz¿ jÀ¿ j—¿ k!¿ kl¿ kê¿ kπ¿ k∫¿ l
¿ l¿ l`¿ l™¿ lŒ¿ lˆ¿ l˜¿ m-¿ m3¿ mÄ¿ mÊ¿ n5¿ nK¿ nL¿ nÑ¿ nä¿ n◊¿ o=¿ oé¿ o£¿ o§¿ o⁄¿ o‡¿ p,¿ p}¿ põ¿ p¿¿ p¡¿ p˝¿ q¿ qO¿ qú¿ qÍ¿ r¿ r¿ rO¿ rU¿ r°¿ rÔ¿ s,¿ sD¿ sF¿ sG¿ sò¿ s¿¿ sƒ¿ t¿ tf¿ tj¿ tµ¿ tπ¿ tÕ¿ u¿ ui¿ uå¿ uê¿ uú¿ uÁ¿ u˜¿ v'¿ vi¿ v…¿ w.¿ w9¿ wà¿ wå¿ wŸ¿ x¿ x5¿ xA¿ xc¿ xg¿ xq¿ x”¿ y¿ y>¿ y™¿ y”¿ z$¿ zS¿ zc¿ zp¿ z|¿ z•¿ z©¿ z≥¿ zÀ¿ z”¿ zŸ¿ z›¿ zÂ¿ zı¿ z˘¿ {¿ {¿ {V¿ {s¿ {¬¿ {¯¿ |¿ |i¿ |á¿ |à¿ |∏¿ |ˆ¿ }R¿ }≥¿ }∫¿ }˜¿ ~'¿ ~e¿ ~°¿ ~®¿ ~Í¿ ~Ò¿ ¿ ]¿ m¿ ∫¿ ·¿ Ä/¿ ÄV¿ Ä•¿ Äˆ¿ Å¿ Å"¿ Å)¿ ÅT¿ Å[¿ Åî¿ Åõ¿ Å…¿ Ç¿ Ç:¿ ÇA¿ Çå¿ ÇŸ¿ ÇÈ¿ ÉD¿ É™¿ ÉÍ¿ Ñ:¿ Ñy¿ Ñ¿¿ Ö,¿ Öl¿ Öx¿ ÖÇ¿ Öä¿ Ö€¿ Ü	¿ Ü5¿ Ü6¿ Üà¿ Ü¨¿ á¿ á¿ áf¿ á∞¿ áº¿ áˆ¿ à&¿ à7¿ àd¿ àn¿ àv¿ àw¿ àÖ¿ àÀ¿ àÓ¿ â>¿ âá¿ âê¿ â£¿ â≠¿ âÆ¿ â¬¿ â∆¿ â«¿ ä¿ ä^¿ äd¿ äµ¿ ä˝¿ ã:¿ ãá¿ ã”¿ å$¿ åN¿ åT¿ å†¿ åÓ¿ ç:¿ çÖ¿ ç‘¿ é¿ él¿ é¢¿ éÓ¿ è9¿ èw¿ è°¿ è“¿ ê!¿ êm¿ êΩ¿ ë¿ ëZ¿ ë®¿ ë∆¿ ëÃ¿ í¿ íi¿ í∏¿ í„¿ íÈ¿ ì9¿ ìv¿ ì¡¿ î¿ îU¿ î§¿ îÊ¿ îÏ¿ ï¿ ï"¿ ïJ¿ ïP¿ ïÜ¿ ïå¿ ï≥¿ ïπ¿ ï‰¿ ñ0¿ ñM¿ ñS¿ ñ|¿ ñÇ¿ ñ…¿ ó¿ ó¿ ó(¿ ó.¿ ó¿ ó•¿ óı¿ ò¿ òm¿ òì¿ òﬂ¿ ô+¿ ô{¿ ôΩ¿ ö¿ öN¿ öz¿ ö∏¿ õ¿ õu¿ õ{¿ õ}¿ õ~¿ õœ¿ ú¿ ú¿ úd¿ ú≤¿ ù¿ ùD¿ ùá¿ ù ¿ ù˜¿ û&¿ û'¿ û3¿ û_¿ ûù¿ û˘¿ üZ¿ üa¿ ü¨¿ ü¸¿ †J¿ †å¿ †ÿ¿ °4¿ °Z¿ °j¿ °r¿ °¨¿ ¢¿ ¢|¿ ¢∑¿ £¿ £¿ £g¿ £q¿ £ë¿ £¸¿ §J¿ §ô¿ §Â¿ •4¿ •q¿ •≈¿ ¶¿ ¶)¿ ¶{¿ ¶ã¿ ¶ô¿ ¶•¿ ¶Ø¿ ¶∑¿ ¶‹¿ ¶›¿ ß1¿ ße¿ ßk¿ ßl¿ ß£¿ ßﬁ¿ ßﬂ¿ ®(¿ ®r¿ ®¶¿ ®˚¿ ©¿ ©/¿ ©Q¿ ©[¿ ©c¿ ©Å¿ ©∑¿ ©Ω¿ ©—¿ ©’¿ ©◊¿ ©ÿ¿ ™"¿ ™&¿ ™u¿ ™ƒ¿ ´¿ ´g¿ ´∏¿ ´ı¿ ´˘¿ ¨¿ ¨¿ ¨e¿ ¨´¿ ¨Ò¿ ≠;¿ ≠Ç¿ ≠¨¿ ≠∞¿ ≠˚¿ ÆE¿ Æì¿ Æﬁ¿ Ø(¿ Øs¿ Ø¬¿ ∞¿ ∞+¿ ∞/¿ ∞J¿ ∞N¿ ∞û¿ ∞Ì¿ ±<¿ ±å¿ ±Ÿ¿ ≤&¿ ≤H¿ ≤L¿ ≤õ¿ ≤Ë¿ ≥ ¿ ≥D¿ ≥H¿ ≥o¿ ≥s¿ ≥¡¿ ¥¿ ¥_¿ ¥x¿ ¥|¿ ¥ ¿ µ¿ µ@¿ µD¿ µP¿ µb¿ µê¿ µñ¿ µû¿ µ¢¿ µÂ¿ ∂/¿ ∂^¿ ∂b¿ ∂n¿ ∂£¿ ∂À¿ ∂‰¿ ∑¿ ∑.¿ ∑M¿ ∑o¿ ∑ç¿ ∑µ¿ ∑∆¿ ∑’¿ ∑‚¿ ∑Ì¿ ∑ˆ¿ ∑˛¿ ∏¿ ∏
¿ ∏P¿ ∏ì¿ ∏ ¿ ∏Œ¿ π¿ πC¿ πG¿ πS¿ πo¿ πw¿ π{¿ π∆¿ ∫¿ ∫R¿ ∫ô¿ ∫π¿ ∫Ω¿ ∫‚¿ ∫Ê¿ ª+¿ ªm¿ ª§¿ ª€¿ ªﬂ¿ º¿ ºN¿ ºñ¿ º‡¿ º‰¿ º¿ Ω¿ Ω¿ ΩV¿ ΩÄ¿ Ω√¿ æ¿ æI¿ æT¿ æ^¿ æd¿ æl¿ æp¿ æç¿ æë¿ æù¿ æ≈¿ æÕ¿ æ—¿ æÛ¿ æ˜¿ ø@¿ øv¿ øz¿ ø»¿ ¿¿ ¿#¿ ¿'¿ ¿p¿ ¿Ø¿ ¿≥¿ ¿ø¿ ¡¿ ¡/¿ ¡F¿ ¡h¿ ¡á¿ ¡ø¿ ¡Ã¿ ¡◊¿ ¡ﬂ¿ ¡Á¿ ¡Ô¿ ¡Û¿ ¬;¿ ¬Ö¿ ¬°¿ ¬•¿ ¬Ò¿ √-¿ √x¿ √…¿ √ÿ¿ √‹¿ √Ò¿ √ı¿ ƒA¿ ƒí¿ ƒ·¿ ≈¿ ≈¿ ≈P¿ ≈ô¿ ≈ﬁ¿ ∆"¿ ∆Y¿ ∆]¿ ∆Æ¿ ∆˚¿ «F¿ «J¿ «`¿ «d¿ «¥¿ »¿ »R¿ »Ö¿ »â¿ »’¿ …#¿ …t¿ …¡¿ …≈¿ …—¿ …ˇ¿  ¿  G¿  {¿  Ñ¿  ◊¿  ˆ¿ À¿ À9¿ ÀÑ¿ Àû¿ À´¿ À∂¿ Àæ¿ À∆¿ ÀŒ¿ À“¿ Ã¿ ÃW¿ Ã•¿ Ã¿ Õ6¿ ÕL¿ ÕP¿ Õk¿ Õo¿ Õª¿ Œ¿ Œ\¿ Œô¿ Œù¿ ŒÆ¿ Œ≤¿ Œˇ¿ œM¿ œà¿ œå¿ œ‹¿ –)¿ –x¿ –≈¿ —¿ —*¿ —.¿ —x¿ —…¿ —·¿ —Â¿ —¯¿ “G¿ “{¿ “¿ “»¿ ”¿ ”¿ ”e¿ ”ñ¿ ”ö¿ ”‰¿ ”Ù¿ ”¯¿ ‘G¿ ‘í¿ ‘·¿ ’1¿ ’_¿ ’c¿ ’|¿ ’Ä¿ ’À¿ ÷¿ ÷a¿ ÷Ø¿ ÷—¿ ÷’¿ ◊¿ ◊0¿ ◊Ä¿ ◊Ø¿ ◊¸¿ ÿM¿ ÿó¿ ÿÂ¿ Ÿ1¿ ŸX¿ Ÿ\¿ Ÿ†¿ ŸÓ¿ ⁄:¿ ⁄Ç¿ ⁄´¿ ⁄˘¿ ⁄ˇ¿ €@¿ €Ö¿ €ã¿ €–¿ €‰¿ €Û¿ ‹¿ ‹1¿ ‹H¿ ‹ì¿ ‹≠¿ ‹∆¿ ›¿ ›=¿ ›o¿ ›ç¿ ›™¿ ›»¿ ›¯¿ ﬁ#¿ ﬁE¿ ﬁx¿ ﬁy¿ ﬁµ¿ ﬁª¿ ﬂ¿ ﬂP¿ ﬂâ¿ ﬂŸ¿ ﬂﬂ¿ ‡)¿ ‡b¿ ‡h¿ ‡∏¿ ·¿ ·T¿ ·•¿ ·Ã¿ ·“¿ ‚¿ ‚m¿ ‚ª¿ ‚˝¿ „¿ „¿ „p¿ „§¿ „™¿ „ı¿ ‰E¿ ‰|¿ ‰ü¿ ‰†¿ ‰Ï¿ Â¿ Â¿ Âg¿ Âñ¿ Âú¿ ÂË¿ Ê¿ Ê¿ Êe¿ Ê¥¿ Á¿ Á<¿ Á`¿ Áa¿ Á±¿ Á”¿ ÁŸ¿ Ë)¿ Ëa¿ Ëb¿ Ëç¿ Ëì¿ Ë√¿ Ë…¿ È¿ ÈH¿ Èf¿ Èg¿ È•¿ ÈÃ¿ ÈÕ¿ Í¿ Í¿ Í^¿ ÍØ¿ Í»¿ ÍŒ¿ Î¿ ÎY¿ Î¿ ÎÄ¿ ÎÆ¿ ÎŸ¿ Î⁄¿ Ï)¿ Ï<¿ ÏB¿ ÏÅ¿ Ï–¿ Ì ¿ ÌW¿ Ì]¿ Ì©¿ Ì˜¿ Ó¿ Ó	¿ ÓL¿ Óò¿ ÓË¿ Ô¿ Ô¿ Ô%¿ Ô+¿ Ôx¿ Ôä¿ Ôÿ¿ Ôˇ¿ J¿ ì¿ ·¿ Ò¿ Ò.¿ ÒR¿ ÒS¿ Òå¿ Òí¿ Ò¢¿ Ò®¿ Ú¿ Ú)¿ ÚW¿ ÚX¿ Ú®¿ Ú’¿ Ú€¿ Û¿ Û¿ Ûa¿ Û±¿ Û«¿ ÛÕ¿ Ù¿ ÙO¿ Ùù¿ ÙÌ¿ ı:¿ ı¿ ıÃ¿ ˆ¿ ˆ$¿ ˆV¿ ˆW¿ ˆ£¿ ˆ—¿ ˆ◊¿ ˜$¿ ˜u¿ ˜¬¿ ˜»¿ ¯¿ ¯G¿ ¯í¿ ¯‚¿ ˘0¿ ˘D¿ ˘J¿ ˘ô¿ ˘Á¿ ˙5¿ ˙Ä¿ ˙ã¿ ˙ë¿ ˙™¿ ˙”¿ ˙‘¿ ˚'¿ ˚^¿ ˚d¿ ˚|¿ ˚ó¿ ˚ò¿ ˚È¿ ˚¯¿ ˚˛¿ ¸4¿ ¸{¿ ¸¡¿ ¸«¿ ˝¿ ˝Z¿ ˝ö¿ ˝æ¿ ˝ƒ¿ ˛¿ ˛#¿ ˛)¿ ˛s¿ ˛y¿ ˛√¿ ˛”¿ ˛Ë¿ ˛Ó¿ ˇ0¿ ˇ~¿ ˇ∑¿ ˇÃ¿ ˇ“¿ ¿ J¿ õ¿ Ë¿¿$¿h¿°¿∂¿º¿“¿ÿ¿˚¿¿¿-¿`¿h¿r¿Ñ¿ä¿†¿¶¿Ú¿ˇ¿¿¿5¿R¿e¿{¿¢¿¿¿‚¿Ô¿˙¿¿¿¿$¿:¿@¿å¿í¿†¿ƒ¿¿-¿K¿Q¿t¿Ø¿π¿¡¿«¿„¿ ¿¿)¿y¿Ñ¿å¿ñ¿®¿Æ¿æ¿ƒ¿¿1¿E¿w¿ë¿©¿¿¿«¿¿¿¿m¿|¿Ç¿¬¿	¿	]¿	ñ¿	´¿	±¿	‰¿	Í¿
4¿
v¿
ø¿¿.¿4¿v¿Ø¿ƒ¿ ¿¿e¿≥¿ ¿M¿i¿~¿Ñ¿ö¿†¿√¿…¿◊¿¯¿¿2¿H¿o¿å¿≠¿∫¿≈¿Õ¿◊¿È¿˝¿5¿O¿g¿~¿Ö¿ﬂ¿„¿‰¿4¿Ç¿…¿œ¿¿\¿©¿Ú¿A¿è¿ÿ¿ﬁ¿%¿k¿q¿Ω¿
¿J¿ò¿Ê¿3¿`¿f¿∑¿≈¿À¿¿Z¿`¿±¿ƒ¿Ÿ¿ﬂ¿¿$¿W¿]¿s¿y¿ú¿¢¿∞¿”¿¿$¿.¿@¿F¿V¿\¿≠¿‡¿Ù¿E¿_¿w¿á¿û¿•¿¿¿¿i¿∑¿˛¿¿O¿ù¿Ï¿.¿C¿I¿á¿ç¿‘¿⁄¿#¿)¿?¿E¿h¿n¿|¿†¿Ô¿˜¿¿¿'¿~¿ò¿∞¿¿¿◊¿ﬁ¿W¿[¿\¿©¿‚¿Ë¿ $¿ e¿ k¿ ∏¿ ˛¿!¿!S¿!î¿!‚¿"1¿"}¿"Ã¿#¿#S¿#Y¿#™¿#∏¿#æ¿$¿$F¿$L¿$•¿$∫¿$¿¿$ˇ¿%¿%8¿%>¿%T¿%Z¿%}¿%É¿%ë¿%µ¿%¸¿&¿&¿& ¿&&¿&6¿&<¿&á¿&≥¿&«¿'¿'-¿'E¿'U¿'l¿'s¿'›¿'·¿'‚¿(/¿(h¿(n¿(¥¿(˝¿)L¿)é¿)£¿)©¿)‚¿)Ë¿*/¿*5¿*~¿*Ñ¿*ö¿*†¿*√¿*…¿*◊¿*ı¿+@¿+H¿+R¿+d¿+x¿+ ¿+‰¿+¸¿,¿,#¿,*¿,û¿,¢¿,£¿,Ò¿-A¿-e¿-k¿-Ø¿-ˆ¿.%¿.+¿.m¿.©¿.Ø¿.˝¿/G¿/M¿/ö¿/«¿/Õ¿0¿0Z¿0t¿0z¿0∆¿1¿1R¿1í¿1‹¿2*¿2x¿2û¿2§¿2ı¿3¿3	¿3W¿3]¿3≠¿3≈¿3⁄¿3‡¿4¿4%¿4X¿4^¿4t¿4z¿4ù¿4£¿4±¿4—¿5,¿54¿5>¿5P¿5V¿5f¿5l¿5º¿5Î¿5ˇ¿6?¿6Y¿6r¿6í¿6©¿6∞¿7¿7 ¿7!¿7o¿7ø¿7„¿7È¿87¿8à¿8◊¿9¿9.¿94¿9u¿9{¿9¬¿9»¿:¿:¿:-¿:3¿:V¿:\¿:j¿:ä¿:Ô¿:˜¿;¿;¿;'¿;m¿;á¿;†¿;¿¿;◊¿;ﬁ¿<T¿<X¿<Y¿<¶¿<ª¿<¡¿<Ú¿=8¿=Ö¿=≈¿=È¿=Ô¿>@¿>N¿>T¿>û¿>≥¿>π¿>¯¿>˛¿?¿?¿?=¿?C¿?Q¿?l¿?ä¿?ù¿?¿¿?ˇ¿@¿@¿@¿@)¿@;¿@A¿@Q¿@W¿@£¿@ø¿@”¿A'¿AU¿AY¿AZ¿A£¿A∏¿Aæ¿A˘¿BG¿Bñ¿B»¿B›¿B„¿C¿C¿CR¿C†¿CÌ¿D3¿DÄ¿Dƒ¿D ¿E¿Ea¿Ev¿E|¿E≈¿EÀ¿E·¿F¿F
¿Ff¿Fx¿Få¿G¿Gh¿Gl¿Gm¿GΩ¿H¿HF¿HL¿Hà¿H‘¿I&¿It¿Iƒ¿J¿JP¿JV¿J¢¿JÔ¿K/¿K}¿Kø¿K≈¿L¿L$¿L*¿Lx¿Lπ¿LŒ¿L‘¿M¿M¿M/¿M5¿MX¿M^¿Ml¿Mä¿Mπ¿MÃ¿MÔ¿N2¿N?¿NJ¿NR¿N\¿Nn¿Nt¿NÑ¿Nä¿N⁄¿O	¿O¿O£¿Oˆ¿O˙¿O˚¿PK¿Pñ¿P–¿P÷¿Q¿Qj¿Q¥¿Qˆ¿R¿R¿RJ¿RP¿Rà¿Ré¿R◊¿R›¿RÛ¿S¿S¿SÑ¿Sñ¿S™¿T^¿T’¿TŸ¿T⁄¿U'¿Un¿Ué¿Uî¿U”¿V¿VI¿VO¿Vë¿VÕ¿V”¿W!¿Wk¿Wq¿Wæ¿WÎ¿WÒ¿X7¿Xà¿X“¿Y"¿Yk¿Y∏¿Z¿ZI¿ZO¿Z†¿ZÆ¿Z¥¿[¿[¿[¿[\¿[b¿[x¿[~¿[°¿[ß¿[µ¿[€¿\¿\¿\t¿\ò¿\£¿\´¿\µ¿\«¿\Õ¿\›¿\„¿]-¿]Y¿]m¿]Ï¿^9¿^=¿^>¿^á¿^Œ¿^Ó¿^Ù¿_=¿_é¿_ÿ¿`¿`/¿`5¿`q¿`w¿`Ø¿`µ¿`˛¿a¿a¿a=¿aC¿a∞¿a¬¿a÷¿bà¿b¸¿c ¿c¿cN¿cn¿ct¿c®¿cÙ¿dC¿dí¿d‚¿e
¿e¿e`¿eà¿eé¿eﬂ¿f¿fn¿f∂¿g¿gT¿gm¿gs¿g√¿gÂ¿gÎ¿h9¿hN¿hT¿hd¿hj¿hπ¿i¿iM¿iy¿iç¿j¿je¿ji¿jj¿j∑¿j◊¿j›¿k¿kj¿kπ¿kÎ¿l ¿l¿l7¿l=¿lu¿l{¿lƒ¿lÿ¿mí¿n¿n¿n¿ng¿nµ¿n–¿n÷¿o¿o^¿o≠¿o¸¿pL¿pt¿pz¿p ¿pÚ¿p¯¿qI¿qà¿qÿ¿r ¿rm¿ræ¿r◊¿r›¿s+¿s@¿sF¿sV¿s\¿s©¿sº¿t¿t;¿tO¿tﬂ¿uD¿uH¿uI¿uñ¿u‰¿uˇ¿v¿vM¿võ¿vÈ¿w1¿wF¿wL¿wá¿wç¿w≈¿wÀ¿x¿x(¿xÔ¿yÇ¿yÜ¿yá¿y◊¿yÂ¿yÎ¿z¿zm¿zΩ¿z÷¿z‹¿{¿{+¿{1¿{A¿{G¿{í¿{™¿{◊¿|¿|M¿|Q¿|R¿|£¿|Ù¿}¿}¿}S¿}û¿}Ô¿~¿~¿~W¿~ò¿~û¿~Ó¿<¿z¿Ä¿—¿Ä¿Ä¿Äi¿Ä¥¿Ä√¿Äÿ¿Äﬁ¿ÄÓ¿ÄÙ¿ÅB¿Å¿Å–¿Ç¿Ç¿Çn¿Ç§¿Ç®¿Ç©¿Ç˜¿É¿É¿ÉB¿Éí¿É‡¿Ñ%¿Ñr¿Ñx¿Ñƒ¿Ö¿Ö[¿Ö™¿Ö¯¿ÜC¿ÜI¿Üô¿ÜË¿á(¿áK¿áQ¿á¢¿á®¿áı¿à¿à1¿à7¿àM¿àS¿àä¿àê¿àû¿à¥¿à‘¿à‹¿àÊ¿à¯¿à˛¿â0¿â6¿âD¿â[¿âò¿â†¿â™¿âæ¿ä
¿ä4¿ä8¿ä9¿äÜ¿äº¿ä¬¿ä˜¿ã>¿ãm¿ãs¿ãº¿ãÁ¿ãÌ¿å,¿å2¿åx¿åç¿åì¿å©¿åØ¿å“¿åÿ¿åÊ¿å˝¿çA¿çI¿çS¿çe¿çÆ¿ç›¿ç·¿ç‚¿é1¿éb¿éh¿é†¿é¿è=¿èU¿è[¿è†¿èÔ¿ê7¿êÉ¿ê‘¿êÌ¿êÛ¿ë=¿ë[¿ëa¿ëü¿ë¥¿ë∫¿í¿í?¿íá¿íº¿í¿¿í¡¿ì¿ì`¿ìâ¿ìè¿ìÃ¿î¿îi¿îÅ¿îá¿îÃ¿ï¿ïc¿ïØ¿ñ ¿ñ¿ñ¿ñp¿ñ∏¿ñæ¿ñ¸¿ó¿ód¿ó§¿ó®¿ó©¿ó˘¿ò¿ò¿ò1¿ò7¿òE¿òa¿òq¿òÅ¿ò£¿ò≠¿ò≥¿ô¿ôM¿ôx¿ô~¿ôœ¿ö¿ö¿ö]¿öy¿öï¿öµ¿öº¿õ¿õ#¿õl¿õü¿õ•¿õæ¿ú¿ú!¿ús¿úy¿úz¿úä¿ú©¿ú≈¿ù#¿ù|¿ùº¿ù«¿ùœ¿ù‚¿ùÏ¿û¿û¿û¿ûX¿ûo¿ûu¿ûò¿ûû¿û¨¿ûÔ¿ü¿ü*¿ü<¿üN¿ür¿üz¿üÑ¿üä¿ü€¿†$¿†O¿†U¿†¢¿†®¿†Ë¿°
¿°&¿°F¿°M¿°ï¿°¥¿°˝¿¢0¿¢6¿¢O¿¢•¿¢≤¿£¿£
¿£ ¿£$¿£%¿£\¿£b¿£±¿£”¿£Ÿ¿§*¿§x¿§∆¿§‹¿§‚¿•2¿•~¿•Õ¿¶¿¶x¿¶∂¿ß¿ßN¿ß¿ß§¿ß∂¿ß¯¿®¿®¿®â¿®Ã¿®ı¿©¿©D¿©e¿©{¿©®¿©¡¿©—¿™4¿™>¿™F¿™g¿™{¿™ü¿™¿¿™Ÿ¿´¿´Y¿´À¿¨ ¿¨/¿¨<¿¨S¿¨a¿¨y¿¨Å¿¨¬¿≠-¿≠o¿≠’¿≠€¿Æ¿Æ!¿Æm¿Æº¿Ø¿Ø%¿Øg¿ØÅ¿Ø‡¿ØÊ¿∞¿∞¿∞¿∞!¿∞U¿∞W¿∞X¿∞è¿∞í¿∞ƒ¿∞È¿±¿±4¿±[¿±à¿±Ø¿±’¿≤¿≤5¿≤e¿≤ï¿≤≈¿≤ı¿≥)¿≥Y¿≥à¿≥∂¿≥„¿¥¿¥:¿¥\¿¥Ü¿¥∞¿¥ﬁ¿µ¿µ-¿µR¿µ}¿µ•¿µÕ¿µı¿∂¿∂F¿∂k¿∂ê¿∂π¿∂ﬁ¿∑¿∑7¿∑d¿∑g¿∑≥¿∑⁄¿∏*¿∏A¿∏ö¿∏ü¿∏Ω¿∏¬¿π>¿πì¿πæ¿∫¿∫~¿∫¬¿ª$¿ªG¿ªL¿ªn¿ªs¿ª‹¿º ¿º/¿ºg¿ºœ¿Ω$¿Ωä¿Ω“¿æ¿æ0¿æ2¿æ3¿æt¿æu¿æü¿æ⁄¿ø'¿øG¿øI¿øJ¿ø|¿øã¿øù¿ø ¿øÌ¿¿¿¿4¿¿E¿¿{¿¿≠¿¿‡¿¡¿¡N¿¡Z¿¡Ä¿¡Å¿¡ç¿¡´¿¡‰¿¡Â¿¬¿¬¿¬>¿¬ß¿√
¿√k¿√l¿√º¿ƒ¿ƒ ¿ƒp¿ƒ∏¿ƒÀ¿≈¿≈Y¿≈_¿≈â¿≈…¿≈œ¿≈‡¿≈‰¿≈Â¿∆¿∆¿∆?¿∆Y¿∆m¿∆s¿∆á¿∆õ¿∆°¿∆Ê¿«¿«¿«¿«u¿«¶¿«≈¿«È¿»¿»1¿»F¿»s¿»û¿»…¿…¿…	¿…¿…¿…∞¿ <¿ [¿ ¿ ã¿ ´¿ ¯¿À ¿À'¿À_¿ÀÅ¿Àñ¿À√¿Ã"¿ÃZ¿Ãà¿Ã¥¿ÃÎ¿Õ¿ÕE¿Õç¿Õπ¿Œ¿Œ¿Œ¿Œ#¿ŒZ¿Œ|¿Œß¿Œ≠¿Œ√¿Œ‰¿ŒÍ¿ŒÎ¿œO¿œ|¿œ∫¿œ√¿œ–¿–¿–2¿–m¿–v¿–|¿–Ä¿–Å¿–∑¿–⁄¿—
¿—¿—¿—5¿—;¿—à¿—À¿——¿“"¿“>¿“¢¿“¡¿“Â¿”¿”<¿”g¿”±¿”˜¿‘¿‘3¿‘F¿‘L¿‘t¿‘ü¿‘≥¿‘π¿‘”¿‘‰¿‘Ë¿‘È¿’¿’)¿’C¿’í¿’Ω¿’¡¿’¬¿÷*¿÷I¿÷m¿÷ò¿÷≈¿÷È¿◊¿◊S¿◊\¿◊b¿◊f¿◊g¿◊∑¿◊À¿◊Ù¿ÿ
¿ÿ+¿ÿ1¿ÿ5¿ÿ6¿ÿO¿ÿP¿ÿk¿ÿÇ¿ÿû¿ÿ∆¿ÿ ¿ÿÀ¿ÿÛ¿ÿÙ¿Ÿ#¿ŸP¿Ÿ\¿Ÿã¿Ÿ€¿⁄)¿⁄0¿⁄n¿⁄|¿⁄Ç¿⁄ô¿⁄≈¿⁄¿⁄Ù¿⁄ı¿€(¿€d¿€p¿€ü¿€Ô¿‹=¿‹D¿‹Ç¿‹ê¿‹ñ¿‹≠¿‹Ÿ¿‹ı¿›"¿›&¿›'¿›;¿›{¿›ß¿›´¿›¨¿›ø¿ﬁ ¿ﬁ-¿ﬁ.¿ﬁ~¿ﬁÀ¿ﬂ¿ﬂ\¿ﬂ≠¿ﬂÆ¿‡¿‡¿‡>¿‡U¿‡b¿‡ç¿‡®¿‡·¿·¿·¿·<¿·^¿·s¿·ù¿·ª¿‚¿‚(¿‚4¿‚?¿‚d¿‚l¿‚r¿‚v¿‚w¿‚í¿‚—¿„¿„¿„¿„)¿„j¿„¶¿„™¿„´¿‰¿‰¿‰)¿‰l¿‰©¿‰≠¿‰Æ¿‰⁄¿Â¿ÂX¿Â\¿Â]¿Âú¿ÂÕ¿Ê¿ÊW¿Êe¿ÊÄ¿Ê∞¿ÊÔ¿Êˆ¿Ê˙¿Ê˚¿ÁC¿Áµ¿Ë¿Ë¿ËM¿ËÖ¿Ëâ¿Ëä¿Ëñ¿ËÍ¿ËÎ¿Ë˜¿È?¿Èl¿Èm¿È∑¿È∏¿Èƒ¿È€¿ÈÁ¿Í+¿Í}¿Í–¿Í◊¿Î ¿Î¿Î¿Î¿Î'¿Î3¿Îw¿Î»¿Ï¿Ï"¿ÏJ¿ÏN¿ÏO¿Ï[¿ÏÅ¿Ïç¿Ïﬁ¿Ì/¿ÌÉ¿Ìä¿Ì§¿ÌŒ¿Ì“¿Ì”¿Ìﬂ¿Ó
¿Ó¿Óg¿Ó∏¿Ô¿Ô¿Ô!¿Ô@¿Ôj¿Ôn¿Ôo¿Ô{¿Ôî¿Ô†¿ÔÒ¿@¿î¿¢¿©¿∑¿·¿Â¿Ê¿Ò/¿ÒV¿ÒÉ¿Ò¡¿Ò≈¿Ò«¿Ò»¿ÒÔ¿Ú¿Ú¿Ú8¿Ú=¿Úb¿Úä¿Úã¿Ú∂¿Ú∏¿Úπ¿Ú˘¿Û¿Û.¿ÛH¿ÛM¿ÛN¿ÛZ¿ÛÜ¿Û∫¿Ûæ¿Û¿¿Û¡¿Ù ¿Ù¿Ù4¿ÙN¿ÙS¿ÙT¿Ù`¿Ùå¿Ùø¿Ù√¿Ù≈¿Ù∆¿ı¿ı'¿ı?¿ıY¿ı^¿ı_¿ık¿ıó¿ıÕ¿ı—¿ı”¿ı‘¿ˆ¿ˆ7¿ˆO¿ˆi¿ˆn¿ˆo¿ˆ{¿ˆß¿ˆÚ¿ˆˆ¿ˆ¯¿ˆ˘¿˜!¿˜%¿˜n¿˜Œ¿˜˙¿¯*¿¯n¿¯Õ¿˘,¿˘-¿˘w¿˘Œ¿˘œ¿˙*¿˙+¿˙W¿˙X¿˙å¿˙ç¿˙ô¿˙Æ¿˙≈¿˙’¿˚
¿˚3¿˚W¿˚{¿˚ú¿˚√¿¸¿¸.¿¸?¿¸h¿¸ë¿¸†¿¸≠¿¸‹¿˝ ¿˝!¿˝H¿˝è¿˝∂¿˝«¿˝¿˛¿˛(¿˛5¿˛?¿˛G¿˛Z¿˛d¿˛•¿˛œ¿˛Ò¿˛˜¿ˇ#¿ˇ$¿ˇq¿ˇ¶¿ˇ„¿ )¿ Q¿ ç¿ é¿ ª¿ Ì¿ Û¿ ˜¿ ¯¿7¿é¿è¿Ë¿È¿ı¿>¿Ñ¿¡¿¬¿¿'¿N¿T¿r¿ü¿†¿◊¿$¿Y¿Ü¿©¿‘¿›¿Î¿¿a¿∞¿π¿‘¿$¿*¿+¿y¿¢¿‘¿ˆ¿9¿A¿c¿|¿¶¿∏¿˜¿.¿C¿t¿∂¿Á¿	¿	8¿	¿	ë¿	©¿	∏¿	≈¿	–¿	ÿ¿	ﬁ¿	ﬂ¿	Î¿
¿
R¿
†¿
Ì¿
¿¿,¿d¿Ä¿π¿Ω¿æ¿ ¿¿'¿A¿n¿{¿ü¿•¿©¿µ¿Ô¿¿¸¿¿@¿|¿¨¿÷¿‹¿‡¿·¿#¿\¿É¿ÿ¿Ï¿;¿ã¿º¿Ò¿@¿ë¿‚¿%¿ã¿æ¿¿`¿Ñ¿¡¿Ì¿¿E¿õ¿Ó¿¿<¿ë¿„¿¿3¿d¿ï¿¨¿¡¿”¿„¿Û¿ˇ¿¿$¿Q¿Y¿©¿¬¿¸¿1¿9¿m¿ê¿ñ¿ö¿õ¿¿¿Ï¿K¿X¿Ü¿å¿ê¿ë¿ù¿À¿Ò¿¿6¿_¿É¿ß¿»¿Ô¿3¿Z¿k¿î¿Ω¿Ã¿Ÿ¿¿,¿M¿t¿ª¿‚¿Û¿¿E¿T¿a¿k¿s¿Ü¿ê¿√¿	¿-¿5¿x¿§¿»¿–¿Û¿˘¿7¿I¿m¿ë¿≤¿Ÿ¿¿D¿U¿~¿ß¿∂¿√¿Õ¿‚¿Ó¿ ¿ 
¿ ¿ ;¿ e¿ k¿ o¿ p¿ ô¿ ©¿ ÿ¿!¿!7¿!R¿!É¿!¶¿!∞¿!∏¿!À¿!’¿!Ÿ¿!⁄¿!Ê¿!¸¿"@¿"b¿"h¿"Ä¿"Ñ¿"Ö¿"ë¿"•¿"ª¿"ˇ¿#)¿#K¿#Q¿#U¿#V¿#b¿#u¿#ê¿#†¿#ª¿#Œ¿#ÿ¿#Ë¿$.¿$[¿$c¿$v¿$Ä¿$°¿$ø¿$Ô¿%¿%¿%!¿%Z¿%t¿%x¿%y¿%º¿%ı¿%ˆ¿&-¿&H¿&x¿&ü¿&¶¿&™¿&´¿&Œ¿&œ¿&Ú¿'
¿'¿'=¿'d¿'Ö¿'ò¿'¢¿'£¿'Á¿(1¿({¿(¬¿(…¿(¯¿)¿)k¿)ö¿)Ë¿*¿*Z¿*´¿*¨¿*˛¿+S¿+Ü¿+—¿,¿,j¿,ã¿,œ¿,˜¿-;¿-K¿-Ü¿-‘¿-ı¿.1¿.w¿.∆¿.‰¿/.¿/I¿/ó¿/√¿/˝¿/˛¿0&¿0B¿0`¿0è¿0º¿0Ω¿0˜¿1g¿1h¿1è¿1ª¿1Î¿2*¿2¿2»¿2Á¿3¿3^¿3É¿3§¿3Ø¿3’¿3Ù¿4¿4¿48¿4G¿4O¿4ë¿4ø¿4Œ¿4÷¿5¿51¿5Q¿5l¿5â¿5è¿5ê¿5≤¿6¿6¿6i¿6•¿6˙¿7¿7i¿7å¿7®¿7∫¿7¬¿8¿8/¿8>¿8F¿8ñ¿8 ¿8Í¿9¿9¿9"¿9]¿9à¿9â¿9€¿:¿:b¿:Ø¿:«¿;¿;:¿;¿;¢¿;∞¿;Ã¿<¿<¿<_¿<n¿<ç¿<ü¿<ß¿<®¿<»¿<…¿=¿=¿=3¿=E¿=M¿=N¿=s¿=ô¿=´¿=≥¿=Î¿>¿> ¿>!¿>H¿>t¿>∑¿>“¿>›¿>˝¿?5¿?w¿?Å¿?—¿@¿@<¿@n¿@ó¿@»¿@”¿@˘¿A	¿A8¿Aä¿A€¿AÊ¿B¿B¿Bb¿Bµ¿BÏ¿C#¿CJ¿CR¿CX¿CY¿C´¿D8¿Dh¿Dµ¿D“¿D”¿E ¿E3¿E~¿Eñ¿EΩ¿E‡¿EÌ¿F!¿Fè¿FÃ¿F÷¿FË¿F¿FÒ¿G[¿G´¿G˜¿H¿HJ¿Hê¿HÕ¿I%¿Ik¿Iü¿I‹¿IÊ¿IÓ¿J(¿J.¿J/¿JT¿Já¿J∂¿J·¿K
¿K_¿Ky¿Kâ¿K∏¿KË¿L¿Lj¿Ly¿L¶¿LÆ¿L∏¿Lπ¿L›¿M2¿Mq¿M∆¿MÂ¿N¿Nc¿N{¿N†¿N√¿NŒ¿NÙ¿O¿O¿O:¿O|¿O´¿O⁄¿O˙¿P¿P2¿P8¿P9¿Pá¿P„¿Q¿Q4¿Qk¿Qî¿Q‘¿R¿R/¿R5¿RU¿Ré¿R≈¿R˛¿S¿S4¿SP¿Sã¿S»¿S–¿S÷¿T¿TK¿Tg¿T†¿T§¿T•¿T∆¿T«¿U¿U6¿US¿U¢¿UÒ¿VB¿Vâ¿VÆ¿V≈¿VÔ¿W3¿W∞¿X¿Xv¿X≤¿XÀ¿X¿Y¿Y6¿YQ¿Yn¿YŒ¿Y€¿Z¿Z/¿ZT¿ZÑ¿Zû¿ZΩ¿ZÂ¿ZÙ¿[4¿[J¿[V¿[g¿[ä¿[¥¿[⁄¿[˛¿\¿\7¿\^¿\æ¿\‰¿\Ò¿]/¿]t¿]µ¿]Ò¿^¿^¿^$¿^|¿^∏¿^È¿^ı¿_¿_+¿_N¿_ä¿_ª¿_«¿_Ï¿`>¿`{¿`ú¿`≠¿`œ¿`Ô¿a¿av¿a∂¿aÃ¿aÿ¿a˝¿b$¿bW¿be¿bå¿bò¿bø¿c5¿cB¿cÅ¿cŒ¿cÔ¿d¿d¿dR¿ds¿dÑ¿d™¿dÊ¿d˜¿e¿e@¿eÄ¿eî¿eπ¿eﬁ¿f¿f8¿fF¿ff¿fr¿fë¿fÆ¿g¿g¿g]¿gq¿gò¿g…¿h¿h¿h#¿h[¿ho¿hï¿hÁ¿i¿i5¿iF¿im¿iì¿i¨¿iΩ¿i≈¿i◊¿iÎ¿j¿j<¿jB¿jz¿jù¿jû¿jÍ¿k ¿k¿k ¿kD¿kq¿kø¿l¿l(¿lh¿lØ¿lı¿m"¿m*¿m0¿m1¿m¿må¿m¿¿n¿n+¿n3¿nJ¿nP¿nl¿nü¿n•¿nø¿nÏ¿nÚ¿o¿o¿o¿o<¿oc¿oä¿o±¿oø¿o≈¿oˆ¿pL¿pÉ¿pâ¿pä¿pª¿q¿qI¿qO¿qS¿qT¿qw¿qú¿qµ¿qÊ¿r¿r&¿r8¿r@¿r∞¿r±¿rÍ¿s'¿sY¿sc¿só¿sü¿t¿tU¿tç¿t…¿t—¿t„¿tÈ¿tÌ¿tÓ¿u:¿ui¿uô¿uù¿uû¿u·¿v¿v*¿v0¿vB¿vF¿vG¿ví¿v◊¿vÈ¿vÔ¿w,¿w0¿w1¿wì¿wÆ¿w»¿wˇ¿x¿x¿x(¿xT¿xp¿xŒ¿y+¿yy¿y†¿y¡¿y÷¿y·¿yÈ¿y¸¿z¿z8¿zJ¿zf¿zm¿z≥¿z⁄¿zÏ¿{¿{S¿{ø¿{›¿|<¿|k¿|z¿|Ò¿|ˇ¿}	¿}¿}*¿}g¿}y¿}ñ¿}–¿~;¿~ê¿¿¿¿4¿@¿F¿n¿Ä¿Ñ¿Ö¿≤¿∏¿Î¿Ò¿Ä0¿Ä6¿Äi¿Äo¿ÄÖ¿Äã¿ÄÆ¿Ä¥¿Ä¬¿Äﬂ¿Å	¿Å¿Å¿Å-¿Å3¿ÅC¿ÅI¿Åì¿Å∂¿Å ¿Åı¿Ç¿Ç$¿Ç+¿Çq¿Çu¿Çv¿Ç£¿Ç©¿ÇÊ¿ÇÏ¿É¿É%¿Él¿Ér¿Éª¿É¡¿É◊¿É›¿Ñ ¿Ñ¿Ñ¿Ñ0¿Ñd¿Ñl¿Ñv¿Ñà¿Ñú¿ÑÕ¿ÑÂ¿Ñ¸¿Ö¿Ö"¿Öß¿Ö‰¿Ö˚¿Ü¿ÜR¿Üê¿Üß¿Ü»¿ÜÃ¿ÜÕ¿á¿áh¿áÖ¿áã¿á…¿áœ¿à¿à¿àG¿àM¿àc¿ài¿àå¿àí¿à†¿à∫¿àÚ¿à˙¿â¿â¿â¿â,¿â2¿âÉ¿â¥¿â»¿ä¿ä*¿ä:¿äQ¿äX¿äΩ¿ä¡¿ä¬¿ã¿ã]¿ãz¿ãÄ¿ã»¿ãŒ¿å¿å¿åY¿å_¿å®¿åÆ¿åƒ¿å ¿åÌ¿åÛ¿ç¿ç¿ç\¿çd¿çn¿çÄ¿çî¿ç‰¿ç¸¿é¿é#¿é*¿éI¿éŒ¿è¿è"¿è>¿èy¿èæ¿èË¿ê	¿ê¿ê¿êZ¿êg¿êm¿ê¶¿ê¨¿êÎ¿êÒ¿ë$¿ë*¿ë@¿ëF¿ëi¿ëo¿ë}¿ëì¿ë√¿ëÀ¿ë’¿ëÁ¿ëÌ¿ë˝¿í¿íN¿íz¿íé¿í”¿íÎ¿í˚¿ì¿ì¿ì.¿ìh¿ìl¿ìm¿ìπ¿ì∆¿ìÃ¿î¿î¿îN¿îT¿îõ¿î°¿îÍ¿î¿ï¿ï¿ï/¿ï5¿ïC¿ïW¿ïë¿ïô¿ï£¿ïµ¿ï…¿ñ¿ñ,¿ñ<¿ñS¿ñZ¿ño¿ñ∞¿ñ¥¿ñµ¿ó¿óD¿óJ¿óã¿óë¿ó–¿ó÷¿ò	¿ò¿ò%¿ò+¿òN¿òT¿òb¿òÖ¿ò◊¿òﬂ¿òÈ¿ò˚¿ô¿ô¿ô¿ôg¿ôñ¿ô™¿ô„¿ô¸¿ö¿ö3¿ö:¿öú¿ö†¿ö°¿öÚ¿õ0¿õ6¿õÅ¿õá¿õ»¿õŒ¿ú¿ú¿úd¿új¿úÄ¿úÜ¿ú©¿úØ¿úΩ¿ú⁄¿ù6¿ù>¿ùH¿ùZ¿ùn¿ù≠¿ù∆¿ùÊ¿ù˝¿û¿û&¿û´¿ûË¿ü¿ü¿üY¿üó¿ü«¿üË¿üÏ¿üÌ¿†¿†"¿†P¿†V¿†ï¿†õ¿†±¿†∑¿†⁄¿†‡¿†Ó¿°¿°%¿°H¿°á¿°î¿°ü¿°ß¿°±¿°√¿°…¿°Ÿ¿°ﬂ¿¢+¿¢G¿¢[¿¢í¿¢¡¿£	¿£"¿£&¿£'¿£a¿£q¿£ï¿£∑¿£÷¿£˚¿§M¿§©¿§∏¿§ﬂ¿•¿•¿•¿•&¿•9¿•C¿•T¿•X¿•Y¿•å¿••¿•µ¿¶*¿¶{¿¶é¿¶ò¿¶´¿¶Ø¿¶∞¿¶€¿¶·¿ß¿ß¿ßM¿ßS¿ßã¿ßë¿ß⁄¿ß‡¿ßˆ¿®¿®¿®Å¿®ì¿®ß¿©¿©3¿©ù¿™"¿™c¿™Ö¿™°¿™‹¿´¿´1¿´R¿´V¿´W¿´~¿´ô¿´©¿´ƒ¿´◊¿´·¿¨¿¨.¿¨f¿¨¿¨õ¿¨´¿¨«¿¨⁄¿¨‰¿≠¿≠¿≠¿≠=¿≠V¿≠¶¿≠Ô¿Æ5¿Æ6¿Æa¿Æ|¿Æ©¿Æ™¿ÆÃ¿Æ˝¿Ø?¿Øs¿ØÑ¿Ø¶¿Ø∞¿Ø‰¿ØÂ¿∞¿∞f¿∞á¿∞í¿∞º¿∞Ú¿±¿±J¿±W¿±a¿±ó¿±ü¿±†¿±„¿≤¿≤¿≤¿≤0¿≤4¿≤5¿≤Ö¿≤Õ¿≤·¿≤Á¿≥ ¿≥&¿≥e¿≥k¿≥Å¿≥á¿≥™¿≥∞¿≥æ¿≥Ÿ¿¥¿¥+¿¥n¿¥{¿¥Ü¿¥é¿¥ò¿¥™¿¥∞¿¥¿¿¥∆¿µ¿µE¿µY¿µ¬¿µ‡¿∂	¿∂;¿∂†¿∂º¿∂¿¿∂¡¿∑¿∑U¿∑i¿∑o¿∑≤¿∑∏¿∑Ò¿∑˜¿∏/¿∏5¿∏~¿∏Ñ¿∏ö¿∏Ω¿∏√¿π1¿πC¿πW¿πÓ¿∫¿∫z¿∫ˇ¿ª@¿ªb¿ª~¿ªπ¿ª˛¿º(¿ºI¿ºM¿ºN¿º†¿ºª¿ºÀ¿ºÊ¿º˘¿Ω¿Ω$¿ΩP¿Ωq¿ΩŸ¿æ¿æs¿æå¿æ®¿æ∏¿æ‘¿æÁ¿æÒ¿ø¿ø¿ø¿øi¿øö¿ø†¿ø‹¿ø‚¿¿!¿¿'¿¿=¿¿C¿¿f¿¿l¿¿z¿¿õ¿¿«¿¡!¿¡E¿¡P¿¡X¿¡b¿¡t¿¡z¿¡Ä¿¡ê¿¡ñ¿¡‡¿¬¿¬ ¿¬Ç¿¬†¿¬…¿¬ˆ¿√(¿√å¿√®¿√¨¿√≠¿√˘¿ƒ*¿ƒ0¿ƒv¿ƒ|¿ƒ∏¿ƒæ¿ƒˆ¿ƒ¸¿≈E¿≈K¿≈a¿≈Ñ¿≈ä¿≈˝¿∆¿∆#¿∆∏¿∆›¿«J¿«œ¿»¿»5¿»Q¿»å¿» ¿»˙¿…¿…¿… ¿…o¿…ä¿…ö¿…µ¿…»¿…“¿…Û¿ ¿ O¿ n¿ ¶¿ À¿ ‰¿À"¿ÀI¿Àk¿Às¿ÀÖ¿Àã¿Àß¿À®¿À∏¿À‘¿ÀÁ¿ÀÒ¿Ã¿Ã¿Ã¿ÃS¿ÃY¿Ãä¿Ãê¿Ã†¿Ã¶¿Ãı¿Õ@¿Õâ¿Õµ¿Õ…¿Œ/¿ŒJ¿Œh¿Œë¿ŒØ¿œ
¿œ¿œ¿œI¿œO¿œä¿œê¿œ¡¿œ«¿œˇ¿–¿–N¿–b¿–ˇ¿—¿—F¿—k¿—ÿ¿“]¿“{¿“º¿“·¿“˝¿”8¿”y¿”ù¿”æ¿”¬¿”√¿‘¿‘!¿‘D¿‘R¿‘X¿‘h¿‘É¿‘ñ¿‘†¿‘€¿’¿’Z¿’≠¿÷¿÷K¿÷r¿÷†¿÷º¿÷Ã¿÷Ë¿÷˚¿◊¿◊¿◊@¿◊F¿◊J¿◊K¿◊ï¿◊Œ¿◊‘¿ÿ¿ÿ¿ÿ%¿ÿ+¿ÿx¿ÿã¿ÿ€¿Ÿ
¿Ÿ¿Ÿë¿ŸØ¿Ÿÿ¿Ÿ˘¿⁄%¿⁄à¿⁄å¿⁄ç¿⁄◊¿€¿€¿€[¿€a¿€ú¿€¢¿€⁄¿€‡¿‹)¿‹=¿‹Á¿›¿›4¿›Y¿›∆¿ﬁK¿ﬁl¿ﬁ≠¿ﬁ“¿ﬁÓ¿ﬂ)¿ﬂj¿ﬂñ¿ﬂ∑¿ﬂª¿ﬂº¿‡¿‡"¿‡Z¿‡∂¿·¿·â¿·™¿·√¿·Í¿·˘¿‚¿‚¿‚¿‚i¿‚ê¿‚æ¿‚⁄¿„¿„¿„¿„C¿„I¿„y¿„¿„è¿„ï¿„‡¿„¯¿‰
¿‰n¿‰é¿‰¬¿‰÷¿‰‹¿Â¿ÂV¿Âi¿Âo¿Âè¿Â¡¿Â’¿Â€¿Ê¿Ê¿Ê¿Êp¿Ê¡¿ÊÂ¿ÊÎ¿Á¿Á#¿Á3¿Á9¿Áá¿Áƒ¿Ë¿ËF¿ËZ¿Ëú¿ËË¿È2¿ÈL¿ÈS¿Èp¿ÈÑ¿Èä¿È∫¿Í¿Í@¿ÍT¿Íñ¿Í©¿ÍØ¿Í˛¿ÎH¿Îb¿Îi¿Îé¿Î·¿ÎÙ¿Î˙¿Ï¿Ï<¿ÏR¿Ïv¿Ïã¿Ï†¿Ï…¿Ïﬁ¿Ï‰¿ÏË¿ÏÈ¿Ì¿Ì¿ÌL¿ÌR¿Ìh¿Ìn¿Ì•¿Ì´¿Ìπ¿Ì’¿ÌÓ¿Ìˆ¿Ó ¿Ó¿Ó(¿Ó.¿Ó`¿Óf¿Ót¿Óë¿Ó≈¿ÓÕ¿Ó◊¿ÓÈ¿Ó˝¿Ô,¿ÔG¿ÔW¿Ôr¿ÔÖ¿Ôè¿Ô·¿Ô˙¿\¿´¿‚¿Ò¿Ò¿Ò)¿ÒE¿Ò¿ÒÖ¿Ò∫¿ÒÔ¿Òı¿ÚV¿Úf¿ÚÇ¿Úï¿Úü¿Ú¬¿Ú∆¿Ú«¿Û¿Û¿Û>¿ÛD¿ÛZ¿Û`¿ÛÉ¿Ûâ¿Ûó¿Û∞¿ÛÎ¿ÛÛ¿Û˝¿Ù¿Ù;¿ÙÅ¿ÙÀ¿ÙÂ¿ÙÏ¿ı¿ı3¿ıC¿ıK¿ıX¿ıì¿ıﬂ¿ı˚¿ˆ¿ˆ
¿ˆ¿ˆ¿ˆ\¿ˆb¿ˆó¿ˆ¬¿ˆ›¿ˆ¯¿˜¿˜#¿˜6¿˜@¿˜f¿˜ì¿˜Î¿¯¿¯¿¯M¿¯]¿¯y¿¯å¿¯ñ¿¯¨¿¯ƒ¿¯ı¿˘C¿˘a¿˘s¿˘|¿˘Ç¿˘Ü¿˘á¿˘ÿ¿˙¿˙"¿˙\¿˙í¿˙≠¿˙Ω¿˙ÿ¿˙Î¿˙ı¿˚¿˚B¿˚û¿˚˙¿¸q¿¸í¿¸´¿¸“¿¸·¿¸È¿¸˚¿˝¿˝Q¿˝o¿˝¢¿˝≤¿˝Œ¿˝·¿˝Î¿˝Ô¿˝¿˛A¿˛G¿˛ó¿˛Á¿ˇ4¿ˇ~¿ˇ®¿ˇÆ¿ˇ˚¿ L¿ d¿ ë¿ ›¿+¿C¿]¿¥¿¿Q¿Å¿Ã¿˜¿H¿”¿‡¿¿#¿9¿Å¿†¿Ω¿Ú¿¯¿˘¿<¿@¿A¿U¿¿ó¿Ã¿¿ ¿;¿?¿@¿É¿´¿÷¿ ¿G¿K¿L¿ì¿∏¿æ¿Œ¿‘¿¿U¿û¿ü¿Ì¿	E¿	F¿	Å¿	á¿	À¿	—¿
¿
,¿
N¿
v¿
§¿
¡¿
Ì¿
ˆ¿¿W¿|¿∫¿„¿˝¿+¿=¿E¿ã¿«¿œ¿’¿Ÿ¿⁄¿˙¿ ¿N¿í¿∞¿Ÿ¿˚¿#¿i¿ê¿ò¿û¿¢¿£¿œ¿–¿¿,¿0¿1¿g¿í¿ñ¿ó¿∏¿$¿o¿∂¿ˇ¿.¿≠¿¡¿Â¿4¿[¿e¿k¿∏¿º¿Ω¿…¿¿¿,¿z¿»¿€¿ ¿¿B¿q¿§¿¬¿¿3¿U¿r¿†¿æ¿‹¿˛¿{¿å¿õ¿®¿≥¿º¿√¿«¿…¿ ¿Á¿¿˝¿ˇ¿ ¿)¿f¿ê¿™¿ ¿Ô¿¿B¿}¿ù¿¬¿Î¿Ï¿2¿L¿Ñ¿£¿˚¿¿)¿Q¿¶¿“¿+¿1¿5¿6¿Z¿x¿ï¿ñ¿∑¿∏¿Ÿ¿¿-¿1¿2¿C¿n¿è¿ì¿î¿°¿Ÿ¿⁄¿G¿f¿à¿¡¿‹¿Ù¿¿#¿G¿N¿R¿T¿U¿ö¿ª¿”¿¿¿W¿X¿™¿»¿Ò¿ ¿ <¿ o¿ v¿ z¿ {¿ á¿ ≤¿ Ô¿!	¿!¿!2¿!F¿!N¿!R¿!S¿!_¿!¿!î¿!Ø¿!∞¿!º¿!ı¿"S¿"n¿"Ä¿"Ñ¿"Ü¿"á¿"–¿"ı¿#¿#2¿#X¿#•¿#¶¿#¸¿$¿$…¿$ˆ¿%!¿%C¿%v¿%}¿%Å¿%Ç¿%é¿%ˇ¿&#¿&$¿&0¿&[¿&u¿&œ¿&Î¿'(¿'B¿'_¿'|¿'ê¿'ò¿'ú¿'ù¿'©¿'…¿'ˇ¿(¿(¿('¿(`¿(Æ¿( ¿(›¿(·¿(„¿(‰¿)5¿)y¿)Æ¿)Ø¿)æ¿)ø¿)Í¿*¿*E¿*u¿*≠¿*À¿+¿+_¿+É¿+Ñ¿+Õ¿,¿,¿,H¿,t¿,û¿,∞¿,∏¿,π¿,Ê¿-¿-v¿-…¿-Ê¿. ¿.W¿.y¿.®¿.ÿ¿/=¿/N¿/Ñ¿/∫¿/ƒ¿/÷¿/ﬁ¿/ﬂ¿/˝¿0e¿0ö¿0∫¿0Á¿11¿1g¿1¬¿1Ú¿2B¿2ú¿2—¿2Ÿ¿2ﬂ¿3P¿3ü¿3†¿3Ë¿3È¿4P¿4Q¿4o¿4ï¿4Æ¿4¥¿4∏¿4π¿4œ¿4Ë¿4ˇ¿5,¿5L¿5R¿5|¿5û¿5⁄¿6	¿6C¿6|¿6®¿6”¿6Ÿ¿6›¿6ﬁ¿73¿7i¿7}¿7É¿7´¿7‘¿7Í¿7Ú¿7¯¿8	¿8¿8¿8¿89¿8b¿8p¿8v¿8ò¿8Ø¿8≥¿8¥¿8∆¿8«¿8¸¿8˝¿9V¿9p¿9ö¿9–¿:)¿:>¿:D¿:ö¿:º¿:—¿:◊¿;¿;e¿;k¿;~¿;Ç¿;É¿;¶¿;ß¿;≥¿;Ë¿;˘¿;˝¿;˛¿<
¿<G¿<ê¿<˛¿=¿=E¿=M¿=Q¿=R¿=^¿=ò¿=ª¿=ø¿=¿¿=Ã¿=Á¿>	¿>¿>¿>¿>9¿>;¿><¿>Å¿>Ö¿>‘¿>˛¿?O¿?P¿?ò¿?„¿?Ú¿?ˆ¿@F¿@ç¿@ë¿@¿¿A"¿A#¿A_¿Ac¿A±¿AÕ¿A—¿B¿B?¿B@¿Bé¿B≈¿B…¿C¿Cg¿C´¿CØ¿Cˇ¿DJ¿Dñ¿DÂ¿E4¿EK¿EO¿Eú¿E¡¿E≈¿F¿Fd¿F´¿Fœ¿F”¿G¿Gm¿G°¿G•¿Gπ¿H	¿HE¿HI¿H°¿H±¿Hˆ¿I¿I%¿Im¿Iá¿Iª¿Iÿ¿IÌ¿J0¿J1¿J¿Jœ¿K¿K?¿K@¿KÉ¿Kâ¿KŸ¿L&¿Lq¿Lí¿Lò¿LÂ¿M3¿MQ¿M~¿M¿M«¿Mÿ¿Mﬁ¿N¿NM¿NN¿Nõ¿N¨¿N≤¿N˚¿O6¿OÑ¿O™¿O¬¿O‹¿P¿P6¿PY¿Pp¿Pt¿Pu¿P∏¿Pæ¿Q¿Q5¿Q6¿Qm¿Qs¿Qß¿Q»¿Q‹¿Q›¿QÈ¿R¿R¿R¿RD¿R]¿RÄ¿RÜ¿Rä¿Rã¿Ró¿R≤¿RÕ¿R‚¿S¿S¿S¿S¿SG¿Sa¿S}¿SÅ¿SÇ¿Sú¿Sù¿S©¿Sº¿S—¿T¿T'¿T+¿T,¿T8¿Tw¿Tx¿Tö¿Tﬂ¿T˛¿U¿U¿U¿UB¿UZ¿Uà¿U§¿U‡¿V
¿V!¿V1¿V9¿V{¿Vê¿V©¿VŒ¿V÷¿V⁄¿V€¿W;¿W=    RoutePopDispositionRouteRouteSettingsPageNavigatorObserverHeroControllerScopeRouteTransitionRecordTransitionDelegateDefaultTransitionDelegate	Navigator_RouteLifecycle_NotAnnounced_RouteEntry_NavigatorObservation_NavigatorPushObservation_NavigatorPopObservation_NavigatorRemoveObservation_NavigatorReplaceObservationNavigatorState_RouteRestorationType_RestorationInformation_NamedRestorationInformation _AnonymousRestorationInformation_HistoryPropertyRestorableRouteFuture å›