ÅÅvaluealphaopacityredgreenblue	withAlphawithOpacitywithRed	withGreenwithBlue_linearizeColorComponentcomputeLuminancelerp
alphaBlendgetAlphaFromOpacity==hashCodetoStringclearsrcdstsrcOverdstOversrcIndstInsrcOutdstOutsrcATopdstATopxorplusmodulatescreenoverlaydarkenlighten
colorDodge	colorBurn	hardLight	softLight
difference	exclusionmultiplyhue
saturationcolor
luminositynonelowmediumhighbuttroundsquaremiterbevelfillstrokehardEdge	antiAliasantiAliasWithSaveLayer_data_kIsAntiAliasIndex_kColorIndex_kBlendModeIndex_kStyleIndex_kStrokeWidthIndex_kStrokeCapIndex_kStrokeJoinIndex_kStrokeMiterLimitIndex_kFilterQualityIndex_kMaskFilterIndex_kMaskFilterBlurStyleIndex_kMaskFilterSigmaIndex_kInvertColorIndex_kDitherIndex_kIsAntiAliasOffset_kColorOffset_kBlendModeOffset_kStyleOffset_kStrokeWidthOffset_kStrokeCapOffset_kStrokeJoinOffset_kStrokeMiterLimitOffset_kFilterQualityOffset_kMaskFilterOffset_kMaskFilterBlurStyleOffset_kMaskFilterSigmaOffset_kInvertColorOffset_kDitherOffset_kDataByteCount_objects_ensureObjectsInitialized_kShaderIndex_kColorFilterIndex_kImageFilterIndex_kObjectCountisAntiAlias_kColorDefault_kBlendModeDefault	blendModestylestrokeWidth	strokeCap
strokeJoin_kStrokeMiterLimitDefaultstrokeMiterLimit
maskFilterfilterQualityshadercolorFilterimageFilterinvertColors_ditherenableDitheringrawRgbarawStraightRgbarawUnmodifiedpngrgba8888bgra8888_image_debugStackwidthheight	_disposeddisposedebugDisposed
toByteDatadebugGetOpenHandleStackTracesclone	isCloneOf_toByteData_dispose_handlesdurationimage_cachedFrameCount
frameCount_frameCount_cachedRepetitionCountrepetitionCount_repetitionCountgetNextFrame_getNextFramenonZeroevenOdd	intersectunionreverseDifference_constructor_clonefillType_getFillType_setFillTypemoveTorelativeMoveTolineTorelativeLineToquadraticBezierTorelativeQuadraticBezierTocubicTorelativeCubicToconicTorelativeConicToarcTo_arcTo
arcToPoint_arcToPointrelativeArcToPoint_relativeArcToPointaddRect_addRectaddOval_addOvaladdArc_addArc
addPolygon_addPolygonaddRRect	_addRRectaddPath_addPath_addPathWithMatrixextendWithPath_extendWithPath_extendWithPathAndMatrixcloseresetcontains	_containsshift_shift	transform
_transform	getBounds
_getBoundscombine_opcomputeMetricspositionvectorangle	_iteratoriterator_pathMetric_pathMeasurecurrentmoveNextlengthisClosedcontourIndex_measuregetTangentForOffsetextractPath_length
_getPosTan_extractPath	_isClosed_nextContour_nativeNextContourcurrentContourIndexnormalsolidouterinner_style_sigma	_TypeNone	_TypeBlur_color
_blendMode_matrix_type
_kTypeMode_kTypeMatrix_kTypeLinearToSrgbGamma_kTypeSrgbToLinearGamma_toNativeImageFilter_toNativeColorFilter_shortDescriptioncreator	_initMode_initMatrix_initLinearToSrgbGamma_initSrgbToLinearGammadatanativeFiltersigmaXsigmaYtileMode_modeStringradiusXradiusYinnerFilterouterFilter	_initBlur_initDilate
_initErode_initColorFilter_initComposedclamprepeatedmirrordecal_initLinear_initRadial_initConical
_initSweep_validateColorStops_initWithImagecompile_uniformFloatCount_samplerCount_init_shader_builder_floatUniforms_samplerUniforms	trianglestriangleStriptriangleFanpointslinespolygon	_recordersave	saveLayer_saveLayerWithoutBounds
_saveLayerrestoregetSaveCount	translatescale_scalerotateskewgetTransform_getTransformclipRect	_clipRect	clipRRect
_clipRRectclipPath	_clipPathgetLocalClipBounds_getLocalClipBoundsgetDestinationClipBounds_getDestinationClipBounds	drawColor
_drawColordrawLine	_drawLine	drawPaint
_drawPaintdrawRect	_drawRect	drawRRect
_drawRRect
drawDRRect_drawDRRectdrawOval	_drawOval
drawCircle_drawCircledrawArc_drawArcdrawPath	_drawPath	drawImage
_drawImagedrawImageRect_drawImageRectdrawImageNine_drawImageNinedrawPicture_drawPicturedrawParagraph
drawPointsdrawRawPoints_drawPointsdrawVertices_drawVertices	drawAtlasdrawRawAtlas
_drawAtlas
drawShadow_drawShadowtoImage_toImageapproximateBytesUsedisRecordingendRecording_endRecording_canvas_kBytesPerShadow	_kXOffset	_kYOffset_kBlurOffsetoffset
blurRadiusconvertRadiusToSigma	blurSigmatoPaintlerpList_encodeShadowsfromUint8List	fromAsset_initFromAsset_debugDisposedencoded_initEncoded_initRaw_width	_getWidth_height
_getHeight_bytesPerPixel_getBytesPerPixelbytesPerPixelinstantiateCodec_instantiateCodecmessagestackE_rectIsValid_rrectIsValid_offsetIsValid_matrix4IsValid_radiusIsValid_scaleAlphaColor	BlendModeFilterQuality	StrokeCap
StrokeJoinPaintingStyleClipPaintImageByteFormatPixelFormatImage_ImageImageDecoderCallback	FrameInfoCodecinstantiateImageCodecinstantiateImageCodecFromBufferdecodeImageFromList_decodeImageFromListAsyncdecodeImageFromPixelsPathFillTypePathOperationEngineLayerPathTangentPathMetricsPathMetricIterator
PathMetric_PathMeasure	BlurStyle
MaskFilterColorFilter_ColorFilterImageFilter_MatrixImageFilter_GaussianBlurImageFilter_DilateImageFilter_ErodeImageFilter_ComposeImageFilter_ImageFilterShaderTileMode_encodeColorList_encodePointList_encodeTwoPointsGradientImageShaderFragmentProgram_FragmentShader
VertexModeVertices	PointModeClipOpCanvasPicturePictureRecorderShadowImmutableBufferImageDescriptor	_Callback_Callbacker	_futurizePictureRasterizationExceptionÅtdartuiboolRecthasNaNRRectOffsetdxisNaNdyFloat64ListlengtheverydoublevalueisFiniteRadiusxy	withAlphaalpharoundclampintpragmafromRGBOfromARGBmathpowHSVColormaterialColorstransparentCurveselasticInOutAnimationController	_clampInt_lerpInttoIntredgreenblueoverrideObject	identicalruntimeTypehashCodeStringtoRadixStringpadLeftsrcdstclear	saveLayerrestore	blendModesrcOverdstInsrcOutsrcIndstOutdstATopdstOversrcATopmultiplyscreenoverlaymodulate	hardLight
colorDodge	colorBurncolor	exclusion
difference
luminosityhue	softLight
saturationblurBackdropFilternonelowmediumhighfilterQualitymatrix	drawImagedrawImageRectdrawImageNine	drawAtlas	strokeCapAsquarestrokeWidthbuttdrawPath
drawPoints
strokeJoinstrokeMiterLimitstyle
drawCirclehardEdge	antiAliasantiAliasWithSaveLayerisAntiAliasByteDataListfilledgrowablegetInt32_kFakeHostEndiansetInt32indexvaluesfillstroke
getFloat32
setFloat32miterbevel	_TypeNone	_TypeBlur_style_sigmacreator_toNativeColorFilter_toNativeImageFilterfromEnvironmentdefaultValuetoStringStringBufferwritetoStringAsFixed
toByteDatawidgets
StackTracecurrent_handlesaddvoid	_disposedcontainsremoveisEmptydispose
StateErrorformatFuturerawRgbamaphandle_debugStacktoList__imageNativeFieldWrapperClass1	Uint8Listcallbackencodedbuffer
asByteDataSetgetNextFramecloneDurationimage	CompletersynccompleteError	ExceptioncompletewidthheightdurationmillisecondsdurationMillisecondsfuturefromUint8ListtargetWidthtargetHeightallowUpscalinginstantiateCodecthenrawrowBytespixelFormatcodec	frameInfofillTypecombinereverseDifferencexor	intersectSceneBuilderclipPathfrom_clonenonZerolefttoprightbottomzeroradiusrotationlargeArc	clockwise
fromCircleFloat32List_getValue32matrix4fromLTRB_opextractPathIterableforceClosedgetTangentForOffsetcossinatan2computeMetricslineTomoveTo
collectionIterableBaseIterator
RangeError_nextContourcurrentContourIndexisClosedcloseaddRectstartWithMoveTonextContour
maskFilter
drawShadowhashcolorFilterfromColorFiltermodelinearToSrgbGammasrgbToLinearGamma_type_listEquals_matrix_color
_blendModehashAll
_kTypeMode_kTypeMatrixfromList_kTypeLinearToSrgbGamma_kTypeSrgbToLinearGammaImageFilteredpushBackdropFilterpushImageFiltersigmaXsigmaYtileModeradiusXradiusYMatrix4	diagonal3ArgumentErrordatainnerouterinnerFilterouterFiltermirrorrepeateddecaldilateerode
hashValuescomposed_shortDescriptionshaderpaintingGradientLinearGradientRadialGradientBoxDecorationlinearradial	Int32ListiNoSuchMethodError
colorStopsfocalfocalRadiuspi
startAngleendAnglepaint
ByteBuffer	microtaskspirv
debugPrintspvTranspileResult	transpileTargetLanguagesksluniformFloatCountsamplerCountCustomPainterfloatUniformssamplerUniforms_builder_floatUniforms_samplerUniformsdrawVerticestextureCoordinatescolorsindicesany
Uint16ListclipRectSceneendRecordingisRecording_canvascullRectlargest_objects_datasydoAntiAliasclipOpgetClipBoundsarcTostack	ParagraphlayoutParagraphStyleParagraphBuilder	TextAlignParagraphConstraints_needsLayout_paintRSTransform
isNotEmptyscosssintxty
addPicturedrawPicture	_recorder	TextStylenormaloffset
blurRadiusscalelerp_lerpDoubleminshadowIndex_kColorDefaultconvertRadiusToSigma_initUripath
encodeFull_initFromAsset_length_initEncodedTttoImageSyncwritelnNativeFieldWrapperClass1IterableBaseIteratorImageFilterShader	ExceptionˇÍ≈+¢πXq_ÕD˜Ì{*   	dart:core¿Àı ¿©ó <ÄÜÄ§Ä•Ä¶Ä∂Ä«Ä»ÅÅ_ÅØÇ ÇPÇûÇÔÉ-É0É~É§É•ÉÂÑ
Ñ[Ñ°ÑÌÖ=ÖPÖQÖpÖ£Ö„ÖÚÖÙÖıÜÜLÜéÜùÜüÜ†Ü≈Ü¸áVáeágáháîáÕààlà{à}à~à£à⁄â2âAâCâDâpâ∞â≤â≥âÁâÎä;äãä⁄ããã6ã:ãFãmã©ã‡ååå#åtå√çç?çCçOçúç‰çÏçç˛ééUéõé©éÂéÎèèèDèjèëè∂èºêêZêàêéê‘ë!ëFëbëôëöë⁄ë‡í-í=íbíâíØíµí¯í˛ìIìVìãì≠ìœìÒîî îuî{î†î«îÌï:ïjïpï≥ïπññ?ñuñ´ñ·ó#ó$óRóXóÄóÜóÆó‘ó˚ò ò3ò4òmòsò¬ò‰ôôôGôMôûô¿ôÊôÁööKöLöÖö≥ö¥öÏõõõcõôõüõ◊õÚú"ú&ú'úpú∏úæúˆùùJù{ùùÄù–ù˝ûû;ûTûÜûäûãû‘ü
üüHücüìüóüòüÈ†††T†n†ü†£†§†‚°°=°]°û°¢°£°Ó°Ù¢H¢f¢l¢™¢»££C£Ä£º£Ì£Ò£Ú§!§'§o§≤§∏••O•é•‘•⁄¶'¶q¶ºßßVß¶ßÛ®D®q®w®∆®Ê©©2©G©^©s©Ç©™©≤©ø©÷©¯™™&™j™™™Ó´0´;´C´I´M´N´ë´◊´›¨)¨p¨ª≠
≠U≠ï≠Ω≠¸ÆÆÆBÆhÆüÆºÆ ØØZØ¢Ø´Ø»Ø˙∞(∞H∞e∞w∞¬±±^±g±m±q±r±ø±≈±≤#≤@≤t≤x≤y≤Ö≤®≤»≤€≥≥≥3≥T≥X≥Y≥e≥ã≥å≥ò≥Ê≥Ë≥È¥¥ ¥m¥∑¥÷¥⁄µ+µxµ«∂∂e∂∞∂Ù∂¯∑H∑ì∑‰∏0∏~∏Àππ]π¨πÚ∫∫∫_∫¨∫ˆªHªïªÊº'º+ºRºVº§ºÂΩ6ΩÉΩ‘æ#æræçæëæüæ£æÓæˇøø_ørø∏øπø˝¿ @¿ @?¿ @E¿ @¢¿ @´¿ @¨¿ @Î¿ @Ò¿ A@¿ AO¿ AU¿ Aê¿ Añ¿ AÒ¿ A¯¿ A˘¿ B8¿ B>¿ Bâ¿ Bö¿ B†¿ B‚¿ BË¿ CC¿ CJ¿ CK¿ Cà¿ Cé¿ C‹¿ D-¿ DJ¿ DP¿ Dû¿ DÀ¿ D—¿ E0¿ E;¿ E<¿ Ez¿ EÄ¿ E©¿ EØ¿ E˝¿ F¿ Fb¿ Fh¿ F∑¿ F‚¿ FÌ¿ FÓ¿ G6¿ GÉ¿ G–¿ Gﬁ¿ G‰¿ H#¿ H)¿ Hv¿ Hæ¿ HŒ¿ H‘¿ I ¿ I&¿ IÉ¿ Iå¿ Iç¿ I⁄¿ J(¿ Jr¿ Jx¿ J≤¿ J∏¿ K¿ KW¿ K]¿ K©¿ KØ¿ L¿ L¿ L¿ Le¿ L∏¿ M¿ M¿ MM¿ MS¿ M†¿ MÒ¿ M˜¿ ND¿ NJ¿ N®¿ N≤¿ N≥¿ O¿ OU¿ Oü¿ O•¿ O‡¿ OÊ¿ P8¿ PÑ¿ Pä¿ P◊¿ P›¿ Q;¿ QE¿ QF¿ Qï¿ Qµ¿ Qª¿ R	¿ R¿ R_¿ R´¿ Rﬂ¿ RÂ¿ S0¿ SA¿ SG¿ S¶¿ S±¿ S≤¿ T¿ T¿ T"¿ Tp¿ Tv¿ T∆¿ U¿ UA¿ UG¿ Uí¿ U£¿ U©¿ V¿ V¿ V¿ Vd¿ Vò¿ Vû¿ VÎ¿ VÒ¿ WL¿ WS¿ WT¿ Wì¿ Wô¿ WË¿ X4¿ XZ¿ X`¿ XÆ¿ X¥¿ Y¿ Y¿ Y¿ Yc¿ Yi¿ Y∏¿ Z¿ Z¿ Z^¿ Zá¿ Zç¿ Zﬁ¿ Z‰¿ [D¿ [J¿ [Z¿ [`¿ [¢¿ [Í¿ \¿ \P¿ \g¿ \s¿ \t¿ \º¿ \Ω¿ ]¿ ].¿ ]4¿ ]Ä¿ ]Õ¿ ]¸¿ ^¿ ^S¿ ^ü¿ ^≈¿ ^À¿ _¿ _j¿ _ª¿ _¡¿ `¿ `2¿ `8¿ `ñ¿ `ú¿ `¨¿ `≤¿ a¿ a¿ a[¿ aw¿ a¡¿ aÿ¿ a˚¿ a¸¿ bE¿ bt¿ bz¿ bÀ¿ c¿ cj¿ câ¿ cè¿ c€¿ d(¿ dW¿ d]¿ dº¿ d¬¿ d“¿ dÿ¿ e¿ eX¿ e®¿ e”¿ eﬁ¿ eﬂ¿ f-¿ fL¿ fR¿ fõ¿ f¨¿ f≤¿ g¿ g¿ g¿ gj¿ gâ¿ gè¿ gÿ¿ gÈ¿ gÔ¿ hN¿ hY¿ hZ¿ hï¿ hõ¿ hÁ¿ i4¿ ic¿ ii¿ iÀ¿ iŸ¿ i⁄¿ j-¿ j3¿ j¿ jÃ¿ j˚¿ k¿ kb¿ ko¿ kp¿ kπ¿ k„¿ kÈ¿ l9¿ lÇ¿ l–¿ l˝¿ m¿ mO¿ mú¿ mÀ¿ m—¿ n2¿ n8¿ nH¿ nN¿ ná¿ nŒ¿ o¿ oI¿ oV¿ oW¿ o•¿ oΩ¿ o√¿ p¿ p¿ pl¿ pr¿ pÇ¿ pà¿ p¡¿ pŒ¿ pœ¿ q¿ q¿ qm¿ qÑ¿ qä¿ q”¿ q‰¿ qÍ¿ r"¿ r(¿ rä¿ rò¿ rô¿ rÂ¿ rÛ¿ r˘¿ sH¿ s_¿ se¿ sÆ¿ sø¿ s≈¿ s˝¿ t¿ td¿ tq¿ tr¿ t¿¿ tŸ¿ tﬂ¿ u.¿ u}¿ uÉ¿ uœ¿ v¿ vd¿ vj¿ vπ¿ v›¿ v„¿ wC¿ wl¿ wm¿ wæ¿ w◊¿ w›¿ x&¿ x,¿ xu¿ x≈¿ xÎ¿ xÒ¿ yL¿ yR¿ yb¿ yh¿ y∏¿ y·¿ z0¿ za¿ zh¿ zi¿ z∫¿ z”¿ zŸ¿ {"¿ {r¿ {ü¿ {•¿ | ¿ |¿ |¿ |¿ |^¿ |≠¿ |√¿ |—¿ |“¿ }#¿ }<¿ }B¿ }ã¿ }ë¿ }⁄¿ ~*¿ ~_¿ ~e¿ ~¬¿ ~»¿ ~ÿ¿ ~ﬁ¿ ¿ b¿ ∞¿ π¿ ∫¿ Ä¿ Ä$¿ Ä*¿ Äs¿ Ä√¿ Ä¿ Äˆ¿ ÅX¿ Å^¿ Ån¿ Åt¿ Å√¿ ÅŸ¿ Ç$¿ Ç=¿ ÇK¿ ÇM¿ ÇN¿ Ç¶¿ Ç·¿ ÇÂ¿ ÉB¿ Éâ¿ Éç¿ É‚¿ Ñ6¿ Ñå¿ Ñ‡¿ Ñ‰¿ Ö2¿ Öm¿ Öq¿ Ö ¿ ÖŒ¿ Ü¿ Üc¿ ÜÇ¿ ÜÜ¿ Üî¿ Üò¿ Ü„¿ á¿ á2¿ áO¿ áj¿ áâ¿ á®¿ á√¿ áÿ¿ à.¿ àV¿ àW¿ àõ¿ à°¿ àÁ¿ â,¿ â4¿ â5¿ âm¿ âs¿ âµ¿ â‰¿ âÎ¿ âÏ¿ ä6¿ ä^¿ äd¿ äØ¿ ä¸¿ ãE¿ ãê¿ ãñ¿ ã∆¿ ã÷¿ ã‹¿ å+¿ å_¿ åt¿ å~¿ å¿ åœ¿ å‹¿ å‚¿ ç0¿ çm¿ çs¿ çö¿ ç†¿ çÚ¿ éB¿ éç¿ éì¿ é¿¿ é»¿ é ¿ éÀ¿ éÔ¿ éÛ¿ è¿ è¿ è:¿ è}¿ è∫¿ èÀ¿ ê¿ ê¿ êb¿ ê∆¿ êÃ¿ ë¿ ëL¿ ëT¿ ëU¿ ëê¿ ëñ¿ ë‡¿ í0¿ í†¿ í¶¿ íˆ¿ ì¿ ì$¿ ì%¿ ìh¿ ì≠¿ ì“¿ ìÿ¿ î'¿ îò¿ îû¿ îÓ¿ ï¿ ï¿ ïg¿ ïá¿ ïë¿ ïì¿ ïî¿ ïæ¿ ï¬¿ ñ¿ ñS¿ ñW¿ ñe¿ ñi¿ ñµ¿ ñ¡¿ ñ¸¿ ó:¿ óL¿ óÇ¿ óà¿ óÒ¿ ó˜¿ ò?¿ òè¿ òõ¿ ò°¿ ò±¿ ò∑¿ ô¿ ô¿ ôg¿ ô†¿ ô©¿ ô™¿ ôﬂ¿ ôÂ¿ öL¿ öR¿ öö¿ öÍ¿ öˆ¿ ö¸¿ õ¿ õ¿ õ`¿ õq¿ õz¿ õ{¿ õ…¿ õ˚¿ ú¿ úh¿ ún¿ ú∂¿ ù¿ ù¿ ù¿ ù(¿ ù.¿ ù|¿ ùç¿ ùñ¿ ùò¿ ùô¿ ù”¿ ù◊¿ ùÓ¿ û-¿ ûB¿ ûì¿ û°¿ û¢¿ ûË¿ ü.¿ üU¿ ü]¿ ü^¿ ü¢¿ üË¿ †/¿ †m¿ †w¿ †y¿ †z¿ †{¿ †™¿ †∂¿ †Ã¿ †“¿ °¿ °n¿ °t¿ °¿¿ °÷¿ ¢#¿ ¢|¿ ¢—¿ ¢Í¿ ¢Ú¿ ¢Û¿ £¿ £%¿ £~¿ £Ø¿ £µ¿ £ı¿ £˚¿ §S¿ §Æ¿ §¥¿ §ƒ¿ § ¿ •&¿ •J¿ •V¿ •W¿ •v¿ •|¿ •»¿ •Œ¿ ¶!¿ ¶'¿ ¶n¿ ¶t¿ ¶…¿ ¶Ë¿ ß?¿ ßE¿ ßU¿ ß[¿ ß£¿ ßÓ¿ ®¿ ®|¿ ®â¿ ®ä¿ ®÷¿ ®‹¿ ©/¿ ©Å¿ ©™¿ ©∞¿ ™¿ ™O¿ ™°¿ ™Û¿ ™˘¿ ´I¿ ´ô¿ ´Á¿ ¨7¿ ¨}¿ ¨É¿ ¨ì¿ ¨ô¿ ¨Á¿ ≠¿ ≠¿ ≠¿ ≠F¿ ≠J¿ ≠ê¿ ≠Ø¿ ≠Ω¿ ≠Ï¿ ≠Ò¿ Æ<¿ Æá¿ Æ÷¿ Ø$¿ Øs¿ Øx¿ Ø»¿ ∞¿ ∞*¿ ∞/¿ ∞w¿ ∞x¿ ∞¨¿ ∞≠¿ ∞ÿ¿ ∞˝¿ ±&¿ ±K¿ ±v¿ ±ü¿ ±…¿ ±˘¿ ≤&¿ ≤P¿ ≤Ñ¿ ≤¥¿ ≤‡¿ ≥¿ ≥¿ ≥J¿ ≥Ä¿ ≥æ¿ ≥Ù¿ ¥6¿ ¥t¿ ¥¥¿ µ ¿ µF¿ µÜ¿ µÿ¿ ∂"¿ ∂d¿ ∂ú¿ ∂›¿ ∑¿ ∑¿ ∑K¿ ∑f¿ ∑g¿ ∑ï¿ ∑È¿ ∑Ì¿ ∑Ó¿ ∏¿ ∏?¿ ∏j¿ ∏æ¿ ∏ø¿ π¿ π¿ π)¿ πD¿ πZ¿ π`¿ πd¿ πe¿ π´¿ ππ¿ πø¿ π◊¿ π¿ ∫7¿ ∫;¿ ∫[¿ ∫´¿ ∫’¿ ∫¸¿ ª@¿ ªD¿ ªE¿ ª}¿ ª≠¿ ªÆ¿ ªÁ¿ ªÌ¿ º¿ º¿ º#¿ º)¿ ºo¿ º†¿ ºË¿ ºÓ¿ Ω6¿ ΩK¿ Ω_¿ Ω®¿ Ω‘¿ Ωÿ¿ ΩÛ¿ æ¿ æD¿ æÇ¿ æÜ¿ æá¿ æø¿ ø ¿ ø¿ øM¿ øS¿ øï¿ øÊ¿ ¿7¿ ¿X¿ ¿^¿ ¿´¿ ¿Ã¿ ¿“¿ ¿˘¿ ¿ˇ¿ ¡¿ ¡¿ ¡d¿ ¡ò¿ ¡‚¿ ¡¯¿ ¬¿ ¬a¿ ¬ú¿ ¬†¿ ¬√¿ ¬ﬁ¿ √¿ √Z¿ √^¿ √_¿ √£¿ √©¿ √—¿ √Ì¿ ƒ?¿ ƒC¿ ƒf¿ ƒÅ¿ ƒ¶¿ ƒ‰¿ ƒË¿ ƒÈ¿ ≈#¿ ≈r¿ ≈Ø¿ ≈µ¿ ≈Ú¿ ∆¿ ∆Q¿ ∆U¿ ∆w¿ ∆í¿ ∆¥¿ ∆˙¿ ∆˛¿ ∆ˇ¿ «@¿ «p¿ «v¿ «®¿ «ƒ¿ »¿ »¿ »=¿ »X¿ »}¿ »ø¿ »√¿ »ƒ¿ …¿ …¿ …\¿ …ß¿ …≠¿ …Á¿ …Ì¿  ¿  ¿  z¿  Ä¿  Á¿  Ì¿ ÀT¿ ÀZ¿ À¶¿ À˜¿ Ã¿ Ã	¿ Ã¿ Ã¿ Ãn¿ Ãö¿ Ã„¿ Õ"¿ Õ@¿ Õî¿ Õò¿ ÕΩ¿ Õÿ¿ Õ˝¿ Œ@¿ ŒD¿ ŒE¿ Œ}¿ Œ¥¿ Œµ¿ œ ¿ œN¿ œô¿ œÊ¿ –4¿ –:¿ –¿ –Ö¿ –”¿ –˜¿ –˝¿ —f¿ —l¿ —’¿ —€¿ “D¿ “J¿ “ñ¿ “Á¿ “Û¿ “˘¿ ”	¿ ”¿ ”Y¿ ”t¿ ”Ω¿ ”›¿ ‘&¿ ‘*¿ ‘Q¿ ‘l¿ ‘™¿ ‘ı¿ ‘˘¿ ‘˙¿ ’J¿ ’à¿ ’é¿ ’≤¿ ’—¿ ÷¿ ÷6¿ ÷K¿ ÷l¿ ÷å¿ ÷Á¿ ◊.¿ ◊9¿ ◊?¿ ◊P¿ ◊T¿ ◊z¿ ◊ì¿ ◊Â¿ ÿ-¿ ÿu¿ ÿÇ¿ ÿœ¿ Ÿ¿ ŸS¿ Ÿ¨¿ Ÿ˝¿ ⁄¿ ⁄¿ ⁄¿ ⁄Z¿ ⁄Æ¿ ⁄˙¿ € ¿ €(¿ €u¿ €ô¿ €Û¿ €˜¿ ‹"¿ ‹=¿ ‹b¿ ‹®¿ ‹¨¿ ‹≠¿ ‹Á¿ ‹Ì¿ ›#¿ ›)¿ ›9¿ ›?¿ ›{¿ ›≥¿ ›Â¿ ﬁ-¿ ﬁD¿ ﬁt¿ ﬁx¿ ﬁñ¿ ﬁŒ¿ ﬁ“¿ ﬁ”¿ ﬂ¿ ﬂ,¿ ﬂ2¿ ﬂW¿ ﬂ]¿ ﬂÆ¿ ﬂœ¿ ‡&¿ ‡H¿ ‡L¿ ‡M¿ ‡u¿ ‡ª¿ ‡€¿ ‡˘¿ ·'¿ ·/¿ ·<¿ ·Ç¿ ·à¿ ·å¿ ·ç¿ ·»¿ ·Œ¿ ‚¿ ‚/¿ ‚5¿ ‚C¿ ‚a¿ ‚g¿ ‚}¿ ‚É¿ ‚∞¿ ‚ ¿ ‚€¿ ‚Ú¿ „@¿ „K¿ „S¿ „]¿ „c¿ „s¿ „y¿ „¥¿ „’¿ ‰,¿ ‰N¿ ‰R¿ ‰S¿ ‰{¿ ‰î¿ ‰≤¿ ‰‡¿ ‰Ë¿ ‰ı¿ Â6¿ Âå¿ Â∑¿ Â˚¿ Ê¿ Ê	¿ Ê¿ Ê¿ ÊM¿ ÊS¿ Êü¿ ÊÈ¿ Á¿ Á4¿ Á{¿ Á¿ Á†¿ ÁÍ¿ ÁÓ¿ ÁÔ¿ Ë¿ ËF¿ ËJ¿ Ëf¿ Ë´¿ ËØ¿ Ë∞¿ ËË¿ ËÓ¿ È:¿ ÈÄ¿ È≥¿ Èπ¿ Èˇ¿ Í ¿ Í&¿ Ís¿ Íø¿ Í‚¿ ÍË¿ Î/¿ Î}¿ Î§¿ Î•¿ Î±¿ Î«¿ Ï¿ Ï4¿ Ï:¿ Ïj¿ ÏÖ¿ Ï°¿ Ï ¿ ÏË¿ Ì¿ ÌB¿ ÌM¿ Ìp¿ Ìó¿ Ìº¿ ÌË¿ Ó#¿ Óx¿ Óá¿ Ó≠¿ Óµ¿ ÓÕ¿ Ó”¿ ÓÚ¿ Ô#¿ Ô;¿ ÔA¿ Ôq¿ Ôô¿ Ô±¿ Ô∑¿ ÔË¿ ¿ ,¿ 2¿ Q¿ é¿ ¶¿ ¨¿  ¿ Ò¿ Ò¿ Ò#¿ ÒR¿ Òì¿ Ò´¿ Ò±¿ ÒÀ¿ Ò˛¿ Ú¿ Ú¿ Ú;¿ Úx¿ Úê¿ Úñ¿ Ú¨¿ ÚÂ¿ Úˆ¿ Û*¿ ÛA¿ Û_¿ Ûc¿ Ûe¿ Ûf¿ Û®¿ Û¿¿ Ù¿ Ù[¿ Ù£¿ ÙÌ¿ ı¿ ı¿ ı!¿ ı¿ ıä¿ ıã¿ ı´¿ ı±¿ ˆ
¿ ˆ¿ ˆ¿ ˆ;¿ ˆA¿ ˆë¿ ˆÃ¿ ˆ›¿ ˆﬁ¿ ˆ¿ ˆˆ¿ ˜F¿ ˜î¿ ˜‡¿ ¯-¿ ¯v¿ ¯|¿ ¯Õ¿ ¯Ÿ¿ ¯ﬂ¿ ¯Ô¿ ¯ı¿ ˘T¿ ˘ô¿ ˘†¿ ˘¢¿ ˘£¿ ˘‚¿ ˘ı¿ ˙C¿ ˙ì¿ ˙©¿ ˙µ¿ ˙∂¿ ˚¿ ˚T¿ ˚j¿ ˚v¿ ˚x¿ ˚y¿ ˚Ø¿ ˚≥¿ ˚Û¿ ˚˜¿ ¸E¿ ¸]¿ ¸a¿ ¸∞¿ ¸ˇ¿ ˝F¿ ˝é¿ ˝‹¿ ˝Í¿ ˝Ó¿ ˛:¿ ˛â¿ ˛–¿ ˛‘¿ ˛‚¿ ˛Ê¿ ˇT¿ ˇ£¿ ˇ…¿ ¿ &¿ X¿ h¿ ê¿ £¿ ≠¿ Ã¿ –¿ —¿ Ú¿¿%¿&¿A¿B¿Ü¿ô¿ö¿‹¿¿Ò¿¿X¿â¿è¿‡¿˚¿¿L¿ó¿Ê¿¿¿F¿r¿à¿ø¿‘¿˜¿¿¿¿¿^¿d¿≤¿»¿„¿˜¿¿#¿6¿@¿Æ¿≤¿≥¿Ë¿Ó¿:¿J¿P¿ù¿∂¿¿U¿ü¿Î¿	@¿	m¿	õ¿	ü¿	†¿	Ò¿
¿
¿
Y¿
è¿
≠¿
Ω¿¿$¿.¿A¿E¿F¿w¿}¿Ã¿¿l¿∏¿¿R¿û¿º¿¬¿¿9¿?¿á¿ÿ¿Ó¿Ù¿*¿0¿>¿Y¿_¿ó¿÷¿ı¿?¿P¿b¿Ç¿“¿ ¿F¿|¿á¿®¿∞¿∂¿ÿ¿¿W¿Ç¿≈¿	¿F¿_¿e¿°¿—¿◊¿Ù¿¿¿6¿T¿o¿w¿}¿ô¿º¿¬¿›¿„¿¿?¿I¿O¿z¿Ç¿å¿í¿◊¿%¿I¿[¿p¿à¿≥¿¿R¿î¿ù¿£¿¬¿Ì¿Ò¿Ú¿>¿Ñ¿ä¿◊¿!¿q¿¿¿
¿W¿ê¿ë¿ù¿«¿…¿ ¿‰¿¿]¿x¿}¿À¿Ì¿	¿¿¿>¿?¿g¿h¿Ω¿Û¿1¿a¿k¿s¿w¿x¿¥¿¿¿,¿?¿W¿c¿{¿»¿‡¿*¿b¿i¿¿è¿ì¿î¿æ¿ø¿‚¿„¿Ô¿ ¿ !¿ "¿ T¿ ê¿ ë¿ ≈¿ …¿!¿!¿!#¿!m¿!∂¿"¿"J¿"ï¿"æ¿"¬¿"˚¿"ˇ¿#¿#¿#N¿#å¿#™¿#˜¿$B¿$_¿$´¿$ ¿$Î¿$Ò¿$˘¿$˝¿%¿%¿%#¿%0¿%g¿%•¿%Â¿&$¿&p¿&ä¿&Ÿ¿'!¿'B¿'H¿'P¿'b¿'¨¿'»¿'Œ¿(¿((¿(f¿(g¿(ñ¿(ú¿(È¿)¿)¿)¿)/¿)5¿)}¿)É¿)œ¿)‰¿)Ê¿)Á¿*¿*¿*S¿*m¿*q¿*©¿*∆¿*‡¿+¿+¿+]¿+x¿+}¿+∂¿+‘¿+¿+˝¿+˛¿,¿,>¿,y¿,™¿,´¿, ¿,˘¿,ˇ¿-3¿-X¿-¢¿-›¿-ﬁ¿.¿.¿.P¿.V¿.ß¿.≠¿.Ó¿/¿/I¿/ë¿/Â¿0 ¿0u¿0Ñ¿0¨¿0Ë¿1*¿16¿1>¿1F¿1_¿1}¿1É¿1†¿1§¿1•¿1·¿2<¿2=¿2ç¿2∞¿2Ÿ¿2€¿2‹¿2ˇ¿3¿3R¿3¢¿3¿4¿4¿4i¿4∑¿4¿4Ù¿5?¿5â¿5Ÿ¿6(¿6t¿6≈¿7¿7\¿7ò¿7ú¿7Ê¿80¿8Ä¿8º¿8¿¿9¿9¿9>¿9R¿9f¿9{¿9ô¿9§¿9¿:¿:&¿:D¿:d¿:à¿:ç¿:è¿:ê¿:≥¿:∑¿;¿;V¿;§¿;«¿;À¿<¿<m¿<¶¿<™¿<ı¿=?¿=è¿=ﬁ¿>*¿>{¿> ¿?¿?N¿?R¿?ú¿?Ê¿@6¿@r¿@v¿@√¿@œ¿@˛¿A¿A.¿AC¿Aa¿Al¿A∏¿A—¿B¿B8¿B>¿BÇ¿B™¿B∞¿B¥¿B»¿BÓ¿C¿C,¿C1¿C3¿C4¿C}¿CÅ¿C–¿D¿De¿DØ¿D‹¿Dﬁ¿Dﬂ¿E¿Ed¿Eù¿E◊¿EÙ¿Eˆ¿E˜¿F4¿F8¿FÜ¿F—¿FÈ¿FÌ¿G9¿Gä¿G…¿GÕ¿H¿Hb¿H≤¿I¿IM¿Iû¿IÌ¿J5¿Jq¿Ju¿Jø¿K	¿KY¿Kï¿K±¿K≈¿K“¿K‡¿Kˆ¿L¿L*¿L>¿LS¿Lq¿Lv¿Lì¿L«¿LÀ¿LÈ¿M¿M#¿M$¿ML¿Mq¿MØ¿Mø¿M’¿MÌ¿N	¿N&¿N/¿N0¿NM¿Nì¿NΩ¿N«¿O¿O<¿OF¿ON¿OO¿O`¿O{¿Oü¿O≈¿Oœ¿OÌ¿P1¿PL¿Ph¿Ps¿Pô¿Pµ¿P’¿P÷¿Q¿Q¿Q¿Q¿Q¿Qd¿Qt¿Qx¿QØ¿Q√¿R¿R¿Rd¿R≥¿S¿S-¿S3¿Sk¿Sv¿Sw¿Sπ¿Sø¿T¿Ta¿Tg¿T†¿T´¿T≠¿TÆ¿T“¿T÷¿T‰¿TË¿U7¿U]¿Ur¿U¶¿U¨¿U˙¿VE¿VÜ¿Vå¿Vú¿V¢¿VÒ¿W¿W¿Wh¿Wé¿Wî¿W‚¿X0¿XJ¿XP¿X`¿Xó¿X§¿XÔ¿Xı¿YC¿Yé¿Y√¿YÃ¿Z¿ZP¿ZV¿Z§¿Z¯¿Z˛¿[¿[K¿[R¿[Ü¿[å¿[⁄¿\%¿\f¿\l¿\|¿\Ç¿\À¿\‰¿\˘¿\˚¿\¸¿]M¿]g¿]ú¿]Ê¿^¿^¿^1¿^2¿^Ç¿^•¿^´¿^˚¿_D¿_ï¿_ﬁ¿_¯¿_˛¿`M¿`ô¿`”¿a¿a¿a¿a7¿a;¿aÄ¿aÑ¿a«¿b¿b¿b¿bd¿bè¿bì¿b“¿c¿c=¿cA¿cÖ¿cæ¿cÿ¿d¿d.¿dJ¿dg¿dò¿dô¿dÁ¿e,¿e8¿e9¿ea¿eg¿e¥¿f¿f&¿fL¿fk¿fÇ¿fÜ¿f∑¿f∏¿fˆ¿f¸¿gA¿gÖ¿g∆¿g«¿g˜¿h4¿h5¿hj¿h¢¿h£¿hÎ¿i5¿i6¿i}¿iä¿i¬¿i√¿j
¿j<¿jÜ¿já¿j ¿k
¿k¿k¿kÄ¿k√¿l
¿lO¿l\¿l“¿l”¿m¿m_¿mn¿m÷¿m◊¿n¿nc¿n®¿nΩ¿o5¿o6¿o|¿o¿¿p¿pL¿pq¿pÕ¿pŒ¿q¿qX¿qù¿q‰¿r*¿rR¿ræ¿rø¿s¿s$¿s*¿sm¿së¿só¿sﬁ¿t¿te¿t©¿t¿u4¿ub¿uh¿u≠¿u„¿v5¿vU¿v¥¿v∏¿v¸¿wW¿wX¿wß¿wÏ¿wÚ¿xA¿xä¿xŒ¿xı¿x˚¿yG¿yñ¿y‚¿yË¿z¿z,¿zG¿zb¿z}¿zÑ¿z®¿zÃ¿{¿{6¿{:¿{}¿{¿¿{˝¿{˛¿{ˇ¿|N¿|ì¿|ô¿|Õ¿|”¿}"¿}p¿}≥¿}˝¿~¿~M¿~õ¿~Ë¿~ˇ¿/¿P¿k¿Ü¿°¿®¿—¿ı¿ÄA¿Äy¿Ä}¿Ä»¿Å¿Å>¿Å{¿Å|¿Å√¿Å⁄¿Åˆ¿Ç¿ÇR¿ÇV¿Ç≥¿Ç¥¿Çˆ¿É$¿É*¿É|¿É ¿ÉÊ¿Ñ¿ÑB¿ÑF¿Ñ£¿Ñ§¿ÑÏ¿Ö)¿Öh¿Ö©¿ÖÔ¿Ü3¿Üw¿ÜÉ¿Üƒ¿Ü‰¿á7¿á;¿áÄ¿áÀ¿áÃ¿à¿à,¿à2¿àÅ¿à¶¿à¨¿àÛ¿â(¿âD¿âv¿âz¿â«¿â»¿ä
¿äM¿ä]¿ä|¿äû¿ä¬¿ä∆¿ã¿ã¿ãI¿ãO¿ãú¿ãÍ¿å¿åX¿åò¿åº¿å◊¿åˇ¿ç>¿çK¿çw¿ç}¿çÅ¿ç…¿é9¿é:¿éÄ¿éø¿é¸¿è¿èO¿è†¿èÀ¿ê¿êU¿êy¿êî¿êº¿ë¿ë¿ëA¿ëG¿ëK¿ë°¿í¿í¿íc¿í§¿í»¿í…¿ì¿ìR¿ìm¿ìë¿ìí¿ì‚¿î/¿îN¿îT¿îú¿î¢¿îÁ¿ï¿ï*¿ïT¿ïX¿ïï¿ïñ¿ï÷¿ñ¿ñ#¿ñG¿ñg¿ñè¿ñ†¿ñ§¿ñÎ¿ñÏ¿ó,¿ó\¿óÑ¿ó™¿ó ¿óÈ¿ó˙¿ó˛¿òL¿òM¿òÇ¿òà¿òÿ¿ô%¿ôp¿ôØ¿ôµ¿ö¿öU¿öß¿öÙ¿õ>¿õå¿õö¿õﬂ¿õÙ¿ú¿ú]¿úa¿úï¿úñ¿ú‚¿úı¿ú˚¿ùK¿ùô¿ù”¿û¿û7¿ûR¿ûp¿û£¿û∂¿ûº¿ü3¿ü7¿ü{¿ü|¿üÀ¿ü¸¿†¿†N¿†ñ¿†Â¿°4¿°~¿°∂¿°º¿¢¿¢T¿¢ù¿¢—¿¢◊¿£'¿£t¿£ƒ¿§¿§T¿§°¿§¿•@¿•è¿•ï¿•„¿¶2¿¶f¿¶l¿¶Ω¿ß¿ßC¿ßp¿ßt¿ßv¿ßw¿ßπ¿ßΩ¿ßÀ¿®)¿®9¿®j¿®p¿®ñ¿®¬¿®‚¿© ¿©¿©F¿©L¿©°¿©Õ¿™
¿™R¿™V¿™W¿™v¿™|¿™œ¿´¿´,¿´-¿´Z¿´`¿´±¿¨¿¨¿¨6¿¨7¿¨g¿¨m¿¨Ω¿≠¿≠(¿≠.¿≠|¿≠À¿Æ¿Æh¿Æy¿Ææ¿Æ˜¿Æ˘¿Æ˙¿ØB¿ØF¿Øó¿Ø„¿∞)¿∞-¿∞s¿∞w¿∞√¿±¿±0¿±4¿±~¿±Œ¿±Ô¿≤/¿≤^¿≤•¿≤¶¿≤Œ¿≤œ¿≤€¿≥¿≥¿≥¿≥_¿≥y¿≥¥¿≥˛¿≥ˇ¿¥¿¥7¿¥8¿¥D¿¥_¿¥í¿¥≥¿¥À¿µ.¿µä¿µ˛¿∂¿∂¿∂'¿∂+¿∂,¿∂8¿∂L¿∂s¿∂£¿∂∂¿∂º¿∂‘¿∂Ê¿∂Í¿∂Ï¿∂Ì¿∑,¿∑0¿∑x¿∑√¿∏¿∏5¿∏9¿∏á¿∏÷¿π"¿πr¿π¿¿πŒ¿π·¿πˇ¿∫¿∫]¿∫ü¿∫“¿∫”¿ª	¿ª ¿ª!¿ªF¿ªL¿ªö¿ª‡¿º0¿ºO¿ºf¿ºg¿ºí¿ºò¿ºË¿Ω/¿Ω}¿ΩÃ¿æ¿æ¿æY¿æ©¿æ¯¿ø1¿øK¿øL¿øk¿øl¿øm¿øΩ¿ø‰¿øÍ¿¿9¿¿Ü¿¿û¿¿§¿¿Ÿ¿¿ﬂ¿¡%¿¡W¿¡ò¿¡ú¿¡ù¿¡Ê¿¡Ï¿¬.¿¬r¿¬¿¿√¿√!¿√"¿√.¿√ó¿√ô¿√ö¿√–¿√˛¿ƒ#¿ƒ'¿ƒz¿ƒ{¿ƒü¿≈¿≈7¿≈;¿≈~¿≈¿≈√¿∆9¿∆|¿∆∑¿∆”¿∆Ê¿∆Û¿«	¿«/¿«T¿«]¿«c¿«g¿«√¿«ƒ¿»$¿»ö¿»∫¿…¿…¿…#¿…±¿…≤¿…÷¿ L¿ p¿ t¿ ∂¿ ∑¿ ‚¿ Á¿À<¿Àf¿À~¿À™¿À∫¿À◊¿À›¿ÀÓ¿ÀÚ¿Ã0¿Ã1¿Ã}¿ÃÉ¿Ãƒ¿Ã‰¿ÃÊ¿ÃÁ¿Õ¿ÕX¿Õi¿Õ°¿Õ¢¿ÕÔ¿Œ2¿Œ<¿Œ=¿Œã¿Œ◊¿œ¿œ¿œ¿œ\¿œ≠¿œ¿œ˘¿œ˙¿–J¿–X¿–a¿–c¿–d¿–±¿—¿—¿—¿—h¿—{¿—∆¿—Ã¿“ ¿“¿“W¿“]¿“¨¿“˙¿”J¿”[¿”a¿”∞¿”∂¿”‹¿”‚¿”Ú¿”¯¿‘E¿‘^¿‘o¿‘Ä¿‘û¿‘º¿‘Ω¿‘◊¿‘Ó¿‘Ô¿’%¿’p¿’ö¿’–¿’—¿’›¿÷ ¿÷¿÷A¿÷d¿÷h¿÷i¿÷u¿÷®¿÷©¿÷µ¿◊¿◊¿◊	¿◊Z¿◊©¿◊˜¿ÿC¿ÿt¿ÿx¿ÿ¡¿ÿŒ¿ÿ˘¿ŸF¿Ÿó¿Ÿ€¿Ÿ·¿⁄2¿⁄Ä¿⁄≠¿⁄Ë¿€ ¿€ ¿€8¿€T¿€U¿€£¿€È¿€Ô¿‹:¿‹b¿‹h¿‹v¿‹•¿‹‘¿›¿›2¿›a¿›k¿›q¿›¿¿ﬁ¿ﬁ¿ﬁ¿ﬁ\¿ﬁs¿ﬁä¿ﬁ°¿ﬁ∏¿ﬁ¬¿ﬁÃ¿ﬁ“¿ﬁ‰¿ﬁÍ¿ﬂ¿ﬂ¿ﬂ¿ﬂY¿ﬂu¿ﬂë¿ﬂ≠¿ﬂ…¿ﬂ”¿ﬂ›¿ﬂ„¿‡j¿‡p¿‡z¿‡∑¿‡⁄¿‡˝¿· ¿·C¿·M¿·W¿·]¿·Ê¿·Ï¿·ˆ¿‚7¿‚]¿‚É¿‚©¿‚œ¿‚Ÿ¿‚„¿„¿„*¿„E¿„_¿„}¿„~¿„ ¿„⁄¿‰¿‰¿‰4¿‰L¿‰u¿‰v¿‰ƒ¿‰ﬂ¿Â¿Â¿Â9¿ÂQ¿Âz¿Â{¿Âí¿Â±¿Â–¿Â„¿Â‰¿Ê¿ÊR¿Êñ¿Êﬂ¿Á(¿Á)¿ÁJ¿ÁV¿Á£¿Á§¿ÁÕ¿Á‚¿Á˘¿Ë-¿ËD¿ËN¿Ëv¿Ëè¿ËÆ¿Ë≈¿Ëœ¿È¿ÈF¿Èj¿Èü¿È√¿È¯¿Í¿ÍI¿ÍO¿ÍS¿ÍT¿Í`¿ÍÉ¿Í≠¿Í¡¿Í·¿Î¿Î8¿ÎZ¿ÎÖ¿Îâ¿Îä¿Îñ¿Ï¿Ï¿Ï¿Ï5¿ÏJ¿Ïa¿Ïö¿Ï≥¿Ï‚¿Ì¿Ì8¿Ì\¿Ìé¿Ìù¿Ì¬¿Ì»¿ÌÃ¿ÌÕ¿ÌŸ¿ÌÔ¿Ó¿Ó¿ÓT¿Óm¿Óú¿Ó¿¿ÓÚ¿Ô¿ÔH¿ÔW¿ÔÙ¿Ô˙¿Ô˛¿ ¿¿?¿C¿ì¿ﬁ¿Ò0¿ÒF¿Ò|¿Òû¿ÒΩ¿Òı¿Ú	¿ÚJ¿ÚN¿ÚO¿Ús¿Úí¿ÚÃ¿Ú‡¿Û¿Û¿ÛL¿Ûk¿Û∞¿Ûƒ¿Û‚¿ÛÊ¿ÛÁ¿Ù¿Ù5¿Ùz¿Ùé¿Ù¨¿Ù∞¿Ù±¿Ùˇ¿ı%¿ıB¿ıC¿ı{¿ı≈¿ˆ¿ˆY¿ˆ•¿ˆß¿ˆ®¿ˆ€¿ˆﬂ¿ˆÌ¿ˆÒ¿˜@¿˜ç¿˜‹¿¯¿¯P¿¯{¿¯ò¿¯‘¿˘C¿˘_¿˘{¿˘ô¿˘Ú¿˘ˆ¿˘˜¿˙D¿˙ä¿˙Ÿ¿˙ˆ¿˚¿˚V¿˚Z¿˚[¿˚ü¿˚Ò¿¸?¿¸\¿¸y¿¸ª¿¸ø¿¸¿¿˝¿˝
¿˝X¿˝¢¿˝‘¿˛ ¿˛=¿˛`¿˛~¿˛º¿ˇ¿ˇ"¿ˇ#¿ˇm¿ˇs¿ˇ¬¿ˇ˘¿ ¿ z¿ ß¿ Ô¿ Û¿ Ù¿E¿í¿π¿∫¿¿;¿[¿]¿^¿ê¿€¿‹¿ˆ¿¿¿=¿Å¿ç¿ƒ¿≈¿—¿¿¿!¿e¿f¿r¿ï¿ø¿”¿˙¿*¿\¿`¿a¿m¿µ¿∑¿∏¿¿T¿U¿l¿É¿û¿ü¿≥¿ı¿¿8¿9¿T¿k¿ñ¿√¿Ù¿¿%¿)¿*¿6¿Ä¿Å¿ç¿ÿ¿Ÿ¿Â¿	¿	2¿	F¿	s¿	ï¿	∑¿	ﬁ¿	‚¿	„¿	Ô¿
"¿
$¿
%¿
W¿
ü¿
†¿
∏¿
–¿
—¿¿!¿X¿Y¿e¿•¿¶¿≤¿Û¿Ù¿ ¿#¿M¿a¿à¿¨¿—¿’¿÷¿‚¿¿¿¿K¿í¿ì¿´¿√¿ƒ¿¿¿J¿K¿W¿ñ¿ó¿£¿„¿‰¿¿¿=¿Q¿w¿õ¿¿¿ƒ¿≈¿—¿¿¿¿;¿å¿ç¿Æ¿œ¿–¿Ì¿3¿?¿v¿w¿É¿Ì¿Ó¿˙¿P¿Q¿]¿Ä¿™¿æ¿Ê¿¿?¿C¿D¿P¿ç¿è¿ê¿œ¿”¿#¿v¿∫¿¿(¿)¿e¿ö¿∏¿˚¿¿S¿W¿≥¿¥¿¿G¿x¿ñ¿Ÿ¿Ì¿¿"¿v¿w¿ª¿¿<¿Z¿ù¿±¿·¿Â¿7¿8¿|¿Ç¿–¿¿K¿i¿¨¿Œ¿¿ ¿Z¿^¿∫¿ª¿Ì¿ ¿>¿Å¿ï¿€¿ ¿¿\¿]¿ê¿ƒ¿‚¿%¿9¿è¿Â¿ ¿ #¿ î¿ ‚¿!¿!%¿!'¿!(¿!n¿!£¿!”¿"¿"9¿"U¿"c¿"e¿"f¿"ª¿"‘¿"ÿ¿#%¿#s¿#¿¿$¿$¿$i¿$Ω¿%¿%n¿%¡¿%Í¿%Ó¿&H¿&m¿&q¿&¿&É¿&«¿'¿'a¿'ã¿'’¿(¿(D¿(ë¿(ﬂ¿(˘¿)4¿)D¿)û¿)§¿)¿*6¿*<¿*î¿*¥¿*∫¿+¿+Ä¿+‚¿+Î¿+Ï¿,=¿,C¿,õ¿,˘¿-%¿-+¿-Ö¿-‚¿-Ë¿.N¿.¥¿/¿/%¿/&¿/y¿/¿/◊¿0/¿0Ö¿0†¿0¶¿1 ¿1V¿1k¿1q¿1’¿29¿2ú¿2¶¿2ß¿2Á¿2Ì¿3G¿3¢¿3≤¿3∏¿4¿41¿47¿4ö¿4˝¿5_¿5h¿5j¿5k¿5ú¿5ƒ¿5ˆ¿6¿6>¿6O¿6Q¿6R¿6Ü¿6†¿6»¿7¿7+¿7I¿7l¿7ê¿7≥¿7“¿7Ò¿7ı¿8¿8¿8	¿8F¿8h¿8ä¿8∑¿8–¿8È¿9¿9¿9,¿9.¿9/¿9w¿9{¿9Õ¿9‡¿9‰¿9Ú¿9ˆ¿:l¿:p¿:ê¿:ë¿:∆¿:«¿:¸¿;¿;Q¿;¢¿;Ï¿<!¿<'¿<v¿<¨¿<≤¿=¿=x¿=‹¿>B¿>H¿>ì¿>Ÿ¿>Ù¿>˙¿?G¿?ö¿?⁄¿?Ì¿?˛¿@¿@'¿@E¿@m¿@á¿@¨¿@œ¿@Ó¿A¿AK¿A^¿Aã¿Aœ¿B¿Bt¿Bà¿B„¿BÁ¿C~¿C¿C ¿CÍ¿C¿D?¿Dê¿D⁄¿E¿E¿Ec¿Eô¿Eü¿F¿Fe¿F…¿G/¿G5¿GÜ¿GÃ¿GÁ¿GÌ¿H:¿Hç¿HÕ¿H”¿I¿Im¿I∑¿J¿JT¿Jy¿Jå¿Jü¿J≤¿JÃ¿JÍ¿K¿K,¿K?¿K\¿KÉ¿K¢¿K√¿Kˇ¿L¿L?¿L|¿L‰¿LÂ¿MJ¿M¶¿MÍ¿N ¿Nj¿Nw¿N‡¿Nˆ¿OÇ¿Oà¿Oå¿P;¿Q#¿Q$¿Qt¿Qí¿Qò¿Q„¿R1¿Rl¿Rr¿R¡¿S¿S\¿Së¿Só¿SÁ¿T(¿T.¿Tê¿TÚ¿UU¿U∫¿U¿¿V¿V_¿VÇ¿Và¿V’¿W(¿Wh¿Wz¿Wç¿Wß¿W≈¿WÌ¿X
¿X-¿XG¿Xn¿Xç¿XÆ¿X—¿XÚ¿Y¿YT¿Yg¿Yî¿Y—¿Z9¿ZM¿Z¬¿Z∆¿[á¿[à¿[⁄¿[¯¿\¿\n¿\{¿\©¿]¿]¿]¿]¿]¿]P¿]s¿]√¿^¿^[¿^¨¿^˚¿_P¿_z¿_ñ¿_‰¿`¿`¿`O¿`h¿`Å¿`û¿`Æ¿`Ã¿a
¿a¿aë¿a™¿a»¿aŒ¿a“¿b
¿bî¿bñ¿bó¿c¿c¿cA¿cÜ¿cä¿d¿d¿d?¿d@¿dÑ¿dä¿dÿ¿e'¿eQ¿eW¿e”¿f¿fC¿fb¿f¿fÜ¿fŸ¿g.¿gõ¿gü¿g†¿gº¿g“¿gÒ¿h¿h¿h)¿h_¿hl¿hã¿hí¿hµ¿hË¿i¿i¿i¿i;¿i[¿i\¿iò¿i‚¿i„¿j.¿jH¿jN¿jô¿jÕ¿j”¿k¿k^¿kd¿kµ¿kˇ¿l8¿l>¿lq¿lw¿lÅ¿lÆ¿l⁄¿m¿m4¿m>¿mD¿mì¿m‹¿m‚¿n@¿nF¿nq¿nw¿nÇ¿ní¿n•¿n‡¿nÊ¿oA¿oÑ¿oä¿oΩ¿o√¿oÕ¿o˛¿p/¿p9¿p?¿pà¿pî¿pö¿pÂ¿q"¿q4¿qT¿q|¿qÉ¿q§¿q€¿q·¿r¿r2¿r¶¿r¨¿s¿s_¿se¿sà¿s±¿sæ¿s˘¿sˇ¿t3¿tx¿t≠¿t¿¿tƒ¿t≈¿t’¿tÒ¿u¿u7¿u\¿u^¿u_¿uy¿u†¿uÈ¿v¿v¿vI¿v\¿vo¿và¿v£¿v¥¿vµ¿v◊¿v˚¿w'¿w(¿w4¿wW¿ww¿wä¿w¥¿w»¿wÏ¿x¿xW¿x¶¿x™¿x´¿x∑¿y&¿y(¿y)¿yz¿y~¿y°¿yË¿y˙¿zB¿zO¿zP¿zû¿zØ¿z∞¿{¿{¿{!¿{"¿{Z¿{å¿{”¿{Ÿ¿|¿|b¿|h¿|π¿|‚¿|Ë¿}#¿}L¿}Ç¿}Õ¿}”¿~ ¿~J¿~è¿~õ¿~∞¿~Œ¿~Ù¿¿%¿B¿e¿∫¿Ä¿ÄN¿Äô¿ÄÏ¿ÅH¿ÅI¿Åè¿Åﬂ¿Ç¿Ç¿ÇN¿Ço¿Ç}¿Ç¥¿ÇŸ¿ÇÁ¿ÇË¿ÉV¿Éò¿Éú¿Éù¿ÉÌ¿Ñ!¿Ñ]¿Ñó¿Ñÿ¿Ñﬁ¿Ö¿Ö¿Ö[¿Ö†¿Öª¿Ö¡¿Ü¿Ü[¿Ün¿Ü©¿Ü“¿á¿áS¿áY¿á™¿áı¿à¿à¿àO¿ày¿àæ¿àŒ¿à„¿â ¿â%¿â<¿âU¿âr¿âï¿âÍ¿äA¿äÇ¿äÕ¿ã ¿ã|¿ã}¿ãœ¿å¿å¿å¿å9¿åP¿åt¿å¢¿å¬¿å¸¿å˛¿åˇ¿çM¿çQ¿çr¿ç∂¿ç«¿çÈ¿çÔ¿é=¿éá¿é¿¿é∆¿è¿èb¿èx¿èÇ¿èÉ¿èΩ¿è√¿ê	¿ê¿êQ¿êg¿êp¿êq¿ê¶¿ê¨¿êÓ¿ë¿ë¿ë¿ë¿ë\¿ëh¿ël¿ëã¿ëô¿ë—¿ëﬂ¿ë‡¿í¿í&¿í(¿í)¿í^¿íb¿í©¿íÌ¿ì.¿ì2¿ì{¿ìÀ¿î¿î1¿î5¿îÖ¿îŒ¿ï¿ï¿ïT¿ïì¿ï√¿ñ¿ñ$¿ñ*¿ñs¿ñª¿ó¿óZ¿óß¿óÍ¿ó¿ò7¿òM¿òi¿òΩ¿ò€¿ô8¿ôR¿ôq¿ôê¿ôÍ¿ôÓ¿ö¿ö=¿ö]¿ö¿öø¿ö¿¿õ¿õz¿õø¿õ›¿õﬁ¿ú&¿ú,¿úX¿ú^¿ún¿út¿ú≈¿ú˙¿ù¿ù¿ùp¿ù¡¿û¿ûY¿ûh¿ûn¿û∫¿ü¿üY¿ü°¿üÔ¿†9¿†?¿†å¿†í¿†∂¿†º¿°
¿°V¿°¶¿°ˆ¿¢¿¢!¿¢o¿¢∏¿£	¿£W¿£•¿£ı¿§=¿§j¿§p¿§∫¿§”¿§Ÿ¿§Á¿•¿•<¿•S¿•ì¿•º¿•Û¿¶,¿¶F¿¶`¿¶h¿¶r¿¶x¿¶«¿ß¿ßc¿ßÅ¿ßá¿ßï¿ß¬¿®¿®-¿®D¿®Ñ¿®ª¿®Ù¿©¿©¿© ¿©&¿©w¿©Ω¿™¿™¿™¿™H¿™_¿™≥¿™Ï¿´¿´¿´~¿´∑¿´—¿´Ÿ¿´„¿´È¿¨4¿¨}¿¨Œ¿≠¿≠¿≠0¿≠6¿≠u¿≠{¿≠…¿Æ¿Æh¿Æ≥¿Ø¿ØP¿Øõ¿ØÊ¿∞7¿∞à¿∞£¿∞©¿∞π¿∞ø¿±¿±1¿±y¿±è¿±Ω¿±ÿ¿±Ú¿≤.¿≤;¿≤_¿≤¶¿≤’¿≤€¿≤ﬂ¿≥/¿≥]¿≥|¿≥ö¿≥∫¿≥€¿¥
¿¥K¿¥L¿¥å¿¥´¿¥±¿¥¿¥ˆ¿µD¿µà¿µ≤¿µ≥¿µˆ¿∂;¿∂Ç¿∂∑¿∂Ω¿∂‚¿∑¿∑¿∑f¿∑∂¿∑¯¿∑˘¿∏H¿∏í¿∏£¿∏©¿∏Ô¿π¿π@¿πA¿π|¿π}¿π“¿∫¿∫	¿∫Z¿∫¶¿∫ı¿ª¿ªV¿ªW¿ªß¿ª‚¿º
¿º'¿ºE¿ºÉ¿ºú¿º†¿º‚¿º„¿Ω6¿Ωå¿Ω®¿ΩÆ¿æ ¿æN¿æû¿æÀ¿æÍ¿ø¿ø7¿øK¿øO¿øó¿øò¿øÊ¿ø˝¿¿¿¿G¿¿M¿¿ü¿¿Á¿¡¿¡¿¡`¿¡t¿¡–¿¡¿¬¿¬-¿¬Ö¿¬â¿¬ß¿¬ƒ¿¬„¿√¿√ ¿√]¿√^¿√¨¿√À¿√—¿ƒ¿ƒ¿ƒm¿ƒµ¿≈¿≈@¿≈b¿≈É¿≈µ¿≈π¿∆¿∆¿∆Z¿∆n¿∆t¿∆∏¿∆æ¿«¿«X¿«Å¿«π¿«˘¿»¿»<¿»@¿»à¿»â¿»⁄¿…,¿…¿…ê¿…ñ¿…Í¿ =¿ è¿ ﬁ¿À-¿ÀÄ¿À”¿Ã"¿Ãs¿Ãè¿Ãï¿ÃÕ¿Õ¿Õs¿Õ¬¿Œ¿Œ
¿ŒX¿Œ¿ŒÖ¿Œì¿Œ¨¿ŒÊ¿œ$¿œ=¿œx¿œµ¿œø¿œ≈¿–¿–b¿–∏¿—¿—¿—"¿—h¿—µ¿—È¿—Ô¿“?¿“é¿“⁄¿“Ú¿”¿”%¿”T¿”u¿”ª¿”ø¿‘¿‘¿‘d¿‘∂¿’	¿’¿’_¿’±¿÷¿÷Q¿÷£¿÷˜¿◊J¿◊W¿◊]¿◊í¿◊∂¿◊Â¿ÿ¿ÿR¿ÿV¿ÿµ¿ÿ∂¿ÿ˘¿ŸE¿Ÿb¿Ÿó¿Ÿ≤¿Ÿ—¿Ÿˇ¿⁄¿⁄J¿⁄K¿⁄ö¿⁄‚¿⁄Ë¿€6¿€k¿€ã¿€´¿€∆¿‹¿‹¿‹.¿‹J¿‹f¿‹Ç¿‹∞¿‹Ô¿‹¿›¿›%¿›j¿›Ö¿›•¿›¿¿›Ì¿›Ò¿ﬁO¿ﬁP¿ﬁ†¿ﬁ€¿ﬂ¿ﬂ%¿ﬂ@¿ﬂ|¿ﬂ®¿ﬂ¨¿ﬂ ¿ﬂÁ¿‡¿‡&¿‡T¿‡ì¿‡î¿‡Â¿·'¿·T¿·v¿·ë¿·”¿·◊¿·¸¿‚+¿‚l¿‚m¿‚Ω¿„¿„3¿„9¿„~¿„π¿„€¿„˝¿‰¿‰p¿‰t¿‰ö¿‰¿¿‰¿Â3¿Â4¿ÂÅ¿Â“¿Âı¿Ê¿Ê?¿ÊZ¿Êñ¿Ê¬¿Ê∆¿Ê‰¿Á¿Á ¿Á@¿Án¿Á≠¿ÁÆ¿Á˘¿ËK¿Ëö¿ËΩ¿Ë˜¿È¿È1¿Ès¿Èw¿Èî¿È±¿È”¿Í¿ÍF¿ÍG¿ÍÉ¿Íâ¿Í…¿Î¿Î`¿Î¥¿Ï¿ÏU¿ÏÅ¿Ïá¿Ïﬂ¿Ì>¿Ì^¿Ìy¿Ì¿¿Ó¿Ó¿Ó#¿Ó?¿Ó]¿Ó|¿Óü¿Ó¬¿Ó‚¿Ô¿ÔL¿ÔM¿ÔÇ¿Ôà¿Ô—¿¿F¿p¿∞¿À¿˝¿Ò¿Ò¿ÒK¿Òä¿Òã¿ÒŸ¿Ú0¿Úl¿ÚÆ¿Ú“¿ÚÌ¿Ûo¿Ûà¿Û÷¿Û‹¿Û‡¿Ù¿Ù"¿ÙA¿Ùs¿Ùú¿Ù‰¿ÙÂ¿ı4¿ıÄ¿ıÜ¿ı’¿ıÓ¿ıÙ¿ˆ@¿ˆâ¿ˆú¿ˆ·¿˜#¿˜B¿˜a¿˜|¿˜≥¿˜Ê¿¯¿¯L¿¯Å¿¯¥¿¯Ê¿˘¿˘O¿˘à¿˘æ¿˙¿˙¿˙j¿˙p¿˙t¿˙õ¿˙ƒ¿˙Ï¿˚¿˚A¿˚j¿˚í¿˚º¿˚Á¿¸¿¸J¿¸ö¿¸õ¿¸‚¿¸Ë¿˝6¿˝Ñ¿˝—¿˛¿˛a¿˛g¿˛µ¿ˇ¿ˇP¿ˇó¿ˇ®¿ˇ¿ 2¿ T¿ s¿ é¿ ≈¿ ˚¿0¿g¿ü¿“¿¿8¿m¿¶¿‹¿!¿:¿à¿é¿í¿π¿Â¿¿=¿k¿î¿º¿Ê¿¿G¿t¿ƒ¿≈¿¿%¿K¿ë¿¨¿∞¿Ú¿Û¿?¿O¿U¿†¿≠¿≥¿ˇ¿L¿ä¿ê¿ﬂ¿	+¿	1¿	Ç¿	œ¿
¿
"¿
l¿
∏¿¿@¿_¿É¿®¿⁄¿ﬁ¿ﬂ¿$¿*¿q¿w¿á¿ç¿›¿ˆ¿A¿`¿|¿ó¿¿Ù¿ı¿:¿@¿ê¿›¿„¿Û¿˘¿G¿e¿≤¿—¿Ì¿¿(¿s¿∫¿æ¿ø¿Ô¿¿8¿{¿|¿Ø¿µ¿˙¿<¿ä¿¬¿¿L¿m¿í¿‚¿¿¿D¿J¿Z¿´¿˜¿¿p¿ª¿º¿¿¿>¿â¿ç¿µ¿Ÿ¿¿R¿S¿ó¿ù¿Ó¿G¿ö¿Ó¿&¿,¿|¿Õ¿¿n¿æ¿¿^¿d¿µ¿¿Z¿±¿·¿5¿É¿«¿Õ¿ ¿o¿∫¿¿]¿c¿∑¿ ¿ Q¿ W¿ ®¿ √¿ …¿ ◊¿ Ï¿ ˇ¿!¿!/¿!7¿!=¿!k¿!ƒ¿!‚¿"¿"	¿"¿"J¿"k¿"¢¿"–¿"˙¿#¿#5¿#r¿#ê¿#Æ¿#Ù¿$ ¿$L¿$]¿$r¿$†¿$„¿%
¿%¿%¿%&¿%.¿%8¿%>¿%ó¿%ù¿%´¿%¿¿%”¿%Î¿&¿&¿&/¿&7¿&=¿&k¿&ƒ¿&‚¿'¿'	¿'¿'J¿'k¿'¢¿'–¿'˙¿(%¿(A¿(~¿(ú¿(∫¿) ¿),¿)X¿)i¿)~¿)¨¿)Ô¿*¿*3¿*g¿*ì¿*ù¿*£¿*Ø¿*∑¿*¡¿*«¿+¿+[¿+é¿+î¿+§¿+™¿+¯¿,¿,-¿,\¿,¿,•¿,Ã¿,Ì¿-¿-O¿-o¿-ä¿-Õ¿-Ë¿-È¿.¿.9¿.Ñ¿.œ¿/7¿/8¿/¿/æ¿/ø¿/È¿0	¿0.¿0S¿0x¿0Æ¿0–¿0Ú¿1(¿1^¿1í¿1∆¿1Ï¿2¿28¿2`¿2f¿2g¿2–¿3¿3I¿3J¿3p¿3œ¿4¿4¿4¿46¿4Ñ¿4ä¿4é¿4è¿4”¿4Ÿ¿5*¿5É¿5÷¿6*¿6|¿6Œ¿7¿7¿7[¿7£¿7©¿7˙¿8:¿8e¿8k¿8π¿9¿9	¿9U¿9¢¿9Ú¿9¯¿:S¿:d¿:j¿:x¿:ç¿:†¿:∏¿:–¿:ÿ¿:ﬁ¿;¿;e¿;É¿;§¿;™¿;º¿;Î¿<;¿<ä¿<€¿<˜¿=<¿=Ü¿=æ¿=˙¿>#¿>J¿>z¿>¢¿>®¿?¿?\¿?∂¿?¯¿@$¿@P¿@ç¿@ ¿@÷¿@˜¿AR¿A\¿Ab¿An¿Av¿AÄ¿AÜ¿Aﬂ¿AÂ¿AÛ¿B¿B¿B3¿BK¿B^¿Bw¿B¿BÖ¿B≥¿C¿C*¿CK¿CQ¿Cc¿Cí¿C‚¿D1¿DÇ¿Dû¿D„¿E-¿Ek¿E£¿Eﬂ¿F¿F/¿F_¿Fá¿Fç¿FË¿G?¿Gö¿G˜¿HB¿Hà¿H±¿HÀ¿I¿I"¿I>¿IÇ¿I¨¿I÷¿IÂ¿J¿JS¿Jà¿JΩ¿J√¿K¿Kw¿Kœ¿L¿LE¿LQ¿Lr¿L›¿LÁ¿LÌ¿L˘¿M¿M¿M¿M!¿M'¿Mt¿Mâ¿M™¿MŸ¿N ¿N'¿NQ¿Nu¿Nò¿N⁄¿N˝¿O¿OI¿Od¿Oe¿Oç¿O∏¿P¿P"¿PÄ¿P∫¿Q3¿Qk¿Ql¿Qí¿QÁ¿R1¿R8¿R9¿RR¿R†¿R¶¿R™¿R´¿R›¿S¿S3¿SV¿SÜ¿SÆ¿S÷¿S˙¿TA¿TB¿Tè¿Tï¿TÂ¿T˙¿U ¿U&¿U~¿Uæ¿UŸ¿V¿VF¿VJ¿Vh¿VÜ¿V´¿VÙ¿Vˆ¿V˜¿W?¿WC¿Ww¿W{¿W¬¿X¿XF¿X`¿Xë¿X€¿X˜¿X˝¿Y3¿YO¿Y^¿Y_¿Yâ¿Yè¿Yﬁ¿Z-¿Zv¿Zß¿Zø¿Z‚¿[¿[,¿[|¿[ô¿[≥¿[ƒ¿\¿\¿\¿\¿\"¿\É¿\Ñ¿\‘¿\˜¿]
¿]"¿]2¿]J¿]]¿]g¿]w¿]{¿]|¿]®¿]©¿]™¿]ƒ¿^
¿^¿^^¿^t¿^è¿^£¿^≥¿^œ¿^‚¿^Ï¿_\¿_`¿_a¿_™¿_∞¿`¿`3¿`v¿`x¿`y¿`¿¿`ƒ¿a	¿aN¿aá¿a»¿b¿b+¿bG¿bo¿b´¿b¨¿bÁ¿bÌ¿c1¿cx¿cØ¿cÙ¿d0¿d[¿d\¿dã¿dë¿d‹¿e,¿eq¿eå¿e•¿eÈ¿f¿f.¿fM¿fa¿fu¿fy¿fz¿f ¿fÀ¿fﬁ¿f‡¿f·¿fˆ¿f˙¿g6¿gE¿g_¿ge¿g∞¿g˚¿h¿h¿h\¿hb¿h±¿h ¿h€¿i	¿i(¿iC¿iÄ¿iø¿j¿j¿jE¿ji¿jì¿jæ¿jÂ¿k¿k6¿k7¿kg¿km¿kø¿k‚¿k˜¿k¯¿l7¿l=¿lã¿l◊¿m¿m0¿m1¿mÉ¿mû¿mü¿m—¿m◊¿n
¿n¿n=¿n∞¿nÊ¿o¿o¿o¿o[¿oa¿oî¿o–¿o—¿p¿p$¿pa¿p∞¿p◊¿p›¿q!¿qj¿qπ¿q€¿qÔ¿r¿r¿r[¿r_¿r`¿r≤¿r¿¿r‡¿rÛ¿s¿s&¿sM¿sT¿sX¿sY¿sâ¿sè¿s⁄¿t¿tC¿tI¿to¿tº¿u¿uQ¿uù¿uÎ¿v;¿và¿vÃ¿v“¿w!¿wA¿wV¿wé¿w•¿w∫¿w—¿wÊ¿wı¿x¿x¿x+¿xB¿x]¿xl¿xÉ¿x∂¿xÌ¿y/¿y:¿yB¿yH¿yL¿yM¿yÜ¿yå¿y‘¿y⁄¿y˝¿zK¿zb¿zÇ¿zï¿z´¿z¡¿zÌ¿{(¿{V¿{Ö¿{∫¿{·¿|¿|7¿|J¿|N¿|O¿|[¿|~¿|û¿|±¿|Ã¿|Ï¿}¿}9¿}=¿}>¿}J¿}à¿}â¿}’¿~'¿~C¿~}¿~ñ¿~∞¿~±¿~Ó¿$¿%¿?¿å¿æ¿Ä¿Äx¿Äú¿Ä∏¿ÄÔ¿Ä¿Å+¿Åt¿Åu¿ÅÆ¿Å›¿Åﬁ¿Ç¿ÇF¿ÇG¿Çò¿Ç‘¿Ç¸¿É¿É
¿É¿É#¿É'¿É(¿É4¿Éw¿Éy¿Éz¿É¡¿É≈¿Ñ¿Ñ*¿Ñc¿ÑÜ¿Ñá¿Ñ’¿ÑÍ¿Ö+¿Öp¿Ö¢¿Ö»¿ÖÊ¿ÖÍ¿ÖÎ¿Ü%¿Ü+¿Üd¿Ü¢¿ÜÁ¿á0¿áz¿áß¿áÔ¿à*¿à[¿àó¿à–¿à‘¿à’¿â+¿â,¿âó¿âò¿âÃ¿âÈ¿â¯¿â˘¿ä¿ä¿äB¿äH¿äô¿ä¥¿äÃ¿ä‹¿ä˝¿ã¿ã¿ã/¿ã3¿ã4¿ãÑ¿ãß¿ã≠¿ã˙¿åD¿åë¿åﬁ¿ç,¿çJ¿ç]¿çm¿çå¿ç©¿çº¿ç∆¿ç÷¿ç⁄¿ç€¿é¿é¿é¿é]¿éa¿é∞¿é»¿è¿è¿è¿èd¿èß¿è„¿ê¿êM¿êm¿êq¿ê‡¿ê·¿ë¿ë ¿ëp¿ë¬¿ë‹¿ë‚¿í0¿íÉ¿íƒ¿ì¿ì¿ì6¿ìN¿ìg¿ìz¿ì†¿ìß¿ìª¿ì—¿î¿î.¿î|¿îÄ¿ï¿ï ¿ï/¿ïa¿ïã¿ïë¿ïÃ¿ï˜¿ï¯¿ñ¿ñ<¿ñg¿ñm¿ñ®¿ñ÷¿ñ◊¿ñÓ¿ó0¿ób¿óh¿óü¿ó‚¿ó„¿ò3¿òV¿òâ¿òä¿òÿ¿òÙ¿ò˙¿ôE¿ôí¿ô£¿ô©¿ô˜¿ö¿öo¿ö¢¿öº¿ö¬¿ö˜¿õ¿õ¿õ¿õP¿õk¿õà¿õ∆¿ú¿ú(¿úf¿úá¿úΩ¿ú√¿ú‰¿ù¿ù¿ù*¿ùe¿ùw¿ù{¿ùÚ¿ùÙ¿ùı¿û*¿ûZ¿û[¿ûì¿ûó¿û·¿ûÓ¿ü1¿ü2¿üÇ¿üò¿üú¿üÍ¿†¿†¿†Y¿†]¿†p¿†t¿†Ä¿†µ¿†π¿†Ù¿°,¿°2¿°6¿°V¿°á¿°ç¿°ï¿°¿¢L¿¢~¿¢≤¿¢Ë¿£/¿£s¿£∞¿£ƒ¿£¿§¿§¿§D¿§S¿§ì¿§õ¿§®¿§≈¿§À¿§—¿§·¿§ˆ¿•¿•-¿•/¿•0¿•¿•´¿•Ø¿•ˇ¿¶O¿¶Ñ¿¶ø¿ß¿ß¿ß:¿ßR¿ßS¿ß•¿ß¿¿ß¡¿ßÕ¿ß„¿®=¿®V¿®n¿®µ¿®ﬁ¿®‰¿©¿©¿©       $â≥™4é°ÑÁ/// An immutable 32 bit color value in ARGB format.
///
/// Consider the light teal of the Flutter logo. It is fully opaque, with a red
/// channel value of 0x42 (66), a green channel value of 0xA5 (165), and a blue
/// channel value of 0xF5 (245). In the common "hash syntax" for color values,
/// it would be described as `#42A5F5`.
///
/// Here are some ways it could be constructed:
///
/// ```dart
/// Color c = const Color(0xFF42A5F5);
/// Color c = const Color.fromARGB(0xFF, 0x42, 0xA5, 0xF5);
/// Color c = const Color.fromARGB(255, 66, 165, 245);
/// Color c = const Color.fromRGBO(66, 165, 245, 1.0);
/// ```
///
/// If you are having a problem with `Color` wherein it seems your color is just
/// not painting, check to make sure you are specifying the full 8 hexadecimal
/// digits. If you only specify six, then the leading two digits are assumed to
/// be zero, which means fully-transparent:
///
/// ```dart
/// Color c1 = const Color(0xFFFFFF); // fully transparent white (invisible)
/// Color c2 = const Color(0xFFFFFFFF); // fully opaque white (visible)
/// ```
///
/// See also:
///
///  * [Colors](https://api.flutter.dev/flutter/material/Colors-class.html), which
///    defines the colors found in the Material Design specification. é´ÇÌ ëjëoÇ|/// Construct a color from the lower 32 bits of an [int].
///
/// The bits are interpreted as follows:
///
/// * Bits 24-31 are the alpha value.
/// * Bits 16-23 are the red value.
/// * Bits 8-15 are the green value.
/// * Bits 0-7 are the blue value.
///
/// In other words, if AA is the alpha value in hex, RR the red value in hex,
/// GG the green value in hex, and BB the blue value in hex, a color can be
/// expressed as `const Color(0xAARRGGBB)`.
///
/// For example, to get a fully opaque orange, you would use `const
/// Color(0xFFFF9000)` (`FF` for the alpha, `FF` for the red, `90` for the
/// green, and `00` for the blue).ëp	ëu  
ëHëIëOë`ëPëÉë}ëãëÖëçëúÇÇìcìdìlÅ£/// Construct a color from the lower 8 bits of four integers.
///
/// * `a` is the alpha value, with 0 being transparent and 255 being fully
///   opaque.
/// * `r` is [red], from 0 to 255.
/// * `g` is [green], from 0 to 255.
/// * `b` is [blue], from 0 to 255.
///
/// Out of range values are brought into range using modulo 255.
///
/// See also [fromRGBO], which takes the alpha value as a floating point
/// value.ìmìr  ìtìy  ì{ìÄ  ìÇìá  -ìïìèîìóîìÔìÕì´ìòì©ì§ìôì¢ìúìöìûìßì∫ìÀì∆ìªìƒìæìºì¿ì…ì‹ìÏìËì›ìÊì‡ìﬁì‚ìÎì˛îî
ìˇîîî îîîî"É ñññÅ /// Create a color from red, green, blue, and opacity, similar to `rgba()` in CSS.
///
/// * `r` is [red], from 0 to 255.
/// * `g` is [green], from 0 to 255.
/// * `b` is [blue], from 0 to 255.
/// * `opacity` is alpha channel of this color as a double, with 0.0 being
///   transparent and 1.0 being fully opaque.
///
/// Out of range values are brought into range using modulo 255.
///
/// See also [fromARGB], which takes the opacity as an integer value.ññ  ññ$  ñ&ñ+  ñ-ñ5  3ñIñCóñKóñﬂñ©ñsñLñqñlñMñjñdñNñbñ^ñWñOñYñañfñoñÉñßñ¢ñÑñ†ñöñÖñúñ•ñπñ‹ñÿñ∫ñ÷ñ–ñªñ“ñ€ñÔóóñóóñÒóóóó&Åò,ÄÎ/// A 32 bit value representing this color.
///
/// The bits are assigned as follows:
///
/// * Bits 24-31 are the alpha value.
/// * Bits 16-23 are the red value.
/// * Bits 8-15 are the green value.
/// * Bits 0-7 are the blue value. ò6Ä‹òÓÄß/// The alpha channel of this color in an 8 bit value.
///
/// A value of 0 means this color is fully transparent. A value of 255 means
/// this color is fully opaque.   ôÄœôÕÄ£/// The alpha channel of this color as a double.
///
/// A value of 0.0 means this color is fully transparent. A value of 1.0 means
/// this color is fully opaque.   ôÈaö(4/// The red channel of this color in an 8 bit value.   öNdöè6/// The green channel of this color in an 8 bit value.   ö∂böˆ5/// The blue channel of this color in an 8 bit value.   ≥[/≥o   ≥[≥\õÅ	õﬂÄ¥/// Returns a new color that matches this color with the alpha channel
/// replaced with `a` (which ranges from 0 to 255).
///
/// Out of range values will have unexpected effects. õÈõÓ   ú)ÅUú˛Ä∆/// Returns a new color that matches this color with the alpha channel
/// replaced with the given `opacity` (which ranges from 0.0 to 1.0).
///
/// Out of range values will have unexpected effects. ù
ù   ùÇÅûCÄ≤/// Returns a new color that matches this color with the red channel replaced
/// with `r` (which ranges from 0 to 255).
///
/// Out of range values will have unexpected effects. ûKûP   ûçÅ	üPÄ¥/// Returns a new color that matches this color with the green channel
/// replaced with `g` (which ranges from 0 to 255).
///
/// Out of range values will have unexpected effects. üZü_   üöÅ†\Ä≥/// Returns a new color that matches this color with the blue channel replaced
/// with `b` (which ranges from 0 to 255).
///
/// Out of range values will have unexpected effects. †e†j   †‰ÄΩ†Ú  °°   °•ÇK¢≥Ä˙/// Returns a brightness value between 0 for darkest and 1 for lightest.
///
/// Represents the relative luminance of the color. This value is computationally
/// expensive to calculate.
///
/// See <https://en.wikipedia.org/wiki/Relative_luminance>.   £ÙáX®ˆÑ«/// Linearly interpolate between two colors.
///
/// This is intended to be fast but as a result may be ugly. Consider
/// [HSVColor] or writing custom logic for interpolating colors.
///
/// If either color is null, this function linearly interpolates from a
/// transparent instance of the other color. This is usually preferable to
/// interpolating from [material.Colors.transparent] (`const
/// Color(0x00000000)`), which is specifically transparent _black_.
///
/// The `t` argument represents position on the timeline, with 0.0 meaning
/// that the interpolation has not started, returning `a` (or something
/// equivalent to `a`), 1.0 meaning that the interpolation has finished,
/// returning `b` (or something equivalent to `b`), and values in between
/// meaning that the interpolation is at the relevant point on the timeline
/// between `a` and `b`. The interpolation can be extrapolated beyond 0.0 and
/// 1.0, so negative values and values greater than 1.0 are valid (and can
/// easily be generated by curves such as [Curves.elasticInOut]). Each channel
/// will be clamped to the range 0 to 255.
///
/// Values for `t` are usually obtained from an [Animation<double>], such as
/// an [AnimationController]. ®˚©  ©©  ©©   ´PÜ ≠dÅˆ/// Combine the foreground color as a transparent color over top
/// of a background color, and return the resulting combined color.
///
/// This uses standard alpha blending ("SRC over DST") rules to produce a
/// blended color from two colors. This can be used as a performance
/// enhancement when trying to avoid needless alpha blending compositing
/// operations for two things that are solid colors with the same shape, but
/// overlay each other: instead, just paint one with the combined color. ≠o≠v  ≠Å≠à   ±tÅ±˝w/// Returns an alpha value representative of the provided [opacity] value.
///
/// The [opacity] value may not be null. ≤≤   ≤{Ä‹≤ï  ≤ò≤†  ≤{≤|≥éW≥°   ≥é≥è ¿ ≠¿ F`¿ ≠µÄ™/// A description of the style to use when drawing on a [Canvas].
///
/// Most APIs on [Canvas] take a [Paint] object to describe the style
/// to use for that operation. ¿ ∏¡Ä¢ ¿ π¿ π$Y/// Constructs an empty [Paint] object with all fields initialized to
/// their defaults.  '¿ ∞z0¿ ∞â ¿ ∞ë¿ ∞ô¿ ∞©¿ ∞ö¿ ∞Ø'¿ ∞¿ ¿ ∞’¿ ∞⁄!¿ ∞Î ¿ ∞˙¿ ∞ˇ%¿ ± ¿ ±#¿ ±(!¿ ±9 ¿ ±H¿ ±M'¿ ±^ ¿ ±s¿ ±x%¿ ±â ¿ ±ú¿ ±°&¿ ±≤ ¿ ±∆¿ ±À,¿ ±‹ ¿ ±ˆ¿ ±˚)¿ ≤ ¿ ≤#¿ ≤(&¿ ≤9 ¿ ≤M¿ ≤R0¿ ≤c ¿ ≤Ä¿ ≤Ü,¿ ≤ó ¿ ≤∞¿ ≤∂(¿ ≤« ¿ ≤‹¿ ≤‚#¿ ≤Û ¿ ≥¿ ≥
>¿ ≥ ¿ ≥D¿ ≥1¿ ≥G¿ ≥L2¿ ≥] ¿ ≥z¿ ≥m¿ ≥}¿ ≥Ç:¿ ≥ì ¿ ≥∏¿ ≥ß¿ ≥ª¿ ≥¿2¿ ≥— ¿ ≥Ó¿ ≥·¿ ≥Ò¿ ≥ˆ>¿ ¥ ¿ ¥0¿ ¥¿ ¥3¿ ¥8:¿ ¥I ¿ ¥n¿ ¥]¿ ¥q¿ ¥v<¿ ¥á ¿ ¥Æ¿ ¥ú¿ ¥±¿ ¥∂H¿ ¥« ¿ ¥˙¿ ¥‚¿ ¥˝¿ µB¿ µ ¿ µ@¿ µ+¿ µC¿ µH<¿ µY ¿ µÄ¿ µn¿ µÉ¿ µàN¿ µô ¿ µ“¿ µ∑¿ µ’¿ µ⁄F¿ µÎ ¿ ∂¿ ∂¿ ∂¿ ∂$>¿ ∂5 ¿ ∂^¿ ∂K¿ ∂a¿ ∂f4¿ ∂w ¿ ∂ñ¿ ∂à¿ ∂ô¿ ∂ﬂ%¿ ∂ ¿ ∑¿ ∑M¿ ∑\  ¿ ∑"¿ ∏ ¿ ∏¿ ∏'¿ ∏' ¿ ∏<¿ ∏A'¿ ∏R ¿ ∏g¿ ∏l"¿ ∏} ¿ ∏ç¿ ª,¿ ªê ¿ ª°¿ æ¡=¿ æ“ ¿ æÁ¿ æ¿ æÒ¿ æ¯¿ æ˘¿ Œ3¿ Œì ¿ ŒØ¿ Ë≤Ç¿ ÎãÇÆ/// Whether to dither the output when drawing images.
///
/// If false, the default value, dithering will be enabled when the input
/// color depth is higher than the output color depth. For example,
/// drawing an RGB8 image onto an RGB565 canvas.
///
/// This value also controls dithering of [shader]s, which can make
/// gradients appear smoother.
///
/// Whether or not dithering affects the output is implementation defined.
/// Some implementations may choose to ignore this completely, if they're
/// unable to control dithering.
///
/// To ensure that dithering is consistently enabled for your entire
/// application, set this to true before invoking any drawing related code.¿ Îù¿ πgÄ”¿ π‚i/// Whether to apply anti-aliasing to lines and images drawn on the
/// canvas.
///
/// Defaults to true.   ¿ ∫=Å¿ ∫A  ¿ ∫M
¿ ∫S   ¿ ª∞Ç'¿ ΩWÅÑ/// The color to use when stroking or filling a shape.
///
/// Defaults to opaque black.
///
/// See also:
///
///  * [style], which controls whether to stroke or fill (or both).
///  * [colorFilter], which overrides [color].
///  * [shader], which overrides [color] with more elaborate effects.
///
/// This color is not used when compositing. To colorize a layer, use
/// [colorFilter].   ¿ Ω⁄Ä´¿ Ωﬁ  ¿ Ω‰¿ ΩÎ   ¿ øÉú¿ ¬Ç“/// A blend mode to apply when a shape is drawn or a layer is composited.
///
/// The source colors are from the shape being drawn (e.g. from
/// [Canvas.drawPath]) or layer being composited (the graphics that were drawn
/// between the [Canvas.saveLayer] and [Canvas.restore] calls), after applying
/// the [colorFilter], if any.
///
/// The destination colors are from the background onto which the shape or
/// layer is being composited.
///
/// Defaults to [BlendMode.srcOver].
///
/// See also:
///
///  * [Canvas.saveLayer], which uses its [Paint]'s [blendMode] to composite
///    the layer when [Canvas.restore] is called.
///  * [BlendMode], which discusses the user of [Canvas.saveLayer] with
///    [blendMode].   ¿ ¬¢Äª¿ ¬¶  ¿ ¬∞¿ ¬ª   ¿ √aÄ·¿ √Âk/// Whether to paint inside shapes, the edges of shapes, or both.
///
/// Defaults to [PaintingStyle.fill].   ¿ ƒEÄ¢¿ ƒI  ¿ ƒO¿ ƒ^   ¿ ƒÎÅi¿ ≈ˇÄ˛/// How wide to make edges drawn when [style] is set to
/// [PaintingStyle.stroke]. The width is given in logical pixels measured in
/// the direction orthogonal to the direction of the path.
///
/// Defaults to 0.0, which correspond to a hairline width.   ¿ ∆WÄ¶¿ ∆[  ¿ ∆g¿ ∆o   ¿ «Å¿ «∏Ä†/// The kind of finish to place on the end of lines drawn when
/// [style] is set to [PaintingStyle.stroke].
///
/// Defaults to [StrokeCap.butt], i.e. no caps.   ¿ »Ä¶¿ »   ¿ »*¿ »5   ¿ »∆Ñ—¿ Õ3Ñ+/// The kind of finish to place on the joins between segments.
///
/// This applies to paths drawn when [style] is set to [PaintingStyle.stroke],
/// It does not apply to points drawn as lines with [Canvas.drawPoints].
///
/// Defaults to [StrokeJoin.miter], i.e. sharp corners.
///
/// Some examples of joins:
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_4_join.mp4}
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/round_join.mp4}
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/bevel_join.mp4}
///
/// The centers of the line segments are colored in the diagrams above to
/// highlight the joins, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///  * [strokeMiterLimit] to control when miters are replaced by bevels when
///    this is set to [StrokeJoin.miter].
///  * [strokeCap] to control what is drawn at the ends of the stroke.
///  * [StrokeJoin] for the definitive list of stroke joins.   ¿ ÕöÄ©¿ Õû  ¿ Õ©¿ Õµ   ¿ Œ∑Ör¿ ” Ñ”/// The limit for miters to be drawn on segments when the join is set to
/// [StrokeJoin.miter] and the [style] is set to [PaintingStyle.stroke]. If
/// this limit is exceeded, then a [StrokeJoin.bevel] join will be drawn
/// instead. This may cause some 'popping' of the corners of a path if the
/// angle between line segments is animated, as seen in the diagrams below.
///
/// This limit is expressed as a limit on the length of the miter.
///
/// Defaults to 4.0.  Using zero as a limit will cause a [StrokeJoin.bevel]
/// join to be used all the time.
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_0_join.mp4}
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_4_join.mp4}
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_6_join.mp4}
///
/// The centers of the line segments are colored in the diagrams above to
/// highlight the joins, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///  * [strokeJoin] to control the kind of finish to place on the joins
///    between segments.
///  * [strokeCap] to control what is drawn at the ends of the stroke.   ¿ ‘,ÄÃ¿ ‘0  ¿ ‘A¿ ‘I   ¿ ‘¸ÇW¿ ’ƒÄØ/// A mask filter (for example, a blur) to apply to a shape after it has been
/// drawn but before it has been composited into the image.
///
/// See [MaskFilter] for details.   ¿ ◊VÇ∞¿ ◊Z  ¿ ◊e¿ ◊r   ¿ ⁄
ÅÏ¿ €âÅ/// Controls the performance vs quality trade-off to use when sampling bitmaps,
/// as with an [ImageShader], or when drawing images, as with [Canvas.drawImage],
/// [Canvas.drawImageRect], [Canvas.drawImageNine] or [Canvas.drawAtlas].
///
/// Defaults to [FilterQuality.none].   ¿ €˘Ä≤¿ €˝  ¿ ‹¿ ‹   ¿ ‹ØÅ»¿ ﬁ;Åk/// The shader to use when stroking or filling a shape.
///
/// When this is null, the [color] is used instead.
///
/// See also:
///
///  * [Gradient], a shader that paints a color gradient.
///  * [ImageShader], a shader that tiles an [Image].
///  * [colorFilter], which overrides [shader].
///  * [color], which is used if [shader] and [colorFilter] are null.   ¿ ﬁzW¿ ﬁ~  ¿ ﬁÖ¿ ﬁé   ¿ ﬁ’Åv¿ ﬂ¡ÄŒ/// A color filter to apply when a shape is drawn or when a layer is
/// composited.
///
/// See [ColorFilter] for details.
///
/// When a shape is being drawn, [colorFilter] overrides [color] and [shader].   ¿ ‡OÅ<¿ ‡S  ¿ ‡_¿ ‡m   ¿ ·èÇ¬¿ „«Å˙/// The [ImageFilter] to use when drawing raster images.
///
/// For example, to blur an image using [Canvas.drawImage], apply an
/// [ImageFilter.blur]:
///
/// ```dart
/// import 'dart:ui' as ui;
///
/// ui.Image image;
///
/// void paint(Canvas canvas, Size size) {
///   canvas.drawImage(
///     image,
///     Offset.zero,
///     Paint()..imageFilter = ui.ImageFilter.blur(sigmaX: .5, sigmaY: .5),
///   );
/// }
/// ```
///
/// See also:
///
///  * [MaskFilter], which is used for drawing geometry.   ¿ ‰UÅ∑¿ ‰Y  ¿ ‰e¿ ‰s   ¿ ÊÅn¿ Á%Å/// Whether the colors of the image are inverted when drawn.
///
/// Inverting the colors of an image applies a new color filter that will
/// be composed with any user provided color filters. This is primarily
/// used for implementing smart invert on iOS.   ¿ ÁÅl¿ ÁÖ  ¿ Áí
¿ Áò   ¿ ÁÒX¿ Á˙    ¿ ËLb¿ ËP  ¿ ËX
¿ Ë^   ¿ ∑iÄÉ¿ ∑w    ¿ Îßáª¿ Î∫   ¿ Îß¿ Î® ¿ ˚yüO¿ Ñû/// Opaque handle to raw decoded image data (pixels).
///
/// To obtain an [Image] object, use the [ImageDescriptor] API.
///
/// To draw an [Image], use one of the methods on the [Canvas] class, such as
/// [Canvas.drawImage].
///
/// A class or method that receives an image object must call [dispose] on the
/// handle when it is no longer needed. To create a shareable reference to the
/// underlying image, call [clone]. The method or object that receives
/// the new instance will then be responsible for disposing it, and the
/// underlying image itself will be disposed when all outstanding handles are
/// disposed.
///
/// If `dart:ui` passes an `Image` object and the recipient wishes to share
/// that handle with other callers, [clone] must be called _before_ [dispose].
/// A handle that has been disposed cannot create new handles anymore.
///
/// See also:
///
///  * [Image](https://api.flutter.dev/flutter/widgets/Image-class.html), the class in the [widgets] library.
///  * [ImageDescriptor], which allows reading information about the image and
///    creating a codec to decode it.
///  * [instantiateImageCodec], a utility method that wraps [ImageDescriptor]. ¿ (Äß¿ -¿ .¿ / ¿ 0¿ 6  ¿ =
¿ C  ¿ I¿ O   ¿ Ù/¿ ¿ Ù¿ ı¿ ˚¿¿ ¸¿(¿4  ¿DS¿íA/// The number of image pixels along the image's horizontal axis. ¿úR¿Ë?/// The number of image pixels along the image's vertical axis. ¿Û¿¯ ¿¿Åï¿”Ä•/// Whether this reference to the underlying image is [dispose]d.
///
/// This only returns a valid value if asserts are enabled, and must not be
/// used otherwise.   ¿É¿ÅÊ/// Release this handle's claim on the underlying Image. This handle is no
/// longer usable after this method is called.
///
/// Once all outstanding handles have been disposed, the underlying image will
/// be disposed as well.
///
/// In debug mode, [debugGetOpenHandleStackTraces] will return a list of
/// [StackTrace] objects from all open handles' creation points. This is
/// useful when trying to determine what parts of the program are keeping an
/// image resident in memory.   ¿µÇÈ¿ˇÄÙ/// Converts the [Image] object into a byte array.
///
/// The [format] argument specifies the format in which the bytes will be
/// returned.
///
/// Returns a future that completes with the binary image data or an error
/// if encoding fails. ¿	0¿	  ¿	$¿	3¿	4¿	¢Å¢¿
mÄ∞/// If asserts are enabled, returns the [StackTrace]s of each open handle from
/// [clone], in creation order.
///
/// If asserts are disabled, this method always returns null.   ¿Hå®¿Qän/// Creates a disposable handle to this image.
///
/// Holders of an [Image] must dispose of the image when they no longer need
/// to access it or draw it. However, once the underlying image is disposed,
/// it is no longer possible to use it. If a holder of an image needs to share
/// access to that image with another object or method, [clone] creates a
/// duplicate handle. The underlying image will only be disposed once all
/// outstanding handles are disposed. This allows for safe sharing of image
/// references while still disposing of the underlying resources when all
/// consumers are finished.
///
/// It is safe to pass an [Image] handle to another object or method if the
/// current holder no longer needs it.
///
/// To check whether two [Image] references are referring to the same
/// underlying image memory, use [isCloneOf] rather than the equality operator
/// or [identical].
///
/// The following example demonstrates valid usage.
///
/// ```dart
/// import 'dart:async';
///
/// Future<Image> _loadImage(int width, int height) {
///   final Completer<Image> completer = Completer<Image>();
///   decodeImageFromPixels(
///     Uint8List.fromList(List<int>.filled(width * height * 4, 0xFF)),
///     width,
///     height,
///     PixelFormat.rgba8888,
///     // Don't worry about disposing or cloning this image - responsibility
///     // is transferred to the caller, and that is safe since this method
///     // will not touch it again.
///     (Image image) => completer.complete(image),
///   );
///   return completer.future;
/// }
///
/// Future<void> main() async {
///   final Image image = await _loadImage(5, 5);
///   // Make sure to clone the image, because MyHolder might dispose it
///   // and we need to access it again.
///   final MyImageHolder holder = MyImageHolder(image.clone());
///   final MyImageHolder holder2 = MyImageHolder(image.clone());
///   // Now we dispose it because we won't need it again.
///   image.dispose();
///
///   final PictureRecorder recorder = PictureRecorder();
///   final Canvas canvas = Canvas(recorder);
///
///   holder.draw(canvas);
///   holder.dispose();
///
///   canvas.translate(50, 50);
///   holder2.draw(canvas);
///   holder2.dispose();
/// }
///
/// class MyImageHolder {
///   MyImageLoader(this.image);
///
///   final Image image;
///
///   void draw(Canvas canvas) {
///     canvas.drawImage(image, Offset.zero, Paint());
///   }
///
///   void dispose() => image.dispose();
/// }
/// ```
///
/// The returned object behaves identically to this image. Calling
/// [dispose] on it will only dispose the underlying native resources if it
/// is the last remaining handle.   ¿ÙÇõ¿^ÇR/// Returns true if `other` is a [clone] of this and thus shares the same
/// underlying image memory, even if this or `other` is [dispose]d.
///
/// This method may return false for two images that were decoded from the
/// same underlying asset, if they are not sharing the same memory. For
/// example, if the same file is decoded using [instantiateImageCodec] twice,
/// or the same bytes are decoded using [decodeImageFromPixels] twice, there
/// will be two distinct [Image]s that render the same but do not share
/// underlying memory, and so will not be treated as clones of each other. ¿h¿o   ¿ì3¿¶   ¿ì¿î ¿ ÖV¿Í  ¿Ô'¿¿¿  ¿Ô¿¿ˆ¿¿˜¿¿ ¿%¿¡¿Ã ¿ﬁ¿ﬂ¿◊¿›¿ÿ¿#¿"    ¿A%¿I    ¿jÅ¿|  ¿à0¿ô  ¿°¿∞¿±¿zÄñ¿æ9/// Returns an error message on failure, null on success. ¿ 
¿œ  ¿÷¿Ì   ¿.Åd¿3    ¿ñ'¿õ    ¿Â9¿¯   ¿Â¿Ê¿ ¿À¿—¿‚¿“¿ ëâT¿'VÜæ/// Information for a single frame of an animation.
///
/// To obtain an instance of the [FrameInfo] interface, see
/// [Codec.getNextFrame].
///
/// The recipient of an instance of this class is responsible for calling
/// [Image.dispose] on [image]. To share the image with other interested
/// parties, use [Image.clone]. If the [FrameInfo] object itself is passed to
/// another method or object, that method or object must assume it is
/// responsible for disposing the image when done, and the passer must not
/// access the [image] after that point.
///
/// For example, the following code sample is incorrect:
///
/// ```dart
/// /// BAD
/// Future<void> nextFrameRoutine(Codec codec) async {
///   final FrameInfo frameInfo = await codec.getNextFrame();
///   _cacheImage(frameInfo);
///   // ERROR - _cacheImage is now responsible for disposing the image, and
///   // the image may not be available any more for this drawing routine.
///   _drawImage(frameInfo);
///   // ERROR again - the previous methods might or might not have created
///   // handles to the image.
///   frameInfo.image.dispose();
/// }
/// ```
///
/// Correct usage is:
///
/// ```dart
/// /// GOOD
/// Future<void> nextFrameRoutine(Codec codec) async {
///   final FrameInfo frameInfo = await codec.getNextFrame();
///   _cacheImage(frameInfo.image.clone(), frameInfo.duration);
///   _drawImage(frameInfo.image.clone(), frameInfo.duration);
///   // This method is done with its handle, and has passed handles to its
///   // clients already.
///   // The image will live until those clients dispose of their handles, and
///   // this one must not be disposed since it will not be used again.
///   frameInfo.image.dispose();
/// }
/// ``` ¿'dÅ¿(3¿(4¿(5Äª/// This class is created by the engine, and should not be instantiated
/// or extended directly.
///
/// To obtain an instance of the [FrameInfo] interface, see
/// [Codec.getNextFrame].¿(7¿(F  ¿(O¿(^   ¿(iÄô¿(˙{/// The duration this frame should be shown.
///
/// A zero duration indicates that the frame should be shown indefinitely. ¿)Ä⁄¿)›Äæ/// The [Image] object for this frame.
///
/// This object must be disposed by the recipient of this frame info.
///
/// To share this image with other interested parties, use [Image.clone].    ¿)ÁàÛ¿*ÊÄﬁ/// A handle to an image codec.
///
/// This class is created by the engine, and should not be instantiated
/// or extended directly.
///
/// To obtain an instance of the [Codec] interface, see
/// [instantiateImageCodec]. ¿+÷&¿+˜¿+¯¿+˘  ¿+÷¿+◊¿+›¿+Ó¿+ﬁ¿, ¿,  ¿,≠¿,≤  ¿,^¿,H#/// Number of frames in this image.   ¿,{.¿,É    ¿,ÃÄ’¿-bÄÖ/// Number of times to repeat the animation.
///
/// * 0 when the animation should be played once.
/// * -1 for infinity repetitions.   ¿-§8¿-¨    ¿-‡É√¿/2Å//// Fetches the next animation frame.
///
/// Wraps back to the first frame after returning the last frame.
///
/// The returned future can complete with an error if the decoding has failed.
///
/// The caller of this method is responsible for disposing the
/// [FrameInfo.image] on the returned object.   ¿1ßÄî¿1Î9/// Returns an error message on failure, null on success. ¿1˘$¿2   ¿2?Äô¿2∑n/// Release the resources used by this object. The object is no longer usable
/// after this method is called.   ¿*∆¿*«¿*Õ¿*ﬁ¿*Œ¿\¸Ñ¿]mP/// A handle for the framework to hold and retain an engine layer across frames. ¿]ûÄí¿^+¿^,¿^-a/// This class is created by the engine, and should not be instantiated
/// or extended directly. ¿^¿^¿^¿^¿^  ¿^4ÇÕ¿`⁄Çà/// Release the resources used by this object. The object is no longer usable
/// after this method is called.
///
/// EngineLayers indirectly retain platform specific graphics resources. Some
/// of these resources, such as images, may be memory intensive. It is
/// important to dispose of EngineLayer objects that will no longer be used as
/// soon as possible to avoid retaining these resources until the next
/// garbage collection.
///
/// Once this EngineLayer is disposed, it is no longer eligible for use as a
/// retained layer, and must not be passed as an `oldLayer` to any of the
/// [SceneBuilder] methods which accept that parameter.   ¿]M¿]N¿]T¿]e¿]U¿a¿ Fp¿cﬁÇ∏/// A complex, one-dimensional subset of a plane.
///
/// A path consists of a number of sub-paths, and a _current point_.
///
/// Sub-paths consist of segments of various types, such as lines,
/// arcs, or beziers. Sub-paths can be open or closed, and can
/// self-intersect.
///
/// Closed sub-paths enclose a (possibly discontiguous) region of the
/// plane based on the current [fillType].
///
/// The _current point_ is initially at the origin. After each
/// operation adding a segment to a sub-path, the current point is
/// updated to the end of that segment.
///
/// Paths can be drawn on canvases using [Canvas.drawPath], and can
/// used to create clip regions using [Canvas.clipPath]. ¿d^ ¿dL¿dP%/// Create a new empty [Path] object. ¿d0¿d1¿d7¿dH¿d8¿dõÄú¿e2¿e3¿e4Äé/// Avoids creating a new native backing for the path for methods that will
/// create it later, such as [Path.from], [shift] and [transform].  ¿e;ÅJ¿f¿f¿fÄ¡/// Creates a copy of another [Path].
///
/// This copy is fast and does not require additional memory unless either
/// the `source` path or the path returned by this constructor are modified.¿f¿f    ¿f∫Ä ¿gTÄÇ/// Determines how the interior of this path is calculated.
///
/// Defaults to the non-zero winding rule, [PathFillType.nonZero].   ¿gá>¿gã  ¿gî¿g¢   1¿di.¿dn    ¿fà.¿fç  ¿fî¿fö   ¿g…-¿gÕ    ¿g˘:¿g˛  ¿h¿h   ¿h7j¿hq2/// Starts a new sub-path at the given coordinate. ¿hx¿hÄ  ¿hÇ¿hä   ¿h•Äè¿hÚE/// Starts a new sub-path at the given offset from the current point. ¿i	¿i	  ¿i	¿i   ¿i8Äâ¿iëO/// Adds a straight line segment from the current point to the given
/// point. ¿iò¿i†  ¿i¢¿i™   ¿i≈Ä¿¿jCt/// Adds a straight line segment from the current point to the point
/// at the given offset from the current point. ¿jR	¿jZ  ¿j]	¿je   ¿jâÄı¿k Äã/// Adds a quadratic bezier segment that curves from the current
/// point to the given point (x2,y2), using the control point
/// (x1,y1). ¿k2	¿k:  ¿k=	¿kE  ¿kH	¿kP  ¿kS	¿k[   ¿kÇÅO¿lcÄ”/// Adds a quadratic bezier segment that curves from the current
/// point to the point at the offset (x2,y2) from the current point,
/// using the control point at the offset (x1,y1) from the current
/// point. ¿l}	¿lÖ  ¿là	¿lê  ¿lì	¿lõ  ¿lû	¿l¶   ¿l’Å ¿muÄî/// Adds a cubic bezier segment that curves from the current point
/// to the given point (x3,y3), using the control points (x1,y1) and
/// (x2,y2). ¿m}	¿mÖ  ¿mà	¿mê  ¿mì	¿mõ  ¿mû	¿m¶  ¿m©	¿m±  ¿m¥	¿mº   ¿mŸÅ[¿nƒÄ›/// Adds a cubic bezier segment that curves from the current point
/// to the point at the offset (x3,y3) from the current point, using
/// the control points at the offsets (x1,y1) and (x2,y2) from the
/// current point. ¿n‘	¿n‹  ¿nﬂ	¿nÁ  ¿nÍ	¿nÚ  ¿nı	¿n˝  ¿o 	¿o  ¿o	¿o   ¿o8Åî¿pxÅ0/// Adds a bezier segment that curves from the current point to the
/// given point (x2,y2), using the control points (x1,y1) and the
/// weight w. If the weight is greater than 1, then the curve is a
/// hyperbola; if the weight equals 1, it's a parabola; and if it is
/// less than 1, it is an ellipse. ¿pÄ	¿pà  ¿pã	¿pì  ¿pñ	¿pû  ¿p°	¿p©  ¿p¨¿p¥   ¿p–ÅÌ¿rYÅw/// Adds a bezier segment that curves from the current point to the
/// point at the offset (x2,y2) from the current point, using the
/// control point at the offset (x1,y1) from the current point and
/// the weight w. If the weight is greater than 1, then the curve is
/// a hyperbola; if the weight equals 1, it's a parabola; and if it
/// is less than 1, it is an ellipse. ¿ri	¿rq  ¿rt	¿r|  ¿r	¿rá  ¿rä	¿rí  ¿rï¿rù   ¿r¡Éˆ¿uÍÉ/// If the `forceMoveTo` argument is false, adds a straight line
/// segment and an arc segment.
///
/// If the `forceMoveTo` argument is true, starts a new sub-path
/// consisting of an arc segment.
///
/// In either case, the arc segment consists of the arc that follows
/// the edge of the oval bounded by the given rectangle, from
/// startAngle radians around the oval up to startAngle + sweepAngle
/// radians around the oval, with zero radians being the point on
/// the right hand side of the oval that crosses the horizontal line
/// that intersects the center of the rectangle and with positive
/// angles going clockwise around the oval.
///
/// The line segment added if `forceMoveTo` is false starts at the
/// current point and ends at the start of the arc. ¿u	¿uˆ  ¿u˚¿v  ¿v¿v  ¿v!¿v'   ¿v∫Äú¿vø  ¿v∆¿vŒ  ¿v”
¿v€  ¿vﬂ¿vÁ  ¿vÌ¿vı  ¿w
¿w  ¿w¿w%  ¿w0¿w6   ¿wZÉﬂ¿yÔÇw/// Appends up to four conic curves weighted to describe an oval of `radius`
/// and rotated by `rotation` (measured in degrees and clockwise).
///
/// The first curve begins from the last point in the path and the last ends
/// at `arcEnd`. The curves follow a path in a direction determined by
/// `clockwise` and `largeArc` in such a way that the sweep angle
/// is always less than 360 degrees.
///
/// A simple line is appended if either either radii are zero or the last
/// point in the path is `arcEnd`. The radii are scaled to fit the last path
/// point if both are greater than zero but too small to describe an arc.
/// ¿y˙¿z  ¿z¿z  ¿z0¿z8  ¿zK¿zQ  ¿zf¿zl  ¿z¿z%¿z&¿zB¿z[¿zw¿{<Ä¿¿{A  ¿{M¿{U  ¿{]¿{e  ¿{m¿{u  ¿{ê¿{ò  ¿{†¿{®  ¿{±¿{∑  ¿{”¿{Ÿ   ¿|Ñ{¿Ç„/// Appends up to four conic curves weighted to describe an oval of `radius`
/// and rotated by `rotation` (measured in degrees and clockwise).
///
/// The last path point is described by (px, py).
///
/// The first curve begins from the last point in the path and the last ends
/// at `arcEndDelta.dx + px` and `arcEndDelta.dy + py`. The curves follow a
/// path in a direction determined by `clockwise` and `largeArc`
/// in such a way that the sweep angle is always less than 360 degrees.
///
/// A simple line is appended if either either radii are zero, or, both
/// `arcEndDelta.dx` and `arcEndDelta.dy` are zero. The radii are scaled to
/// fit the last path point if both are greater than zero but too small to
/// describe an arc. ¿¿!  ¿3¿;  ¿T¿\  ¿o¿u  ¿ä¿ê  ¿C¿I¿J¿f¿¿õ¿ÄÄ˚¿ÄÑ  ¿Äò¿Ä†  ¿Ä®¿Ä∞  ¿Ä∏¿Ä¿  ¿Ä„¿ÄÎ  ¿ÄÛ¿Ä˚  ¿Å¿Å%  ¿Å.¿Å4   ¿Å~Ä◊¿Å·Y/// Adds a new sub-path that consists of four lines that outline the
/// given rectangle. ¿ÅÈ	¿ÅÔ   ¿ÇXZ¿Ç]  ¿Çf¿Çn  ¿Çs
¿Ç{  ¿Ç¿Çá  ¿Çç¿Çï   ¿Ç∂Åè¿É—Å/// Adds a new sub-path that consists of a curve that forms the
/// ellipse that fills the given rectangle.
///
/// To add a circle, pass an appropriate rectangle as `oval`. [Rect.fromCircle]
/// can be used to easily describe the circle's center [Offset] and radius. ¿ÉŸ	¿Éﬂ   ¿ÑHZ¿ÑM  ¿ÑV¿Ñ^  ¿Ñc
¿Ñk  ¿Ño¿Ñw  ¿Ñ}¿ÑÖ   ¿Ñ¶Çî¿ÜäÅŒ/// Adds a new sub-path with one arc segment that consists of the arc
/// that follows the edge of the oval bounded by the given
/// rectangle, from startAngle radians around the oval up to
/// startAngle + sweepAngle radians around the oval, with zero
/// radians being the point on the right hand side of the oval that
/// crosses the horizontal line that intersects the center of the
/// rectangle and with positive angles going clockwise around the
/// oval. ¿Üë	¿Üó  ¿Üú¿Ü§  ¿ÜØ¿Ü∑   ¿á=Äç¿áB  ¿áJ¿áR  ¿áW
¿á_  ¿ác¿ák  ¿áq¿áy  ¿áè¿áó  ¿á¢¿á™   ¿áŒÅ´¿à˙Å/// Adds a new sub-path with a sequence of line segments that connect the given
/// points.
///
/// If `close` is true, a final line segment will be added that connects the
/// last point to the first point.
///
/// The `points` argument is interpreted as offsets from the origin. ¿â¿â  ¿â
¿â    ¿â|J¿âÅ  ¿âç¿âö  ¿â°
¿âß   ¿â Ä˚¿ädÄé/// Adds a new sub-path that consists of the straight lines and
/// curves needed to form the rounded rectangle described by the
/// argument. ¿äm¿ät   ¿ä»9¿äÕ  ¿ä◊¿ä‰   ¿ãÇ{¿åÅ/// Adds the sub-paths of `path`, offset by `offset`, to this path.
///
/// If `matrix4` is specified, the path will be transformed by this matrix
/// after the matrix is translated by the given offset. The matrix is a 4x4
/// matrix stored in column major order. ¿å$	¿å*  ¿å/¿å7  ¿å?¿åM   ¿çÉE¿çà  ¿çë	¿çó  ¿çú	¿ç§  ¿çß	¿çØ   ¿çÀm¿ç–  ¿ç„	¿çÈ  ¿çÓ	¿çˆ  ¿ç˘	¿é  ¿é¿é   ¿é<É¿è“ÅÇ/// Adds the sub-paths of `path`, offset by `offset`, to this path.
/// The current sub-path is extended with the first sub-path
/// of `path`, connecting them with a lineTo if necessary.
///
/// If `matrix4` is specified, the path will be transformed by this matrix
/// after the matrix is translated by the given `offset`.  The matrix is a 4x4
/// matrix stored in column major order. ¿è·	¿èÁ  ¿èÏ¿èÙ  ¿è¸¿ê
   ¿ëMS¿ëR  ¿ëb	¿ëh  ¿ëm	¿ëu  ¿ëx	¿ëÄ   ¿ë£y¿ë®  ¿ë¡	¿ë«  ¿ëÃ	¿ë‘  ¿ë◊	¿ëﬂ  ¿ë‚¿ëÔ   ¿í Äß¿í´ÄÅ/// Closes the last sub-path, as if a straight line had been drawn
/// from the current point to the first point of the sub-path.   ¿íÀÄ≈¿ìtÄù/// Clears the [Path] object of all sub-paths, returning it to the
/// same state it had when it was created. The _current point_ is
/// reset to the origin.   ¿ìîÅ√¿îÓÅF/// Tests to see if the given point is within the path. (That is, whether the
/// point would be in the visible portion of the path if the path was used
/// with [Canvas.clipPath].)
///
/// The `point` argument is interpreted as an offset from the origin.
///
/// Returns true if the point is in the path, and false otherwise. ¿î˜¿îˇ   ¿ïZ:¿ï_  ¿ïi¿ïq  ¿ïs¿ï{   ¿ïòÅ¿ñj/// Returns a copy of the path with all the segments of every
/// sub-path translated by the given offset. ¿ñ¿ñ   ¿ñ¶D¿ñ´  ¿ñ≤¿ñ∏  ¿ñ¿	¿ñ»  ¿ñÀ	¿ñ”   ¿ñÓÅ¿óck/// Returns a copy of the path with all the segments of every
/// sub-path transformed by the given matrix. ¿óm¿óz   ¿ò K¿ò  ¿ò¿ò  ¿ò¿ò+   ¿òOÑ¿õÊÉ0/// Computes the bounding rectangle for this path.
///
/// A path containing only axis-aligned points on the same straight line will
/// have no area, and therefore `Rect.isEmpty` will return true for such a
/// path. Consider checking `rect.width + rect.height > 0.0` instead, or
/// using the [computeMetrics] API to check the path length.
///
/// For many more elaborate paths, the bounds may be inaccurate.  For example,
/// when a path contains a circle, the points used to compute the bounds are
/// the circle's implied control points, which form a square around the circle;
/// if the circle has a transformation applied using [transform] then that
/// square is rotated, and the (axis-aligned, non-rotated) bounding box
/// therefore ends up grossly overestimating the actual area covered by the
/// circle.   ¿úc1¿úo    ¿úòÇû¿ù·Å0/// Combines the two paths according to the manner specified by the given
/// `operation`.
///
/// The resulting path will be constructed from non-overlapping contours. The
/// curve order is reduced where possible so that cubics may be turned into
/// quadratics, and quadratics maybe turned into lines. ¿ùÈ¿ù¯  ¿û
¿û  ¿û
¿û   ¿ü9A¿ü>  ¿üB
¿üH  ¿üN
¿üT  ¿üZ¿ü_   ¿ü~áı¿ßáM/// Creates a [PathMetrics] object for this path, which can describe various
/// properties about the contours of the path.
///
/// A [Path] is made up of zero or more contours. A contour is made up of
/// connected curves and segments, created via methods like [lineTo],
/// [cubicTo], [arcTo], [quadraticBezierTo], their relative counterparts, as
/// well as the add* methods such as [addRect]. Creating a new [Path] starts
/// a new contour once it has any drawing instructions, and another new
/// contour is started for each [moveTo] instruction.
///
/// A [PathMetric] object describes properties of an individual contour,
/// such as its length, whether it is closed, what the tangent vector of a
/// particular offset along the path is. It also provides a method for
/// creating sub-paths: [PathMetric.extractPath].
///
/// Calculating [PathMetric] objects is not trivial. The [PathMetrics] object
/// returned by this method is a lazy [Iterable], meaning it only performs
/// calculations when the iterator is moved to the next [PathMetric]. Callers
/// that wish to memoize this iterable can easily do so by using
/// [Iterable.toList] on the result of this method. In particular, callers
/// looking for information about how many contours are in the path should
/// either store the result of `path.computeMetrics().length`, or should use
/// `path.computeMetrics().toList()` so they can repeatedly check the length,
/// since calling `Iterable.length` causes traversal of the entire iterable.
///
/// In particular, callers should be aware that [PathMetrics.length] is the
/// number of contours, **not the length of the path**. To get the length of
/// a contour in a path, use [PathMetric.length].
///
/// If `forceClosed` is set to true, the contours of the path will be measured
/// as if they had been closed, even if they were not explicitly closed. ¿ß&¿ß,  ¿ß9¿cæ¿cø¿c≈¿c÷¿c∆¿ßwáÅ¿®/Ä±/// The geometric description of a tangent: the angle at a point.
///
/// See also:
///  * [PathMetric.getTangentForOffset], which returns the tangent of an offset along a path. ¿®;Äƒ ¿®û¿®•V/// Creates a [Tangent] with the given values.
///
/// The arguments must not be null.¿®¶¿®¨  ¿®µ¿®ª  ¿®»¿®Œ¿®ﬂ¿®ÿ¿®œ¿®€¿®Ë¿®Ó¿®˝¿®ˆ¿®Ô¿®˘¿©ÅR¿©ﬁ¿©ﬂ¿©ËÄ√/// Creates a [Tangent] based on the angle rather than the vector.
///
/// The [vector] is computed to be the unit vector at the given angle, interpreted
/// as clockwise radians from the x axis.¿©È¿©Ò  ¿©˙¿™   ¿™YÄ—¿´"Ä≥/// Position of the tangent.
///
/// When used with [PathMetric.getTangentForOffset], this represents the precise
/// position that the given offset along the path corresponds to. ¿´/Å¿¨.ÄÁ/// The vector of the curve at [position].
///
/// When used with [PathMetric.getTangentForOffset], this is the vector of the
/// curve that is at the given offset along the path (i.e. the direction of the
/// curve at [position]). ¿¨9ÇΩ¿ÆÀÇ+/// The direction of the curve at [position].
///
/// When used with [PathMetric.getTangentForOffset], this is the angle of the
/// curve that is the given offset along the path (i.e. the direction of the
/// curve at [position]).
///
/// This value is in radians, with 0.0 meaning pointing along the x axis in
/// the positive x-axis direction, positive numbers pointing downward toward
/// the negative y-axis, i.e. in a clockwise direction, and negative numbers
/// pointing upward toward the positive y-axis, i.e. in a counter-clockwise
/// direction.     ¿Æ˙Ñ¿±ıÇÙ/// An iterable collection of [PathMetric] objects describing a [Path].
///
/// A [PathMetrics] object is created by using the [Path.computeMetrics] method,
/// and represents the path as it stood at the time of the call. Subsequent
/// modifications of the path do not affect the [PathMetrics] object.
///
/// Each path metric corresponds to a segment, or contour, of a path.
///
/// For example, a path consisting of a [Path.lineTo], a [Path.moveTo], and
/// another [Path.lineTo] will contain two contours and thus be represented by
/// two [PathMetric] objects.
///
/// This iterable does not memoize. Callers who need to traverse the list
/// multiple times, or who need to randomly access elements of the list, should
/// use [toList] on this object. ¿≤1s¿≤<¿≤=¿≤> ¿≤?	¿≤E  ¿≤J¿≤P  ¿≤l¿≤b¿≤n¿≤Ä¿≤Å¿≤Ç¿≤¢¿≤É¿≤è¿≤°¿≤ê¿≤ñ¿≤®$¿≤√  ¿≤—;¿≤ˆ   ¿≤—¿≤“  ¿≥É€¿≥h/// Used by [PathMetrics] to track iteration from one segment of a path to the
/// next for measurement. ¿≥∂G¿≥»¿≥…¿≥  ¿≥À¿≥—  ¿≥‡¿≥Ê¿≥˚¿≥Ù¿≥Á¿≥˜¿¥¿¥  ¿¥¿¥)  ¿¥:Å¿¥U   ¿¥:¿¥;¿∂.Äª¿∂?   ¿∂.¿∂/ ¿∂Ìå´¿π‘Ç‡/// Utilities for measuring a [Path] and extracting sub-paths.
///
/// Iterate over the object returned by [Path.computeMetrics] to obtain
/// [PathMetric] objects. Callers that want to randomly access elements or
/// iterate multiple times should use `path.computeMetrics().toList()`, since
/// [PathMetrics] does not memoize.
///
/// Once created, the metrics are only valid for the path as it was specified
/// when [Path.computeMetrics] was called. If additional contours are added or
/// any contours are updated, the metrics need to be recomputed. Previously
/// created metrics will still refer to a snapshot of the path at the time they
/// were computed, rather than to the actual metrics for the new mutations to
/// the path. ¿π„ÄÓ¿πÌ¿πÓ¿πÔ ¿π¿πˆ  ¿∫¿∫¿∫¿∫¿∫¿∫¿∫,¿∫%¿∫.¿∫6¿∫7¿∫=¿∫Z¿∫>¿∫F¿∫G¿∫l¿∫c¿∫n¿∫v¿∫w¿∫¿∫ú¿∫Ä¿∫à¿∫â¿∫≤¿∫•¿∫¥¿∫º¿∫Ω¿∫’I¿ª3/// Return the total length of the current contour. ¿ª#ÅA¿º\Å!/// Whether the contour is closed.
///
/// Returns true if the contour ends with a call to [Path.close] (which may
/// have been implied when using methods like [Path.addRect]) or if
/// `forceClosed` was specified as true in the call to [Path.computeMetrics].
/// Returns false otherwise. ¿ºiÇ‡¿ø=Ç±/// The zero-based index of the contour.
///
/// [Path] objects are made up of zero or more contours. The first contour is
/// created once a drawing command (e.g. [Path.lineTo]) is issued. A
/// [Path.moveTo] command after a drawing command may create a new contour,
/// although it may not if optimizations are applied that determine the move
/// command did not actually result in moving the pen.
///
/// This property is only valid with reference to its original iterator and
/// the contours of the path at the time the path's metrics were computed. If
/// additional contours were added or existing contours updated, this metric
/// will be invalid for the current state of the path. ¿øN¿øa   ¿øoÇ,¿¡0Å£/// Computes the position of the current contour at the given offset, and the
/// angle of the path at that point.
///
/// For example, calling this method with a distance of 1.41 for a line from
/// 0.0,0.0 to 2.0,2.0 would give a point 1.0,1.0 and the angle 45 degrees
/// (but in radians).
///
/// Returns null if the contour has zero [length].
///
/// The distance is clamped to the [length] of the current contour. ¿¡D¿¡L   ¿¡üÅÅ¿¬yÄÃ/// Given a start and end distance, return the intervening segment(s).
///
/// `start` and `end` are clamped to legal values (0..[length])
/// Begin the segment with a moveTo if `startWithMoveTo` is true. ¿¬Ö¿¬ç  ¿¬ì
¿¬õ  ¿¬†¿¬¶  ¿¬∑¿√$r¿√7   ¿√$¿√% ¿√öâK¿√†  ¿√“T ¿√“¿√ﬁ ¿√ﬂ	¿√Â  ¿√Í¿√   ¿Ã3ÄØ¿Ã Äå/// The index of the current contour in the list of contours in the path.
///
/// [nextContour] will increment this to the zero based index.¿Ã‡¿Ã· ¿ƒ)P¿ƒ.  ¿ƒ;	¿ƒA  ¿ƒF¿ƒL   ¿ƒ}ÄΩ¿ƒÑ  ¿ƒã¿ƒê   ¿≈=@¿≈D  ¿≈L¿≈Q   ¿≈ÅÅÂ¿≈ä  ¿≈û¿≈£  ¿≈∞¿≈∏   ¿«iY¿«u  ¿«Ä¿«Ö  ¿«í¿«ö   ¿«∆Å\¿«À  ¿«◊¿«‹  ¿«È¿«Ò  ¿«˜
¿«ˇ  ¿»¿»
  ¿»¿…%Äã¿…*  ¿…7¿…=  ¿…E¿…J  ¿…W¿…_  ¿…e
¿…m  ¿…r¿…x  ¿…â¿…¥Äø¿…π  ¿…¬¿…«   ¿ v?¿ {  ¿ Ö¿ ä   ¿ÀhÄâ¿Àm    ¿ÀÙ;¿À˘     ¿–dÜ£¿—nÅ/// A mask filter to apply to shapes as they are painted. A mask filter is a
/// function that takes a bitmap of color pixels, and returns another bitmap of
/// color pixels.
///
/// Instances of this class are used with [Paint.maskFilter] on [Paint] objects. ¿—}É>¿‘W¿‘X¿‘\Ç•/// Creates a mask filter that takes the shape being drawn and blurs it.
///
/// This is commonly used to approximate shadows.
///
/// The `style` argument controls the kind of effect to draw; see [BlurStyle].
///
/// The `sigma` argument controls the size of the effect. It is the standard
/// deviation of the Gaussian blur to apply. The value must be greater than
/// zero. The sigma corresponds to very roughly half the radius of the effect
/// in pixels.
///
/// A blur is an expensive operation and should therefore be used sparingly.
///
/// The arguments must not be null.
///
/// See also:
///
///  * [Canvas.drawShadow], which is a more efficient way to draw shadows.¿‘b¿‘h  ¿‘s¿‘y  ¿‘Ü¿‘å¿‘õ¿‘î¿‘ç¿‘ó¿‘§¿‘™¿‘π¿‘≤¿‘´¿‘µ¿‘ø¿‘œ  ¿‘Ÿ¿‘Ê  ¿’r¿’É ¿’è¿’ú¿’≠ ¿’π¿÷k<¿÷   ¿÷k¿÷l¿’”Äî¿’Ì  ¿’¿’¯  ¿’”¿’‘¿÷´Z¿÷æ   ¿÷´¿÷¨ ¿◊	òˆ¿ÿ‘Åƒ/// A description of a color filter to apply when drawing a shape or compositing
/// a layer with a particular [Paint]. A color filter is a function that takes
/// two colors, and outputs one color. When applied during compositing, it is
/// independently applied to each pixel of the layer being drawn before the
/// entire layer is merged with the destination.
///
/// Instances of this class are used with [Paint.colorFilter] on [Paint]
/// objects. ¿ÿ˚ÇX¿⁄¿¿⁄¡¿⁄≈Å•/// Creates a color filter that applies the blend mode given as the second
/// argument. The source color is the one given as the first argument, and the
/// destination color is the one from the layer being composited.
///
/// The output of this filter is then composited into the background according
/// to the [Paint.blendMode], using the output of this filter as the source
/// and the background as the destination.¿⁄∆¿⁄Õ  ¿⁄”¿⁄ﬁ  ¿⁄˜¿⁄¿⁄˘¿€¿€¿€¿€0¿€(¿€2¿€F¿€@¿€H¿€Wà%¿‚ˆ¿‚˜¿‚˝á/// Construct a color filter that transforms a color by a 5x5 matrix, where
/// the fifth row is implicitly added in an identity configuration.
///
/// Every pixel's color value, repsented as an `[R, G, B, A]`, is matrix
/// multiplied to create a new color:
///
/// ```text
/// | R' |   | a00 a01 a02 a03 a04 |   | R |
/// | G' |   | a10 a11 a22 a33 a44 |   | G |
/// | B' | = | a20 a21 a22 a33 a44 | * | B |
/// | A' |   | a30 a31 a22 a33 a44 |   | A |
/// | 1  |   |  0   0   0   0   1  |   | 1 |
/// ```
///
/// The matrix is in row-major order and the translation column is specified
/// in unnormalized, 0...255, space. For example, the identity matrix is:
///
/// ```
/// const ColorFilter identity = ColorFilter.matrix(<double>[
///   1, 0, 0, 0, 0,
///   0, 1, 0, 0, 0,
///   0, 0, 1, 0, 0,
///   0, 0, 0, 1, 0,
/// ]);
/// ```
///
/// ## Examples
///
/// An inversion color matrix:
///
/// ```
/// const ColorFilter invert = ColorFilter.matrix(<double>[
///   -1,  0,  0, 0, 255,
///    0, -1,  0, 0, 255,
///    0,  0, -1, 0, 255,
///    0,  0,  0, 1,   0,
/// ]);
/// ```
///
/// A sepia-toned color matrix (values based on the [Filter Effects Spec](https://www.w3.org/TR/filter-effects-1/#sepiaEquivalent)):
///
/// ```
/// const ColorFilter sepia = ColorFilter.matrix(<double>[
///   0.393, 0.769, 0.189, 0, 0,
///   0.349, 0.686, 0.168, 0, 0,
///   0.272, 0.534, 0.131, 0, 0,
///   0,     0,     0,     1, 0,
/// ]);
/// ```
///
/// A greyscale color filter (values based on the [Filter Effects Spec](https://www.w3.org/TR/filter-effects-1/#grayscaleEquivalent)):
///
/// ```
/// const ColorFilter greyscale = ColorFilter.matrix(<double>[
///   0.2126, 0.7152, 0.0722, 0, 0,
///   0.2126, 0.7152, 0.0722, 0, 0,
///   0.2126, 0.7152, 0.0722, 0, 0,
///   0,      0,      0,      1, 0,
/// ]);
/// ```¿‚˛¿„  ¿„"¿„¿„$¿„=¿„2¿„?¿„U¿„M¿„W¿„m¿„g¿„o¿„ÄÄÙ¿„Ì¿„Ó¿„ˇW/// Construct a color filter that applies the sRGB gamma curve to the RGB
/// channels. ¿‰¿‰
¿‰¿‰,¿‰!¿‰.¿‰D¿‰<¿‰F¿‰Z¿‰T¿‰\¿‰xÅ¿‰Ú¿‰Û¿Âd/// Creates a color filter that applies the inverse of the sRGB gamma curve
/// to the RGB channels. ¿Â¿Â¿Â¿Â1¿Â&¿Â3¿ÂI¿ÂA¿ÂK¿Â_¿ÂY¿Âa¿Â}¿Âä  ¿Âî¿Â•  ¿Â≥¿Â«  ¿Â“¿Â‹  ¿Ê¿Ê0 ¿Ê=¿ÊT!¿Êe ¿Êt¿Êò,¿Ê© ¿Ê√¿Ê·,¿ÊÚ ¿Á¿Îåz¿Î†   ¿Îå¿Îç¿Ï
Å¡¿Ï!   ¿Ï
¿Ï¿ÁLV¿Áe   ¿ÁL¿ÁM¿Á¶Ç¨¿Á¥    ¿ÍVÅ2¿Íp  ¿Ís¿Í{  ¿ÍV¿ÍW¿ÌœÇ.¿Ì‚   ¿Ìœ¿Ì– ¿Ü•¿ÒLÅD/// A [ColorFilter] that is backed by a native SkColorFilter.
///
/// This is a private class, rather than being the implementation of the public
/// ColorFilter, because we want ColorFilter to be const constructible and
/// efficiently comparable, so that widgets can check for ColorFilter equality to
/// avoid repainting. ¿Ò~Äœ¿Òä¿Òã¿Òè ¿Òê¿Òñ  ¿Ò§¿Ò™¿Ò∫¿Ò≥¿Ò´¿Ò∂¿Ò√¿Ò…¿ÒÒ¿Òÿ¿Ò ¿Ò—¿Ò“¿Ò€¿ÒÊ¿ÒÁ¿ÚQÄÀ¿Ú]¿Ú^¿Úd ¿Úe¿Úk  ¿Úy¿Ú¿Úè¿Úà¿ÚÄ¿Úã¿Úò¿Úû¿Ú»¿Ú≠¿Úü¿Ú¶¿Úß¿Ú∞¿Úª¿Úº¿ÛÄ∆¿Û+¿Û,¿Û= ¿Û>¿ÛD  ¿ÛR¿ÛX¿Ûh¿Ûa¿ÛY¿Ûd¿Ûq¿Ûw¿Û¨¿ÛÜ¿Ûx¿Û¿ÛÄ¿Ûâ¿Ûî¿Ûï¿ÛÈÄ∆¿Ûı¿Ûˆ¿Ù ¿Ù¿Ù  ¿Ù¿Ù"¿Ù2¿Ù+¿Ù#¿Ù.¿Ù;¿ÙA¿Ùv¿ÙP¿ÙB¿ÙI¿ÙJ¿ÙS¿Ù^¿Ù_¿Ù≥Äç¿ı9o/// The original Dart object that created the native wrapper, which retains
/// the values used for the filter.  ¿ıE5¿ıJ    ¿ı}G¿ıÇ  ¿ıå	¿ıë  ¿ıó¿ıú   ¿ı«E¿ıÃ  ¿ıÿ¿ıÂ   ¿ˆI¿ˆ    ¿ˆ[I¿ˆ`     ¿ˆ®ã¥¿¯äÅ“/// A filter operation to apply to a raster image.
///
/// See also:
///
///  * [BackdropFilter], a widget that applies [ImageFilter] to its rendering.
///  * [ImageFiltered], a widget that applies [ImageFilter] to its children.
///  * [SceneBuilder.pushBackdropFilter], which is the low-level API for using
///    this class as a backdrop filter.
///  * [SceneBuilder.pushImageFilter], which is the low-level API for using
///    this class as a child layer filter. ¿¯öÅ[¿¯È¿¯Í¿¯Ó9/// Creates an image filter that applies a Gaussian blur.¿¯Ò¿¯˘  ¿˘¿˘  ¿˘"¿˘%  ¿˘¿˘¿˘/¿˘7¿˘8¿˘˘Å`¿˙ü¿˙†¿˙¶Äé/// Creates an image filter that dilates each input pixel's channel values
/// to the max value within the given radii along the x and y axes.¿˙©¿˙±  ¿˙ø¿˙«  ¿˙∫¿˙–¿˚]Åa¿¸¿¸¿¸Äë/// Create a filter that erodes each input pixel's channel values
/// to the minimum channel value within the given radii along the x and y axes.¿¸¿¸  ¿¸%¿¸-  ¿¸ ¿¸6¿¸¬Ç_¿˝∑¿˝∏¿˝æÄŸ/// Creates an image filter that applies a matrix transformation.
///
/// For example, applying a positive scale matrix (see [Matrix4.diagonal3])
/// when used with [BackdropFilter] would magnify the background image.¿˝ø¿˝Ã  ¿˝Î/¿˝˙  ¿˛	¿˛¿˛¿ˇ%ÅÕ¿ 3¿ 4¿ ;Ä/// Composes the `inner` filter with `outer`, to combine their effects.
///
/// Creates a single [ImageFilter] that when applied, has the same effect as
/// subsequently applying `inner` and `outer`, i.e.,
/// result = outer(inner(source)).¿ >¿ T  ¿ Z¿ p    ¿=¿H    ¿î$¿°     ¿^ÉX¿d  ¿íH ¿í¿§ ¿ß¿∂  ¿ª¿    ¿ﬁ¿  ¿¯!¿  ¿?@¿W ¿f¿r¿s¿y¿~¿z¿«L¿ﬁ   ¿«¿»¿cQ¿w   ¿c¿d¿É@¿ú   ¿É¿Ñ¿M¿*   ¿¿¿hÄ˜¿Ç  ¿Ö¿ç  ¿h¿i ¿∏Ñk¿æ  ¿Úa ¿Ú¿
 ¿¿  ¿#¿2  ¿9¿H   ¿W¿d  ¿n¿{  ¿Ö¿î  ¿µ>¿Õ ¿‹¿Ë¿È¿Ì¿Ú¿Ó¿;ÄÌ¿F    ¿,S¿C   ¿,¿-¿	Â<¿	˘   ¿	Â¿	Ê¿˜@¿   ¿˜¿¯¿ÉT¿ñ   ¿É¿Ñ¿€Å¿ı  ¿¯¿	   ¿€¿‹ ¿
%ÇÛ¿
+  ¿
YE ¿
Y¿
k ¿
n¿
}  ¿
Ö¿
î   ¿
¢¿
Ø  ¿
∫¿
«  ¿
”@¿
Î ¿
˙¿¿¿¿¿¿[I¿r   ¿[¿\¿ÿ>¿Ï   ¿ÿ¿Ÿ¿@¿0   ¿¿¿®J¿ª   ¿®¿©¿ˆÄﬁ¿  ¿¿  ¿ˆ¿˜ ¿ÇÏ¿   ¿MD ¿M¿^ ¿a¿p  ¿x¿á   ¿ï¿¢  ¿≠¿∫  ¿∆?¿ﬁ ¿Ì¿˘¿˙¿ˇ¿¿ ¿MH¿d   ¿M¿N¿«=¿€   ¿«¿»¿	@¿"   ¿	¿
¿ôI¿¨   ¿ô¿ö¿ÊÄ›¿   ¿¿  ¿Ê¿Á ¿ÉÜ¿  ¿=N ¿=¿P ¿S¿b  ¿n¿}   ¿è¿°  ¿∞¿¬  ¿ÔB¿ ¿¿"¿#¿+¿0¿,¿ys¿ê   ¿y¿z¿FF¿Z   ¿F¿G¿5@¿N   ¿5¿6¿_¿   ¿¿Ò¿SÄÔ¿m  ¿p¿x  ¿S¿T ¿êçñ¿¿Å)/// An [ImageFilter] that is backed by a native SkImageFilter.
///
/// This is a private class, rather than being the implementation of the public
/// ImageFilter, because we want ImageFilter to be efficiently comparable, so that
/// widgets can check for ImageFilter equality to avoid repainting. ¿+Å+¿s¿t¿x9/// Creates an image filter that applies a Gaussian blur.¿y¿ì  	¿†¿¶¿µ¿Æ¿ß¿±¿∆¿æ¿»¿∂Åk¿U¿V¿\Äé/// Creates an image filter that dilates each input pixel's channel values
/// to the max value within the given radii along the x and y axes.¿]¿q  	¿~¿Ñ¿ì¿å¿Ö¿è¿§¿ú¿¶¿yÅk¿¿¿!Äë/// Create a filter that erodes each input pixel's channel values
/// to the minimum channel value within the given radii along the x and y axes.¿"¿5  	¿B¿H¿W¿P¿I¿S¿h¿`¿j¿:Ç#¿(¿)¿/ÄŸ/// Creates an image filter that applies a matrix transformation.
///
/// For example, applying a positive scale matrix (see [Matrix4.diagonal3])
/// when used with [BackdropFilter] would magnify the background image.¿0¿D  	¿Q¿W¿f¿_¿X¿b¿w¿o¿y¿ΩÅF¿˚¿¸¿//// Converts a color filter to an image filter.¿¿  	¿&¿,¿;¿4¿-¿7¿L¿D¿N¿_Å√¿û¿ü¿ß0/// Composes `_innerFilter` with `_outerFilter`.¿®¿Ω  	¿ ¿–¿ﬂ¿ÿ¿—¿€¿¿Ë¿Ú¿ ñÄç¿!o/// The original Dart object that created the native wrapper, which retains
/// the values used for the filter.  ¿Ú5¿˜    ¿YY¿^  ¿h¿p  ¿w¿  ¿Ü¿ã   ¿$Q¿)  ¿5¿=  ¿E¿M   ¿ÁO¿Ï  ¿˜¿ˇ  ¿¿   ¿`Y¿e  ¿q¿~  ¿Ü¿ã   ¿U¿  ¿¿*   ¿ %n¿ *  ¿ 8¿ F  ¿ R¿ `    ¿!(Å<¿!©z/// Base class for objects such as [Gradient] and [ImageShader] which
/// correspond to shaders as used by [Paint.shader]. ¿!’Äç¿"]¿"^¿"_a/// This class is created by the engine, and should not be instantiated
/// or extended directly. ¿";¿"<¿"B¿"S¿"C    ¿9/£·¿:vÅ@/// A shader (as used by [Paint.shader]) that renders a color gradient.
///
/// There are several types of gradients, represented by the various constructors
/// on this class.
///
/// See also:
///
///  * [Gradient](https://api.flutter.dev/flutter/painting/Gradient-class.html), the class in the [painting] library.
/// ¿:…à¿?‰¿?Â¿?ÎÑÊ/// Creates a linear gradient from `from` to `to`.
///
/// If `colorStops` is provided, `colorStops[i]` is a number from 0.0 to 1.0
/// that specifies where `color[i]` begins in the gradient. If `colorStops` is
/// not provided, then only two stops, at 0.0 and 1.0, are implied (and
/// `color` must therefore only have two entries).
///
/// The behavior before `from` and after `to` is described by the `tileMode`
/// argument. For details, see the [TileMode] enum.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_linear.png)
///
/// If `from`, `to`, `colors`, or `tileMode` are null, or if `colors` or
/// `colorStops` contain null values, this constructor will throw a
/// [NoSuchMethodError].
///
/// If `matrix4` is provided, the gradient fill will be transformed by the
/// specified 4x4 matrix relative to the local coordinate system. `matrix4` must
/// be a column-major matrix packed into a list of 16 values.¿?Ò¿?˘  ¿@	¿@
  ¿@¿@  ¿@+¿@:  ¿@I"¿@S  ¿@q¿@  -¿@]¿@e¿@f¿@é¿@î¿@©¿@ï¿@£¿@®¿@§¿@≥¿@π¿@Ã¿@∫¿@»¿@À¿@…¿@÷¿@‹¿@Î¿@‰¿@›¿@Á¿@ı¿@˚¿A¿A¿@¸¿A¿A¿A¿AH¿A-¿A%¿A¿A(¿A0¿A?¿AG¿A@¿AR¿AW¿AX¿AY¿AZ¿CÅå
¿JÉ¿JÑ¿JäÜΩ/// Creates a radial gradient centered at `center` that ends at `radius`
/// distance from the center.
///
/// If `colorStops` is provided, `colorStops[i]` is a number from 0.0 to 1.0
/// that specifies where `color[i]` begins in the gradient. If `colorStops` is
/// not provided, then only two stops, at 0.0 and 1.0, are implied (and
/// `color` must therefore only have two entries).
///
/// The behavior before and after the radius is described by the `tileMode`
/// argument. For details, see the [TileMode] enum.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_radial.png)
///
/// If `center`, `radius`, `colors`, or `tileMode` are null, or if `colors` or
/// `colorStops` contain null values, this constructor will throw a
/// [NoSuchMethodError].
///
/// If `matrix4` is provided, the gradient fill will be transformed by the
/// specified 4x4 matrix relative to the local coordinate system. `matrix4` must
/// be a column-major matrix packed into a list of 16 values.
///
/// If `focal` is provided and not equal to `center` and `focalRadius` is
/// provided and not equal to 0.0, the generated shader will be a two point
/// conical radial gradient, with `focal` being the center of the focal
/// circle and `focalRadius` being the radius of that circle. If `focal` is
/// provided and not equal to `center`, at least one of the two offsets must
/// not be equal to [Offset.zero].¿Jê¿Jò  ¿J£¿J´  ¿J∂¿J√  ¿J–¿Jﬂ  ¿JÓ"¿J¯  ¿K¿K$  ¿K0¿K9  ¿KC¿KK  '¿K¿K
¿K¿KX¿Kc¿Ki¿KÄ¿Kj¿Kx¿K¿Ky¿Kä¿Kê¿Kü¿Kò¿Kë¿Kõ¿K©¿KØ¿K¿¿Kπ¿K∞¿Kº¿K ¿K–¿K¸¿K·¿KŸ¿K—¿K‹¿K‰¿KÛ¿K˚¿KÙ¿L¿L¿L¿L¿L¿Q&âü¿Wr¿Ws¿WxÜ/// Creates a sweep gradient centered at `center` that starts at `startAngle`
/// and ends at `endAngle`.
///
/// `startAngle` and `endAngle` should be provided in radians, with zero
/// radians being the horizontal line to the right of the `center` and with
/// positive angles going clockwise around the `center`.
///
/// If `colorStops` is provided, `colorStops[i]` is a number from 0.0 to 1.0
/// that specifies where `color[i]` begins in the gradient. If `colorStops` is
/// not provided, then only two stops, at 0.0 and 1.0, are implied (and
/// `color` must therefore only have two entries).
///
/// The behavior before `startAngle` and after `endAngle` is described by the
/// `tileMode` argument. For details, see the [TileMode] enum.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_sweep.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_sweep.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_sweep.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_sweep.png)
///
/// If `center`, `colors`, `tileMode`, `startAngle`, or `endAngle` are null,
/// or if `colors` or `colorStops` contain null values, this constructor will
/// throw a [NoSuchMethodError].
///
/// If `matrix4` is provided, the gradient fill will be transformed by the
/// specified 4x4 matrix relative to the local coordinate system. `matrix4` must
/// be a column-major matrix packed into a list of 16 values.¿W~¿WÜ  ¿Wë¿Wû  ¿W´¿W∫  ¿W…"¿W”  ¿WÒ¿W˘  ¿X¿X  ¿X1¿X?  >¿W›¿WÂ¿WÊ¿X¿X(¿X ¿X$¿X%¿X*¿XN¿XT¿Xk¿XU¿Xc¿Xj¿Xd¿Xu¿X{¿Xä¿XÉ¿X|¿XÜ¿Xî¿Xö¿X´¿X§¿Xõ¿Xß¿Xµ¿Xª¿XŒ¿X«¿Xº¿X ¿Xÿ¿Xﬁ¿XÔ¿XË¿Xﬂ¿XÎ¿X˘¿Xˇ¿Y¿Y¿Y ¿Y¿Y¿Y%¿YQ¿Y6¿Y.¿Y&¿Y1¿Y9¿YH¿YP¿YI¿Y[¿Y`¿Ya¿Yb¿Yc  ¿:ì2¿:ò    ¿BÈÄî¿BÓ  ¿B˙¿C  ¿C¿C  ¿C#¿C1  ¿C<¿CA  ¿CJ¿CX   ¿OéÄ¨¿Oì  ¿Oü¿Oß  ¿OØ¿O∑  ¿Oø¿O«  ¿OŒ¿OŸ  ¿O‡¿OÓ  ¿O˘¿O˛  ¿P¿P   ¿P=ÄÂ¿PB  
¿PO¿PW  ¿P^¿Pf  ¿Pm¿Pu  ¿PÅ¿Pâ  ¿Pé¿Pñ  ¿Põ¿P£  ¿P≠¿P∏  ¿Pø¿PÕ  ¿Pÿ¿P›  ¿PÊ¿PÙ   ¿Z»Äæ¿ZÕ  ¿Zÿ¿Z‡  ¿ZË¿Z  ¿Z¯¿[  ¿[
¿[  ¿[#¿[(  ¿[1¿[9  ¿[D¿[L  ¿[U¿[c   ¿[äÅÑ¿[ñ  ¿[™¿[∑  ¿[æ¿[Õ    ¿]ÖÉ¿]V=/// A shader (as used by [Paint.shader]) that tiles an image. ¿]uÑ\ ¿_ò¿_£Å¯/// Creates an image-tiling shader. The first argument specifies the image to
/// tile. The second and third arguments specify the [TileMode] for the x
/// direction and y direction respectively. The fourth argument gives the
/// matrix to apply to the effect. All the arguments are required and must not
/// be null, except for [filterQuality]. If [filterQuality] is not specified
/// at construction time it will be deduced from the environment where it is used,
/// such as from [Paint.filterQuality].¿_§¿_´  ¿_±¿_ª  ¿_ø¿_…  ¿_Õ¿_⁄  ¿_Ë¿_¯  "¿_|¿_}¿_É¿_î¿_Ñ¿`¿`¿`%¿`¿`¿`!¿`S¿`Y¿`e¿`^¿`Z¿`a¿`l¿`r¿`~¿`w¿`s¿`z¿`Ö¿`ã¿`õ¿`î¿`å¿`ó¿`¢¿`ß¿`®¿`©¿`™  ¿a‘5¿aŸ    ¿bÄá¿b  ¿b#¿b+  ¿b1¿b6  ¿b:¿b?  ¿bC¿bH  ¿b[¿bh    ¿bóí∆¿dÅn/// An instance of [FragmentProgram] creates [Shader] objects (as used by [Paint.shader]) that run SPIR-V code.
///
/// This API is in beta and does not yet work on web.
/// See https://github.com/flutter/flutter/projects/207 for roadmap.
///
/// [A current specification of valid SPIR-V is here.](https://github.com/flutter/engine/blob/main/lib/spirv/README.md)
/// ¿g¢År¿gÕ¿gŒ¿gœ ¿g÷¿gÎ  ¿gı¿g˚  ¿g¢¿g£¿g©¿g∫¿g™¿h¿i!¿i'  ¿i=¿iL   ¿dBÉ\¿f9Å«/// Creates a fragment program from SPIR-V byte data as an input.
///
/// One instance should be created per SPIR-V input. The constructed object
/// should then be reused via the [shader] method to create [Shader] objects
/// that can be used by [Shader.paint].
///
/// [A current specification of valid SPIR-V is here.](https://github.com/flutter/engine/blob/master/lib/spirv/README.md)
/// SPIR-V not meeting this specification will throw an exception. ¿fG¿f\  ¿ff¿fl  ¿fx¿i^9¿ic    ¿iöG¿iü  ¿i•¿i≠  ¿i≤¿i∏   ¿iÂäﬁ¿q+Ü‹/// Constructs a [Shader] object suitable for use by [Paint.shader] with
/// the given uniforms.
///
/// This method is suitable to be called synchronously within a widget's
/// `build` method or from [CustomPainter.paint].
///
/// `floatUniforms` can be passed optionally to initialize the shader's
/// uniforms. If they are not set they will each default to 0.
///
/// When initializing `floatUniforms`, the length of float uniforms must match
/// the total number of floats defined as uniforms in the shader, or an
/// [ArgumentError] will be thrown. Details are below.
///
/// Consider the following snippit of GLSL code.
///
/// ```
/// layout (location = 0) uniform float a;
/// layout (location = 1) uniform vec2 b;
/// layout (location = 2) uniform vec3 c;
/// layout (location = 3) uniform mat2x2 d;
/// ```
///
/// When compiled to SPIR-V and provided to the constructor, `floatUniforms`
/// must have a length of 10. One per float-component of each uniform.
///
/// `program.shader(floatUniforms: Float32List.fromList([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));`
///
/// The uniforms will be set as follows:
///
/// a: 1
/// b: [2, 3]
/// c: [4, 5, 6]
/// d: [7, 8, 9, 10] // 2x2 matrix in column-major order
///
/// `imageSamplers` must also be sized correctly, matching the number of UniformConstant
/// variables of type SampledImage specified in the SPIR-V code.
///
/// Consider the following snippit of GLSL code.
///
/// ```
/// layout (location = 0) uniform sampler2D a;
/// layout (location = 1) uniform sampler2D b;
/// ```
///
/// After being compiled to SPIR-V  `imageSamplers` must have a length
/// of 2.
///
/// Once a [Shader] is built, uniform values cannot be changed. Instead,
/// [shader] must be called again with new uniform values. ¿q8¿qF  ¿qX"¿ql   ¿t«Äî¿tÃ  ¿tŸ¿tÍ  ¿tı¿u  ¿u!¿u'    ¿u_É»¿u  ¿u¢Å ¿vK¿vZÄ†/// This class is created by the engine and should not be instantiated
/// or extended directly.
///
/// To create a [_FragmentShader], use a [FragmentProgram].¿v`¿vf  ¿vs¿vy  ¿vå¿ví  ¿v©¿vÆ¿vØ¿v∞¿v±¿v∑¿vÕ  ¿vŸ ¿vÎ  ¿v˝(¿w  ¿x≠x¿x¡   ¿x≠¿xÆ¿w*Å¿wD  ¿wG¿wO  ¿w*¿w+¿u_¿u`¿uf¿uw¿ug¿{"ë€¿{`7/// A set of vertex data used by [Canvas.drawVertices]. ¿{éà ¿~ë¿~ôÇ‚/// Creates a set of vertex data for use with [Canvas.drawVertices].
///
/// The [mode] and [positions] parameters must not be null.
/// The [positions] parameter is a list of triangular mesh vertices(xy).
///
/// If the [textureCoordinates] or [colors] parameters are provided, they must
/// be the same length as [positions].
///
/// The [textureCoordinates] parameter is used to cutout
/// the image set in the image shader.
/// The cut part is applied to the triangular mesh.
/// Note that the [textureCoordinates] are the coordinates on the image.
///
/// If the [indices] parameter is provided, all values in the list must be
/// valid index values for [positions].
/// e.g. The [indices] parameter for a simple triangle is [0,1,2].¿~ü¿~´  ¿~¥¿~¬  ¿~“ ¿~·  ¿~¯¿  ¿¿  ¿,¿2¿?¿8¿3¿;¿I¿O¿a¿Z¿P¿]¿Éüàu¿à»¿à…¿àÃÑÍ/// Creates a set of vertex data for use with [Canvas.drawVertices], directly
/// using the encoding methods of [new Vertices].
/// Note that this constructor uses raw typed data lists,
/// so it runs faster than the [Vertices()] constructor
/// because it doesn't require any conversion from Dart lists.
///
/// The [mode] parameter must not be null.
///
/// The [positions] parameter is a list of triangular mesh vertices and
/// is interpreted as a list of repeated pairs of x,y coordinates.
/// It must not be null.
///
/// The [textureCoordinates] list is interpreted as a list of repeated pairs
/// of x,y coordinates, and must be the same length of [positions] if it
/// is not null.
/// The [textureCoordinates] parameter is used to cutout
/// the image set in the image shader.
/// The cut part is applied to the triangular mesh.
/// Note that the [textureCoordinates] are the coordinates on the image.
///
/// The [colors] list is interpreted as a list of ARGB encoded colors, similar
/// to [Color.value]. It must be half length of [positions] if it is not
/// null.
///
/// If the [indices] list is provided, all values in the list must be
/// valid index values for [positions].
/// e.g. The [indices] parameter for a simple triangle is [0,1,2].¿à“¿àﬁ  ¿àÁ¿àÙ  ¿â¿â  ¿â)¿â5  ¿â@¿âM  ¿â\¿âb¿âo¿âh¿âc¿âk¿ây¿â¿âë¿âä¿âÄ¿âç  ¿åÄ„¿å  ¿å#¿å-  ¿åF¿åK  ¿å]¿åj  ¿åÅ¿åè  ¿åØ¿åª  ¿åœ¿å‹    ¿í)¿ ƒÃ¿ïôÉi/// An interface for recording graphical operations.
///
/// [Canvas] objects are used in creating [Picture] objects, which can
/// themselves be used with a [SceneBuilder] to build a [Scene]. In
/// normal usage, however, this is all handled by the framework.
///
/// A canvas has a current transformation matrix which is applied to all
/// operations. Initially, the transformation matrix is the identity transform.
/// It can be modified using the [translate], [scale], [rotate], [skew],
/// and [transform] methods.
///
/// A canvas also has a current clip region which is applied to all operations.
/// Initially, the clip region is infinite. It can be modified using the
/// [clipRect], [clipRRect], and [clipPath] methods.
///
/// The current transform and clip can be saved and restored using the stack
/// managed by the [save], [saveLayer], and [restore] methods. ¿ï≈Ñ( ¿òk¿òqÇq/// Creates a canvas for recording graphical operations into the
/// given picture recorder.
///
/// Graphical operations that affect pixels entirely outside the given
/// `cullRect` might be discarded by the implementation. However, the
/// implementation might draw outside these bounds if, for example, a command
/// draws partially inside and outside the `cullRect`. To ensure that pixels
/// outside a given region are discarded, consider using a [clipRect]. The
/// `cullRect` is optional; by default, all operations are kept.
///
/// To end the recording, call [PictureRecorder.endRecording] on the
/// given recorder.¿òr¿òÉ  ¿òé¿òï  ¿òO¿òP¿òV¿òg¿òW¿ò¢¿ò®¿òπ¿ò≤¿ò©¿òµ¿õ¡¿õ“   A¿ôÄŒ¿ôı  ¿ö¿ö  ¿ö0¿ö8  ¿öQ
¿öY  ¿öq¿öy  ¿öì¿öõ   ¿õ‡Å=¿ùÅ/// Saves a copy of the current transform and clip on the save stack.
///
/// Call [restore] to pop the save stack.
///
/// See also:
///
///  * [saveLayer], which does the same thing but additionally also groups the
///    commands done until the matching [restore].   ¿ù!ïΩ¿±ñìï/// Saves a copy of the current transform and clip on the save stack, and then
/// creates a new group which subsequent calls will become a part of. When the
/// save stack is later popped, the group will be flattened into a layer and
/// have the given `paint`'s [Paint.colorFilter] and [Paint.blendMode]
/// applied.
///
/// This lets you create composite effects, for example making a group of
/// drawing commands semi-transparent. Without using [saveLayer], each part of
/// the group would be painted individually, so where they overlap would be
/// darker than where they do not. By using [saveLayer] to group them
/// together, they can be drawn with an opaque color at first, and then the
/// entire group can be made transparent using the [saveLayer]'s paint.
///
/// Call [restore] to pop the save stack and apply the paint to the group.
///
/// ## Using saveLayer with clips
///
/// When a rectangular clip operation (from [clipRect]) is not axis-aligned
/// with the raster buffer, or when the clip operation is not rectilinear
/// (e.g. because it is a rounded rectangle clip created by [clipRRect] or an
/// arbitrarily complicated path clip created by [clipPath]), the edge of the
/// clip needs to be anti-aliased.
///
/// If two draw calls overlap at the edge of such a clipped region, without
/// using [saveLayer], the first drawing will be anti-aliased with the
/// background first, and then the second will be anti-aliased with the result
/// of blending the first drawing and the background. On the other hand, if
/// [saveLayer] is used immediately after establishing the clip, the second
/// drawing will cover the first in the layer, and thus the second alone will
/// be anti-aliased with the background when the layer is clipped and
/// composited (when [restore] is called).
///
/// For example, this [CustomPainter.paint] method paints a clean white
/// rounded rectangle:
///
/// ```dart
/// void paint(Canvas canvas, Size size) {
///   Rect rect = Offset.zero & size;
///   canvas.save();
///   canvas.clipRRect(RRect.fromRectXY(rect, 100.0, 100.0));
///   canvas.saveLayer(rect, Paint());
///   canvas.drawPaint(Paint()..color = Colors.red);
///   canvas.drawPaint(Paint()..color = Colors.white);
///   canvas.restore();
///   canvas.restore();
/// }
/// ```
///
/// On the other hand, this one renders a red outline, the result of the red
/// paint being anti-aliased with the background at the clip edge, then the
/// white paint being similarly anti-aliased with the background _including
/// the clipped red paint_:
///
/// ```dart
/// void paint(Canvas canvas, Size size) {
///   // (this example renders poorly, prefer the example above)
///   Rect rect = Offset.zero & size;
///   canvas.save();
///   canvas.clipRRect(RRect.fromRectXY(rect, 100.0, 100.0));
///   canvas.drawPaint(Paint()..color = Colors.red);
///   canvas.drawPaint(Paint()..color = Colors.white);
///   canvas.restore();
/// }
/// ```
///
/// This point is moot if the clip only clips one draw operation. For example,
/// the following paint method paints a pair of clean white rounded
/// rectangles, even though the clips are not done on a separate layer:
///
/// ```dart
/// void paint(Canvas canvas, Size size) {
///   canvas.save();
///   canvas.clipRRect(RRect.fromRectXY(Offset.zero & (size / 2.0), 50.0, 50.0));
///   canvas.drawPaint(Paint()..color = Colors.white);
///   canvas.restore();
///   canvas.save();
///   canvas.clipRRect(RRect.fromRectXY(size.center(Offset.zero) & (size / 2.0), 50.0, 50.0));
///   canvas.drawPaint(Paint()..color = Colors.white);
///   canvas.restore();
/// }
/// ```
///
/// (Incidentally, rather than using [clipRRect] and [drawPaint] to draw
/// rounded rectangles like this, prefer the [drawRRect] method. These
/// examples are using [drawPaint] as a proxy for "complicated draw operations
/// that will get clipped", to illustrate the point.)
///
/// ## Performance considerations
///
/// Generally speaking, [saveLayer] is relatively expensive.
///
/// There are a several different hardware architectures for GPUs (graphics
/// processing units, the hardware that handles graphics), but most of them
/// involve batching commands and reordering them for performance. When layers
/// are used, they cause the rendering pipeline to have to switch render
/// target (from one layer to another). Render target switches can flush the
/// GPU's command buffer, which typically means that optimizations that one
/// could get with larger batching are lost. Render target switches also
/// generate a lot of memory churn because the GPU needs to copy out the
/// current frame buffer contents from the part of memory that's optimized for
/// writing, and then needs to copy it back in once the previous render target
/// (layer) is restored.
///
/// See also:
///
///  * [save], which saves the current state, but does not create a new layer
///    for subsequent commands.
///  * [BlendMode], which discusses the use of [Paint.blendMode] with
///    [saveLayer]. ¿±†¿±ß  ¿±Æ¿±µ   ¿≤·{¿≤Ê  ¿≤˛¿≥  ¿≥¿≥%   ¿≥_ÄÎ¿≥d  ¿≥o¿≥w  ¿≥é
¿≥ñ  ¿≥¨¿≥¥  ¿≥Ã¿≥‘  ¿≥Ì¿≥˝  ¿¥¿¥&   ¿¥NÅc¿µèÅ-/// Pops the current save stack, if there is anything to pop.
/// Otherwise, does nothing.
///
/// Use [save] and [saveLayer] to push state onto the stack.
///
/// If the state was pushed with with [saveLayer], then this call will also
/// cause the new layer to be composited into the previous layer.   ¿µµÅ_¿∂ËÅ"/// Returns the number of items on the save stack, including the
/// initial state. This means it returns 1 for a clean canvas, and
/// that each call to [save] and [saveLayer] increments it, and that
/// each matching call to [restore] decrements it.
///
/// This number cannot go below 1.   ¿∑Äﬂ¿∑ΩÄõ/// Add a translation to the current transform, shifting the coordinate space
/// horizontally by the first argument and vertically by the second argument. ¿∑«	¿∑œ  ¿∑“	¿∑⁄   ¿∑˚ÅD¿πÄ˚/// Add an axis-aligned scale to the current transform, scaling by the first
/// argument in the horizontal direction and the second in the vertical
/// direction.
///
/// If [sy] is unspecified, [sx] will be used for the scale in both
/// directions. ¿π	¿π  ¿π
¿π#   ¿πC8¿πH  ¿πO	¿πW  ¿πZ	¿πb   ¿πÄà¿πŸR/// Add a rotation to the current transform. The argument is in radians clockwise. ¿π‡¿πË   ¿∫ÅJ¿ª%Å/// Add an axis-aligned skew to the current transform, with the first argument
/// being the horizontal skew in rise over run units clockwise around the
/// origin, and the second argument being the vertical skew in rise over run
/// units clockwise around the origin. ¿ª*	¿ª2  ¿ª5	¿ª=   ¿ªYÅF¿ªÈÄà/// Multiply the current transform by the specified 4‚®â4 transformation matrix
/// specified as a list of values in column-major order. ¿ªÛ¿º    ¿º¢?¿ºß  ¿º≤¿ºø   ¿ºÂÇi¿æŸÅ◊/// Returns the current transform including the combined result of all transform
/// methods executed since the creation of this [Canvas] object, and respecting the
/// save/restore history.
///
/// Methods that can change the current transform include [translate], [scale],
/// [rotate], [skew], and [transform]. The [restore] method can also modify
/// the current transform by restoring it to the same value it had before its
/// associated [save] or [saveLayer] call.   ¿øQE¿øV  ¿ød¿øq   ¿øöÇÓ¿¡{Å≈/// Reduces the clip region to the intersection of the current clip and the
/// given rectangle.
///
/// If [doAntiAlias] is true, then the clip will be anti-aliased.
///
/// If multiple draw commands intersect with the clip boundary, this can result
/// in incorrect blending at the clip boundary. See [saveLayer] for a
/// discussion of how to address that.
///
/// Use [ClipOp.difference] to subtract the provided rectangle from the
/// current clip. ¿¡Ñ	¿¡ä  ¿¡ë ¿¡ô  ¿¡≥¿¡π  ¿¡°¿¡ß¿¡®¿¡∆¿¬ãÄ—¿¬ê  ¿¬ö¿¬¢  ¿¬∏
¿¬¿  ¿¬’¿¬›  ¿¬Ù¿¬¸  ¿√
¿√  ¿√1¿√7   ¿√`ÇX¿≈Åñ/// Reduces the clip region to the intersection of the current clip and the
/// given rounded rectangle.
///
/// If [doAntiAlias] is true, then the clip will be anti-aliased.
///
/// If multiple draw commands intersect with the clip boundary, this can result
/// in incorrect blending at the clip boundary. See [saveLayer] for a
/// discussion of how to address that and some examples of using [clipRRect]. ¿≈¿≈  ¿≈$¿≈*  ¿≈7¿≈ªO¿≈¿  ¿≈À¿≈ÿ  ¿≈ﬁ¿≈‰   ¿∆Ç1¿«àÅd/// Reduces the clip region to the intersection of the current clip and the
/// given [Path].
///
/// If [doAntiAlias] is true, then the clip will be anti-aliased.
///
/// If multiple draw commands intersect with the clip boundary, this can result
/// in incorrect blending at the clip boundary. See [saveLayer] for a
/// discussion of how to address that. ¿«ë	¿«ó  ¿«ù¿«£  ¿«∞¿»BE¿»G  ¿»Q	¿»W  ¿»\¿»b   ¿»ãã3¿”ä/// Returns the conservative bounds of the combined result of all clip methods
/// executed within the current save stack of this [Canvas] object, as measured
/// in the local coordinate space under which rendering operations are curretnly
/// performed.
///
/// The combined clip results are rounded out to an integer pixel boundary before
/// they are transformed back into the local coordinate space which accounts for
/// the pixel roundoff in rendering operations, particularly when antialiasing.
/// Because the [Picture] may eventually be rendered into a scene within the
/// context of transforming widgets or layers, the result may thus be overly
/// conservative due to premature rounding. Using the [getDestinationClipBounds]
/// method combined with the external transforms and rounding in the true device
/// coordinate system will produce more accurate results, but this value may
/// provide a more convenient approximation to compare rendering operations to
/// the established clip.
///
/// {@template dart.ui.canvas.conservativeClipBounds}
/// The conservative estimate of the bounds is based on intersecting the bounds
/// of each clip method that was executed with [ClipOp.intersect] and potentially
/// ignoring any clip method that was executed with [ClipOp.difference]. The
/// [ClipOp] argument is only present on the [clipRect] method.
///
/// To understand how the bounds estimate can be conservative, consider the
/// following two clip method calls:
///
/// ```dart
///    clipPath(Path()
///      ..addRect(const Rect.fromLTRB(10, 10, 20, 20))
///      ..addRect(const Rect.fromLTRB(80, 80, 100, 100)));
///    clipPath(Path()
///      ..addRect(const Rect.fromLTRB(80, 10, 100, 20))
///      ..addRect(const Rect.fromLTRB(10, 80, 20, 100)));
/// ```
///
/// After executing both of those calls there is no area left in which to draw
/// because the two paths have no overlapping regions. But, in this case,
/// [getClipBounds] would return a rectangle from `10, 10` to `100, 100` because it
/// only intersects the bounds of the two path objects to obtain its conservative
/// estimate.
///
/// The clip bounds are not affected by the bounds of any enclosing
/// [saveLayer] call as the engine does not currently guarantee the strict
/// enforcement of those bounds during rendering.
///
/// Methods that can change the current clip include [clipRect], [clipRRect],
/// and [clipPath]. The [restore] method can also modify the current clip by
/// restoring it to the same value it had before its associated [save] or
/// [saveLayer] call.
/// {@endtemplate}   ¿”¡P¿”∆  ¿”⁄¿”Á   ¿‘Ñ@¿◊ôÉb/// Returns the conservative bounds of the combined result of all clip methods
/// executed within the current save stack of this [Canvas] object, as measured
/// in the destination coordinate space in which the [Picture] will be rendered.
///
/// Unlike [getLocalClipBounds], the bounds are not rounded out to an integer
/// pixel boundary as the Destination coordinate space may not represent pixels
/// if the [Picture] being constructed will be further transformed when it is
/// rendered or added to a scene. In order to determine the true pixels being
/// affected, those external transforms should be applied first before rounding
/// out the result to integer pixel boundaries. Most typically, [Picture] objects
/// are rendered in a scene with a scale transform representing the Device Pixel
/// Ratio.
///
/// {@macro dart.ui.canvas.conservativeClipBounds}   ¿ÿX\¿ÿ]  ¿ÿw¿ÿÑ   ¿ÿ∏ÅJ¿ŸiÄ•/// Paints the given [Color] onto the canvas, applying the given
/// [BlendMode], with the given color being the source and the background
/// being the destination. ¿Ÿs¿Ÿz  ¿ŸÄ¿Ÿã   ¿⁄D¿⁄
  ¿⁄	¿⁄  ¿⁄ ¿⁄%   ¿⁄MÅƒ¿€=Ä‚/// Draws a line between the given points using the given paint. The line is
/// stroked, the value of the [Paint.style] is ignored for this call.
///
/// The `p1` and `p2` arguments are interpreted as offsets from the origin. ¿€F	¿€N  ¿€Q	¿€Y  ¿€\¿€c   ¿‹Ä⁄¿‹  ¿‹#	¿‹+  ¿‹?	¿‹G  ¿‹[	¿‹c  ¿‹w	¿‹  ¿‹ì¿‹£  ¿‹¡¿‹À   ¿‹ÚÄ˛¿›åÄå/// Fills the canvas with the given [Paint].
///
/// To fill the canvas with a solid color and blend mode, consider
/// [drawColor] instead. ¿›ñ¿›ù   ¿›Û[¿›¯  ¿ﬁ¿ﬁ  ¿ﬁ ¿ﬁ*   ¿ﬁRÅY¿ﬁ‚ÄÜ/// Draws a rectangle with the given [Paint]. Whether the rectangle is filled
/// or stroked (or both) is controlled by [Paint.style]. ¿ﬁÎ	¿ﬁÒ  ¿ﬁˆ¿ﬁ˝   ¿ﬂÆÄ‰¿ﬂ≥  ¿ﬂΩ¿ﬂ≈  ¿ﬂ€
¿ﬂ„  ¿ﬂ¯¿‡   ¿‡¿‡  ¿‡7¿‡G  ¿‡e¿‡o   ¿‡ñÅ@¿·.Äé/// Draws a rounded rectangle with the given [Paint]. Whether the rectangle is
/// filled or stroked (or both) is controlled by [Paint.style]. ¿·8¿·?  ¿·E¿·L   ¿·ŸÄí¿·ﬁ  ¿·È¿·ˆ  ¿‚¿‚  ¿‚=¿‚G   ¿‚oÇ¿„ÖÅ/// Draws a shape consisting of the difference between two rounded rectangles
/// with the given [Paint]. Whether this shape is filled or stroked (or both)
/// is controlled by [Paint.style].
///
/// This shape is almost but not quite entirely unlike an annulus. ¿„ê¿„ó  ¿„ù¿„§  ¿„™¿„±   ¿‰vÄº¿‰{  ¿‰á¿‰î  ¿‰≠¿‰∫  ¿‰”¿‰„  ¿Â¿Â   ¿Â6Åè¿Â¸Ä∫/// Draws an axis-aligned oval that fills the given axis-aligned rectangle
/// with the given [Paint]. Whether the oval is filled or stroked (or both) is
/// controlled by [Paint.style]. ¿Ê	¿Ê  ¿Ê¿Ê   ¿Ê»Ä‰¿ÊÕ  ¿Ê◊¿Êﬂ  ¿Êı
¿Ê˝  ¿Á¿Á  ¿Á1¿Á9  ¿ÁQ¿Áa  ¿Á¿Áâ   ¿Á∞Å∆¿ËƒÅ/// Draws a circle centered at the point given by the first argument and
/// that has the radius given by the second argument, with the [Paint] given in
/// the third argument. Whether the circle is filled or stroked (or both) is
/// controlled by [Paint.style]. ¿Ëœ¿Ë◊  ¿ËŸ¿Ë·  ¿ËË¿ËÔ   ¿ÈyÄÃ¿È~  ¿Èä¿Èí  ¿Èß¿ÈØ  ¿Èƒ¿ÈÃ  ¿ÈÊ¿Èˆ  ¿Í¿Í    ¿ÍIÉº¿ÏÊÇÅ/// Draw an arc scaled to fit inside the given rectangle.
///
/// It starts from `startAngle` radians around the oval up to
/// `startAngle` + `sweepAngle` radians around the oval, with zero radians
/// being the point on the right hand side of the oval that crosses the
/// horizontal line that intersects the center of the rectangle and with positive
/// angles going clockwise around the oval. If `useCenter` is true, the arc is
/// closed back to the center, forming a circle sector. Otherwise, the arc is
/// not closed, forming a circle segment.
///
/// This method is optimized for drawing arcs and should be faster than [Path.arcTo]. ¿ÏÓ	¿ÏÙ  ¿Ï˘¿Ì  ¿Ì¿Ì  ¿Ì¿Ì%  ¿Ì/¿Ì6   ¿ÓÅC¿Ó  	¿Ó¿Ó  ¿Ó3
¿Ó;  ¿ÓO¿ÓW  ¿Óm¿Óu  ¿Óå¿Óî  ¿ÓØ¿Ó∑  ¿Ó“¿Óÿ  ¿ÓÚ¿Ô  ¿Ô¿Ô)   ¿ÔOÅ±¿MÄÓ/// Draws the given [Path] with the given [Paint].
///
/// Whether this shape is filled or stroked (or both) is controlled by
/// [Paint.style]. If the path is filled, then sub-paths within it are
/// implicitly closed (see [Path.close]). ¿V	¿\  ¿a¿h   ¿ÒÄÜ¿Ò  ¿Ò	¿Ò  ¿Ò.¿Ò>  ¿Ò\¿Òf   ¿ÒçÇR¿Ú7Ä†/// Draws the given [Image] into the canvas with its top-left corner at the
/// given [Offset]. The image is composited into the canvas using the given [Paint]. ¿ÚA¿ÚH  ¿ÚN¿ÚV  ¿Ú]¿Úd   ¿Û‚Å¿ÛÍ  ¿Ûı¿Û˝  ¿Ù¿Ù   ¿Ù7¿Ù?  ¿ÙV¿Ùf  ¿Ùà¿Ùí  ¿Ù±¿Ù∂   ¿ÙÁÖå¿ˆ£Å§/// Draws the subset of the given image described by the `src` argument into
/// the canvas in the axis-aligned rectangle given by the `dst` argument.
///
/// This might sample from outside the `src` rect by up to half the width of
/// an applied filter.
///
/// Multiple calls to this method with different arguments (from the same
/// image) can be batched into a single call to [drawAtlas] to improve
/// performance. ¿ˆ±¿ˆ∏  ¿ˆæ¿ˆƒ  ¿ˆ»¿ˆŒ  ¿ˆ“¿ˆŸ   ¿˙vÇ#¿˙~  ¿˙ç¿˙ï  ¿˙¥¿˙º  ¿˙›¿˙Â  ¿˚¿˚  ¿˚/¿˚7  ¿˚Z¿˚b  ¿˚É¿˚ã  ¿˚´¿˚≥  ¿˚’¿˚›  ¿¸ ¿¸  ¿¸6¿¸@  ¿¸c¿¸h   ¿¸ùÜÙ¿ˇØÇÚ/// Draws the given [Image] into the canvas using the given [Paint].
///
/// The image is drawn in nine portions described by splitting the image by
/// drawing two horizontal lines and two vertical lines, where the `center`
/// argument describes the rectangle formed by the four points where these
/// four lines intersect each other. (This forms a 3-by-3 grid of regions,
/// the center region being described by the `center` argument.)
///
/// The four regions in the corners are drawn, without scaling, in the four
/// corners of the destination rectangle described by `dst`. The remaining
/// five regions are drawn by stretching them to fit such that they exactly
/// cover the destination rectangle while maintaining their relative
/// positions. ¿ˇΩ¿ˇƒ  ¿ˇ ¿ˇ–  ¿ˇ◊¿ˇ›  ¿ˇ·¿ˇË   ¿îÇ/¿ú  ¿´¿≥  ¿“¿⁄  ¿˛¿  ¿)¿1  ¿V¿^  ¿Ñ¿å  ¿≠¿µ  ¿’¿›  ¿ˇ¿  ¿*¿:  ¿`¿j  ¿ç¿í   ¿«ÄË¿,[/// Draw the given picture onto the canvas. To create a picture, see
/// [PictureRecorder]. ¿8¿A   ¿≤?¿∑  ¿ƒ¿Õ   ¿ıÑË¿ÉÈ/// Draws the text in the given [Paragraph] into this canvas at the given
/// [Offset].
///
/// The [Paragraph] object must have had [Paragraph.layout] called on it
/// first.
///
/// To align the text, set the `textAlign` on the [ParagraphStyle] object
/// passed to the [new ParagraphBuilder] constructor. For more details see
/// [TextAlign] and the discussion at [new ParagraphStyle].
///
/// If the text is left aligned or justified, the left margin will be at the
/// position specified by the `offset` argument's [Offset.dx] coordinate.
///
/// If the text is right aligned or justified, the right margin will be at the
/// position described by adding the [ParagraphConstraints.width] given to
/// [Paragraph.layout], to the `offset` argument's [Offset.dx] coordinate.
///
/// If the text is centered, the centering axis will be at the position
/// described by adding half of the [ParagraphConstraints.width] given to
/// [Paragraph.layout], to the `offset` argument's [Offset.dx] coordinate. ¿¿%  ¿/¿7   ¿·Ç¿˝Å/// Draws a sequence of points according to the given [PointMode].
///
/// The `points` argument is interpreted as offsets from the origin.
///
/// See also:
///
///  * [drawRawPoints], which takes `points` as a [Float32List] rather than a
///    [List<Offset>]. ¿¿  ¿¿+  ¿2¿9   ¿˜Ç∆¿lÅ]/// Draws a sequence of points according to the given [PointMode].
///
/// The `points` argument is interpreted as a list of pairs of floating point
/// numbers, where each pair represents an x and y offset from the origin.
///
/// See also:
///
///  * [drawPoints], which takes `points` as a [List<Offset>] rather than a
///    [List<Float32List>]. ¿z¿Ö  ¿è¿ú  ¿£¿™   ¿¡Äπ¿∆  ¿“¿‚  ¿¿  ¿)¿.  ¿K¿X   ¿~Ö¿wÉÀ/// Draws the set of [Vertices] onto the canvas.
///
/// The [blendMode] parameter is used to control how the colors in
/// the [vertices] are combined with the colors in the [paint].
/// If there are no colors specified in [vertices] then the [blendMode] has
/// no effect. If there are colors in the [vertices],
/// then the color taken from the [Shader] or [Color] in the [paint] is
/// blended with the colors specified in the [vertices] using
/// the [blendMode] parameter.
/// For purposes of this blending,
/// the colors from the [paint] are considered the source and the colors from
/// the [vertices] are considered the destination.
///
/// All parameters must not be null.
///
/// See also:
///   * [new Vertices], which creates a set of vertices to draw on the canvas.
///   * [Vertices.raw], which creates the vertices using typed data lists
///     rather than unencoded lists.
///   * [paint], Image shaders can be used to draw images on a triangular mesh. ¿Ñ¿é  ¿ó¿¢  ¿¨¿≥   ¿èÄ¬¿î  ¿¢¿¨  ¿ ¿œ  ¿Ó¿˛  ¿ ¿*   ¿Uù8¿,ìΩ/// Draws many parts of an image - the [atlas] - onto the canvas.
///
/// This method allows for optimization when you want to draw many parts of an
/// image onto the canvas, such as when using sprites or zooming. It is more efficient
/// than using multiple calls to [drawImageRect] and provides more functionality
/// to individually transform each image part by a separate rotation or scale and
/// blend or modulate those parts with a solid color.
///
/// The method takes a list of [Rect] objects that each define a piece of the
/// [atlas] image to be drawn independently. Each [Rect] is associated with an
/// [RSTransform] entry in the [transforms] list which defines the location,
/// rotation, and (uniform) scale with which to draw that portion of the image.
/// Each [Rect] can also be associated with an optional [Color] which will be
/// composed with the associated image part using the [blendMode] before blending
/// the result onto the canvas. The full operation can be broken down as:
///
/// - Blend each rectangular portion of the image specified by an entry in the
/// [rects] argument with its associated entry in the [colors] list using the
/// [blendMode] argument (if a color is specified). In this part of the operation,
/// the image part will be considered the source of the operation and the associated
/// color will be considered the destination.
/// - Blend the result from the first step onto the canvas using the translation,
/// rotation, and scale properties expressed in the associated entry in the
/// [transforms] list using the properties of the [Paint] object.
///
/// If the first stage of the operation which blends each part of the image with
/// a color is needed, then both the [colors] and [blendMode] arguments must
/// not be null and there must be an entry in the [colors] list for each
/// image part. If that stage is not needed, then the [colors] argument can
/// be either null or an empty list and the [blendMode] argument may also be null.
///
/// The optional [cullRect] argument can provide an estimate of the bounds of the
/// coordinates rendered by all components of the atlas to be compared against
/// the clip to quickly reject the operation if it does not intersect.
///
/// An example usage to render many sprites from a single sprite atlas with no
/// rotations or scales:
///
/// ```dart
/// class Sprite {
///   int index;
///   double centerX;
///   double centerY;
/// }
///
/// class MyPainter extends CustomPainter {
///   // assume spriteAtlas contains N 10x10 sprites side by side in a (N*10)x10 image
///   ui.Image spriteAtlas;
///   List<Sprite> allSprites;
///
///   @override
///   void paint(Canvas canvas, Size size) {
///     Paint paint = Paint();
///     canvas.drawAtlas(spriteAtlas, <RSTransform>[
///       for (Sprite sprite in allSprites)
///         RSTransform.fromComponents(
///           rotation: 0.0,
///           scale: 1.0,
///           // Center of the sprite relative to its rect
///           anchorX: 5.0,
///           anchorY: 5.0,
///           // Location at which to draw the center of the sprite
///           translateX: sprite.centerX,
///           translateY: sprite.centerY,
///         ),
///     ], <Rect>[
///       for (Sprite sprite in allSprites)
///         Rect.fromLTWH(sprite.index * 10.0, 0.0, 10.0, 10.0),
///     ], null, null, null, paint);
///   }
///
///   ...
/// }
/// ```
///
/// Another example usage which renders sprites with an optional opacity and rotation:
///
/// ```dart
/// class Sprite {
///   int index;
///   double centerX;
///   double centerY;
///   int alpha;
///   double rotation;
/// }
///
/// class MyPainter extends CustomPainter {
///   // assume spriteAtlas contains N 10x10 sprites side by side in a (N*10)x10 image
///   ui.Image spriteAtlas;
///   List<Sprite> allSprites;
///
///   @override
///   void paint(Canvas canvas, Size size) {
///     Paint paint = Paint();
///     canvas.drawAtlas(spriteAtlas, <RSTransform>[
///       for (Sprite sprite in allSprites)
///         RSTransform.fromComponents(
///           rotation: sprite.rotation,
///           scale: 1.0,
///           // Center of the sprite relative to its rect
///           anchorX: 5.0,
///           anchorY: 5.0,
///           // Location at which to draw the center of the sprite
///           translateX: sprite.centerX,
///           translateY: sprite.centerY,
///         ),
///     ], <Rect>[
///       for (Sprite sprite in allSprites)
///         Rect.fromLTWH(sprite.index * 10.0, 0.0, 10.0, 10.0),
///     ], <Color>[
///       for (Sprite sprite in allSprites)
///         Colors.white.withAlpha(sprite.alpha),
///     ], BlendMode.srcIn, null, paint);
///   }
///
///   ...
/// }
/// ```
///
/// The length of the [transforms] and [rects] lists must be equal and
/// if the [colors] argument is not null then it must either be empty or
/// have the same length as the other two lists.
///
/// See also:
///
///  * [drawRawAtlas], which takes its arguments as typed data lists rather
///    than objects. ¿, ¿,'  ¿,>¿,Q  ¿,m¿,y  ¿,ê¿,û  ¿,∂¿,¬  ¿,›¿,‰  ¿,˛¿-   ¿4ëû¿Mêóﬂ/// Draws many parts of an image - the [atlas] - onto the canvas.
///
/// This method allows for optimization when you want to draw many parts of an
/// image onto the canvas, such as when using sprites or zooming. It is more efficient
/// than using multiple calls to [drawImageRect] and provides more functionality
/// to individually transform each image part by a separate rotation or scale and
/// blend or modulate those parts with a solid color. It is also more efficient
/// than [drawAtlas] as the data in the arguments is already packed in a format
/// that can be directly used by the rendering code.
///
/// A full description of how this method uses its arguments to draw onto the
/// canvas can be found in the description of the [drawAtlas] method.
///
/// The [rstTransforms] argument is interpreted as a list of four-tuples, with
/// each tuple being ([RSTransform.scos], [RSTransform.ssin],
/// [RSTransform.tx], [RSTransform.ty]).
///
/// The [rects] argument is interpreted as a list of four-tuples, with each
/// tuple being ([Rect.left], [Rect.top], [Rect.right], [Rect.bottom]).
///
/// The [colors] argument, which can be null, is interpreted as a list of
/// 32-bit colors, with the same packing as [Color.value]. If the [colors]
/// argument is not null then the [blendMode] argument must also not be null.
///
/// An example usage to render many sprites from a single sprite atlas with no rotations
/// or scales:
///
/// ```dart
/// class Sprite {
///   int index;
///   double centerX;
///   double centerY;
/// }
///
/// class MyPainter extends CustomPainter {
///   // assume spriteAtlas contains N 10x10 sprites side by side in a (N*10)x10 image
///   ui.Image spriteAtlas;
///   List<Sprite> allSprites;
///
///   @override
///   void paint(Canvas canvas, Size size) {
///     // For best advantage, these lists should be cached and only specific
///     // entries updated when the sprite information changes. This code is
///     // illustrative of how to set up the data and not a recommendation for
///     // optimal usage.
///     Float32List rectList = Float32List(allSprites.length * 4);
///     Float32List transformList = Float32List(allSprites.length * 4);
///     for (int i = 0; i < allSprites.length; i++) {
///       final double rectX = sprite.spriteIndex * 10.0;
///       rectList[i * 4 + 0] = rectX;
///       rectList[i * 4 + 1] = 0.0;
///       rectList[i * 4 + 2] = rectX + 10.0;
///       rectList[i * 4 + 3] = 10.0;
///
///       // This example sets the RSTransform values directly for a common case of no
///       // rotations or scales and just a translation to position the atlas entry. For
///       // more complicated transforms one could use the RSTransform class to compute
///       // the necessary values or do the same math directly.
///       transformList[i * 4 + 0] = 1.0;
///       transformList[i * 4 + 1] = 0.0;
///       transformList[i * 4 + 2] = sprite.centerX - 5.0;
///       transformList[i * 4 + 3] = sprite.centerY - 5.0;
///     }
///     Paint paint = Paint();
///     canvas.drawAtlas(spriteAtlas, transformList, rectList, null, null, null, paint);
///   }
///
///   ...
/// }
/// ```
///
/// Another example usage which renders sprites with an optional opacity and rotation:
///
/// ```dart
/// class Sprite {
///   int index;
///   double centerX;
///   double centerY;
///   int alpha;
///   double rotation;
/// }
///
/// class MyPainter extends CustomPainter {
///   // assume spriteAtlas contains N 10x10 sprites side by side in a (N*10)x10 image
///   ui.Image spriteAtlas;
///   List<Sprite> allSprites;
///
///   @override
///   void paint(Canvas canvas, Size size) {
///     // For best advantage, these lists should be cached and only specific
///     // entries updated when the sprite information changes. This code is
///     // illustrative of how to set up the data and not a recommendation for
///     // optimal usage.
///     Float32List rectList = Float32List(allSprites.length * 4);
///     Float32List transformList = Float32List(allSprites.length * 4);
///     Int32List colorList = Int32List(allSprites.length);
///     for (int i = 0; i < allSprites.length; i++) {
///       final double rectX = sprite.spriteIndex * 10.0;
///       rectList[i * 4 + 0] = rectX;
///       rectList[i * 4 + 1] = 0.0;
///       rectList[i * 4 + 2] = rectX + 10.0;
///       rectList[i * 4 + 3] = 10.0;
///
///       // This example uses an RSTransform object to compute the necessary values for
///       // the transform using a factory helper method because the sprites contain
///       // rotation values which are not trivial to work with. But if the math for the
///       // values falls out from other calculations on the sprites then the values could
///       // possibly be generated directly from the sprite update code.
///       final RSTransform transform = RSTransform.fromComponents(
///         rotation: sprite.rotation,
///         scale: 1.0,
///         // Center of the sprite relative to its rect
///         anchorX: 5.0,
///         anchorY: 5.0,
///         // Location at which to draw the center of the sprite
///         translateX: sprite.centerX,
///         translateY: sprite.centerY,
///       );
///       transformList[i * 4 + 0] = transform.scos;
///       transformList[i * 4 + 1] = transform.ssin;
///       transformList[i * 4 + 2] = transform.tx;
///       transformList[i * 4 + 3] = transform.ty;
///
///       // This example computes the color value directly, but one could also compute
///       // an actual Color object and use its Color.value getter for the same result.
///       // Since we are using BlendMode.srcIn, only the alpha component matters for
///       // these colors which makes this a simple shift operation.
///       colorList[i] = sprite.alpha << 24;
///     }
///     Paint paint = Paint();
///     canvas.drawAtlas(spriteAtlas, transformList, rectList, colorList, BlendMode.srcIn, null, paint);
///   }
///
///   ...
/// }
/// ```
///
/// See also:
///
///  * [drawAtlas], which takes its arguments as objects rather than typed
///    data lists. ¿Mù¿M§  ¿Mæ¿MÀ  ¿MÌ¿M˙  ¿N¿N   ¿N;¿NG  ¿Ne¿Nl  ¿Nâ¿Nê   ¿R≠Åì¿Rµ  	¿R¿¿R–  ¿RÚ¿R¸  ¿S¿S   ¿SH¿SP  ¿Sk¿Sx  ¿Sõ¿S®  ¿S√¿Sœ  ¿SÎ¿S  ¿T¿T   ¿TDÇ¿U-Ä◊/// Draws a shadow for a [Path] representing the given material elevation.
///
/// The `transparentOccluder` argument should be true if the occluding object
/// is not opaque.
///
/// The arguments must not be null. ¿U8	¿U>  ¿UC¿UJ  ¿UP¿UX  ¿Ub¿Uh   ¿VLÄß¿VQ  ¿V]	¿Vc  ¿V{	¿VÄ  ¿Vô¿V°  ¿Væ¿Vƒ    ¿V˜âÄ¿XfÅN/// An object representing a sequence of recorded graphical operations.
///
/// To create a [Picture], use a [PictureRecorder].
///
/// A [Picture] can be placed in a [Scene] using a [SceneBuilder], via
/// the [SceneBuilder.addPicture] method. A [Picture] can also be
/// drawn into a [Canvas], using the [Canvas.drawPicture] method. ¿XìÄ ¿YX¿YY¿YZÄô/// This class is created by the engine, and should not be instantiated
/// or extended directly.
///
/// To create a [Picture], use a [PictureRecorder]. ¿Y5¿Y6¿Y<¿YM¿Y=¿]¨¿]± ¿]Ω¿]∆Åô¿^Äß/// Whether this reference to the underlying picture is [dispose]d.
///
/// This only returns a valid value if asserts are enabled, and must not be
/// used otherwise.   ¿_cÅ¿`=Ä…/// Returns the approximate number of bytes allocated for this object.
///
/// The actual size of this picture may be larger, particularly if it contains
/// references to image or other large objects.   ¿YaÇ¿¿ZÜÅ/// Creates an image from this picture.
///
/// The returned image will be `width` pixels wide and `height` pixels high.
/// The picture is rasterized within the 0 (left), 0 (top), `width` (right),
/// `height` (bottom) bounds. Content outside these bounds is clipped. ¿Zé	¿Zì  ¿Zô
¿Zû   ¿\$^¿\,  ¿\5	¿\:  ¿\@
¿\E  ¿\L¿\`   ¿\ÜÄÙ¿\˛n/// Release the resources used by this object. The object is no longer usable
/// after this method is called.   ¿]~)¿]É    ¿XF¿XG¿XM¿X^¿XN¿`yÜf¿aTÄ‘/// Records a [Picture] containing a sequence of graphical operations.
///
/// To begin recording, construct a [Canvas] to record the commands.
/// To end recording, use the [PictureRecorder.endRecording] method. ¿aâÄÂ ¿bI¿bXÄù/// Creates a new idle PictureRecorder. To associate it with a
/// [Canvas] and begin recording, pass this [PictureRecorder] to the
/// [Canvas] constructor. ¿b-¿b.¿b4¿bE¿b5¿fÕ¿f’  ¿bÆÅ¨¿d;Åu/// Whether this object is currently recording commands.
///
/// Specifically, this returns true if a [Canvas] object has been
/// created to record commands and recording has not yet ended via a
/// call to [endRecording], and false if either this
/// [PictureRecorder] has not yet been associated with a [Canvas],
/// or the [endRecording] method has already been called.   ¿bq9¿bv    ¿d^Ç¿e{Å
/// Finishes recording graphical operations.
///
/// Returns a picture containing the graphical operations that have been
/// recorded thus far. After calling this function, both the picture recorder
/// and the canvas objects are invalid and cannot be used further.   ¿f|M¿fÅ  ¿fè¿fò    ¿f·úó¿g<T/// A single shadow.
///
/// Multiple shadows are stacked together in a [TextStyle]. ¿gGÇÃ ¿h“¿hÿÅp/// Construct a shadow.
///
/// The default shadow is a black shadow with zero offset and zero blur.
/// Default shadows should be completely covered by the casting element,
/// and not be visible.
///
/// Transparency should be adjusted through the [color] alpha.
///
/// Shadow order matters due to compositing multiple translucent objects not
/// being commutative.¿hﬂ(¿hÂ  ¿i¿i  ¿i,¿i2  !¿hÏ¿hÚ¿h˜¿i¿h¯¿i¿i!¿i"¿i>¿iJ¿iP¿i^¿i}¿iW¿iQ¿iZ¿i`¿iá¿iç¿iú¿iº¿iï¿ié¿iò¿iû¿i∆¿iÃ¿iﬁ¿j¿iÿ¿iÕ¿i€¿i‡	¿j,¿j( ¿j9¿jk&¿j| ¿jè¿jï'¿j¶ ¿j∏¿j∂¿jª¿j¿#¿j— ¿jﬂ¿j›¿j‚¿jÁ#¿j¯ ¿k¿k¿k	¿k&¿k ¿k0¿k.¿k3¿k9Äº¿kÄ¢/// Color that the shadow will be drawn with.
///
/// The shadows are shapes composited directly over the base canvas, and do not
/// represent optical occlusion. ¿k˙Å4¿m(Å/// The displacement of the shadow from the casting element.
///
/// Positive x/y offsets will shift the shadow to the right and down, while
/// negative offsets shift the shadow to the left and up. The offsets are
/// relative to the position of the element that is casting it. ¿m3i¿míO/// The standard deviation of the Gaussian to convolve with the shadow's shape. ¿o!ÄÆ¿o°n/// The [blurRadius] in sigmas instead of logical pixels.
///
/// See the sigma argument to [MaskFilter.blur].   ¿}@G¿}T   ¿}@¿}A¿m°Å|¿n¿h/// Converts a blur radius in pixels to sigmas.
///
/// See the sigma argument to [MaskFilter.blur].
/// ¿n’¿n›   ¿o”Çã¿q„Åı/// Create the [Paint] object that corresponds to this shadow description.
///
/// The [offset] is not represented in the [Paint] object.
/// To honor this as well, the shape should be translated by [offset] before
/// being filled using this [Paint].
///
/// This class does not provide a way to disable shadows to avoid
/// inconsistencies in shadow blur rendering, primarily as a method of
/// reducing test flakiness. [toPaint] should be overridden in subclasses to
/// provide this functionality.   ¿rbÄı¿r…[/// Returns a new shadow with its [offset] and [blurRadius] scaled by the given
/// factor. ¿rœ¿r◊   ¿s[Ö¿wgÉ÷/// Linearly interpolate between two shadows.
///
/// If either shadow is null, this function linearly interpolates from a
/// a shadow that matches the other shadow in color but has a zero
/// offset and a zero blurRadius.
///
/// {@template dart.ui.shadow.lerp}
/// The `t` argument represents position on the timeline, with 0.0 meaning
/// that the interpolation has not started, returning `a` (or something
/// equivalent to `a`), 1.0 meaning that the interpolation has finished,
/// returning `b` (or something equivalent to `b`), and values in between
/// meaning that the interpolation is at the relevant point on the timeline
/// between `a` and `b`. The interpolation can be extrapolated beyond 0.0 and
/// 1.0, so negative values and values greater than 1.0 are valid (and can
/// easily be generated by curves such as [Curves.elasticInOut]).
///
/// Values for `t` are usually obtained from an [Animation<double>], such as
/// an [AnimationController].
/// {@endtemplate} ¿wl	¿wu  ¿ww	¿wÄ  ¿wÇ¿wä   ¿yOÇ˛¿zÄ•/// Linearly interpolate between two lists of shadows.
///
/// If the lists differ in length, excess items are lerped with null.
///
/// {@macro dart.ui.shadow.lerp} ¿z¿z,  ¿z.¿z=  ¿z?¿zG   ¿|QÄÎ¿|k  ¿|n¿|v  ¿|Q¿|R¿~EÑ·¿~U  ¿~d¿~s   ¿É*L¿É=   ¿É*¿É+ ¿Ézäñ¿Ñ0ÄØ/// A handle to a read-only byte buffer that is managed by the engine.
///
/// The creator of this object is responsible for calling [dispose] when it is
/// no longer needed. ¿Ñe ¿Ñt¿Ñu¿Ñv ¿Ñw¿Ñ}   ¿âÎ¿âÔ  ¿â˚¿ä  ¿ä¿âöN¿â÷1/// The length, in bytes, of the underlying data.   ¿äÅ¿ä§y/// Whether [dispose] has been called.
///
/// This must only be used when asserts are enabled. Otherwise, it will throw.   ¿ÑâÅ`¿Ö^/// Creates a copy of the data from a [Uint8List] suitable for internal use
/// in the engine. ¿Ö¿Ö$   ¿ÖÌÇÊ¿ÜÖr/// Create a buffer from the asset with key [assetKey].
///
/// Throws an [Exception] if the asset does not exist. ¿Üè¿Üó   ¿à◊S¿à‹  ¿à‚¿àÌ  ¿àÚ¿â   ¿â.h¿â6  ¿âE¿âM  ¿âV¿âf   ¿ã6Ç£¿çQÇ/// Release the resources used by this object. The object is no longer usable
/// after this method is called.
///
/// The underlying memory allocated by this object will be retained beyond
/// this call if it is still needed by another object that has not been
/// disposed. For example, an [ImageDescriptor] that has not been disposed
/// may still retain a reference to the memory from this buffer even if it
/// has been disposed. Freeing that memory requires disposing all resources
/// that may still hold it.   ¿ç›1¿ç‚     ¿éè·¿éŒÄµ/// A descriptor of data that can be turned into an [Image] via a [Codec].
///
/// Use this class to determine the height, width, and byte size of image data
/// before decoding it. ¿è¿è¿è¿è   ¿ê„Éú¿ì¿ì¿ìÅ–/// Creates an image descriptor from raw image pixels.
///
/// The `pixels` parameter is the pixel data. They are packed in bytes in the
/// order described by `pixelFormat`, then grouped in rows, from left to right,
/// then top to bottom.
///
/// The `rowBytes` parameter is the number of bytes consumed by each row of
/// pixels in the data buffer. If unspecified, it defaults to `width` multiplied
/// by the number of bytes per pixel in the provided `format`.¿ì¿ì-  ¿ì:¿ìH  ¿ìR¿ì`  ¿ìk¿ìq  ¿ì~ ¿ìî   ¿ï"¿ï'  ¿ï˙¿ïˇ  ¿ñŸ¿ñﬁ  ¿ïcÄì¿ï÷d/// The width, in pixels, of the image.
///
/// On the Web, this is only supported for [raw] images.   ¿ñ>Äó¿ñ≤e/// The height, in pixels, of the image.
///
/// On the Web, this is only supported for [raw] images.   ¿ó2ÄØ¿ó©h/// The number of bytes per pixel in the image.
///
/// On web, this is only supported for [raw] images.   	¿èÅU¿èÖH/// Creates an image descriptor from encoded data in a supported format. ¿èç¿èû   ¿êsl¿ê{  ¿êà¿êô  ¿ê†¿ê±   ¿îÇÄú¿îá  ¿îê¿î°  ¿îØ¿î¿  ¿î«	¿îÃ  ¿î“
¿î◊  ¿îﬁ¿î„  ¿îÏ¿îÒ   ¿ï1/¿ï5    ¿ñ
1¿ñ    ¿ñ?¿ñÙ    ¿óÂÄ£¿ò]n/// Release the resources used by this object. The object is no longer usable
/// after this method is called.   ¿òåÑÓ¿ö/ÅÇ/// Creates a [Codec] object which is suitable for decoding the data in the
/// buffer to an [Image].
///
/// If only one of targetWidth or  targetHeight are specified, the other
/// dimension will be scaled according to the aspect ratio of the supplied
/// dimension.
///
/// If either targetWidth or targetHeight is less than or equal to zero, it
/// will be treated as if it is null. ¿öA¿öG  ¿öS¿öY   ¿ù}t¿ùÇ  ¿ùî¿ùõ  ¿ù§¿ù©  ¿ùµ¿ù∫    ¿•0É◊¿¶äÅS/// An exception thrown by [Canvas.drawImage] and related methods when drawing
/// an [Image] that is in an invalid state.
///
/// This exception may be thrown if the requested image dimensions exceeded the
/// maximum 2D texture size allowed by the GPU, or if no GPU surface or context
/// was available for rasterization at request time. ¿¶¡B¿¶‰¿¶Â¿¶Ê ¿¶Á¿¶Ì  ¿¶ˆ
¿¶¸   ¿ßI¿ßI2/// A string containing details about the failure. ¿ßUi¿ßπO/// If available, the stack trace at the time [Picture.toImageSync] was called.  ¿ß√ÅB¿ß÷   ¿ß√¿ßƒ  ≥È¿ Ncøã/// Algorithms to use when painting on the canvas.
///
/// When drawing a shape or image onto a canvas, different algorithms can be
/// used to blend the pixels. The different values of [BlendMode] specify
/// different such algorithms.
///
/// Each algorithm has two inputs, the _source_, which is the image being drawn,
/// and the _destination_, which is the image into which the source image is
/// being composited. The destination is often thought of as the _background_.
/// The source and destination both have four color channels, the red, green,
/// blue, and alpha channels. These are typically represented as numbers in the
/// range 0.0 to 1.0. The output of the algorithm also has these same four
/// channels, with values computed from the source and destination.
///
/// The documentation of each value below describes how the algorithm works. In
/// each case, an image shows the output of blending a source image with a
/// destination image. In the images below, the destination is represented by an
/// image with horizontal lines and an opaque landscape photograph, and the
/// source is represented by an image with vertical lines (the same lines but
/// rotated) and a bird clip-art image. The [src] mode shows only the source
/// image, and the [dst] mode shows only the destination image. In the
/// documentation below, the transparency is illustrated by a checkerboard
/// pattern. The [clear] mode drops both the source and destination, resulting
/// in an output that is entirely transparent (illustrated by a solid
/// checkerboard pattern).
///
/// The horizontal and vertical bars in these images show the red, green, and
/// blue channels with varying opacity levels, then all three color channels
/// together with those same varying opacity levels, then all three color
/// channels set to zero with those varying opacity levels, then two bars showing
/// a red/green/blue repeating gradient, the first with full opacity and the
/// second with partial opacity, and finally a bar with the three color channels
/// set to zero but the opacity varying in a repeating gradient.
///
/// ## Application to the [Canvas] API
///
/// When using [Canvas.saveLayer] and [Canvas.restore], the blend mode of the
/// [Paint] given to the [Canvas.saveLayer] will be applied when
/// [Canvas.restore] is called. Each call to [Canvas.saveLayer] introduces a new
/// layer onto which shapes and images are painted; when [Canvas.restore] is
/// called, that layer is then composited onto the parent layer, with the source
/// being the most-recently-drawn shapes and images, and the destination being
/// the parent layer. (For the first [Canvas.saveLayer] call, the parent layer
/// is the canvas itself.)
///
/// See also:
///
///  * [Paint.blendMode], which uses [BlendMode] to define the compositing
///    strategy.  øªÄÓ¿ @§Äﬁ/// Drop both the source and destination images, leaving nothing.
///
/// This corresponds to the "clear" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_clear.png) ¿ @ÆÅH¿ AÛÅ4/// Drop the destination image, only paint the source image.
///
/// Conceptually, the destination is first cleared, then the source image is
/// painted.
///
/// This corresponds to the "Copy" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_src.png) ¿ A˚ÅM¿ CEÅ9/// Drop the source image, only paint the destination image.
///
/// Conceptually, the source image is discarded, leaving the destination
/// untouched.
///
/// This corresponds to the "Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dst.png) ¿ CMÅÏ¿ E2Å–/// Composite the source image over the destination image.
///
/// This is the default value. It represents the most intuitive case, where
/// shapes are painted on top of what is below, with transparent areas showing
/// the destination layer.
///
/// This corresponds to the "Source over Destination" Porter-Duff operator,
/// also known as the Painter's Algorithm.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_srcOver.png) ¿ E>Å≠¿ F‰Åë/// Composite the source image under the destination image.
///
/// This is the opposite of [srcOver].
///
/// This corresponds to the "Destination over Source" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dstOver.png)
///
/// This is useful when the source image should have been painted before the
/// destination image, but could not be. ¿ FÇö¿ IÖÇx/// Show the source image, but only where the two images overlap. The
/// destination image is not rendered, it is treated merely as a mask. The
/// color channels of the destination are ignored, only the opacity has an
/// effect.
///
/// To show the destination image instead, consider [dstIn].
///
/// To reverse the semantic of the mask (only showing the source where the
/// destination is absent, rather than where it is present), consider
/// [srcOut].
///
/// This corresponds to the "Source in Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_srcIn.png) ¿ IèÇÑ¿ LÇf/// Show the destination image, but only where the two images overlap. The
/// source image is not rendered, it is treated merely as a mask. The color
/// channels of the source are ignored, only the opacity has an effect.
///
/// To show the source image instead, consider [srcIn].
///
/// To reverse the semantic of the mask (only showing the source where the
/// destination is present, rather than where it is absent), consider [dstOut].
///
/// This corresponds to the "Destination in Source" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dstIn.png) ¿ LÇò¿ N™Çy/// Show the source image, but only where the two images do not overlap. The
/// destination image is not rendered, it is treated merely as a mask. The color
/// channels of the destination are ignored, only the opacity has an effect.
///
/// To show the destination image instead, consider [dstOut].
///
/// To reverse the semantic of the mask (only showing the source where the
/// destination is present, rather than where it is absent), consider [srcIn].
///
/// This corresponds to the "Source out Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_srcOut.png) ¿ NµÇé¿ Q=Ço/// Show the destination image, but only where the two images do not overlap. The
/// source image is not rendered, it is treated merely as a mask. The color
/// channels of the source are ignored, only the opacity has an effect.
///
/// To show the source image instead, consider [srcOut].
///
/// To reverse the semantic of the mask (only showing the destination where the
/// source is present, rather than where it is absent), consider [dstIn].
///
/// This corresponds to the "Destination out Source" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dstOut.png) ¿ QHÇg¿ S®ÇE/// Composite the source image over the destination image, but only where it
/// overlaps the destination.
///
/// This corresponds to the "Source atop Destination" Porter-Duff operator.
///
/// This is essentially the [srcOver] operator, but with the output's opacity
/// channel being set to that of the destination image instead of being a
/// combination of both image's opacity channels.
///
/// For a variant with the destination on top instead of the source, see
/// [dstATop].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_srcATop.png) ¿ S¥Ç]¿ V
Ç;/// Composite the destination image over the source image, but only where it
/// overlaps the source.
///
/// This corresponds to the "Destination atop Source" Porter-Duff operator.
///
/// This is essentially the [dstOver] operator, but with the output's opacity
/// channel being set to that of the source image instead of being a
/// combination of both image's opacity channels.
///
/// For a variant with the source on top instead of the destination, see
/// [srcATop].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_dstATop.png) ¿ VÅ;¿ WNÅ+/// Apply a bitwise `xor` operator to the source and destination images. This
/// leaves transparency where they would overlap.
///
/// This corresponds to the "Source xor Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_xor.png) ¿ WVÅ¿¿ YÅ©/// Sum the components of the source and destination images.
///
/// Transparency in a pixel of one of the images reduces the contribution of
/// that image to the corresponding output pixel, as if the color of that
/// pixel in that image was darker.
///
/// This corresponds to the "Source plus Destination" Porter-Duff operator.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_plus.png) ¿ YÉV¿ \iÉ'/// Multiply the color components of the source and destination images.
///
/// This can only result in the same or darker colors (multiplying by white,
/// 1.0, results in no change; multiplying by black, 0.0, results in black).
///
/// When compositing two opaque images, this has similar effect to overlapping
/// two transparencies on a projector.
///
/// For a variant that also multiplies the alpha channel, consider [multiply].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_modulate.png)
///
/// See also:
///
///  * [screen], which does a similar computation but inverted.
///  * [overlay], which combines [modulate] and [screen] to favor the
///    destination image.
///  * [hardLight], which combines [modulate] and [screen] to favor the
///    source image. ¿ \øÖ!¿ a⁄Ñ‚/// Multiply the inverse of the components of the source and destination
/// images, and inverse the result.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// This is essentially the same as [modulate] blend mode, but with the values
/// of the colors inverted before the multiplication and the result being
/// inverted back before rendering.
///
/// This can only result in the same or lighter colors (multiplying by black,
/// 1.0, results in no change; multiplying by white, 0.0, results in white).
/// Similarly, in the alpha channel, it can only result in more opaque colors.
///
/// This has similar effect to two projectors displaying their images on the
/// same screen simultaneously.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_screen.png)
///
/// See also:
///
///  * [modulate], which does a similar computation but without inverting the
///    values.
///  * [overlay], which combines [modulate] and [screen] to favor the
///    destination image.
///  * [hardLight], which combines [modulate] and [screen] to favor the
///    source image. ¿ a˛Éﬁ¿ e’ÉÆ/// Multiply the components of the source and destination images after
/// adjusting them to favor the destination.
///
/// Specifically, if the destination value is smaller, this multiplies it with
/// the source value, whereas is the source value is smaller, it multiplies
/// the inverse of the source value with the inverse of the destination value,
/// then inverts the result.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_overlay.png)
///
/// See also:
///
///  * [modulate], which always multiplies the values.
///  * [screen], which always multiplies the inverses of the values.
///  * [hardLight], which is similar to [overlay] but favors the source image
///    instead of the destination image. ¿ e·Å7¿ gÅ"/// Composite the source and destination image by choosing the lowest value
/// from each color channel.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_darken.png) ¿ gÅ:¿ hPÅ$/// Composite the source and destination image by choosing the highest value
/// from each color channel.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_lighten.png) ¿ h\Å{¿ iÕÅb/// Divide the destination by the inverse of the source.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_colorDodge.png) ¿ i‹Åë¿ kdÅy/// Divide the inverse of the destination by the source, and inverse the result.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_colorBurn.png) ¿ krÉ‚¿ oKÉ∞/// Multiply the components of the source and destination images after
/// adjusting them to favor the source.
///
/// Specifically, if the source value is smaller, this multiplies it with the
/// destination value, whereas is the destination value is smaller, it
/// multiplies the inverse of the destination value with the inverse of the
/// source value, then inverts the result.
///
/// Inverting the components means that a fully saturated channel (opaque
/// white) is treated as the value 0.0, and values normally treated as 0.0
/// (black, transparent) are treated as 1.0.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_hardLight.png)
///
/// See also:
///
///  * [modulate], which always multiplies the values.
///  * [screen], which always multiplies the inverses of the values.
///  * [overlay], which is similar to [hardLight] but favors the destination
///    image instead of the source image. ¿ oYÅs¿ p√ÅU/// Use [colorDodge] for source values below 0.5 and [colorBurn] for source
/// values above 0.5.
///
/// This results in a similar but softer effect than [overlay].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_softLight.png)
///
/// See also:
///
///  * [color], which is a more subtle tinting effect. ¿ p—Å≈¿ råÅ§/// Subtract the smaller value from the bigger value for each channel.
///
/// Compositing black has no effect; compositing white inverts the colors of
/// the other image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver].
///
/// The effect is similar to [exclusion] but harsher.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_difference.png) ¿ rõÅ‘¿ tfÅ≤/// Subtract double the product of the two images from the sum of the two
/// images.
///
/// Compositing black has no effect; compositing white inverts the colors of
/// the other image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver].
///
/// The effect is similar to [difference] but softer.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_exclusion.png) ¿ ttÇŸ¿ wEÇ¥/// Multiply the components of the source and destination images, including
/// the alpha channel.
///
/// This can only result in the same or darker colors (multiplying by white,
/// 1.0, results in no change; multiplying by black, 0.0, results in black).
///
/// Since the alpha channel is also multiplied, a fully-transparent pixel
/// (opacity 0.0) in one image results in a fully transparent pixel in the
/// output. This is similar to [dstIn], but with the colors combined.
///
/// For a variant that multiplies the colors but does not multiply the alpha
/// channel, consider [modulate].
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_multiply.png) ¿ woÇ˜¿ zcÇ—/// Take the hue of the source image, and the saturation and luminosity of the
/// destination image.
///
/// The effect is to tint the destination image with the source image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver]. Regions that are entirely transparent in the source image take
/// their hue from the destination.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_hue.png)
///
/// See also:
///
///  * [color], which is a similar but stronger effect as it also applies the
///    saturation of the source image.
///  * [HSVColor], which allows colors to be expressed using Hue rather than
///    the red/green/blue channels of [Color]. ¿ zkÇd¿ |≈Ç=/// Take the saturation of the source image, and the hue and luminosity of the
/// destination image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver]. Regions that are entirely transparent in the source image take
/// their saturation from the destination.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_hue.png)
///
/// See also:
///
///  * [color], which also applies the hue of the source image.
///  * [luminosity], which applies the luminosity of the source image to the
///    destination. ¿ |‘Ç„¿ ≤ÇΩ/// Take the hue and saturation of the source image, and the luminosity of the
/// destination image.
///
/// The effect is to tint the destination image with the source image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver]. Regions that are entirely transparent in the source image take
/// their hue and saturation from the destination.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_color.png)
///
/// See also:
///
///  * [hue], which is a similar but weaker effect.
///  * [softLight], which is a similar tinting effect but also tints white.
///  * [saturation], which only applies the saturation of the source image. ¿ ºÇç¿ Ç?Çd/// Take the luminosity of the source image, and the hue and saturation of the
/// destination image.
///
/// The opacity of the output image is computed in the same way as for
/// [srcOver]. Regions that are entirely transparent in the source image take
/// their luminosity from the destination.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/blend_mode_luminosity.png)
///
/// See also:
///
///  * [saturation], which applies the saturation of the source image to the
///    destination.
///  * [ImageFilter.blur], which can be used with [BackdropFilter] for a
///    related effect.    ¿ ÇNå{¿ á»Öt/// Quality levels for image sampling in [ImageFilter] and [Shader] objects that sample
/// images and for [Canvas] operations that render images.
///
/// When scaling up typically the quality is lowest at [none], higher at [low] and [medium],
/// and for very large scale factors (over 10x) the highest at [high].
///
/// When scaling down, [medium] provides the best quality especially when scaling an
/// image to less than half its size or for animating the scale factor between such
/// reductions. Otherwise, [low] and [high] provide similar effects for reductions of
/// between 50% and 100% but the image may lose detail and have dropouts below 50%.
///
/// To get high quality when scaling images up and down, or when the scale is
/// unknown, [medium] is typically a good balanced choice.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/filter_quality.png)
///
/// When building for the web using the `--web-renderer=html` option, filter
/// quality has no effect. All images are rendered using the respective
/// browser's default setting.
///
/// See also:
///
///  * [Paint.filterQuality], which is used to pass [FilterQuality] to the
///    engine while using drawImage calls on a [Canvas].
///  * [ImageShader].
///  * [ImageFilter.matrix].
///  * [Canvas.drawImage].
///  * [Canvas.drawImageRect].
///  * [Canvas.drawImageNine].
///  * [Canvas.drawAtlas].  ¿ àYÄŸ¿ â.ÄÃ/// The fastest filtering method, albeit also the lowest quality.
///
/// This value results in a "Nearest Neighbor" algorithm which just
/// repeats or eliminates pixels as an image is scaled up or down. ¿ â7Ä≤¿ âÊÄ¶/// Better quality than [none], faster than [medium].
///
/// This value results in a "Bilinear" algorithm which smoothly
/// interpolates between pixels in an image. ¿ âÓÇé¿ åvÇk/// The best all around filtering method that is only worse than [high]
/// at extremely large scale factors.
///
/// This value improves upon the "Bilinear" algorithm specified by [low]
/// by utilizing a Mipmap that pre-computes high quality lower resolutions
/// of the image at half (and quarter and eighth, etc.) sizes and then
/// blends between those to prevent loss of detail at small scale sizes.
///
/// {@template dart.ui.filterQuality.seeAlso}
/// See also:
///
///  * [FilterQuality] class-level documentation that goes into detail about
///    relative qualities of the constant values.
/// {@endtemplate} ¿ åÅÇE¿ é¬Ç&/// Best possible quality when scaling up images by scale factors larger than
/// 5-10x.
///
/// When images are scaled down, this can be worse than [medium] for scales
/// smaller than 0.5x, or when animating the scale factor.
///
/// This option is also the slowest.
///
/// This value results in a standard "Bicubic" algorithm which uses a 3rd order
/// equation to smooth the abrupt transitions between pixels while preserving
/// some of the sense of an edge and avoiding sharp peaks in the result.
///
/// {@macro dart.ui.filterQuality.seeAlso}    ¿ éÀÜ«¿ èøÄ±/// Styles to use for line endings.
///
/// See also:
///
///  * [Paint.strokeCap] for how this value is used.
///  * [StrokeJoin] for the different kinds of line segment joins.  ¿ èÕÅÖ¿ ëNÅr/// Begin and end contours with a flat edge and no extension.
///
/// ![A butt cap ends line segments with a square end that stops at the end of
/// the line segment.](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/butt_cap.png)
///
/// Compare to the [square] cap, which has the same shape, but extends past
/// the end of the line by half a stroke width. ¿ ëWÅÀ¿ ìÅµ/// Begin and end contours with a semi-circle extension.
///
/// ![A round cap adds a rounded end to the line segment that protrudes
/// by one half of the thickness of the line (which is the radius of the cap)
/// past the end of the segment.](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/round_cap.png)
///
/// The cap is colored in the diagram above to highlight it: in normal use it
/// is the same color as the line. ¿ ì'Çh¿ ïâÇI/// Begin and end contours with a half square extension. This is
/// similar to extending each contour by half the stroke width (as
/// given by [Paint.strokeWidth]).
///
/// ![A square cap has a square end that effectively extends the line length
/// by half of the stroke width.](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/square_cap.png)
///
/// The cap is colored in the diagram above to highlight it: in normal use it
/// is the same color as the line.
///
/// Compare to the [butt] cap, which has the same shape, but doesn't extend
/// past the end of the line.    ¿ ïîà¿ ó?Åg/// Styles to use for line segment joins.
///
/// This only affects line joins for polygons drawn by [Canvas.drawPath] and
/// rectangles, not points drawn as lines with [Canvas.drawPoints].
///
/// See also:
///
/// * [Paint.strokeJoin] and [Paint.strokeMiterLimit] for how this value is
///   used.
/// * [StrokeCap] for the different kinds of line endings.  ¿ óNÇY¿ ô¢Ç7/// Joins between line segments form sharp corners.
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/miter_4_join.mp4}
///
/// The center of the line segment is colored in the diagram above to
/// highlight the join, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///   * [Paint.strokeJoin], used to set the line segment join style to this
///     value.
///   * [Paint.strokeMiterLimit], used to define when a miter is drawn instead
///     of a bevel when the join is set to this value. ¿ ô¨ÅÃ¿ õsÅÆ/// Joins between line segments are semi-circular.
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/round_join.mp4}
///
/// The center of the line segment is colored in the diagram above to
/// highlight the join, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///   * [Paint.strokeJoin], used to set the line segment join style to this
///     value. ¿ õ}Ç¿ ùèÅ˜/// Joins between line segments connect the corners of the butt ends of the
/// line segments to give a beveled appearance.
///
/// {@animation 300 300 https://flutter.github.io/assets-for-api-docs/assets/dart-ui/bevel_join.mp4}
///
/// The center of the line segment is colored in the diagram above to
/// highlight the join, but in normal usage the join is the same color as the
/// line.
///
/// See also:
///
///   * [Paint.strokeJoin], used to set the line segment join style to this
///     value.    ¿ ùôÇﬂ¿ û2T/// Strategies for painting shapes and paths on a canvas.
///
/// See [Paint.style].  ¿ û§Ä∑¿ üWÄ¨/// Apply the [Paint] to the inside of the shape. For example, when
/// applied to the [Canvas.drawCircle] call, this results in a disc
/// of the given size being painted. ¿ ü`Å¿ †oÅ/// Apply the [Paint] to the edge of the shape. For example, when
/// applied to the [Canvas.drawCircle] call, this results is a hoop
/// of the given size being painted. The line drawn on the edge will
/// be the width given by the [Paint.strokeWidth] property.    ¿ †{åá¿ †Ø./// Different ways to clip a widget's content.  ¿ †∏Ç8¿ ¢ÏÇ/// No clip at all.
///
/// This is the default option for most widgets: if the content does not
/// overflow the widget boundary, don't pay any performance cost for clipping.
///
/// If the content does overflow, please explicitly specify the following
/// [Clip] options:
///  * [hardEdge], which is the fastest clipping, but with lower fidelity.
///  * [antiAlias], which is a little slower than [hardEdge], but with smoothed edges.
///  * [antiAliasWithSaveLayer], which is much slower than [antiAlias], and should
///    rarely be used. ¿ ¢ıÇ_¿ •LÇ:/// Clip, but do not apply anti-aliasing.
///
/// This mode enables clipping, but curves and non-axis-aligned straight lines will be
/// jagged as no effort is made to anti-alias.
///
/// Faster than other clipping modes, but slower than [none].
///
/// This is a reasonable choice when clipping is needed, if the container is an axis-
/// aligned rectangle or an axis-aligned rounded rectangle with very small corner radii.
///
/// See also:
///
///  * [antiAlias], which is more reasonable when clipping is needed and the shape is not
///    an axis-aligned rectangle. ¿ •YÉ.¿ ®~É /// Clip with anti-aliasing.
///
/// This mode has anti-aliased clipping edges to achieve a smoother look.
///
/// It' s much faster than [antiAliasWithSaveLayer], but slower than [hardEdge].
///
/// This will be the common case when dealing with circles and arcs.
///
/// Different from [hardEdge] and [antiAliasWithSaveLayer], this clipping may have
/// bleeding edge artifacts.
/// (See https://fiddle.skia.org/c/21cb4c2b2515996b537f36e7819288ae for an example.)
///
/// See also:
///
///  * [hardEdge], which is a little faster, but with lower fidelity.
///  * [antiAliasWithSaveLayer], which is much slower, but can avoid the
///    bleeding edges if there's no other way.
///  * [Paint.isAntiAlias], which is the anti-aliasing switch for general draw operations. ¿ ®åÑs¿ ¨ÈÑ4/// Clip with anti-aliasing and saveLayer immediately following the clip.
///
/// This mode not only clips with anti-aliasing, but also allocates an offscreen
/// buffer. All subsequent paints are carried out on that buffer before finally
/// being clipped and composited back.
///
/// This is very slow. It has no bleeding edge artifacts (that [antiAlias] has)
/// but it changes the semantics as an offscreen buffer is now introduced.
/// (See https://github.com/flutter/flutter/issues/18057#issuecomment-394197336
/// for a difference between paint without saveLayer and paint with saveLayer.)
///
/// This will be only rarely needed. One case where you might need this is if
/// you have an image overlaid on a very different background color. In these
/// cases, consider whether you can avoid overlaying multiple colors in one
/// spot (e.g. by having the background color only present where the image is
/// absent). If you can, [antiAlias] would be fine and much faster.
///
/// See also:
///
///  * [antiAlias], which is much faster, and has similar clipping results.    ¿ ÛfÜ;¿ ÙÚY/// The format in which image bytes should be returned when using
/// [Image.toByteData].  ¿ ıÄÇ¿ ıÅt/// Raw RGBA format.
///
/// Unencoded bytes, in RGBA row-primary form with premultiplied alpha, 8 bits per channel. ¿ ıçÄé¿ ˆx/// Raw straight RGBA format.
///
/// Unencoded bytes, in RGBA row-primary form with straight alpha, 8 bits per channel. ¿ ˆ Äª¿ ˆŒÄ•/// Raw unmodified format.
///
/// Unencoded bytes, in the image's existing format. For example, a grayscale
/// image may use a single 8-bit channel for each pixel. ¿ ˆ‡Çæ¿ ˘õÇú/// PNG format.
///
/// A loss-less compression format for images. This format is well suited for
/// images with hard edges, such as screenshots or sprites, and images with
/// text. Transparency is supported. The PNG format supports images up to
/// 2,147,483,647 pixels in either dimension, though in practice available
/// memory provides a more immediate limitation on maximum image size.
///
/// PNG images normally use the `.png` file extension and the `image/png` MIME
/// type.
///
/// See also:
///
///  * <https://en.wikipedia.org/wiki/Portable_Network_Graphics>, the Wikipedia page on PNG.
///  * <https://tools.ietf.org/rfc/rfc2083.txt>, the PNG standard.    ¿ ˘£Å‘¿ ˘Á>/// The format of pixel data given to [decodeImageFromPixels].  ¿ ˘˜Äº¿ ˙´Ä≠/// Each pixel is 32 bits, with the highest 8 bits encoding red, the next 8
/// bits encoding green, the next 8 bits encoding blue, and the lowest 8 bits
/// encoding alpha. ¿ ˙∏Äº¿ ˚lÄ≠/// Each pixel is 32 bits, with the highest 8 bits encoding blue, the next 8
/// bits encoding green, the next 8 bits encoding red, and the lowest 8 bits
/// encoding alpha.    ¿QÉï¿Q¥Äó/// Determines the winding rule that decides how the interior of a [Path] is
/// calculated.
///
/// This enum is used by the [Path.fillType] property.  ¿Q≈ÅØ¿SmÅó/// The interior is defined by a non-zero sum of signed edge crossings.
///
/// For a given point, the point is considered to be on the inside of the path
/// if a line drawn from the point to infinity crosses lines going clockwise
/// around the point a different number of times than it crosses lines going
/// counter-clockwise around that point.
///
/// See: <https://en.wikipedia.org/wiki/Nonzero-rule> ¿SyÅ0¿T¢Å/// The interior is defined by an odd number of edge crossings.
///
/// For a given point, the point is considered to be on the inside of the path
/// if a line drawn from the point to infinity crosses an odd number of lines.
///
/// See: <https://en.wikipedia.org/wiki/Even-odd_rule>    ¿TÆàL¿UbÄà/// Strategies for combining paths.
///
/// See also:
///
/// * [Path.combine], which uses this enum to decide how to combine two paths.  ¿UtÅ£¿WÅÑ/// Subtract the second path from the first path.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the result would be a crescent portion of the
/// first circle that was not overlapped by the second circle.
///
/// See also:
///
///  * [reverseDifference], which is the same but subtracting the first path
///    from the second. ¿WÅá¿XôÅk/// Create a new path that is the intersection of the two paths, leaving the
/// overlapping pieces of the path.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the result would be only the overlapping portion
/// of the two circles.
///
/// See also:
///  * [xor], which is the inverse of this operation ¿X¶Å$¿Y≈Å/// Create a new path that is the union (inclusive-or) of the two paths.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the result would be a figure-eight like shape
/// matching the outer boundaries of both circles. ¿YŒÅÇ¿[MÅn/// Create a new path that is the exclusive-or of the two paths, leaving
/// everything but the overlapping pieces of the path.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the figure-eight like shape less the overlapping parts
///
/// See also:
///  * [intersect], which is the inverse of this operation ¿[TÅ£¿\ÊÅ}/// Subtract the first path from the second path.
///
/// For example, if the two paths are overlapping circles of equal diameter
/// but differing centers, the result would be a crescent portion of the
/// second circle that was not overlapped by the first circle.
///
/// See also:
///
///  * [difference], which is the same but subtracting the second path
///    from the first.    ¿ÃÁÉ{¿Õ]4/// Styles to use for blurs in [MaskFilter] objects.  ¿Õ§Äñ¿Œ4Äã/// Fuzzy inside and outside. This is useful for painting shadows that are
/// offset from the shape that ostensibly is casting the shadow. ¿Œ?ÄÕ¿œÄ¡/// Solid inside, fuzzy outside. This corresponds to drawing the shape, and
/// additionally drawing the blur. This can make objects appear brighter,
/// maybe even as if they were fluorescent. ¿œÄÊ¿œÚÄ⁄/// Nothing inside, fuzzy outside. This is useful for painting shadows for
/// partially transparent shapes, when they are painted separately but without
/// an offset, so that the shadow doesn't paint below the shape. ¿œ¸c¿–ZY/// Fuzzy inside, nothing outside. This can make shapes appear to be lit from
/// within.    ¿"fì¿)9Üí/// Defines what happens at the edge of a gradient or the sampling of a source image
/// in an [ImageFilter].
///
/// A gradient is defined along a finite inner area. In the case of a linear
/// gradient, it's between the parallel lines that are orthogonal to the line
/// drawn between two points. In the case of radial gradients, it's the disc
/// that covers the circle centered on a particular point up to a given radius.
///
/// An image filter reads source samples from a source image and performs operations
/// on those samples to produce a result image. An image defines color samples only
/// for pixels within the bounds of the image but some filter operations, such as a blur
/// filter, read samples over a wide area to compute the output for a given pixel. Such
/// a filter would need to combine samples from inside the image with hypothetical
/// color values from outside the image.
///
/// This enum is used to define how the gradient or image filter should treat the regions
/// outside that defined inner area.
///
/// See also:
///
///  * [painting.Gradient], the superclass for [LinearGradient] and
///    [RadialGradient], as used by [BoxDecoration] et al, which works in
///    relative coordinates and can create a [Shader] representing the gradient
///    for a particular [Rect] on demand.
///  * [dart:ui.Gradient], the low-level class used when dealing with the
///    [Paint.shader] property directly, with its [Gradient.linear] and
///    [Gradient.radial] constructors.
///  * [dart:ui.ImageFilter.blur], an ImageFilter that may sometimes need to
///    read samples from outside an image to combine with the pixels near the
///    edge of the image.  ¿)FÇ£¿+‰Çá/// Samples beyond the edge are clamped to the nearest color in the defined inner area.
///
/// A gradient will paint all the regions outside the inner area with the
/// color at the end of the color stop list closest to that region.
///
/// An image filter will substitute the nearest edge pixel for any samples taken from
/// outside its source image.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_clamp_sweep.png) ¿+ÓÉ5¿/É/// Samples beyond the edge are repeated from the far end of the defined area.
///
/// For a gradient, this technique is as if the stop points from 0.0 to 1.0 were then
/// repeated from 1.0 to 2.0, 2.0 to 3.0, and so forth (and for linear gradients, similarly
/// from -1.0 to 0.0, -2.0 to -1.0, etc).
///
/// An image filter will treat its source image as if it were tiled across the enlarged
/// sample space from which it reads, each tile in the same orientation as the base image.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_repeated_sweep.png) ¿/(É|¿2ûÉY/// Samples beyond the edge are mirrored back and forth across the defined area.
///
/// For a gradient, this technique is as if the stop points from 0.0 to 1.0 were then
/// repeated backwards from 2.0 to 1.0, then forwards from 2.0 to 3.0, then backwards
/// again from 4.0 to 3.0, and so forth (and for linear gradients, similarly in the
/// negative direction).
///
/// An image filter will treat its source image as tiled in an alternating forwards and
/// backwards or upwards and downwards direction across the sample space from which
/// it is reading.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_mirror_sweep.png) ¿2©ÇΩ¿5aÇü/// Samples beyond the edge are treated as transparent black.
///
/// A gradient will render transparency over any region that is outside the circle of a
/// radial gradient or outside the parallel lines that define the inner area of a linear
/// gradient.
///
/// An image filter will substitute transparent black for any sample it must read from
/// outside its source image.
///
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_linear.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_radial.png)
/// ![](https://flutter.github.io/assets-for-api-docs/assets/dart-ui/tile_mode_decal_sweep.png)    ¿y)Å˜¿yÌw/// Defines how a list of points is interpreted when drawing a set of triangles.
///
/// Used by [Canvas.drawVertices].  ¿y¸Q¿zDE/// Draw each sequence of three points as the vertices of a triangle. ¿zR[¿z†K/// Draw each sliding window of three points as the vertices of a triangle. ¿z≤k¿{]/// Draw the first point and each sliding window of two points as the vertices of a triangle.    ¿åˇÑ¿çªr/// Defines how a list of points is interpreted when drawing a set of points.
///
/// Used by [Canvas.drawPoints].  ¿ç…Å∑¿èzÅû/// Draw each point separately.
///
/// If the [Paint.strokeCap] is [StrokeCap.round], then each point is drawn
/// as a circle with the diameter of the [Paint.strokeWidth], filled as
/// described by the [Paint] (ignoring [Paint.style]).
///
/// Otherwise, each point is drawn as an axis-aligned square with sides of
/// length [Paint.strokeWidth], filled as described by the [Paint] (ignoring
/// [Paint.style]). ¿èÖÄÈ¿êiÄ◊/// Draw each sequence of two points as a line segment.
///
/// If the number of points is odd, then the last point is ignored.
///
/// The lines are stroked as described by the [Paint] (ignoring
/// [Paint.style]). ¿êsÄö¿ëÄä/// Draw the entire sequence of point as one line.
///
/// The lines are stroked as described by the [Paint] (ignoring
/// [Paint.style]).    ¿ëÅ¿ëêx/// Defines how a new clip region should be merged with the existing clip
/// region.
///
/// Used by [Canvas.clipRect].  ¿ëõB¿ë”5/// Subtract the new region from the existing region. ¿ë‚B¿í6/// Intersect the new region from the existing region.      ÉÂÇÖVÅj/// {@template dart.ui.imageFormats}
/// JPEG, PNG, GIF, Animated GIF, WebP, Animated WebP, BMP, and WBMP. Additional
/// formats may be supported by the underlying platform. Flutter will
/// attempt to call platform API to decode unrecognized formats, and if the
/// platform API supports decoding the image Flutter will be able to render it.
/// {@endtemplate} Öc	Öi   ÖıÄ©Ö˙  ÜÜ   Ü†Ä∆Ü•  Ü¥Üº   áhÅám  á}áä   à~ÄƒàÉ  àíàö   âDmâJ  âVâ]  â_âg   ¿2‹á≤¿9'Ü</// Instantiates an image [Codec].
///
/// This method is a convenience wrapper around the [ImageDescriptor] API, and
/// using [ImageDescriptor] directly is preferred since it allows the caller to
/// make better determinations about how and whether to use the `targetWidth`
/// and `targetHeight` parameters.
///
/// The `list` parameter is the binary image data (e.g a PNG or GIF binary data).
/// The data can be for either static or animated images. The following image
/// formats are supported: {@macro dart.ui.imageFormats}
///
/// The `targetWidth` and `targetHeight` arguments specify the size of the
/// output image, in image pixels. If they are not equal to the intrinsic
/// dimensions of the image, then the image will be scaled after being decoded.
/// If the `allowUpscaling` parameter is not set to true, both dimensions will
/// be capped at the intrinsic dimensions of the image, even if only one of
/// them would have exceeded those intrinsic dimensions. If exactly one of these
/// two arguments is specified, then the aspect ratio will be maintained while
/// forcing the image to match the other given dimension. If neither is
/// specified, then the image maintains its intrinsic size.
///
/// Scaling the image to larger than its intrinsic size should usually be
/// avoided, since it causes the image to use more memory than necessary.
/// Instead, prefer scaling the [Canvas] transform. If the image must be scaled
/// up, the `allowUpscaling` parameter must be set to true.
///
/// The returned future can complete with an error if the image decoding has
/// failed. ¿9@¿9K  ¿9T¿9Z  ¿9h¿9n  ¿9}¿9É  ¿9ì¿:êà¢¿@›Ü>/// Instantiates an image [Codec].
///
/// This method is a convenience wrapper around the [ImageDescriptor] API, and
/// using [ImageDescriptor] directly is preferred since it allows the caller to
/// make better determinations about how and whether to use the `targetWidth`
/// and `targetHeight` parameters.
///
/// The [buffer] parameter is the binary image data (e.g a PNG or GIF binary data).
/// The data can be for either static or animated images. The following image
/// formats are supported: {@macro dart.ui.imageFormats}
///
/// The [targetWidth] and [targetHeight] arguments specify the size of the
/// output image, in image pixels. If they are not equal to the intrinsic
/// dimensions of the image, then the image will be scaled after being decoded.
/// If the `allowUpscaling` parameter is not set to true, both dimensions will
/// be capped at the intrinsic dimensions of the image, even if only one of
/// them would have exceeded those intrinsic dimensions. If exactly one of these
/// two arguments is specified, then the aspect ratio will be maintained while
/// forcing the image to match the other given dimension. If neither is
/// specified, then the image maintains its intrinsic size.
///
/// Scaling the image to larger than its intrinsic size should usually be
/// avoided, since it causes the image to use more memory than necessary.
/// Instead, prefer scaling the [Canvas] transform. If the image must be scaled
/// up, the `allowUpscaling` parameter must be set to true.
///
/// The returned future can complete with an error if the image decoding has
/// failed. ¿A ¿A  ¿A¿A"  ¿A0¿A6  ¿AE¿AK  ¿A[¿C4Å©¿DjÅ0/// Loads a single image frame from a byte array into an [Image] object.
///
/// This is a convenience wrapper around [instantiateImageCodec]. Prefer using
/// [instantiateImageCodec] which also supports multi frame images and offers
/// better error handling. This function swallows asynchronous errors. ¿D~¿Dâ  ¿Dé¿D§   ¿DﬂÅ¿DÏ  ¿E¿E  ¿E=¿ES   ¿E˜ã¿KöÖù/// Convert an array of pixel values into an [Image] object.
///
/// The `pixels` parameter is the pixel data. They are packed in bytes in the
/// order described by `format`, then grouped in rows, from left to right,
/// then top to bottom.
///
/// The `rowBytes` parameter is the number of bytes consumed by each row of
/// pixels in the data buffer. If unspecified, it defaults to `width` multiplied
/// by the number of bytes per pixel in the provided `format`.
///
/// The `targetWidth` and `targetHeight` arguments specify the size of the
/// output image, in image pixels. If they are not equal to the intrinsic
/// dimensions of the image, then the image will be scaled after being decoded.
/// If the `allowUpscaling` parameter is not set to true, both dimensions will
/// be capped at the intrinsic dimensions of the image, even if only one of
/// them would have exceeded those intrinsic dimensions. If exactly one of these
/// two arguments is specified, then the aspect ratio will be maintained while
/// forcing the image to match the other given dimension. If neither is
/// specified, then the image maintains its intrinsic size.
///
/// Scaling the image to larger than its intrinsic size should usually be
/// avoided, since it causes the image to use more memory than necessary.
/// Instead, prefer scaling the [Canvas] transform. If the image must be scaled
/// up, the `allowUpscaling` parameter must be set to true. 	¿K≥¿Kæ  ¿K«	¿KÃ  ¿K‘
¿KŸ  ¿K‚¿KÔ  ¿K¯¿L  ¿L¿L!  ¿L,¿L2  ¿L@¿LF  ¿LU¿L[  ¿Lk¿5kÄÂ¿5u  ¿5Ü¿5ì   ¿6RÅµ¿6^  ¿6o¿6}   ¿8	Å$¿8  ¿8&¿8.  ¿85¿8=   ¿ü2Ö¸¿¢àÇb/// Converts a method that receives a value-returning callback to a method that
/// returns a Future.
///
/// Return a [String] to cause an [Exception] to be synchronously thrown with
/// that string as a message.
///
/// If the callback is called with null, the future completes with an error.
///
/// Example usage:
///
/// ```dart
/// typedef IntCallback = void Function(int result);
///
/// String _doSomethingAndCallback(IntCallback callback) {
///   Timer(Duration(seconds: 1), () { callback(1); });
/// }
///
/// Future<int> doSomething() {
///   return _futurize(_doSomethingAndCallback);
/// }
/// ```¿¢í¿¢í¿¢ï¿¢•    ¿ "m¿ \1/// Callback signature for [decodeImageFromList].  ¿ Å¿ à   ¿ùıd¿û24/// Generic callback signature, used by [_futurize].¿û<¿û< ¿ûO¿ûR   ¿û[Ä’¿ûˆÄí/// Signature for a method that receives a [_Callback].
///
/// Return value should be null on success, and a string error message on
/// failure.¿ü¿ü ¿ü¿ü'       ó <ÄÜÄ§Ä•Ä¶Ä∂Ä«Ä»ÅÅ_ÅØÇ ÇPÇûÇÔÉ-É0É~É§É•ÉÂÑ
Ñ[Ñ°ÑÌÖ=ÖPÖQÖpÖ£Ö„ÖÚÖÙÖıÜÜLÜéÜùÜüÜ†Ü≈Ü¸áVáeágáháîáÕààlà{à}à~à£à⁄â2âAâCâDâpâ∞â≤â≥âÁâÎä;äãä⁄ããã6ã:ãFãmã©ã‡ååå#åtå√çç?çCçOçúç‰çÏçç˛ééUéõé©éÂéÎèèèDèjèëè∂èºêêZêàêéê‘ë!ëFëbëôëöë⁄ë‡í-í=íbíâíØíµí¯í˛ìIìVìãì≠ìœìÒîî îuî{î†î«îÌï:ïjïpï≥ïπññ?ñuñ´ñ·ó#ó$óRóXóÄóÜóÆó‘ó˚ò ò3ò4òmòsò¬ò‰ôôôGôMôûô¿ôÊôÁööKöLöÖö≥ö¥öÏõõõcõôõüõ◊õÚú"ú&ú'úpú∏úæúˆùùJù{ùùÄù–ù˝ûû;ûTûÜûäûãû‘ü
üüHücüìüóüòüÈ†††T†n†ü†£†§†‚°°=°]°û°¢°£°Ó°Ù¢H¢f¢l¢™¢»££C£Ä£º£Ì£Ò£Ú§!§'§o§≤§∏••O•é•‘•⁄¶'¶q¶ºßßVß¶ßÛ®D®q®w®∆®Ê©©2©G©^©s©Ç©™©≤©ø©÷©¯™™&™j™™™Ó´0´;´C´I´M´N´ë´◊´›¨)¨p¨ª≠
≠U≠ï≠Ω≠¸ÆÆÆBÆhÆüÆºÆ ØØZØ¢Ø´Ø»Ø˙∞(∞H∞e∞w∞¬±±^±g±m±q±r±ø±≈±≤#≤@≤t≤x≤y≤Ö≤®≤»≤€≥≥≥3≥T≥X≥Y≥e≥ã≥å≥ò≥Ê≥Ë≥È¥¥ ¥m¥∑¥÷¥⁄µ+µxµ«∂∂e∂∞∂Ù∂¯∑H∑ì∑‰∏0∏~∏Àππ]π¨πÚ∫∫∫_∫¨∫ˆªHªïªÊº'º+ºRºVº§ºÂΩ6ΩÉΩ‘æ#æræçæëæüæ£æÓæˇøø_ørø∏øπø˝¿ @¿ @?¿ @E¿ @¢¿ @´¿ @¨¿ @Î¿ @Ò¿ A@¿ AO¿ AU¿ Aê¿ Añ¿ AÒ¿ A¯¿ A˘¿ B8¿ B>¿ Bâ¿ Bö¿ B†¿ B‚¿ BË¿ CC¿ CJ¿ CK¿ Cà¿ Cé¿ C‹¿ D-¿ DJ¿ DP¿ Dû¿ DÀ¿ D—¿ E0¿ E;¿ E<¿ Ez¿ EÄ¿ E©¿ EØ¿ E˝¿ F¿ Fb¿ Fh¿ F∑¿ F‚¿ FÌ¿ FÓ¿ G6¿ GÉ¿ G–¿ Gﬁ¿ G‰¿ H#¿ H)¿ Hv¿ Hæ¿ HŒ¿ H‘¿ I ¿ I&¿ IÉ¿ Iå¿ Iç¿ I⁄¿ J(¿ Jr¿ Jx¿ J≤¿ J∏¿ K¿ KW¿ K]¿ K©¿ KØ¿ L¿ L¿ L¿ Le¿ L∏¿ M¿ M¿ MM¿ MS¿ M†¿ MÒ¿ M˜¿ ND¿ NJ¿ N®¿ N≤¿ N≥¿ O¿ OU¿ Oü¿ O•¿ O‡¿ OÊ¿ P8¿ PÑ¿ Pä¿ P◊¿ P›¿ Q;¿ QE¿ QF¿ Qï¿ Qµ¿ Qª¿ R	¿ R¿ R_¿ R´¿ Rﬂ¿ RÂ¿ S0¿ SA¿ SG¿ S¶¿ S±¿ S≤¿ T¿ T¿ T"¿ Tp¿ Tv¿ T∆¿ U¿ UA¿ UG¿ Uí¿ U£¿ U©¿ V¿ V¿ V¿ Vd¿ Vò¿ Vû¿ VÎ¿ VÒ¿ WL¿ WS¿ WT¿ Wì¿ Wô¿ WË¿ X4¿ XZ¿ X`¿ XÆ¿ X¥¿ Y¿ Y¿ Y¿ Yc¿ Yi¿ Y∏¿ Z¿ Z¿ Z^¿ Zá¿ Zç¿ Zﬁ¿ Z‰¿ [D¿ [J¿ [Z¿ [`¿ [¢¿ [Í¿ \¿ \P¿ \g¿ \s¿ \t¿ \º¿ \Ω¿ ]¿ ].¿ ]4¿ ]Ä¿ ]Õ¿ ]¸¿ ^¿ ^S¿ ^ü¿ ^≈¿ ^À¿ _¿ _j¿ _ª¿ _¡¿ `¿ `2¿ `8¿ `ñ¿ `ú¿ `¨¿ `≤¿ a¿ a¿ a[¿ aw¿ a¡¿ aÿ¿ a˚¿ a¸¿ bE¿ bt¿ bz¿ bÀ¿ c¿ cj¿ câ¿ cè¿ c€¿ d(¿ dW¿ d]¿ dº¿ d¬¿ d“¿ dÿ¿ e¿ eX¿ e®¿ e”¿ eﬁ¿ eﬂ¿ f-¿ fL¿ fR¿ fõ¿ f¨¿ f≤¿ g¿ g¿ g¿ gj¿ gâ¿ gè¿ gÿ¿ gÈ¿ gÔ¿ hN¿ hY¿ hZ¿ hï¿ hõ¿ hÁ¿ i4¿ ic¿ ii¿ iÀ¿ iŸ¿ i⁄¿ j-¿ j3¿ j¿ jÃ¿ j˚¿ k¿ kb¿ ko¿ kp¿ kπ¿ k„¿ kÈ¿ l9¿ lÇ¿ l–¿ l˝¿ m¿ mO¿ mú¿ mÀ¿ m—¿ n2¿ n8¿ nH¿ nN¿ ná¿ nŒ¿ o¿ oI¿ oV¿ oW¿ o•¿ oΩ¿ o√¿ p¿ p¿ pl¿ pr¿ pÇ¿ pà¿ p¡¿ pŒ¿ pœ¿ q¿ q¿ qm¿ qÑ¿ qä¿ q”¿ q‰¿ qÍ¿ r"¿ r(¿ rä¿ rò¿ rô¿ rÂ¿ rÛ¿ r˘¿ sH¿ s_¿ se¿ sÆ¿ sø¿ s≈¿ s˝¿ t¿ td¿ tq¿ tr¿ t¿¿ tŸ¿ tﬂ¿ u.¿ u}¿ uÉ¿ uœ¿ v¿ vd¿ vj¿ vπ¿ v›¿ v„¿ wC¿ wl¿ wm¿ wæ¿ w◊¿ w›¿ x&¿ x,¿ xu¿ x≈¿ xÎ¿ xÒ¿ yL¿ yR¿ yb¿ yh¿ y∏¿ y·¿ z0¿ za¿ zh¿ zi¿ z∫¿ z”¿ zŸ¿ {"¿ {r¿ {ü¿ {•¿ | ¿ |¿ |¿ |¿ |^¿ |≠¿ |√¿ |—¿ |“¿ }#¿ }<¿ }B¿ }ã¿ }ë¿ }⁄¿ ~*¿ ~_¿ ~e¿ ~¬¿ ~»¿ ~ÿ¿ ~ﬁ¿ ¿ b¿ ∞¿ π¿ ∫¿ Ä¿ Ä$¿ Ä*¿ Äs¿ Ä√¿ Ä¿ Äˆ¿ ÅX¿ Å^¿ Ån¿ Åt¿ Å√¿ ÅŸ¿ Ç$¿ Ç=¿ ÇK¿ ÇM¿ ÇN¿ Ç¶¿ Ç·¿ ÇÂ¿ ÉB¿ Éâ¿ Éç¿ É‚¿ Ñ6¿ Ñå¿ Ñ‡¿ Ñ‰¿ Ö2¿ Öm¿ Öq¿ Ö ¿ ÖŒ¿ Ü¿ Üc¿ ÜÇ¿ ÜÜ¿ Üî¿ Üò¿ Ü„¿ á¿ á2¿ áO¿ áj¿ áâ¿ á®¿ á√¿ áÿ¿ à.¿ àV¿ àW¿ àõ¿ à°¿ àÁ¿ â,¿ â4¿ â5¿ âm¿ âs¿ âµ¿ â‰¿ âÎ¿ âÏ¿ ä6¿ ä^¿ äd¿ äØ¿ ä¸¿ ãE¿ ãê¿ ãñ¿ ã∆¿ ã÷¿ ã‹¿ å+¿ å_¿ åt¿ å~¿ å¿ åœ¿ å‹¿ å‚¿ ç0¿ çm¿ çs¿ çö¿ ç†¿ çÚ¿ éB¿ éç¿ éì¿ é¿¿ é»¿ é ¿ éÀ¿ éÔ¿ éÛ¿ è¿ è¿ è:¿ è}¿ è∫¿ èÀ¿ ê¿ ê¿ êb¿ ê∆¿ êÃ¿ ë¿ ëL¿ ëT¿ ëU¿ ëê¿ ëñ¿ ë‡¿ í0¿ í†¿ í¶¿ íˆ¿ ì¿ ì$¿ ì%¿ ìh¿ ì≠¿ ì“¿ ìÿ¿ î'¿ îò¿ îû¿ îÓ¿ ï¿ ï¿ ïg¿ ïá¿ ïë¿ ïì¿ ïî¿ ïæ¿ ï¬¿ ñ¿ ñS¿ ñW¿ ñe¿ ñi¿ ñµ¿ ñ¡¿ ñ¸¿ ó:¿ óL¿ óÇ¿ óà¿ óÒ¿ ó˜¿ ò?¿ òè¿ òõ¿ ò°¿ ò±¿ ò∑¿ ô¿ ô¿ ôg¿ ô†¿ ô©¿ ô™¿ ôﬂ¿ ôÂ¿ öL¿ öR¿ öö¿ öÍ¿ öˆ¿ ö¸¿ õ¿ õ¿ õ`¿ õq¿ õz¿ õ{¿ õ…¿ õ˚¿ ú¿ úh¿ ún¿ ú∂¿ ù¿ ù¿ ù¿ ù(¿ ù.¿ ù|¿ ùç¿ ùñ¿ ùò¿ ùô¿ ù”¿ ù◊¿ ùÓ¿ û-¿ ûB¿ ûì¿ û°¿ û¢¿ ûË¿ ü.¿ üU¿ ü]¿ ü^¿ ü¢¿ üË¿ †/¿ †m¿ †w¿ †y¿ †z¿ †{¿ †™¿ †∂¿ †Ã¿ †“¿ °¿ °n¿ °t¿ °¿¿ °÷¿ ¢#¿ ¢|¿ ¢—¿ ¢Í¿ ¢Ú¿ ¢Û¿ £¿ £%¿ £~¿ £Ø¿ £µ¿ £ı¿ £˚¿ §S¿ §Æ¿ §¥¿ §ƒ¿ § ¿ •&¿ •J¿ •V¿ •W¿ •v¿ •|¿ •»¿ •Œ¿ ¶!¿ ¶'¿ ¶n¿ ¶t¿ ¶…¿ ¶Ë¿ ß?¿ ßE¿ ßU¿ ß[¿ ß£¿ ßÓ¿ ®¿ ®|¿ ®â¿ ®ä¿ ®÷¿ ®‹¿ ©/¿ ©Å¿ ©™¿ ©∞¿ ™¿ ™O¿ ™°¿ ™Û¿ ™˘¿ ´I¿ ´ô¿ ´Á¿ ¨7¿ ¨}¿ ¨É¿ ¨ì¿ ¨ô¿ ¨Á¿ ≠¿ ≠¿ ≠¿ ≠F¿ ≠J¿ ≠ê¿ ≠Ø¿ ≠Ω¿ ≠Ï¿ ≠Ò¿ Æ<¿ Æá¿ Æ÷¿ Ø$¿ Øs¿ Øx¿ Ø»¿ ∞¿ ∞*¿ ∞/¿ ∞w¿ ∞x¿ ∞¨¿ ∞≠¿ ∞ÿ¿ ∞˝¿ ±&¿ ±K¿ ±v¿ ±ü¿ ±…¿ ±˘¿ ≤&¿ ≤P¿ ≤Ñ¿ ≤¥¿ ≤‡¿ ≥¿ ≥¿ ≥J¿ ≥Ä¿ ≥æ¿ ≥Ù¿ ¥6¿ ¥t¿ ¥¥¿ µ ¿ µF¿ µÜ¿ µÿ¿ ∂"¿ ∂d¿ ∂ú¿ ∂›¿ ∑¿ ∑¿ ∑K¿ ∑f¿ ∑g¿ ∑ï¿ ∑È¿ ∑Ì¿ ∑Ó¿ ∏¿ ∏?¿ ∏j¿ ∏æ¿ ∏ø¿ π¿ π¿ π)¿ πD¿ πZ¿ π`¿ πd¿ πe¿ π´¿ ππ¿ πø¿ π◊¿ π¿ ∫7¿ ∫;¿ ∫[¿ ∫´¿ ∫’¿ ∫¸¿ ª@¿ ªD¿ ªE¿ ª}¿ ª≠¿ ªÆ¿ ªÁ¿ ªÌ¿ º¿ º¿ º#¿ º)¿ ºo¿ º†¿ ºË¿ ºÓ¿ Ω6¿ ΩK¿ Ω_¿ Ω®¿ Ω‘¿ Ωÿ¿ ΩÛ¿ æ¿ æD¿ æÇ¿ æÜ¿ æá¿ æø¿ ø ¿ ø¿ øM¿ øS¿ øï¿ øÊ¿ ¿7¿ ¿X¿ ¿^¿ ¿´¿ ¿Ã¿ ¿“¿ ¿˘¿ ¿ˇ¿ ¡¿ ¡¿ ¡d¿ ¡ò¿ ¡‚¿ ¡¯¿ ¬¿ ¬a¿ ¬ú¿ ¬†¿ ¬√¿ ¬ﬁ¿ √¿ √Z¿ √^¿ √_¿ √£¿ √©¿ √—¿ √Ì¿ ƒ?¿ ƒC¿ ƒf¿ ƒÅ¿ ƒ¶¿ ƒ‰¿ ƒË¿ ƒÈ¿ ≈#¿ ≈r¿ ≈Ø¿ ≈µ¿ ≈Ú¿ ∆¿ ∆Q¿ ∆U¿ ∆w¿ ∆í¿ ∆¥¿ ∆˙¿ ∆˛¿ ∆ˇ¿ «@¿ «p¿ «v¿ «®¿ «ƒ¿ »¿ »¿ »=¿ »X¿ »}¿ »ø¿ »√¿ »ƒ¿ …¿ …¿ …\¿ …ß¿ …≠¿ …Á¿ …Ì¿  ¿  ¿  z¿  Ä¿  Á¿  Ì¿ ÀT¿ ÀZ¿ À¶¿ À˜¿ Ã¿ Ã	¿ Ã¿ Ã¿ Ãn¿ Ãö¿ Ã„¿ Õ"¿ Õ@¿ Õî¿ Õò¿ ÕΩ¿ Õÿ¿ Õ˝¿ Œ@¿ ŒD¿ ŒE¿ Œ}¿ Œ¥¿ Œµ¿ œ ¿ œN¿ œô¿ œÊ¿ –4¿ –:¿ –¿ –Ö¿ –”¿ –˜¿ –˝¿ —f¿ —l¿ —’¿ —€¿ “D¿ “J¿ “ñ¿ “Á¿ “Û¿ “˘¿ ”	¿ ”¿ ”Y¿ ”t¿ ”Ω¿ ”›¿ ‘&¿ ‘*¿ ‘Q¿ ‘l¿ ‘™¿ ‘ı¿ ‘˘¿ ‘˙¿ ’J¿ ’à¿ ’é¿ ’≤¿ ’—¿ ÷¿ ÷6¿ ÷K¿ ÷l¿ ÷å¿ ÷Á¿ ◊.¿ ◊9¿ ◊?¿ ◊P¿ ◊T¿ ◊z¿ ◊ì¿ ◊Â¿ ÿ-¿ ÿu¿ ÿÇ¿ ÿœ¿ Ÿ¿ ŸS¿ Ÿ¨¿ Ÿ˝¿ ⁄¿ ⁄¿ ⁄¿ ⁄Z¿ ⁄Æ¿ ⁄˙¿ € ¿ €(¿ €u¿ €ô¿ €Û¿ €˜¿ ‹"¿ ‹=¿ ‹b¿ ‹®¿ ‹¨¿ ‹≠¿ ‹Á¿ ‹Ì¿ ›#¿ ›)¿ ›9¿ ›?¿ ›{¿ ›≥¿ ›Â¿ ﬁ-¿ ﬁD¿ ﬁt¿ ﬁx¿ ﬁñ¿ ﬁŒ¿ ﬁ“¿ ﬁ”¿ ﬂ¿ ﬂ,¿ ﬂ2¿ ﬂW¿ ﬂ]¿ ﬂÆ¿ ﬂœ¿ ‡&¿ ‡H¿ ‡L¿ ‡M¿ ‡u¿ ‡ª¿ ‡€¿ ‡˘¿ ·'¿ ·/¿ ·<¿ ·Ç¿ ·à¿ ·å¿ ·ç¿ ·»¿ ·Œ¿ ‚¿ ‚/¿ ‚5¿ ‚C¿ ‚a¿ ‚g¿ ‚}¿ ‚É¿ ‚∞¿ ‚ ¿ ‚€¿ ‚Ú¿ „@¿ „K¿ „S¿ „]¿ „c¿ „s¿ „y¿ „¥¿ „’¿ ‰,¿ ‰N¿ ‰R¿ ‰S¿ ‰{¿ ‰î¿ ‰≤¿ ‰‡¿ ‰Ë¿ ‰ı¿ Â6¿ Âå¿ Â∑¿ Â˚¿ Ê¿ Ê	¿ Ê¿ Ê¿ ÊM¿ ÊS¿ Êü¿ ÊÈ¿ Á¿ Á4¿ Á{¿ Á¿ Á†¿ ÁÍ¿ ÁÓ¿ ÁÔ¿ Ë¿ ËF¿ ËJ¿ Ëf¿ Ë´¿ ËØ¿ Ë∞¿ ËË¿ ËÓ¿ È:¿ ÈÄ¿ È≥¿ Èπ¿ Èˇ¿ Í ¿ Í&¿ Ís¿ Íø¿ Í‚¿ ÍË¿ Î/¿ Î}¿ Î§¿ Î•¿ Î±¿ Î«¿ Ï¿ Ï4¿ Ï:¿ Ïj¿ ÏÖ¿ Ï°¿ Ï ¿ ÏË¿ Ì¿ ÌB¿ ÌM¿ Ìp¿ Ìó¿ Ìº¿ ÌË¿ Ó#¿ Óx¿ Óá¿ Ó≠¿ Óµ¿ ÓÕ¿ Ó”¿ ÓÚ¿ Ô#¿ Ô;¿ ÔA¿ Ôq¿ Ôô¿ Ô±¿ Ô∑¿ ÔË¿ ¿ ,¿ 2¿ Q¿ é¿ ¶¿ ¨¿  ¿ Ò¿ Ò¿ Ò#¿ ÒR¿ Òì¿ Ò´¿ Ò±¿ ÒÀ¿ Ò˛¿ Ú¿ Ú¿ Ú;¿ Úx¿ Úê¿ Úñ¿ Ú¨¿ ÚÂ¿ Úˆ¿ Û*¿ ÛA¿ Û_¿ Ûc¿ Ûe¿ Ûf¿ Û®¿ Û¿¿ Ù¿ Ù[¿ Ù£¿ ÙÌ¿ ı¿ ı¿ ı!¿ ı¿ ıä¿ ıã¿ ı´¿ ı±¿ ˆ
¿ ˆ¿ ˆ¿ ˆ;¿ ˆA¿ ˆë¿ ˆÃ¿ ˆ›¿ ˆﬁ¿ ˆ¿ ˆˆ¿ ˜F¿ ˜î¿ ˜‡¿ ¯-¿ ¯v¿ ¯|¿ ¯Õ¿ ¯Ÿ¿ ¯ﬂ¿ ¯Ô¿ ¯ı¿ ˘T¿ ˘ô¿ ˘†¿ ˘¢¿ ˘£¿ ˘‚¿ ˘ı¿ ˙C¿ ˙ì¿ ˙©¿ ˙µ¿ ˙∂¿ ˚¿ ˚T¿ ˚j¿ ˚v¿ ˚x¿ ˚y¿ ˚Ø¿ ˚≥¿ ˚Û¿ ˚˜¿ ¸E¿ ¸]¿ ¸a¿ ¸∞¿ ¸ˇ¿ ˝F¿ ˝é¿ ˝‹¿ ˝Í¿ ˝Ó¿ ˛:¿ ˛â¿ ˛–¿ ˛‘¿ ˛‚¿ ˛Ê¿ ˇT¿ ˇ£¿ ˇ…¿ ¿ &¿ X¿ h¿ ê¿ £¿ ≠¿ Ã¿ –¿ —¿ Ú¿¿%¿&¿A¿B¿Ü¿ô¿ö¿‹¿¿Ò¿¿X¿â¿è¿‡¿˚¿¿L¿ó¿Ê¿¿¿F¿r¿à¿ø¿‘¿˜¿¿¿¿¿^¿d¿≤¿»¿„¿˜¿¿#¿6¿@¿Æ¿≤¿≥¿Ë¿Ó¿:¿J¿P¿ù¿∂¿¿U¿ü¿Î¿	@¿	m¿	õ¿	ü¿	†¿	Ò¿
¿
¿
Y¿
è¿
≠¿
Ω¿¿$¿.¿A¿E¿F¿w¿}¿Ã¿¿l¿∏¿¿R¿û¿º¿¬¿¿9¿?¿á¿ÿ¿Ó¿Ù¿*¿0¿>¿Y¿_¿ó¿÷¿ı¿?¿P¿b¿Ç¿“¿ ¿F¿|¿á¿®¿∞¿∂¿ÿ¿¿W¿Ç¿≈¿	¿F¿_¿e¿°¿—¿◊¿Ù¿¿¿6¿T¿o¿w¿}¿ô¿º¿¬¿›¿„¿¿?¿I¿O¿z¿Ç¿å¿í¿◊¿%¿I¿[¿p¿à¿≥¿¿R¿î¿ù¿£¿¬¿Ì¿Ò¿Ú¿>¿Ñ¿ä¿◊¿!¿q¿¿¿
¿W¿ê¿ë¿ù¿«¿…¿ ¿‰¿¿]¿x¿}¿À¿Ì¿	¿¿¿>¿?¿g¿h¿Ω¿Û¿1¿a¿k¿s¿w¿x¿¥¿¿¿,¿?¿W¿c¿{¿»¿‡¿*¿b¿i¿¿è¿ì¿î¿æ¿ø¿‚¿„¿Ô¿ ¿ !¿ "¿ T¿ ê¿ ë¿ ≈¿ …¿!¿!¿!#¿!m¿!∂¿"¿"J¿"ï¿"æ¿"¬¿"˚¿"ˇ¿#¿#¿#N¿#å¿#™¿#˜¿$B¿$_¿$´¿$ ¿$Î¿$Ò¿$˘¿$˝¿%¿%¿%#¿%0¿%g¿%•¿%Â¿&$¿&p¿&ä¿&Ÿ¿'!¿'B¿'H¿'P¿'b¿'¨¿'»¿'Œ¿(¿((¿(f¿(g¿(ñ¿(ú¿(È¿)¿)¿)¿)/¿)5¿)}¿)É¿)œ¿)‰¿)Ê¿)Á¿*¿*¿*S¿*m¿*q¿*©¿*∆¿*‡¿+¿+¿+]¿+x¿+}¿+∂¿+‘¿+¿+˝¿+˛¿,¿,>¿,y¿,™¿,´¿, ¿,˘¿,ˇ¿-3¿-X¿-¢¿-›¿-ﬁ¿.¿.¿.P¿.V¿.ß¿.≠¿.Ó¿/¿/I¿/ë¿/Â¿0 ¿0u¿0Ñ¿0¨¿0Ë¿1*¿16¿1>¿1F¿1_¿1}¿1É¿1†¿1§¿1•¿1·¿2<¿2=¿2ç¿2∞¿2Ÿ¿2€¿2‹¿2ˇ¿3¿3R¿3¢¿3¿4¿4¿4i¿4∑¿4¿4Ù¿5?¿5â¿5Ÿ¿6(¿6t¿6≈¿7¿7\¿7ò¿7ú¿7Ê¿80¿8Ä¿8º¿8¿¿9¿9¿9>¿9R¿9f¿9{¿9ô¿9§¿9¿:¿:&¿:D¿:d¿:à¿:ç¿:è¿:ê¿:≥¿:∑¿;¿;V¿;§¿;«¿;À¿<¿<m¿<¶¿<™¿<ı¿=?¿=è¿=ﬁ¿>*¿>{¿> ¿?¿?N¿?R¿?ú¿?Ê¿@6¿@r¿@v¿@√¿@œ¿@˛¿A¿A.¿AC¿Aa¿Al¿A∏¿A—¿B¿B8¿B>¿BÇ¿B™¿B∞¿B¥¿B»¿BÓ¿C¿C,¿C1¿C3¿C4¿C}¿CÅ¿C–¿D¿De¿DØ¿D‹¿Dﬁ¿Dﬂ¿E¿Ed¿Eù¿E◊¿EÙ¿Eˆ¿E˜¿F4¿F8¿FÜ¿F—¿FÈ¿FÌ¿G9¿Gä¿G…¿GÕ¿H¿Hb¿H≤¿I¿IM¿Iû¿IÌ¿J5¿Jq¿Ju¿Jø¿K	¿KY¿Kï¿K±¿K≈¿K“¿K‡¿Kˆ¿L¿L*¿L>¿LS¿Lq¿Lv¿Lì¿L«¿LÀ¿LÈ¿M¿M#¿M$¿ML¿Mq¿MØ¿Mø¿M’¿MÌ¿N	¿N&¿N/¿N0¿NM¿Nì¿NΩ¿N«¿O¿O<¿OF¿ON¿OO¿O`¿O{¿Oü¿O≈¿Oœ¿OÌ¿P1¿PL¿Ph¿Ps¿Pô¿Pµ¿P’¿P÷¿Q¿Q¿Q¿Q¿Q¿Qd¿Qt¿Qx¿QØ¿Q√¿R¿R¿Rd¿R≥¿S¿S-¿S3¿Sk¿Sv¿Sw¿Sπ¿Sø¿T¿Ta¿Tg¿T†¿T´¿T≠¿TÆ¿T“¿T÷¿T‰¿TË¿U7¿U]¿Ur¿U¶¿U¨¿U˙¿VE¿VÜ¿Vå¿Vú¿V¢¿VÒ¿W¿W¿Wh¿Wé¿Wî¿W‚¿X0¿XJ¿XP¿X`¿Xó¿X§¿XÔ¿Xı¿YC¿Yé¿Y√¿YÃ¿Z¿ZP¿ZV¿Z§¿Z¯¿Z˛¿[¿[K¿[R¿[Ü¿[å¿[⁄¿\%¿\f¿\l¿\|¿\Ç¿\À¿\‰¿\˘¿\˚¿\¸¿]M¿]g¿]ú¿]Ê¿^¿^¿^1¿^2¿^Ç¿^•¿^´¿^˚¿_D¿_ï¿_ﬁ¿_¯¿_˛¿`M¿`ô¿`”¿a¿a¿a¿a7¿a;¿aÄ¿aÑ¿a«¿b¿b¿b¿bd¿bè¿bì¿b“¿c¿c=¿cA¿cÖ¿cæ¿cÿ¿d¿d.¿dJ¿dg¿dò¿dô¿dÁ¿e,¿e8¿e9¿ea¿eg¿e¥¿f¿f&¿fL¿fk¿fÇ¿fÜ¿f∑¿f∏¿fˆ¿f¸¿gA¿gÖ¿g∆¿g«¿g˜¿h4¿h5¿hj¿h¢¿h£¿hÎ¿i5¿i6¿i}¿iä¿i¬¿i√¿j
¿j<¿jÜ¿já¿j ¿k
¿k¿k¿kÄ¿k√¿l
¿lO¿l\¿l“¿l”¿m¿m_¿mn¿m÷¿m◊¿n¿nc¿n®¿nΩ¿o5¿o6¿o|¿o¿¿p¿pL¿pq¿pÕ¿pŒ¿q¿qX¿qù¿q‰¿r*¿rR¿ræ¿rø¿s¿s$¿s*¿sm¿së¿só¿sﬁ¿t¿te¿t©¿t¿u4¿ub¿uh¿u≠¿u„¿v5¿vU¿v¥¿v∏¿v¸¿wW¿wX¿wß¿wÏ¿wÚ¿xA¿xä¿xŒ¿xı¿x˚¿yG¿yñ¿y‚¿yË¿z¿z,¿zG¿zb¿z}¿zÑ¿z®¿zÃ¿{¿{6¿{:¿{}¿{¿¿{˝¿{˛¿{ˇ¿|N¿|ì¿|ô¿|Õ¿|”¿}"¿}p¿}≥¿}˝¿~¿~M¿~õ¿~Ë¿~ˇ¿/¿P¿k¿Ü¿°¿®¿—¿ı¿ÄA¿Äy¿Ä}¿Ä»¿Å¿Å>¿Å{¿Å|¿Å√¿Å⁄¿Åˆ¿Ç¿ÇR¿ÇV¿Ç≥¿Ç¥¿Çˆ¿É$¿É*¿É|¿É ¿ÉÊ¿Ñ¿ÑB¿ÑF¿Ñ£¿Ñ§¿ÑÏ¿Ö)¿Öh¿Ö©¿ÖÔ¿Ü3¿Üw¿ÜÉ¿Üƒ¿Ü‰¿á7¿á;¿áÄ¿áÀ¿áÃ¿à¿à,¿à2¿àÅ¿à¶¿à¨¿àÛ¿â(¿âD¿âv¿âz¿â«¿â»¿ä
¿äM¿ä]¿ä|¿äû¿ä¬¿ä∆¿ã¿ã¿ãI¿ãO¿ãú¿ãÍ¿å¿åX¿åò¿åº¿å◊¿åˇ¿ç>¿çK¿çw¿ç}¿çÅ¿ç…¿é9¿é:¿éÄ¿éø¿é¸¿è¿èO¿è†¿èÀ¿ê¿êU¿êy¿êî¿êº¿ë¿ë¿ëA¿ëG¿ëK¿ë°¿í¿í¿íc¿í§¿í»¿í…¿ì¿ìR¿ìm¿ìë¿ìí¿ì‚¿î/¿îN¿îT¿îú¿î¢¿îÁ¿ï¿ï*¿ïT¿ïX¿ïï¿ïñ¿ï÷¿ñ¿ñ#¿ñG¿ñg¿ñè¿ñ†¿ñ§¿ñÎ¿ñÏ¿ó,¿ó\¿óÑ¿ó™¿ó ¿óÈ¿ó˙¿ó˛¿òL¿òM¿òÇ¿òà¿òÿ¿ô%¿ôp¿ôØ¿ôµ¿ö¿öU¿öß¿öÙ¿õ>¿õå¿õö¿õﬂ¿õÙ¿ú¿ú]¿úa¿úï¿úñ¿ú‚¿úı¿ú˚¿ùK¿ùô¿ù”¿û¿û7¿ûR¿ûp¿û£¿û∂¿ûº¿ü3¿ü7¿ü{¿ü|¿üÀ¿ü¸¿†¿†N¿†ñ¿†Â¿°4¿°~¿°∂¿°º¿¢¿¢T¿¢ù¿¢—¿¢◊¿£'¿£t¿£ƒ¿§¿§T¿§°¿§¿•@¿•è¿•ï¿•„¿¶2¿¶f¿¶l¿¶Ω¿ß¿ßC¿ßp¿ßt¿ßv¿ßw¿ßπ¿ßΩ¿ßÀ¿®)¿®9¿®j¿®p¿®ñ¿®¬¿®‚¿© ¿©¿©F¿©L¿©°¿©Õ¿™
¿™R¿™V¿™W¿™v¿™|¿™œ¿´¿´,¿´-¿´Z¿´`¿´±¿¨¿¨¿¨6¿¨7¿¨g¿¨m¿¨Ω¿≠¿≠(¿≠.¿≠|¿≠À¿Æ¿Æh¿Æy¿Ææ¿Æ˜¿Æ˘¿Æ˙¿ØB¿ØF¿Øó¿Ø„¿∞)¿∞-¿∞s¿∞w¿∞√¿±¿±0¿±4¿±~¿±Œ¿±Ô¿≤/¿≤^¿≤•¿≤¶¿≤Œ¿≤œ¿≤€¿≥¿≥¿≥¿≥_¿≥y¿≥¥¿≥˛¿≥ˇ¿¥¿¥7¿¥8¿¥D¿¥_¿¥í¿¥≥¿¥À¿µ.¿µä¿µ˛¿∂¿∂¿∂'¿∂+¿∂,¿∂8¿∂L¿∂s¿∂£¿∂∂¿∂º¿∂‘¿∂Ê¿∂Í¿∂Ï¿∂Ì¿∑,¿∑0¿∑x¿∑√¿∏¿∏5¿∏9¿∏á¿∏÷¿π"¿πr¿π¿¿πŒ¿π·¿πˇ¿∫¿∫]¿∫ü¿∫“¿∫”¿ª	¿ª ¿ª!¿ªF¿ªL¿ªö¿ª‡¿º0¿ºO¿ºf¿ºg¿ºí¿ºò¿ºË¿Ω/¿Ω}¿ΩÃ¿æ¿æ¿æY¿æ©¿æ¯¿ø1¿øK¿øL¿øk¿øl¿øm¿øΩ¿ø‰¿øÍ¿¿9¿¿Ü¿¿û¿¿§¿¿Ÿ¿¿ﬂ¿¡%¿¡W¿¡ò¿¡ú¿¡ù¿¡Ê¿¡Ï¿¬.¿¬r¿¬¿¿√¿√!¿√"¿√.¿√ó¿√ô¿√ö¿√–¿√˛¿ƒ#¿ƒ'¿ƒz¿ƒ{¿ƒü¿≈¿≈7¿≈;¿≈~¿≈¿≈√¿∆9¿∆|¿∆∑¿∆”¿∆Ê¿∆Û¿«	¿«/¿«T¿«]¿«c¿«g¿«√¿«ƒ¿»$¿»ö¿»∫¿…¿…¿…#¿…±¿…≤¿…÷¿ L¿ p¿ t¿ ∂¿ ∑¿ ‚¿ Á¿À<¿Àf¿À~¿À™¿À∫¿À◊¿À›¿ÀÓ¿ÀÚ¿Ã0¿Ã1¿Ã}¿ÃÉ¿Ãƒ¿Ã‰¿ÃÊ¿ÃÁ¿Õ¿ÕX¿Õi¿Õ°¿Õ¢¿ÕÔ¿Œ2¿Œ<¿Œ=¿Œã¿Œ◊¿œ¿œ¿œ¿œ\¿œ≠¿œ¿œ˘¿œ˙¿–J¿–X¿–a¿–c¿–d¿–±¿—¿—¿—¿—h¿—{¿—∆¿—Ã¿“ ¿“¿“W¿“]¿“¨¿“˙¿”J¿”[¿”a¿”∞¿”∂¿”‹¿”‚¿”Ú¿”¯¿‘E¿‘^¿‘o¿‘Ä¿‘û¿‘º¿‘Ω¿‘◊¿‘Ó¿‘Ô¿’%¿’p¿’ö¿’–¿’—¿’›¿÷ ¿÷¿÷A¿÷d¿÷h¿÷i¿÷u¿÷®¿÷©¿÷µ¿◊¿◊¿◊	¿◊Z¿◊©¿◊˜¿ÿC¿ÿt¿ÿx¿ÿ¡¿ÿŒ¿ÿ˘¿ŸF¿Ÿó¿Ÿ€¿Ÿ·¿⁄2¿⁄Ä¿⁄≠¿⁄Ë¿€ ¿€ ¿€8¿€T¿€U¿€£¿€È¿€Ô¿‹:¿‹b¿‹h¿‹v¿‹•¿‹‘¿›¿›2¿›a¿›k¿›q¿›¿¿ﬁ¿ﬁ¿ﬁ¿ﬁ\¿ﬁs¿ﬁä¿ﬁ°¿ﬁ∏¿ﬁ¬¿ﬁÃ¿ﬁ“¿ﬁ‰¿ﬁÍ¿ﬂ¿ﬂ¿ﬂ¿ﬂY¿ﬂu¿ﬂë¿ﬂ≠¿ﬂ…¿ﬂ”¿ﬂ›¿ﬂ„¿‡j¿‡p¿‡z¿‡∑¿‡⁄¿‡˝¿· ¿·C¿·M¿·W¿·]¿·Ê¿·Ï¿·ˆ¿‚7¿‚]¿‚É¿‚©¿‚œ¿‚Ÿ¿‚„¿„¿„*¿„E¿„_¿„}¿„~¿„ ¿„⁄¿‰¿‰¿‰4¿‰L¿‰u¿‰v¿‰ƒ¿‰ﬂ¿Â¿Â¿Â9¿ÂQ¿Âz¿Â{¿Âí¿Â±¿Â–¿Â„¿Â‰¿Ê¿ÊR¿Êñ¿Êﬂ¿Á(¿Á)¿ÁJ¿ÁV¿Á£¿Á§¿ÁÕ¿Á‚¿Á˘¿Ë-¿ËD¿ËN¿Ëv¿Ëè¿ËÆ¿Ë≈¿Ëœ¿È¿ÈF¿Èj¿Èü¿È√¿È¯¿Í¿ÍI¿ÍO¿ÍS¿ÍT¿Í`¿ÍÉ¿Í≠¿Í¡¿Í·¿Î¿Î8¿ÎZ¿ÎÖ¿Îâ¿Îä¿Îñ¿Ï¿Ï¿Ï¿Ï5¿ÏJ¿Ïa¿Ïö¿Ï≥¿Ï‚¿Ì¿Ì8¿Ì\¿Ìé¿Ìù¿Ì¬¿Ì»¿ÌÃ¿ÌÕ¿ÌŸ¿ÌÔ¿Ó¿Ó¿ÓT¿Óm¿Óú¿Ó¿¿ÓÚ¿Ô¿ÔH¿ÔW¿ÔÙ¿Ô˙¿Ô˛¿ ¿¿?¿C¿ì¿ﬁ¿Ò0¿ÒF¿Ò|¿Òû¿ÒΩ¿Òı¿Ú	¿ÚJ¿ÚN¿ÚO¿Ús¿Úí¿ÚÃ¿Ú‡¿Û¿Û¿ÛL¿Ûk¿Û∞¿Ûƒ¿Û‚¿ÛÊ¿ÛÁ¿Ù¿Ù5¿Ùz¿Ùé¿Ù¨¿Ù∞¿Ù±¿Ùˇ¿ı%¿ıB¿ıC¿ı{¿ı≈¿ˆ¿ˆY¿ˆ•¿ˆß¿ˆ®¿ˆ€¿ˆﬂ¿ˆÌ¿ˆÒ¿˜@¿˜ç¿˜‹¿¯¿¯P¿¯{¿¯ò¿¯‘¿˘C¿˘_¿˘{¿˘ô¿˘Ú¿˘ˆ¿˘˜¿˙D¿˙ä¿˙Ÿ¿˙ˆ¿˚¿˚V¿˚Z¿˚[¿˚ü¿˚Ò¿¸?¿¸\¿¸y¿¸ª¿¸ø¿¸¿¿˝¿˝
¿˝X¿˝¢¿˝‘¿˛ ¿˛=¿˛`¿˛~¿˛º¿ˇ¿ˇ"¿ˇ#¿ˇm¿ˇs¿ˇ¬¿ˇ˘¿ ¿ z¿ ß¿ Ô¿ Û¿ Ù¿E¿í¿π¿∫¿¿;¿[¿]¿^¿ê¿€¿‹¿ˆ¿¿¿=¿Å¿ç¿ƒ¿≈¿—¿¿¿!¿e¿f¿r¿ï¿ø¿”¿˙¿*¿\¿`¿a¿m¿µ¿∑¿∏¿¿T¿U¿l¿É¿û¿ü¿≥¿ı¿¿8¿9¿T¿k¿ñ¿√¿Ù¿¿%¿)¿*¿6¿Ä¿Å¿ç¿ÿ¿Ÿ¿Â¿	¿	2¿	F¿	s¿	ï¿	∑¿	ﬁ¿	‚¿	„¿	Ô¿
"¿
$¿
%¿
W¿
ü¿
†¿
∏¿
–¿
—¿¿!¿X¿Y¿e¿•¿¶¿≤¿Û¿Ù¿ ¿#¿M¿a¿à¿¨¿—¿’¿÷¿‚¿¿¿¿K¿í¿ì¿´¿√¿ƒ¿¿¿J¿K¿W¿ñ¿ó¿£¿„¿‰¿¿¿=¿Q¿w¿õ¿¿¿ƒ¿≈¿—¿¿¿¿;¿å¿ç¿Æ¿œ¿–¿Ì¿3¿?¿v¿w¿É¿Ì¿Ó¿˙¿P¿Q¿]¿Ä¿™¿æ¿Ê¿¿?¿C¿D¿P¿ç¿è¿ê¿œ¿”¿#¿v¿∫¿¿(¿)¿e¿ö¿∏¿˚¿¿S¿W¿≥¿¥¿¿G¿x¿ñ¿Ÿ¿Ì¿¿"¿v¿w¿ª¿¿<¿Z¿ù¿±¿·¿Â¿7¿8¿|¿Ç¿–¿¿K¿i¿¨¿Œ¿¿ ¿Z¿^¿∫¿ª¿Ì¿ ¿>¿Å¿ï¿€¿ ¿¿\¿]¿ê¿ƒ¿‚¿%¿9¿è¿Â¿ ¿ #¿ î¿ ‚¿!¿!%¿!'¿!(¿!n¿!£¿!”¿"¿"9¿"U¿"c¿"e¿"f¿"ª¿"‘¿"ÿ¿#%¿#s¿#¿¿$¿$¿$i¿$Ω¿%¿%n¿%¡¿%Í¿%Ó¿&H¿&m¿&q¿&¿&É¿&«¿'¿'a¿'ã¿'’¿(¿(D¿(ë¿(ﬂ¿(˘¿)4¿)D¿)û¿)§¿)¿*6¿*<¿*î¿*¥¿*∫¿+¿+Ä¿+‚¿+Î¿+Ï¿,=¿,C¿,õ¿,˘¿-%¿-+¿-Ö¿-‚¿-Ë¿.N¿.¥¿/¿/%¿/&¿/y¿/¿/◊¿0/¿0Ö¿0†¿0¶¿1 ¿1V¿1k¿1q¿1’¿29¿2ú¿2¶¿2ß¿2Á¿2Ì¿3G¿3¢¿3≤¿3∏¿4¿41¿47¿4ö¿4˝¿5_¿5h¿5j¿5k¿5ú¿5ƒ¿5ˆ¿6¿6>¿6O¿6Q¿6R¿6Ü¿6†¿6»¿7¿7+¿7I¿7l¿7ê¿7≥¿7“¿7Ò¿7ı¿8¿8¿8	¿8F¿8h¿8ä¿8∑¿8–¿8È¿9¿9¿9,¿9.¿9/¿9w¿9{¿9Õ¿9‡¿9‰¿9Ú¿9ˆ¿:l¿:p¿:ê¿:ë¿:∆¿:«¿:¸¿;¿;Q¿;¢¿;Ï¿<!¿<'¿<v¿<¨¿<≤¿=¿=x¿=‹¿>B¿>H¿>ì¿>Ÿ¿>Ù¿>˙¿?G¿?ö¿?⁄¿?Ì¿?˛¿@¿@'¿@E¿@m¿@á¿@¨¿@œ¿@Ó¿A¿AK¿A^¿Aã¿Aœ¿B¿Bt¿Bà¿B„¿BÁ¿C~¿C¿C ¿CÍ¿C¿D?¿Dê¿D⁄¿E¿E¿Ec¿Eô¿Eü¿F¿Fe¿F…¿G/¿G5¿GÜ¿GÃ¿GÁ¿GÌ¿H:¿Hç¿HÕ¿H”¿I¿Im¿I∑¿J¿JT¿Jy¿Jå¿Jü¿J≤¿JÃ¿JÍ¿K¿K,¿K?¿K\¿KÉ¿K¢¿K√¿Kˇ¿L¿L?¿L|¿L‰¿LÂ¿MJ¿M¶¿MÍ¿N ¿Nj¿Nw¿N‡¿Nˆ¿OÇ¿Oà¿Oå¿P;¿Q#¿Q$¿Qt¿Qí¿Qò¿Q„¿R1¿Rl¿Rr¿R¡¿S¿S\¿Së¿Só¿SÁ¿T(¿T.¿Tê¿TÚ¿UU¿U∫¿U¿¿V¿V_¿VÇ¿Và¿V’¿W(¿Wh¿Wz¿Wç¿Wß¿W≈¿WÌ¿X
¿X-¿XG¿Xn¿Xç¿XÆ¿X—¿XÚ¿Y¿YT¿Yg¿Yî¿Y—¿Z9¿ZM¿Z¬¿Z∆¿[á¿[à¿[⁄¿[¯¿\¿\n¿\{¿\©¿]¿]¿]¿]¿]¿]P¿]s¿]√¿^¿^[¿^¨¿^˚¿_P¿_z¿_ñ¿_‰¿`¿`¿`O¿`h¿`Å¿`û¿`Æ¿`Ã¿a
¿a¿aë¿a™¿a»¿aŒ¿a“¿b
¿bî¿bñ¿bó¿c¿c¿cA¿cÜ¿cä¿d¿d¿d?¿d@¿dÑ¿dä¿dÿ¿e'¿eQ¿eW¿e”¿f¿fC¿fb¿f¿fÜ¿fŸ¿g.¿gõ¿gü¿g†¿gº¿g“¿gÒ¿h¿h¿h)¿h_¿hl¿hã¿hí¿hµ¿hË¿i¿i¿i¿i;¿i[¿i\¿iò¿i‚¿i„¿j.¿jH¿jN¿jô¿jÕ¿j”¿k¿k^¿kd¿kµ¿kˇ¿l8¿l>¿lq¿lw¿lÅ¿lÆ¿l⁄¿m¿m4¿m>¿mD¿mì¿m‹¿m‚¿n@¿nF¿nq¿nw¿nÇ¿ní¿n•¿n‡¿nÊ¿oA¿oÑ¿oä¿oΩ¿o√¿oÕ¿o˛¿p/¿p9¿p?¿pà¿pî¿pö¿pÂ¿q"¿q4¿qT¿q|¿qÉ¿q§¿q€¿q·¿r¿r2¿r¶¿r¨¿s¿s_¿se¿sà¿s±¿sæ¿s˘¿sˇ¿t3¿tx¿t≠¿t¿¿tƒ¿t≈¿t’¿tÒ¿u¿u7¿u\¿u^¿u_¿uy¿u†¿uÈ¿v¿v¿vI¿v\¿vo¿và¿v£¿v¥¿vµ¿v◊¿v˚¿w'¿w(¿w4¿wW¿ww¿wä¿w¥¿w»¿wÏ¿x¿xW¿x¶¿x™¿x´¿x∑¿y&¿y(¿y)¿yz¿y~¿y°¿yË¿y˙¿zB¿zO¿zP¿zû¿zØ¿z∞¿{¿{¿{!¿{"¿{Z¿{å¿{”¿{Ÿ¿|¿|b¿|h¿|π¿|‚¿|Ë¿}#¿}L¿}Ç¿}Õ¿}”¿~ ¿~J¿~è¿~õ¿~∞¿~Œ¿~Ù¿¿%¿B¿e¿∫¿Ä¿ÄN¿Äô¿ÄÏ¿ÅH¿ÅI¿Åè¿Åﬂ¿Ç¿Ç¿ÇN¿Ço¿Ç}¿Ç¥¿ÇŸ¿ÇÁ¿ÇË¿ÉV¿Éò¿Éú¿Éù¿ÉÌ¿Ñ!¿Ñ]¿Ñó¿Ñÿ¿Ñﬁ¿Ö¿Ö¿Ö[¿Ö†¿Öª¿Ö¡¿Ü¿Ü[¿Ün¿Ü©¿Ü“¿á¿áS¿áY¿á™¿áı¿à¿à¿àO¿ày¿àæ¿àŒ¿à„¿â ¿â%¿â<¿âU¿âr¿âï¿âÍ¿äA¿äÇ¿äÕ¿ã ¿ã|¿ã}¿ãœ¿å¿å¿å¿å9¿åP¿åt¿å¢¿å¬¿å¸¿å˛¿åˇ¿çM¿çQ¿çr¿ç∂¿ç«¿çÈ¿çÔ¿é=¿éá¿é¿¿é∆¿è¿èb¿èx¿èÇ¿èÉ¿èΩ¿è√¿ê	¿ê¿êQ¿êg¿êp¿êq¿ê¶¿ê¨¿êÓ¿ë¿ë¿ë¿ë¿ë\¿ëh¿ël¿ëã¿ëô¿ë—¿ëﬂ¿ë‡¿í¿í&¿í(¿í)¿í^¿íb¿í©¿íÌ¿ì.¿ì2¿ì{¿ìÀ¿î¿î1¿î5¿îÖ¿îŒ¿ï¿ï¿ïT¿ïì¿ï√¿ñ¿ñ$¿ñ*¿ñs¿ñª¿ó¿óZ¿óß¿óÍ¿ó¿ò7¿òM¿òi¿òΩ¿ò€¿ô8¿ôR¿ôq¿ôê¿ôÍ¿ôÓ¿ö¿ö=¿ö]¿ö¿öø¿ö¿¿õ¿õz¿õø¿õ›¿õﬁ¿ú&¿ú,¿úX¿ú^¿ún¿út¿ú≈¿ú˙¿ù¿ù¿ùp¿ù¡¿û¿ûY¿ûh¿ûn¿û∫¿ü¿üY¿ü°¿üÔ¿†9¿†?¿†å¿†í¿†∂¿†º¿°
¿°V¿°¶¿°ˆ¿¢¿¢!¿¢o¿¢∏¿£	¿£W¿£•¿£ı¿§=¿§j¿§p¿§∫¿§”¿§Ÿ¿§Á¿•¿•<¿•S¿•ì¿•º¿•Û¿¶,¿¶F¿¶`¿¶h¿¶r¿¶x¿¶«¿ß¿ßc¿ßÅ¿ßá¿ßï¿ß¬¿®¿®-¿®D¿®Ñ¿®ª¿®Ù¿©¿©¿© ¿©&¿©w¿©Ω¿™¿™¿™¿™H¿™_¿™≥¿™Ï¿´¿´¿´~¿´∑¿´—¿´Ÿ¿´„¿´È¿¨4¿¨}¿¨Œ¿≠¿≠¿≠0¿≠6¿≠u¿≠{¿≠…¿Æ¿Æh¿Æ≥¿Ø¿ØP¿Øõ¿ØÊ¿∞7¿∞à¿∞£¿∞©¿∞π¿∞ø¿±¿±1¿±y¿±è¿±Ω¿±ÿ¿±Ú¿≤.¿≤;¿≤_¿≤¶¿≤’¿≤€¿≤ﬂ¿≥/¿≥]¿≥|¿≥ö¿≥∫¿≥€¿¥
¿¥K¿¥L¿¥å¿¥´¿¥±¿¥¿¥ˆ¿µD¿µà¿µ≤¿µ≥¿µˆ¿∂;¿∂Ç¿∂∑¿∂Ω¿∂‚¿∑¿∑¿∑f¿∑∂¿∑¯¿∑˘¿∏H¿∏í¿∏£¿∏©¿∏Ô¿π¿π@¿πA¿π|¿π}¿π“¿∫¿∫	¿∫Z¿∫¶¿∫ı¿ª¿ªV¿ªW¿ªß¿ª‚¿º
¿º'¿ºE¿ºÉ¿ºú¿º†¿º‚¿º„¿Ω6¿Ωå¿Ω®¿ΩÆ¿æ ¿æN¿æû¿æÀ¿æÍ¿ø¿ø7¿øK¿øO¿øó¿øò¿øÊ¿ø˝¿¿¿¿G¿¿M¿¿ü¿¿Á¿¡¿¡¿¡`¿¡t¿¡–¿¡¿¬¿¬-¿¬Ö¿¬â¿¬ß¿¬ƒ¿¬„¿√¿√ ¿√]¿√^¿√¨¿√À¿√—¿ƒ¿ƒ¿ƒm¿ƒµ¿≈¿≈@¿≈b¿≈É¿≈µ¿≈π¿∆¿∆¿∆Z¿∆n¿∆t¿∆∏¿∆æ¿«¿«X¿«Å¿«π¿«˘¿»¿»<¿»@¿»à¿»â¿»⁄¿…,¿…¿…ê¿…ñ¿…Í¿ =¿ è¿ ﬁ¿À-¿ÀÄ¿À”¿Ã"¿Ãs¿Ãè¿Ãï¿ÃÕ¿Õ¿Õs¿Õ¬¿Œ¿Œ
¿ŒX¿Œ¿ŒÖ¿Œì¿Œ¨¿ŒÊ¿œ$¿œ=¿œx¿œµ¿œø¿œ≈¿–¿–b¿–∏¿—¿—¿—"¿—h¿—µ¿—È¿—Ô¿“?¿“é¿“⁄¿“Ú¿”¿”%¿”T¿”u¿”ª¿”ø¿‘¿‘¿‘d¿‘∂¿’	¿’¿’_¿’±¿÷¿÷Q¿÷£¿÷˜¿◊J¿◊W¿◊]¿◊í¿◊∂¿◊Â¿ÿ¿ÿR¿ÿV¿ÿµ¿ÿ∂¿ÿ˘¿ŸE¿Ÿb¿Ÿó¿Ÿ≤¿Ÿ—¿Ÿˇ¿⁄¿⁄J¿⁄K¿⁄ö¿⁄‚¿⁄Ë¿€6¿€k¿€ã¿€´¿€∆¿‹¿‹¿‹.¿‹J¿‹f¿‹Ç¿‹∞¿‹Ô¿‹¿›¿›%¿›j¿›Ö¿›•¿›¿¿›Ì¿›Ò¿ﬁO¿ﬁP¿ﬁ†¿ﬁ€¿ﬂ¿ﬂ%¿ﬂ@¿ﬂ|¿ﬂ®¿ﬂ¨¿ﬂ ¿ﬂÁ¿‡¿‡&¿‡T¿‡ì¿‡î¿‡Â¿·'¿·T¿·v¿·ë¿·”¿·◊¿·¸¿‚+¿‚l¿‚m¿‚Ω¿„¿„3¿„9¿„~¿„π¿„€¿„˝¿‰¿‰p¿‰t¿‰ö¿‰¿¿‰¿Â3¿Â4¿ÂÅ¿Â“¿Âı¿Ê¿Ê?¿ÊZ¿Êñ¿Ê¬¿Ê∆¿Ê‰¿Á¿Á ¿Á@¿Án¿Á≠¿ÁÆ¿Á˘¿ËK¿Ëö¿ËΩ¿Ë˜¿È¿È1¿Ès¿Èw¿Èî¿È±¿È”¿Í¿ÍF¿ÍG¿ÍÉ¿Íâ¿Í…¿Î¿Î`¿Î¥¿Ï¿ÏU¿ÏÅ¿Ïá¿Ïﬂ¿Ì>¿Ì^¿Ìy¿Ì¿¿Ó¿Ó¿Ó#¿Ó?¿Ó]¿Ó|¿Óü¿Ó¬¿Ó‚¿Ô¿ÔL¿ÔM¿ÔÇ¿Ôà¿Ô—¿¿F¿p¿∞¿À¿˝¿Ò¿Ò¿ÒK¿Òä¿Òã¿ÒŸ¿Ú0¿Úl¿ÚÆ¿Ú“¿ÚÌ¿Ûo¿Ûà¿Û÷¿Û‹¿Û‡¿Ù¿Ù"¿ÙA¿Ùs¿Ùú¿Ù‰¿ÙÂ¿ı4¿ıÄ¿ıÜ¿ı’¿ıÓ¿ıÙ¿ˆ@¿ˆâ¿ˆú¿ˆ·¿˜#¿˜B¿˜a¿˜|¿˜≥¿˜Ê¿¯¿¯L¿¯Å¿¯¥¿¯Ê¿˘¿˘O¿˘à¿˘æ¿˙¿˙¿˙j¿˙p¿˙t¿˙õ¿˙ƒ¿˙Ï¿˚¿˚A¿˚j¿˚í¿˚º¿˚Á¿¸¿¸J¿¸ö¿¸õ¿¸‚¿¸Ë¿˝6¿˝Ñ¿˝—¿˛¿˛a¿˛g¿˛µ¿ˇ¿ˇP¿ˇó¿ˇ®¿ˇ¿ 2¿ T¿ s¿ é¿ ≈¿ ˚¿0¿g¿ü¿“¿¿8¿m¿¶¿‹¿!¿:¿à¿é¿í¿π¿Â¿¿=¿k¿î¿º¿Ê¿¿G¿t¿ƒ¿≈¿¿%¿K¿ë¿¨¿∞¿Ú¿Û¿?¿O¿U¿†¿≠¿≥¿ˇ¿L¿ä¿ê¿ﬂ¿	+¿	1¿	Ç¿	œ¿
¿
"¿
l¿
∏¿¿@¿_¿É¿®¿⁄¿ﬁ¿ﬂ¿$¿*¿q¿w¿á¿ç¿›¿ˆ¿A¿`¿|¿ó¿¿Ù¿ı¿:¿@¿ê¿›¿„¿Û¿˘¿G¿e¿≤¿—¿Ì¿¿(¿s¿∫¿æ¿ø¿Ô¿¿8¿{¿|¿Ø¿µ¿˙¿<¿ä¿¬¿¿L¿m¿í¿‚¿¿¿D¿J¿Z¿´¿˜¿¿p¿ª¿º¿¿¿>¿â¿ç¿µ¿Ÿ¿¿R¿S¿ó¿ù¿Ó¿G¿ö¿Ó¿&¿,¿|¿Õ¿¿n¿æ¿¿^¿d¿µ¿¿Z¿±¿·¿5¿É¿«¿Õ¿ ¿o¿∫¿¿]¿c¿∑¿ ¿ Q¿ W¿ ®¿ √¿ …¿ ◊¿ Ï¿ ˇ¿!¿!/¿!7¿!=¿!k¿!ƒ¿!‚¿"¿"	¿"¿"J¿"k¿"¢¿"–¿"˙¿#¿#5¿#r¿#ê¿#Æ¿#Ù¿$ ¿$L¿$]¿$r¿$†¿$„¿%
¿%¿%¿%&¿%.¿%8¿%>¿%ó¿%ù¿%´¿%¿¿%”¿%Î¿&¿&¿&/¿&7¿&=¿&k¿&ƒ¿&‚¿'¿'	¿'¿'J¿'k¿'¢¿'–¿'˙¿(%¿(A¿(~¿(ú¿(∫¿) ¿),¿)X¿)i¿)~¿)¨¿)Ô¿*¿*3¿*g¿*ì¿*ù¿*£¿*Ø¿*∑¿*¡¿*«¿+¿+[¿+é¿+î¿+§¿+™¿+¯¿,¿,-¿,\¿,¿,•¿,Ã¿,Ì¿-¿-O¿-o¿-ä¿-Õ¿-Ë¿-È¿.¿.9¿.Ñ¿.œ¿/7¿/8¿/¿/æ¿/ø¿/È¿0	¿0.¿0S¿0x¿0Æ¿0–¿0Ú¿1(¿1^¿1í¿1∆¿1Ï¿2¿28¿2`¿2f¿2g¿2–¿3¿3I¿3J¿3p¿3œ¿4¿4¿4¿46¿4Ñ¿4ä¿4é¿4è¿4”¿4Ÿ¿5*¿5É¿5÷¿6*¿6|¿6Œ¿7¿7¿7[¿7£¿7©¿7˙¿8:¿8e¿8k¿8π¿9¿9	¿9U¿9¢¿9Ú¿9¯¿:S¿:d¿:j¿:x¿:ç¿:†¿:∏¿:–¿:ÿ¿:ﬁ¿;¿;e¿;É¿;§¿;™¿;º¿;Î¿<;¿<ä¿<€¿<˜¿=<¿=Ü¿=æ¿=˙¿>#¿>J¿>z¿>¢¿>®¿?¿?\¿?∂¿?¯¿@$¿@P¿@ç¿@ ¿@÷¿@˜¿AR¿A\¿Ab¿An¿Av¿AÄ¿AÜ¿Aﬂ¿AÂ¿AÛ¿B¿B¿B3¿BK¿B^¿Bw¿B¿BÖ¿B≥¿C¿C*¿CK¿CQ¿Cc¿Cí¿C‚¿D1¿DÇ¿Dû¿D„¿E-¿Ek¿E£¿Eﬂ¿F¿F/¿F_¿Fá¿Fç¿FË¿G?¿Gö¿G˜¿HB¿Hà¿H±¿HÀ¿I¿I"¿I>¿IÇ¿I¨¿I÷¿IÂ¿J¿JS¿Jà¿JΩ¿J√¿K¿Kw¿Kœ¿L¿LE¿LQ¿Lr¿L›¿LÁ¿LÌ¿L˘¿M¿M¿M¿M!¿M'¿Mt¿Mâ¿M™¿MŸ¿N ¿N'¿NQ¿Nu¿Nò¿N⁄¿N˝¿O¿OI¿Od¿Oe¿Oç¿O∏¿P¿P"¿PÄ¿P∫¿Q3¿Qk¿Ql¿Qí¿QÁ¿R1¿R8¿R9¿RR¿R†¿R¶¿R™¿R´¿R›¿S¿S3¿SV¿SÜ¿SÆ¿S÷¿S˙¿TA¿TB¿Tè¿Tï¿TÂ¿T˙¿U ¿U&¿U~¿Uæ¿UŸ¿V¿VF¿VJ¿Vh¿VÜ¿V´¿VÙ¿Vˆ¿V˜¿W?¿WC¿Ww¿W{¿W¬¿X¿XF¿X`¿Xë¿X€¿X˜¿X˝¿Y3¿YO¿Y^¿Y_¿Yâ¿Yè¿Yﬁ¿Z-¿Zv¿Zß¿Zø¿Z‚¿[¿[,¿[|¿[ô¿[≥¿[ƒ¿\¿\¿\¿\¿\"¿\É¿\Ñ¿\‘¿\˜¿]
¿]"¿]2¿]J¿]]¿]g¿]w¿]{¿]|¿]®¿]©¿]™¿]ƒ¿^
¿^¿^^¿^t¿^è¿^£¿^≥¿^œ¿^‚¿^Ï¿_\¿_`¿_a¿_™¿_∞¿`¿`3¿`v¿`x¿`y¿`¿¿`ƒ¿a	¿aN¿aá¿a»¿b¿b+¿bG¿bo¿b´¿b¨¿bÁ¿bÌ¿c1¿cx¿cØ¿cÙ¿d0¿d[¿d\¿dã¿dë¿d‹¿e,¿eq¿eå¿e•¿eÈ¿f¿f.¿fM¿fa¿fu¿fy¿fz¿f ¿fÀ¿fﬁ¿f‡¿f·¿fˆ¿f˙¿g6¿gE¿g_¿ge¿g∞¿g˚¿h¿h¿h\¿hb¿h±¿h ¿h€¿i	¿i(¿iC¿iÄ¿iø¿j¿j¿jE¿ji¿jì¿jæ¿jÂ¿k¿k6¿k7¿kg¿km¿kø¿k‚¿k˜¿k¯¿l7¿l=¿lã¿l◊¿m¿m0¿m1¿mÉ¿mû¿mü¿m—¿m◊¿n
¿n¿n=¿n∞¿nÊ¿o¿o¿o¿o[¿oa¿oî¿o–¿o—¿p¿p$¿pa¿p∞¿p◊¿p›¿q!¿qj¿qπ¿q€¿qÔ¿r¿r¿r[¿r_¿r`¿r≤¿r¿¿r‡¿rÛ¿s¿s&¿sM¿sT¿sX¿sY¿sâ¿sè¿s⁄¿t¿tC¿tI¿to¿tº¿u¿uQ¿uù¿uÎ¿v;¿và¿vÃ¿v“¿w!¿wA¿wV¿wé¿w•¿w∫¿w—¿wÊ¿wı¿x¿x¿x+¿xB¿x]¿xl¿xÉ¿x∂¿xÌ¿y/¿y:¿yB¿yH¿yL¿yM¿yÜ¿yå¿y‘¿y⁄¿y˝¿zK¿zb¿zÇ¿zï¿z´¿z¡¿zÌ¿{(¿{V¿{Ö¿{∫¿{·¿|¿|7¿|J¿|N¿|O¿|[¿|~¿|û¿|±¿|Ã¿|Ï¿}¿}9¿}=¿}>¿}J¿}à¿}â¿}’¿~'¿~C¿~}¿~ñ¿~∞¿~±¿~Ó¿$¿%¿?¿å¿æ¿Ä¿Äx¿Äú¿Ä∏¿ÄÔ¿Ä¿Å+¿Åt¿Åu¿ÅÆ¿Å›¿Åﬁ¿Ç¿ÇF¿ÇG¿Çò¿Ç‘¿Ç¸¿É¿É
¿É¿É#¿É'¿É(¿É4¿Éw¿Éy¿Éz¿É¡¿É≈¿Ñ¿Ñ*¿Ñc¿ÑÜ¿Ñá¿Ñ’¿ÑÍ¿Ö+¿Öp¿Ö¢¿Ö»¿ÖÊ¿ÖÍ¿ÖÎ¿Ü%¿Ü+¿Üd¿Ü¢¿ÜÁ¿á0¿áz¿áß¿áÔ¿à*¿à[¿àó¿à–¿à‘¿à’¿â+¿â,¿âó¿âò¿âÃ¿âÈ¿â¯¿â˘¿ä¿ä¿äB¿äH¿äô¿ä¥¿äÃ¿ä‹¿ä˝¿ã¿ã¿ã/¿ã3¿ã4¿ãÑ¿ãß¿ã≠¿ã˙¿åD¿åë¿åﬁ¿ç,¿çJ¿ç]¿çm¿çå¿ç©¿çº¿ç∆¿ç÷¿ç⁄¿ç€¿é¿é¿é¿é]¿éa¿é∞¿é»¿è¿è¿è¿èd¿èß¿è„¿ê¿êM¿êm¿êq¿ê‡¿ê·¿ë¿ë ¿ëp¿ë¬¿ë‹¿ë‚¿í0¿íÉ¿íƒ¿ì¿ì¿ì6¿ìN¿ìg¿ìz¿ì†¿ìß¿ìª¿ì—¿î¿î.¿î|¿îÄ¿ï¿ï ¿ï/¿ïa¿ïã¿ïë¿ïÃ¿ï˜¿ï¯¿ñ¿ñ<¿ñg¿ñm¿ñ®¿ñ÷¿ñ◊¿ñÓ¿ó0¿ób¿óh¿óü¿ó‚¿ó„¿ò3¿òV¿òâ¿òä¿òÿ¿òÙ¿ò˙¿ôE¿ôí¿ô£¿ô©¿ô˜¿ö¿öo¿ö¢¿öº¿ö¬¿ö˜¿õ¿õ¿õ¿õP¿õk¿õà¿õ∆¿ú¿ú(¿úf¿úá¿úΩ¿ú√¿ú‰¿ù¿ù¿ù*¿ùe¿ùw¿ù{¿ùÚ¿ùÙ¿ùı¿û*¿ûZ¿û[¿ûì¿ûó¿û·¿ûÓ¿ü1¿ü2¿üÇ¿üò¿üú¿üÍ¿†¿†¿†Y¿†]¿†p¿†t¿†Ä¿†µ¿†π¿†Ù¿°,¿°2¿°6¿°V¿°á¿°ç¿°ï¿°¿¢L¿¢~¿¢≤¿¢Ë¿£/¿£s¿£∞¿£ƒ¿£¿§¿§¿§D¿§S¿§ì¿§õ¿§®¿§≈¿§À¿§—¿§·¿§ˆ¿•¿•-¿•/¿•0¿•¿•´¿•Ø¿•ˇ¿¶O¿¶Ñ¿¶ø¿ß¿ß¿ß:¿ßR¿ßS¿ß•¿ß¿¿ß¡¿ßÕ¿ß„¿®=¿®V¿®n¿®µ¿®ﬁ¿®‰¿©¿©¿©  dart.uiÄæ B_rectIsValid_rrectIsValid_offsetIsValid_matrix4IsValid_radiusIsValid_scaleAlphaColor	BlendModeFilterQuality	StrokeCap
StrokeJoinPaintingStyleClipPaintImageByteFormatPixelFormatImage_Image	FrameInfoCodecinstantiateImageCodecinstantiateImageCodecFromBufferdecodeImageFromList_decodeImageFromListAsyncdecodeImageFromPixelsPathFillTypePathOperationEngineLayerPathTangentPathMetricsPathMetricIterator
PathMetric_PathMeasure	BlurStyle
MaskFilterColorFilter_ColorFilterImageFilter_MatrixImageFilter_GaussianBlurImageFilter_DilateImageFilter_ErodeImageFilter_ComposeImageFilter_ImageFilterShaderTileMode_encodeColorList_encodePointList_encodeTwoPointsGradientImageShaderFragmentProgram_FragmentShader
VertexModeVertices	PointModeClipOpCanvasPicturePictureRecorderShadowImmutableBufferImageDescriptor	_futurizePictureRasterizationException ﬂ‰